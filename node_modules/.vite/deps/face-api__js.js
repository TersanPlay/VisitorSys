import {
  require_crypto
} from "./chunk-VYAV6SZ6.js";
import {
  __commonJS,
  __export,
  __require
} from "./chunk-2TUXWMP5.js";

// browser-external:node-fetch
var require_node_fetch = __commonJS({
  "browser-external:node-fetch"(exports, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_3, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node-fetch" has been externalized for browser compatibility. Cannot access "node-fetch.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_3, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_3, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d3, b3) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
    d4.__proto__ = b4;
  } || function(d4, b4) {
    for (var p3 in b4) if (b4.hasOwnProperty(p3)) d4[p3] = b4[p3];
  };
  return extendStatics(d3, b3);
};
function __extends(d3, b3) {
  extendStatics(d3, b3);
  function __() {
    this.constructor = d3;
  }
  d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t3) {
    for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
      s3 = arguments[i3];
      for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3)) t3[p3] = s3[p3];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t3[0] & 1) throw t3[1];
    return t3[1];
  }, trys: [], ops: [] }, f3, y3, t3, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n3) {
    return function(v2) {
      return step([n3, v2]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (_3) try {
      if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done) return t3;
      if (y3 = 0, t3) op = [op[0] & 2, t3.value];
      switch (op[0]) {
        case 0:
        case 1:
          t3 = op;
          break;
        case 4:
          _3.label++;
          return { value: op[1], done: false };
        case 5:
          _3.label++;
          y3 = op[1];
          op = [0];
          continue;
        case 7:
          op = _3.ops.pop();
          _3.trys.pop();
          continue;
        default:
          if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _3 = 0;
            continue;
          }
          if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
            _3.label = op[1];
            break;
          }
          if (op[0] === 6 && _3.label < t3[1]) {
            _3.label = t3[1];
            t3 = op;
            break;
          }
          if (t3 && _3.label < t3[2]) {
            _3.label = t3[2];
            _3.ops.push(op);
            break;
          }
          if (t3[2]) _3.ops.pop();
          _3.trys.pop();
          continue;
      }
      op = body.call(thisArg, _3);
    } catch (e3) {
      op = [6, e3];
      y3 = 0;
    } finally {
      f3 = t3 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArrays() {
  for (var s3 = 0, i3 = 0, il3 = arguments.length; i3 < il3; i3++) s3 += arguments[i3].length;
  for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il3; i3++)
    for (var a3 = arguments[i3], j3 = 0, jl3 = a3.length; j3 < jl3; j3++, k3++)
      r3[k3] = a3[j3];
  return r3;
}

// node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js
var tf_core_esm_exports = {};
__export(tf_core_esm_exports, {
  AdadeltaOptimizer: () => Vh,
  AdagradOptimizer: () => Gh,
  AdamOptimizer: () => qh,
  AdamaxOptimizer: () => Hh,
  DataStorage: () => Gr,
  ENV: () => s,
  Environment: () => a,
  KernelBackend: () => qr,
  MomentumOptimizer: () => jh,
  Optimizer: () => zh,
  RMSPropOptimizer: () => Kh,
  Rank: () => ft,
  Reduction: () => Yl,
  SGDOptimizer: () => $h,
  Tensor: () => ht,
  TensorBuffer: () => st,
  Variable: () => pt,
  abs: () => rs,
  acos: () => os,
  acosh: () => as,
  add: () => Yu,
  addN: () => Qu,
  addStrict: () => Ju,
  all: () => Nu,
  any: () => ku,
  argMax: () => Au,
  argMin: () => Tu,
  asin: () => is,
  asinh: () => ss,
  atan: () => us,
  atan2: () => Zu,
  atanh: () => ls,
  avgPool: () => xu,
  backend: () => He,
  backend_util: () => so,
  basicLSTMCell: () => Ml,
  batchNorm: () => Ks,
  batchNorm2d: () => Xs,
  batchNorm3d: () => Ys,
  batchNorm4d: () => Qs,
  batchNormalization: () => js,
  batchNormalization2d: () => qs,
  batchNormalization3d: () => Hs,
  batchNormalization4d: () => $s,
  batchToSpaceND: () => Kn,
  browser: () => kh,
  buffer: () => $n,
  cast: () => Xn,
  ceil: () => cs,
  clipByValue: () => hs,
  clone: () => Yn,
  complex: () => cn,
  concat: () => An,
  concat1d: () => Tn,
  concat2d: () => Dn,
  concat3d: () => _n,
  concat4d: () => On,
  conv1d: () => eu,
  conv2d: () => nu,
  conv2dDerFilter: () => ou,
  conv2dTranspose: () => su,
  conv3d: () => ru,
  cos: () => ps,
  cosh: () => fs,
  cumsum: () => Qn,
  customGrad: () => Wr,
  deprecationWarn: () => Te,
  depthToSpace: () => Jn,
  depthwiseConv2d: () => au,
  disableDeprecationWarnings: () => Ae,
  dispose: () => Me,
  disposeVariables: () => De,
  div: () => tl,
  divStrict: () => el,
  dot: () => lu,
  dropout: () => Kl,
  elu: () => El,
  enableDebugMode: () => ke,
  enableProdMode: () => Ne,
  environment: () => l,
  equal: () => Lu,
  equalStrict: () => Wu,
  erf: () => ds,
  exp: () => vs,
  expandDims: () => Zn,
  expm1: () => ms,
  eye: () => tr,
  fft: () => zl,
  fill: () => Rn,
  findBackend: () => Ve,
  findBackendFactory: () => Ge,
  floor: () => gs,
  floorDiv: () => nl,
  frame: () => Zl,
  fused: () => Ec,
  gather: () => Ol,
  gatherND: () => jl,
  getBackend: () => Ue,
  grad: () => Fr,
  grads: () => Mr,
  greater: () => Uu,
  greaterEqual: () => zu,
  greaterEqualStrict: () => Vu,
  greaterStrict: () => Gu,
  hammingWindow: () => Jl,
  hannWindow: () => Ql,
  ifft: () => Vl,
  imag: () => pn,
  image: () => wc,
  io: () => Rh,
  irfft: () => ql,
  isFinite: () => As,
  isInf: () => ks,
  isNaN: () => Ns,
  keep: () => Be,
  leakyRelu: () => Rl,
  less: () => qu,
  lessEqual: () => Hu,
  lessEqualStrict: () => $u,
  lessStrict: () => ju,
  linalg: () => dc,
  linspace: () => In,
  localResponseNormalization: () => Al,
  log: () => ys,
  log1p: () => xs,
  logSigmoid: () => bs,
  logSoftmax: () => Vr,
  logSumExp: () => Du,
  logicalAnd: () => gl,
  logicalNot: () => yl,
  logicalOr: () => xl,
  logicalXor: () => bl,
  losses: () => cc,
  matMul: () => uu,
  math: () => Sh,
  max: () => _u,
  maxPool: () => yu,
  maximum: () => rl,
  maximumStrict: () => ol,
  mean: () => Ou,
  memory: () => _e,
  min: () => Fu,
  minimum: () => al,
  minimumStrict: () => il,
  mod: () => sl,
  modStrict: () => ul,
  moments: () => Mu,
  movingAverage: () => Pl,
  mul: () => ll,
  mulStrict: () => cl,
  multiRNNCell: () => Bl,
  multinomial: () => er,
  neg: () => ws,
  nextFrame: () => Jh,
  norm: () => Tl,
  notEqual: () => Ku,
  notEqualStrict: () => Xu,
  oneHot: () => nr,
  ones: () => Cn,
  onesLike: () => Nn,
  op: () => ln,
  outerProduct: () => cu,
  pad: () => rr,
  pad1d: () => or,
  pad2d: () => ar,
  pad3d: () => ir,
  pad4d: () => sr,
  pool: () => bu,
  pow: () => hl,
  powStrict: () => pl,
  prelu: () => Il,
  print: () => jn,
  prod: () => Pu,
  profile: () => Oe,
  rand: () => ur,
  randomNormal: () => lr,
  randomUniform: () => cr,
  range: () => Sn,
  ready: () => We,
  real: () => hn,
  reciprocal: () => Cs,
  registerBackend: () => qe,
  relu: () => Sl,
  removeBackend: () => ze,
  reshape: () => hr,
  reverse: () => hu,
  reverse1d: () => pu,
  reverse2d: () => fu,
  reverse3d: () => du,
  reverse4d: () => vu,
  rfft: () => Gl,
  round: () => Es,
  rsqrt: () => Rs,
  scalar: () => vn,
  scatterND: () => Ul,
  selu: () => Nl,
  separableConv2d: () => iu,
  serialization: () => _h,
  setBackend: () => Le,
  setPlatform: () => $e,
  setdiff1dAsync: () => yr,
  sigmoid: () => Is,
  sign: () => Ss,
  signal: () => tc,
  sin: () => Ts,
  sinh: () => Ds,
  slice: () => wu,
  slice1d: () => Cu,
  slice2d: () => Eu,
  slice3d: () => Ru,
  slice4d: () => Iu,
  softmax: () => zr,
  softplus: () => _s,
  spaceToBatchND: () => pr,
  sparseToDense: () => $l,
  spectral: () => Hl,
  split: () => Fn,
  sqrt: () => Os,
  square: () => Fs,
  squaredDifference: () => fl,
  squaredDifferenceStrict: () => dl,
  squeeze: () => fr,
  stack: () => dr,
  step: () => Ms,
  stridedSlice: () => Ll,
  sub: () => vl,
  subStrict: () => ml,
  sum: () => Bu,
  tan: () => Bs,
  tanh: () => Ps,
  tensor: () => fn,
  tensor1d: () => mn,
  tensor2d: () => gn,
  tensor3d: () => yn,
  tensor4d: () => xn,
  tensor5d: () => bn,
  tensor6d: () => wn,
  tensor_util: () => St,
  test_util: () => Lh,
  tidy: () => Fe,
  tile: () => vr,
  time: () => Pe,
  topk: () => Wl,
  train: () => Yh,
  transpose: () => kl,
  truncatedNormal: () => mr,
  unsortedSegmentSum: () => Fl,
  unstack: () => gr,
  util: () => Q,
  valueAndGrad: () => Br,
  valueAndGrads: () => Pr,
  variable: () => yt,
  variableGrads: () => Lr,
  version_core: () => Wh,
  webgl: () => Uh,
  where: () => wl,
  whereAsync: () => Cl,
  zeros: () => En,
  zerosLike: () => kn
});
var t = function(e3, n3) {
  return (t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e4) {
    t3.__proto__ = e4;
  } || function(t3, e4) {
    for (var n4 in e4) e4.hasOwnProperty(n4) && (t3[n4] = e4[n4]);
  })(e3, n3);
};
function e(e3, n3) {
  function r3() {
    this.constructor = e3;
  }
  t(e3, n3), e3.prototype = null === n3 ? Object.create(n3) : (r3.prototype = n3.prototype, new r3());
}
var n = function() {
  return (n = Object.assign || function(t3) {
    for (var e3, n3 = 1, r3 = arguments.length; n3 < r3; n3++) for (var o3 in e3 = arguments[n3]) Object.prototype.hasOwnProperty.call(e3, o3) && (t3[o3] = e3[o3]);
    return t3;
  }).apply(this, arguments);
};
function r(t3, e3, n3, r3) {
  return new (n3 || (n3 = Promise))(function(o3, a3) {
    function i3(t4) {
      try {
        u3(r3.next(t4));
      } catch (t5) {
        a3(t5);
      }
    }
    function s3(t4) {
      try {
        u3(r3.throw(t4));
      } catch (t5) {
        a3(t5);
      }
    }
    function u3(t4) {
      t4.done ? o3(t4.value) : new n3(function(e4) {
        e4(t4.value);
      }).then(i3, s3);
    }
    u3((r3 = r3.apply(t3, e3 || [])).next());
  });
}
function o(t3, e3) {
  var n3, r3, o3, a3, i3 = { label: 0, sent: function() {
    if (1 & o3[0]) throw o3[1];
    return o3[1];
  }, trys: [], ops: [] };
  return a3 = { next: s3(0), throw: s3(1), return: s3(2) }, "function" == typeof Symbol && (a3[Symbol.iterator] = function() {
    return this;
  }), a3;
  function s3(a4) {
    return function(s4) {
      return function(a5) {
        if (n3) throw new TypeError("Generator is already executing.");
        for (; i3; ) try {
          if (n3 = 1, r3 && (o3 = 2 & a5[0] ? r3.return : a5[0] ? r3.throw || ((o3 = r3.return) && o3.call(r3), 0) : r3.next) && !(o3 = o3.call(r3, a5[1])).done) return o3;
          switch (r3 = 0, o3 && (a5 = [2 & a5[0], o3.value]), a5[0]) {
            case 0:
            case 1:
              o3 = a5;
              break;
            case 4:
              return i3.label++, { value: a5[1], done: false };
            case 5:
              i3.label++, r3 = a5[1], a5 = [0];
              continue;
            case 7:
              a5 = i3.ops.pop(), i3.trys.pop();
              continue;
            default:
              if (!(o3 = (o3 = i3.trys).length > 0 && o3[o3.length - 1]) && (6 === a5[0] || 2 === a5[0])) {
                i3 = 0;
                continue;
              }
              if (3 === a5[0] && (!o3 || a5[1] > o3[0] && a5[1] < o3[3])) {
                i3.label = a5[1];
                break;
              }
              if (6 === a5[0] && i3.label < o3[1]) {
                i3.label = o3[1], o3 = a5;
                break;
              }
              if (o3 && i3.label < o3[2]) {
                i3.label = o3[2], i3.ops.push(a5);
                break;
              }
              o3[2] && i3.ops.pop(), i3.trys.pop();
              continue;
          }
          a5 = e3.call(t3, i3);
        } catch (t4) {
          a5 = [6, t4], r3 = 0;
        } finally {
          n3 = o3 = 0;
        }
        if (5 & a5[0]) throw a5[1];
        return { value: a5[0] ? a5[1] : void 0, done: true };
      }([a4, s4]);
    };
  }
}
var a = function() {
  function t3(t4) {
    this.global = t4, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  return t3.prototype.setPlatform = function(t4, e3) {
    null != this.platform && console.warn("Platform " + this.platformName + " has already been set. Overwriting the platform with " + e3 + "."), this.platformName = t4, this.platform = e3;
  }, t3.prototype.registerFlag = function(t4, e3, n3) {
    if (this.flagRegistry[t4] = { evaluationFn: e3, setHook: n3 }, null != this.urlFlags[t4]) {
      var r3 = this.urlFlags[t4];
      console.warn("Setting feature override from URL " + t4 + ": " + r3 + "."), this.set(t4, r3);
    }
  }, t3.prototype.get = function(t4) {
    return t4 in this.flags ? this.flags[t4] : (this.flags[t4] = this.evaluateFlag(t4), this.flags[t4]);
  }, t3.prototype.getNumber = function(t4) {
    return this.get(t4);
  }, t3.prototype.getBool = function(t4) {
    return this.get(t4);
  }, t3.prototype.getFlags = function() {
    return this.flags;
  }, Object.defineProperty(t3.prototype, "features", { get: function() {
    return this.flags;
  }, enumerable: true, configurable: true }), t3.prototype.set = function(t4, e3) {
    if (null == this.flagRegistry[t4]) throw new Error("Cannot set flag " + t4 + " as it has not been registered.");
    this.flags[t4] = e3, null != this.flagRegistry[t4].setHook && this.flagRegistry[t4].setHook(e3);
  }, t3.prototype.evaluateFlag = function(t4) {
    if (null == this.flagRegistry[t4]) throw new Error("Cannot evaluate flag '" + t4 + "': no evaluation function found.");
    return this.flagRegistry[t4].evaluationFn();
  }, t3.prototype.setFlags = function(t4) {
    this.flags = Object.assign({}, t4);
  }, t3.prototype.reset = function() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }, t3.prototype.populateURLFlags = function() {
    var t4 = this;
    if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {
      var e3 = i(this.global.location.search);
      if ("tfjsflags" in e3) e3.tfjsflags.split(",").forEach(function(e4) {
        var n3 = e4.split(":"), r3 = n3[0], o3 = n3[1];
        t4.urlFlags[r3] = function(t5, e5) {
          if ("true" === (e5 = e5.toLowerCase()) || "false" === e5) return "true" === e5;
          if ("" + +e5 === e5) return +e5;
          throw new Error("Could not parse value flag value " + e5 + " for flag " + t5 + ".");
        }(r3, o3);
      });
    }
  }, t3;
}();
function i(t3) {
  var e3 = {};
  return t3.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t4) {
    for (var n3 = [], r3 = 1; r3 < arguments.length; r3++) n3[r3 - 1] = arguments[r3];
    return function(t5, e4, n4) {
      t5[decodeURIComponent(e4)] = decodeURIComponent(n4 || "");
    }(e3, n3[0], n3[1]), n3.join("=");
  }), e3;
}
var s = null;
function u(t3) {
  s = t3;
}
var l = Object.freeze({ Environment: a, getQueryParams: i, get ENV() {
  return s;
}, setEnvironmentGlobal: u });
function c(t3) {
  for (var e3 = t3.length, n3 = 0, r3 = 0; e3 > 0; ) r3 = Math.random() * e3 | 0, n3 = t3[--e3], t3[e3] = t3[r3], t3[r3] = n3;
}
function h(t3, e3, n3) {
  return Math.max(t3, Math.min(e3, n3));
}
function p(t3) {
  return t3 % 2 == 0 ? t3 : t3 + 1;
}
function f(t3) {
  for (var e3 = 0, n3 = 0; n3 < t3.length; n3++) e3 += t3[n3];
  return e3;
}
function d(t3, e3) {
  if (!t3) throw new Error("string" == typeof e3 ? e3 : e3());
}
function v(t3, e3, n3) {
  void 0 === n3 && (n3 = ""), d(x(t3, e3), function() {
    return n3 + " Shapes " + t3 + " and " + e3 + " must match";
  });
}
function m(t3) {
  d(null != t3, function() {
    return "The input to the tensor constructor must be a non-null value.";
  });
}
function g(t3, e3) {
  if (void 0 === e3 && (e3 = []), null == e3 && (e3 = []), Array.isArray(t3) || F(t3)) for (var n3 = 0; n3 < t3.length; ++n3) g(t3[n3], e3);
  else e3.push(t3);
  return e3;
}
function y(t3) {
  if (0 === t3.length) return 1;
  for (var e3 = t3[0], n3 = 1; n3 < t3.length; n3++) e3 *= t3[n3];
  return e3;
}
function x(t3, e3) {
  if (t3 === e3) return true;
  if (null == t3 || null == e3) return false;
  if (t3.length !== e3.length) return false;
  for (var n3 = 0; n3 < t3.length; n3++) if (t3[n3] !== e3[n3]) return false;
  return true;
}
function b(t3) {
  return t3 % 1 == 0;
}
function w(t3) {
  if (null != Math.tanh) return Math.tanh(t3);
  if (t3 === 1 / 0) return 1;
  if (t3 === -1 / 0) return -1;
  var e3 = Math.exp(2 * t3);
  return (e3 - 1) / (e3 + 1);
}
function C(t3) {
  var e3 = Math.ceil(Math.sqrt(t3));
  return [e3, Math.ceil(t3 / e3)];
}
function E(t3, e3) {
  return e3 <= t3.length ? t3 : t3 + " ".repeat(e3 - t3.length);
}
function R(t3, e3, n3) {
  return void 0 === e3 && (e3 = function(t4) {
    return 0;
  }), new Promise(function(r3, o3) {
    var a3 = 0, i3 = function() {
      if (t3()) r3();
      else {
        var s3 = e3(++a3);
        null != n3 && a3 >= n3 ? o3() : setTimeout(i3, s3);
      }
    };
    i3();
  });
}
function I(t3, e3) {
  for (var n3 = 1, r3 = -1, o3 = 0; o3 < t3.length; ++o3) if (t3[o3] >= 0) n3 *= t3[o3];
  else if (-1 === t3[o3]) {
    if (-1 !== r3) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r3 + " and dim " + o3);
    r3 = o3;
  } else if (t3[o3] < 0) throw Error("Shapes can not be < 0. Found " + t3[o3] + " at dim " + o3);
  if (-1 === r3) {
    if (e3 > 0 && e3 !== n3) throw Error("Size(" + e3 + ") must match the product of shape " + t3);
    return t3;
  }
  if (0 === n3) throw Error("Cannot infer the missing size in [" + t3 + "] when there are 0 elements");
  if (e3 % n3 != 0) throw Error("The implicit shape can't be a fractional number. Got " + e3 + " / " + n3);
  var a3 = t3.slice();
  return a3[r3] = e3 / n3, a3;
}
function S(t3, e3) {
  var n3 = e3.length;
  return d((t3 = null == t3 ? e3.map(function(t4, e4) {
    return e4;
  }) : [].concat(t3)).every(function(t4) {
    return t4 >= -n3 && t4 < n3;
  }), function() {
    return "All values in axis param must be in range [-" + n3 + ", " + n3 + ") but got axis " + t3;
  }), d(t3.every(function(t4) {
    return b(t4);
  }), function() {
    return "All values in axis param must be integers but got axis " + t3;
  }), t3.map(function(t4) {
    return t4 < 0 ? n3 + t4 : t4;
  });
}
function N(t3, e3) {
  for (var n3 = [], r3 = [], o3 = null == e3 ? null : S(e3, t3).sort(), a3 = 0, i3 = 0; i3 < t3.length; ++i3) {
    if (null != o3) {
      if (o3[a3] === i3 && 1 !== t3[i3]) throw new Error("Can't squeeze axis " + i3 + " since its dim '" + t3[i3] + "' is not 1");
      (null == o3[a3] || o3[a3] > i3) && 1 === t3[i3] && (n3.push(t3[i3]), r3.push(i3)), o3[a3] <= i3 && a3++;
    }
    1 !== t3[i3] && (n3.push(t3[i3]), r3.push(i3));
  }
  return { newShape: n3, keptDims: r3 };
}
function k(t3, e3) {
  var n3 = null;
  if (null == t3 || "float32" === t3) n3 = new Float32Array(e3);
  else if ("int32" === t3) n3 = new Int32Array(e3);
  else {
    if ("bool" !== t3) throw new Error("Unknown data type " + t3);
    n3 = new Uint8Array(e3);
  }
  return n3;
}
function A(t3, e3) {
  var n3 = null;
  if (null == t3 || "float32" === t3) n3 = new Float32Array(e3);
  else if ("int32" === t3) n3 = new Int32Array(e3);
  else if ("bool" === t3) n3 = new Uint8Array(e3);
  else {
    if ("string" !== t3) throw new Error("Unknown data type " + t3);
    n3 = new Array(e3);
  }
  return n3;
}
function T(t3, e3, n3) {
  if ("float32" === e3) for (var r3 = 0; r3 < t3.length; r3++) {
    var o3 = t3[r3];
    if (isNaN(o3) || !isFinite(o3)) throw Error("The result of the '" + n3 + "' is " + o3 + ".");
  }
}
function D(t3, e3) {
  for (var n3 = 0; n3 < t3.length; n3++) {
    var r3 = t3[n3];
    if (isNaN(r3) || !isFinite(r3)) throw Error("A tensor of type " + e3 + " being uploaded contains " + r3 + ".");
  }
}
function _(t3) {
  return "bool" === t3 || "complex64" === t3 || "float32" === t3 || "int32" === t3 || "string" === t3;
}
function O(t3, e3) {
  return "complex64" !== e3 && (("float32" !== e3 || "complex64" === t3) && (("int32" !== e3 || "float32" === t3 || "complex64" === t3) && ("bool" !== e3 || "bool" !== t3)));
}
function F(t3) {
  return t3 instanceof Float32Array || t3 instanceof Int32Array || t3 instanceof Uint8Array;
}
function M(t3) {
  if ("float32" === t3 || "int32" === t3) return 4;
  if ("complex64" === t3) return 8;
  if ("bool" === t3) return 1;
  throw new Error("Unknown dtype " + t3);
}
function B(t3) {
  if (null == t3) return 0;
  var e3 = 0;
  return t3.forEach(function(t4) {
    return e3 += 2 * t4.length;
  }), e3;
}
function P(t3) {
  return "string" == typeof t3 || t3 instanceof String;
}
function L(t3) {
  return "boolean" == typeof t3;
}
function W(t3) {
  return "number" == typeof t3;
}
function U(t3) {
  return Array.isArray(t3) ? U(t3[0]) : t3 instanceof Float32Array ? "float32" : t3 instanceof Int32Array || t3 instanceof Uint8Array ? "int32" : W(t3) ? "float32" : P(t3) ? "string" : L(t3) ? "bool" : "float32";
}
function z(t3) {
  return !!(t3 && t3.constructor && t3.call && t3.apply);
}
function V(t3, e3) {
  for (var n3 = e3; n3 < t3; ++n3) if (t3 % n3 == 0) return n3;
  return t3;
}
function G(t3) {
  var e3 = t3.length;
  if (e3 < 2) return [];
  var n3 = new Array(e3 - 1);
  n3[e3 - 2] = t3[e3 - 1];
  for (var r3 = e3 - 3; r3 >= 0; --r3) n3[r3] = n3[r3 + 1] * t3[r3 + 1];
  return n3;
}
function q(t3, e3, n3) {
  if ("string" === e3) throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(t3) && (t3 = g(t3)), n3 && D(t3, e3), function(t4, e4) {
    return t4 instanceof Float32Array && "float32" === e4 || t4 instanceof Int32Array && "int32" === e4 || t4 instanceof Uint8Array && "bool" === e4;
  }(t3, e3)) return t3;
  if (null == e3 || "float32" === e3 || "complex64" === e3) return new Float32Array(t3);
  if ("int32" === e3) return new Int32Array(t3);
  if ("bool" === e3) {
    for (var r3 = new Uint8Array(t3.length), o3 = 0; o3 < r3.length; ++o3) 0 !== Math.round(t3[o3]) && (r3[o3] = 1);
    return r3;
  }
  throw new Error("Unknown data type " + e3);
}
function H(t3, e3) {
  if (0 === t3.length) return e3[0];
  var n3 = t3.reduce(function(t4, e4) {
    return t4 * e4;
  });
  if (0 === n3) return [];
  if (n3 !== e3.length) throw new Error("[" + t3 + "] does not match the input size.");
  return function t4(e4, n4, r3) {
    var o3 = new Array();
    if (1 === n4.length) for (var a3 = n4[0], i3 = 0; i3 < a3; i3++) o3[i3] = r3[e4 + i3];
    else {
      a3 = n4[0];
      var s3 = n4.slice(1), u3 = s3.reduce(function(t5, e5) {
        return t5 * e5;
      });
      for (i3 = 0; i3 < a3; i3++) o3[i3] = t4(e4 + i3 * u3, s3, r3);
    }
    return o3;
  }(0, t3, e3);
}
function $(t3, e3) {
  for (var n3 = j(t3, e3), r3 = 0; r3 < n3.length; r3++) n3[r3] = 1;
  return n3;
}
function j(t3, e3) {
  if (null == e3 || "float32" === e3 || "complex64" === e3) return new Float32Array(t3);
  if ("int32" === e3) return new Int32Array(t3);
  if ("bool" === e3) return new Uint8Array(t3);
  throw new Error("Unknown data type " + e3);
}
function K() {
  if ("undefined" != typeof performance) return performance.now();
  if ("undefined" != typeof process) {
    var t3 = process.hrtime();
    return 1e3 * t3[0] + t3[1] / 1e6;
  }
  throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js");
}
function X(t3) {
  t3.forEach(function(e3) {
    d(Number.isInteger(e3) && e3 >= 0, function() {
      return "Tensor must have a shape comprised of positive integers but got shape [" + t3 + "].";
    });
  });
}
function Y(t3, e3) {
  return s.platform.fetch(t3, e3);
}
var Q = Object.freeze({ shuffle: c, clamp: h, nearestLargerEven: p, sum: f, randUniform: function(t3, e3) {
  var n3 = Math.random();
  return e3 * n3 + (1 - n3) * t3;
}, distSquared: function(t3, e3) {
  for (var n3 = 0, r3 = 0; r3 < t3.length; r3++) {
    var o3 = Number(t3[r3]) - Number(e3[r3]);
    n3 += o3 * o3;
  }
  return n3;
}, assert: d, assertShapesMatch: v, assertNonNull: m, flatten: g, sizeFromShape: y, isScalarShape: function(t3) {
  return 0 === t3.length;
}, arraysEqual: x, isInt: b, tanh: w, sizeToSquarishShape: C, createShuffledIndices: function(t3) {
  for (var e3 = new Uint32Array(t3), n3 = 0; n3 < t3; ++n3) e3[n3] = n3;
  return c(e3), e3;
}, rightPad: E, repeatedTry: R, inferFromImplicitShape: I, parseAxisParam: S, squeezeShape: N, getTypedArrayFromDType: k, getArrayFromDType: A, checkComputationForErrors: T, checkConversionForErrors: D, isValidDtype: _, hasEncodingLoss: O, isTypedArray: F, bytesPerElement: M, bytesFromStringArray: B, isString: P, isBoolean: L, isNumber: W, inferDtype: U, isFunction: z, nearestDivisor: V, computeStrides: G, toTypedArray: q, toNestedArray: H, makeOnesTypedArray: $, makeZerosTypedArray: j, now: K, assertNonNegativeIntegerDimensions: X, fetch: Y });
var J = function() {
  function t3(t4, e3) {
    this.backendTimer = t4, this.logger = e3, null == e3 && (this.logger = new Z());
  }
  return t3.prototype.profileKernel = function(t4, e3) {
    var n3, r3 = this, o3 = this.backendTimer.time(function() {
      n3 = e3();
    });
    return (Array.isArray(n3) ? n3 : [n3]).forEach(function(e4) {
      var n4 = e4.dataSync();
      T(n4, e4.dtype, t4), o3.then(function(o4) {
        var a3 = "";
        null != o4.getExtraProfileInfo && (a3 = o4.getExtraProfileInfo()), r3.logger.logKernelProfile(t4, e4, n4, o4.kernelMs, a3);
      });
    }), n3;
  }, t3;
}();
var Z = function() {
  function t3() {
  }
  return t3.prototype.logKernelProfile = function(t4, e3, n3, r3, o3) {
    var a3 = E(r3 + "ms", 9), i3 = E(t4, 25), s3 = e3.rank, u3 = e3.size, l3 = E(e3.shape.toString(), 14);
    console.log("%c" + i3 + "	%c" + a3 + "	%c" + s3 + "D " + l3 + "	%c" + u3 + "	%c" + o3, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green");
  }, t3;
}();
var tt = 20;
var et = 3;
var nt = 7;
function rt(t3, e3, n3, r3) {
  var o3 = G(e3), a3 = function(t4, e4, n4, r4) {
    var o4 = y(e4), a4 = r4[r4.length - 1], i4 = new Array(a4).fill(0), s4 = e4.length, u4 = "complex64" === n4 ? it(t4) : t4;
    if (s4 > 1) for (var l3 = 0; l3 < o4 / a4; l3++) for (var c3 = l3 * a4, h3 = 0; h3 < a4; h3++) i4[h3] = Math.max(i4[h3], ot(u4[c3 + h3], 0, n4).length);
    return i4;
  }(t3, e3, n3, o3), i3 = e3.length, s3 = function t4(e4, n4, r4, o4, a4, i4) {
    void 0 === i4 && (i4 = true);
    var s4 = "complex64" === r4 ? 2 : 1;
    var u4 = n4[0];
    var l3 = n4.length;
    if (0 === l3) {
      if ("complex64" === r4) {
        var c3 = it(e4);
        return [ot(c3[0], 0, r4)];
      }
      return "bool" === r4 ? [at(e4[0])] : [e4[0].toString()];
    }
    if (1 === l3) {
      if (u4 > tt) {
        var h3 = et * s4, p3 = Array.from(e4.slice(0, h3)), f3 = Array.from(e4.slice(u4 - et * s4, u4));
        return "complex64" === r4 && (p3 = it(p3), f3 = it(f3)), ["[" + p3.map(function(t5, e5) {
          return ot(t5, a4[e5], r4);
        }).join(", ") + ", ..., " + f3.map(function(t5, e5) {
          return ot(t5, a4[u4 - et + e5], r4);
        }).join(", ") + "]"];
      }
      var d3 = "complex64" === r4 ? it(e4) : Array.from(e4);
      return ["[" + d3.map(function(t5, e5) {
        return ot(t5, a4[e5], r4);
      }).join(", ") + "]"];
    }
    var v2 = n4.slice(1);
    var m3 = o4.slice(1);
    var g2 = o4[0] * s4;
    var y3 = [];
    if (u4 > tt) {
      for (var x3 = 0; x3 < et; x3++) {
        var b3 = x3 * g2, w3 = b3 + g2;
        y3.push.apply(y3, t4(e4.slice(b3, w3), v2, r4, m3, a4, false));
      }
      y3.push("...");
      for (var x3 = u4 - et; x3 < u4; x3++) {
        var b3 = x3 * g2, w3 = b3 + g2;
        y3.push.apply(y3, t4(e4.slice(b3, w3), v2, r4, m3, a4, x3 === u4 - 1));
      }
    } else for (var x3 = 0; x3 < u4; x3++) {
      var b3 = x3 * g2, w3 = b3 + g2;
      y3.push.apply(y3, t4(e4.slice(b3, w3), v2, r4, m3, a4, x3 === u4 - 1));
    }
    var C3 = 2 === l3 ? "," : "";
    y3[0] = "[" + y3[0] + C3;
    for (var x3 = 1; x3 < y3.length - 1; x3++) y3[x3] = " " + y3[x3] + C3;
    var E3 = ",\n";
    for (var x3 = 2; x3 < l3; x3++) E3 += "\n";
    y3[y3.length - 1] = " " + y3[y3.length - 1] + "]" + (i4 ? "" : E3);
    return y3;
  }(t3, e3, n3, o3, a3), u3 = ["Tensor"];
  return r3 && (u3.push("  dtype: " + n3), u3.push("  rank: " + i3), u3.push("  shape: [" + e3 + "]"), u3.push("  values:")), u3.push(s3.map(function(t4) {
    return "    " + t4;
  }).join("\n")), u3.join("\n");
}
function ot(t3, e3, n3) {
  return E(Array.isArray(t3) ? parseFloat(t3[0].toFixed(nt)) + " + " + parseFloat(t3[1].toFixed(nt)) + "j" : P(t3) ? "'" + t3 + "'" : "bool" === n3 ? at(t3) : parseFloat(t3.toFixed(nt)).toString(), e3);
}
function at(t3) {
  return 0 === t3 ? "false" : "true";
}
function it(t3) {
  for (var e3 = [], n3 = 0; n3 < t3.length; n3 += 2) e3.push([t3[n3], t3[n3 + 1]]);
  return e3;
}
var st = function() {
  function t3(t4, e3, n3) {
    var r3 = this;
    if (this.dtype = e3, this.shape = t4.slice(), this.size = y(t4), null != n3) {
      var o3 = n3.length;
      d(o3 === this.size, function() {
        return "Length of values '" + o3 + "' does not match the size inferred by the shape '" + r3.size + "'.";
      });
    }
    if ("complex64" === e3) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n3 || A(e3, this.size), this.strides = G(t4);
  }
  return t3.prototype.set = function(t4) {
    for (var e3 = this, n3 = [], r3 = 1; r3 < arguments.length; r3++) n3[r3 - 1] = arguments[r3];
    0 === n3.length && (n3 = [0]), d(n3.length === this.rank, function() {
      return "The number of provided coordinates (" + n3.length + ") must match the rank (" + e3.rank + ")";
    });
    var o3 = this.locToIndex(n3);
    this.values[o3] = t4;
  }, t3.prototype.get = function() {
    for (var t4 = [], e3 = 0; e3 < arguments.length; e3++) t4[e3] = arguments[e3];
    0 === t4.length && (t4 = [0]);
    for (var n3 = 0, r3 = 0, o3 = t4; r3 < o3.length; r3++) {
      var a3 = o3[r3];
      if (a3 < 0 || a3 >= this.shape[n3]) {
        var i3 = "Requested out of range element at " + t4 + ".   Buffer shape=" + this.shape;
        throw new Error(i3);
      }
      n3++;
    }
    for (var s3 = t4[t4.length - 1], u3 = 0; u3 < t4.length - 1; ++u3) s3 += this.strides[u3] * t4[u3];
    return this.values[s3];
  }, t3.prototype.locToIndex = function(t4) {
    if (0 === this.rank) return 0;
    if (1 === this.rank) return t4[0];
    for (var e3 = t4[t4.length - 1], n3 = 0; n3 < t4.length - 1; ++n3) e3 += this.strides[n3] * t4[n3];
    return e3;
  }, t3.prototype.indexToLoc = function(t4) {
    if (0 === this.rank) return [];
    if (1 === this.rank) return [t4];
    for (var e3 = new Array(this.shape.length), n3 = 0; n3 < e3.length - 1; ++n3) e3[n3] = Math.floor(t4 / this.strides[n3]), t4 -= e3[n3] * this.strides[n3];
    return e3[e3.length - 1] = t4, e3;
  }, Object.defineProperty(t3.prototype, "rank", { get: function() {
    return this.shape.length;
  }, enumerable: true, configurable: true }), t3.prototype.toTensor = function() {
    return ht.make(this.shape, { values: this.values }, this.dtype);
  }, t3;
}();
var ut = null;
var lt = null;
var ct = null;
var ht = function() {
  function t3(t4, e3, n3, r3, o3) {
    this.kept = false, this.isDisposedInternal = false, this.shape = t4.slice(), this.dtype = e3 || "float32", this.size = y(t4), this.strides = G(t4), this.dataId = null != r3 ? r3 : {}, this.id = ut().nextTensorId(), this.rankType = this.rank < 5 ? this.rank.toString() : "higher", ut().registerTensor(this, o3), null != n3 && ut().write(o3, this.dataId, n3);
  }
  return t3.make = function(e3, n3, r3, o3) {
    return new t3(e3, r3, n3.values, n3.dataId, o3);
  }, t3.prototype.flatten = function() {
    return this.throwIfDisposed(), this.as1D();
  }, t3.prototype.asScalar = function() {
    return this.throwIfDisposed(), d(1 === this.size, function() {
      return "The array must have only 1 element.";
    }), this.reshape([]);
  }, t3.prototype.as1D = function() {
    return this.throwIfDisposed(), this.reshape([this.size]);
  }, t3.prototype.as2D = function(t4, e3) {
    return this.throwIfDisposed(), this.reshape([t4, e3]);
  }, t3.prototype.as3D = function(t4, e3, n3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3]);
  }, t3.prototype.as4D = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3, r3]);
  }, t3.prototype.as5D = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3, r3, o3]);
  }, t3.prototype.asType = function(t4) {
    return this.throwIfDisposed(), lt.cast(this, t4);
  }, Object.defineProperty(t3.prototype, "rank", { get: function() {
    return this.shape.length;
  }, enumerable: true, configurable: true }), t3.prototype.buffer = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.data()];
          case 1:
            return t4 = e3.sent(), [2, lt.buffer(this.shape, this.dtype, t4)];
        }
      });
    });
  }, t3.prototype.bufferSync = function() {
    return lt.buffer(this.shape, this.dtype, this.dataSync());
  }, t3.prototype.array = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.data()];
          case 1:
            return t4 = e3.sent(), [2, H(this.shape, t4)];
        }
      });
    });
  }, t3.prototype.arraySync = function() {
    return H(this.shape, this.dataSync());
  }, t3.prototype.data = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        return this.throwIfDisposed(), [2, ut().read(this.dataId)];
      });
    });
  }, t3.prototype.dataSync = function() {
    return this.throwIfDisposed(), ut().readSync(this.dataId);
  }, t3.prototype.dispose = function() {
    this.isDisposed || (ut().disposeTensor(this), this.isDisposedInternal = true);
  }, Object.defineProperty(t3.prototype, "isDisposed", { get: function() {
    return this.isDisposedInternal;
  }, enumerable: true, configurable: true }), t3.prototype.throwIfDisposed = function() {
    if (this.isDisposed) throw new Error("Tensor is disposed.");
  }, t3.prototype.toFloat = function() {
    return this.asType("float32");
  }, t3.prototype.toInt = function() {
    return this.asType("int32");
  }, t3.prototype.toBool = function() {
    return this.asType("bool");
  }, t3.prototype.print = function(t4) {
    return void 0 === t4 && (t4 = false), lt.print(this, t4);
  }, t3.prototype.reshape = function(t4) {
    return this.throwIfDisposed(), lt.reshape(this, t4);
  }, t3.prototype.reshapeAs = function(t4) {
    return this.throwIfDisposed(), this.reshape(t4.shape);
  }, t3.prototype.expandDims = function(t4) {
    return void 0 === t4 && (t4 = 0), lt.expandDims(this, t4);
  }, t3.prototype.cumsum = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = 0), void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = false), lt.cumsum(this, t4, e3, n3);
  }, t3.prototype.squeeze = function(t4) {
    return this.throwIfDisposed(), lt.squeeze(this, t4);
  }, t3.prototype.clone = function() {
    return this.throwIfDisposed(), lt.clone(this);
  }, t3.prototype.oneHot = function(t4, e3, n3) {
    return this.throwIfDisposed(), lt.oneHot(this, t4, e3, n3);
  }, t3.prototype.toString = function(t4) {
    return void 0 === t4 && (t4 = false), rt(this.dataSync(), this.shape, this.dtype, t4);
  }, t3.prototype.tile = function(t4) {
    return this.throwIfDisposed(), lt.tile(this, t4);
  }, t3.prototype.gather = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), this.throwIfDisposed(), lt.gather(this, t4, e3);
  }, t3.prototype.matMul = function(t4, e3, n3) {
    return void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = false), this.throwIfDisposed(), lt.matMul(this, t4, e3, n3);
  }, t3.prototype.dot = function(t4) {
    return this.throwIfDisposed(), lt.dot(this, t4);
  }, t3.prototype.norm = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = "euclidean"), void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false), this.throwIfDisposed(), lt.norm(this, t4, e3, n3);
  }, t3.prototype.slice = function(t4, e3) {
    return this.throwIfDisposed(), lt.slice(this, t4, e3);
  }, t3.prototype.reverse = function(t4) {
    return this.throwIfDisposed(), lt.reverse(this, t4);
  }, t3.prototype.concat = function(e3, n3) {
    return void 0 === n3 && (n3 = 0), this.throwIfDisposed(), e3 instanceof t3 && (e3 = [e3]), lt.concat([this].concat(e3), n3);
  }, t3.prototype.split = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), this.throwIfDisposed(), lt.split(this, t4, e3);
  }, t3.prototype.stack = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), lt.stack([this, t4], e3);
  }, t3.prototype.unstack = function(t4) {
    return void 0 === t4 && (t4 = 0), lt.unstack(this, t4);
  }, t3.prototype.pad = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), lt.pad(this, t4, e3);
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3) {
    return void 0 === n3 && (n3 = 1e-3), ct("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(t4, e3, o3, r3, n3);
  }, t3.prototype.batchNorm = function(t4, e3, n3, r3, o3) {
    return void 0 === o3 && (o3 = 1e-3), this.throwIfDisposed(), lt.batchNorm(this, t4, e3, n3, r3, o3);
  }, t3.prototype.all = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.all(this, t4, e3);
  }, t3.prototype.any = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.any(this, t4, e3);
  }, t3.prototype.logSumExp = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.logSumExp(this, t4, e3);
  }, t3.prototype.sum = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.sum(this, t4, e3);
  }, t3.prototype.prod = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.prod(this, t4, e3);
  }, t3.prototype.mean = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.mean(this, t4, e3);
  }, t3.prototype.min = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.min(this, t4, e3);
  }, t3.prototype.max = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.max(this, t4, e3);
  }, t3.prototype.argMin = function(t4) {
    return void 0 === t4 && (t4 = null), this.throwIfDisposed(), lt.argMin(this, t4);
  }, t3.prototype.argMax = function(t4) {
    return void 0 === t4 && (t4 = null), this.throwIfDisposed(), lt.argMax(this, t4);
  }, t3.prototype.cast = function(t4) {
    return this.throwIfDisposed(), lt.cast(this, t4);
  }, t3.prototype.add = function(t4) {
    return this.throwIfDisposed(), lt.add(this, t4);
  }, t3.prototype.addStrict = function(t4) {
    return this.throwIfDisposed(), lt.addStrict(this, t4);
  }, t3.prototype.atan2 = function(t4) {
    return this.throwIfDisposed(), lt.atan2(this, t4);
  }, t3.prototype.sub = function(t4) {
    return this.throwIfDisposed(), lt.sub(this, t4);
  }, t3.prototype.subStrict = function(t4) {
    return this.throwIfDisposed(), lt.subStrict(this, t4);
  }, t3.prototype.pow = function(t4) {
    return this.throwIfDisposed(), lt.pow(this, t4);
  }, t3.prototype.powStrict = function(t4) {
    return this.throwIfDisposed(), lt.powStrict(this, t4);
  }, t3.prototype.mul = function(t4) {
    return this.throwIfDisposed(), lt.mul(this, t4);
  }, t3.prototype.mulStrict = function(t4) {
    return this.throwIfDisposed(), lt.mulStrict(this, t4);
  }, t3.prototype.div = function(t4) {
    return this.throwIfDisposed(), lt.div(this, t4);
  }, t3.prototype.floorDiv = function(t4) {
    return this.throwIfDisposed(), lt.floorDiv(this, t4);
  }, t3.prototype.divStrict = function(t4) {
    return this.throwIfDisposed(), lt.divStrict(this, t4);
  }, t3.prototype.minimum = function(t4) {
    return this.throwIfDisposed(), lt.minimum(this, t4);
  }, t3.prototype.minimumStrict = function(t4) {
    return this.throwIfDisposed(), lt.minimumStrict(this, t4);
  }, t3.prototype.maximum = function(t4) {
    return this.throwIfDisposed(), lt.maximum(this, t4);
  }, t3.prototype.maximumStrict = function(t4) {
    return this.throwIfDisposed(), lt.maximumStrict(this, t4);
  }, t3.prototype.mod = function(t4) {
    return this.throwIfDisposed(), lt.mod(this, t4);
  }, t3.prototype.modStrict = function(t4) {
    return this.throwIfDisposed(), lt.modStrict(this, t4);
  }, t3.prototype.squaredDifference = function(t4) {
    return this.throwIfDisposed(), lt.squaredDifference(this, t4);
  }, t3.prototype.squaredDifferenceStrict = function(t4) {
    return this.throwIfDisposed(), lt.squaredDifferenceStrict(this, t4);
  }, t3.prototype.transpose = function(t4) {
    return this.throwIfDisposed(), lt.transpose(this, t4);
  }, t3.prototype.notEqual = function(t4) {
    return this.throwIfDisposed(), lt.notEqual(this, t4);
  }, t3.prototype.notEqualStrict = function(t4) {
    return this.throwIfDisposed(), lt.notEqualStrict(this, t4);
  }, t3.prototype.less = function(t4) {
    return this.throwIfDisposed(), lt.less(this, t4);
  }, t3.prototype.lessStrict = function(t4) {
    return this.throwIfDisposed(), lt.lessStrict(this, t4);
  }, t3.prototype.equal = function(t4) {
    return this.throwIfDisposed(), lt.equal(this, t4);
  }, t3.prototype.equalStrict = function(t4) {
    return this.throwIfDisposed(), lt.equalStrict(this, t4);
  }, t3.prototype.lessEqual = function(t4) {
    return this.throwIfDisposed(), lt.lessEqual(this, t4);
  }, t3.prototype.lessEqualStrict = function(t4) {
    return this.throwIfDisposed(), lt.lessEqualStrict(this, t4);
  }, t3.prototype.greater = function(t4) {
    return this.throwIfDisposed(), lt.greater(this, t4);
  }, t3.prototype.greaterStrict = function(t4) {
    return this.throwIfDisposed(), lt.greaterStrict(this, t4);
  }, t3.prototype.greaterEqual = function(t4) {
    return this.throwIfDisposed(), lt.greaterEqual(this, t4);
  }, t3.prototype.greaterEqualStrict = function(t4) {
    return this.throwIfDisposed(), lt.greaterEqualStrict(this, t4);
  }, t3.prototype.logicalAnd = function(t4) {
    return this.throwIfDisposed(), lt.logicalAnd(this, t4);
  }, t3.prototype.logicalOr = function(t4) {
    return this.throwIfDisposed(), lt.logicalOr(this, t4);
  }, t3.prototype.logicalNot = function() {
    return this.throwIfDisposed(), lt.logicalNot(this);
  }, t3.prototype.logicalXor = function(t4) {
    return this.throwIfDisposed(), lt.logicalXor(this, t4);
  }, t3.prototype.where = function(t4, e3) {
    return this.throwIfDisposed(), lt.where(t4, this, e3);
  }, t3.prototype.neg = function() {
    return this.throwIfDisposed(), lt.neg(this);
  }, t3.prototype.ceil = function() {
    return this.throwIfDisposed(), lt.ceil(this);
  }, t3.prototype.floor = function() {
    return this.throwIfDisposed(), lt.floor(this);
  }, t3.prototype.sign = function() {
    return this.throwIfDisposed(), lt.sign(this);
  }, t3.prototype.isNaN = function() {
    return this.throwIfDisposed(), lt.isNaN(this);
  }, t3.prototype.isInf = function() {
    return this.throwIfDisposed(), lt.isInf(this);
  }, t3.prototype.isFinite = function() {
    return this.throwIfDisposed(), lt.isFinite(this);
  }, t3.prototype.exp = function() {
    return this.throwIfDisposed(), lt.exp(this);
  }, t3.prototype.expm1 = function() {
    return this.throwIfDisposed(), lt.expm1(this);
  }, t3.prototype.log = function() {
    return this.throwIfDisposed(), lt.log(this);
  }, t3.prototype.log1p = function() {
    return this.throwIfDisposed(), lt.log1p(this);
  }, t3.prototype.sqrt = function() {
    return this.throwIfDisposed(), lt.sqrt(this);
  }, t3.prototype.rsqrt = function() {
    return this.throwIfDisposed(), lt.rsqrt(this);
  }, t3.prototype.square = function() {
    return this.throwIfDisposed(), lt.square(this);
  }, t3.prototype.reciprocal = function() {
    return this.throwIfDisposed(), lt.reciprocal(this);
  }, t3.prototype.abs = function() {
    return this.throwIfDisposed(), lt.abs(this);
  }, t3.prototype.clipByValue = function(t4, e3) {
    return this.throwIfDisposed(), lt.clipByValue(this, t4, e3);
  }, t3.prototype.relu = function() {
    return this.throwIfDisposed(), lt.relu(this);
  }, t3.prototype.elu = function() {
    return this.throwIfDisposed(), lt.elu(this);
  }, t3.prototype.selu = function() {
    return this.throwIfDisposed(), lt.selu(this);
  }, t3.prototype.leakyRelu = function(t4) {
    return void 0 === t4 && (t4 = 0.2), this.throwIfDisposed(), lt.leakyRelu(this, t4);
  }, t3.prototype.prelu = function(t4) {
    return this.throwIfDisposed(), lt.prelu(this, t4);
  }, t3.prototype.sigmoid = function() {
    return this.throwIfDisposed(), lt.sigmoid(this);
  }, t3.prototype.logSigmoid = function() {
    return this.throwIfDisposed(), lt.logSigmoid(this);
  }, t3.prototype.softplus = function() {
    return this.throwIfDisposed(), lt.softplus(this);
  }, t3.prototype.zerosLike = function() {
    return this.throwIfDisposed(), lt.zerosLike(this);
  }, t3.prototype.onesLike = function() {
    return this.throwIfDisposed(), lt.onesLike(this);
  }, t3.prototype.sin = function() {
    return this.throwIfDisposed(), lt.sin(this);
  }, t3.prototype.cos = function() {
    return this.throwIfDisposed(), lt.cos(this);
  }, t3.prototype.tan = function() {
    return this.throwIfDisposed(), lt.tan(this);
  }, t3.prototype.asin = function() {
    return this.throwIfDisposed(), lt.asin(this);
  }, t3.prototype.acos = function() {
    return this.throwIfDisposed(), lt.acos(this);
  }, t3.prototype.atan = function() {
    return this.throwIfDisposed(), lt.atan(this);
  }, t3.prototype.sinh = function() {
    return this.throwIfDisposed(), lt.sinh(this);
  }, t3.prototype.cosh = function() {
    return this.throwIfDisposed(), lt.cosh(this);
  }, t3.prototype.tanh = function() {
    return this.throwIfDisposed(), lt.tanh(this);
  }, t3.prototype.asinh = function() {
    return this.throwIfDisposed(), lt.asinh(this);
  }, t3.prototype.acosh = function() {
    return this.throwIfDisposed(), lt.acosh(this);
  }, t3.prototype.atanh = function() {
    return this.throwIfDisposed(), lt.atanh(this);
  }, t3.prototype.erf = function() {
    return this.throwIfDisposed(), lt.erf(this);
  }, t3.prototype.round = function() {
    return this.throwIfDisposed(), lt.round(this);
  }, t3.prototype.step = function(t4) {
    return void 0 === t4 && (t4 = 0), this.throwIfDisposed(), lt.step(this, t4);
  }, t3.prototype.softmax = function(t4) {
    return void 0 === t4 && (t4 = -1), this.throwIfDisposed(), lt.softmax(this, t4);
  }, t3.prototype.logSoftmax = function(t4) {
    return void 0 === t4 && (t4 = -1), this.throwIfDisposed(), lt.logSoftmax(this, t4);
  }, t3.prototype.resizeBilinear = function(t4, e3) {
    return void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.image.resizeBilinear(this, t4, e3);
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3) {
    return void 0 === e3 && (e3 = false), this.throwIfDisposed(), lt.image.resizeNearestNeighbor(this, t4, e3);
  }, t3.prototype.conv1d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NWC"), void 0 === o3 && (o3 = 1), this.throwIfDisposed(), lt.conv1d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.conv2d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NHWC"), void 0 === o3 && (o3 = [1, 1]), this.throwIfDisposed(), lt.conv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.conv2dTranspose = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), lt.conv2dTranspose(this, t4, e3, n3, r3, o3);
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NHWC"), void 0 === o3 && (o3 = [1, 1]), this.throwIfDisposed(), lt.depthwiseConv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.separableConv2d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === o3 && (o3 = [1, 1]), void 0 === a3 && (a3 = "NHWC"), this.throwIfDisposed(), lt.separableConv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.avgPool = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), lt.avgPool(this, t4, e3, n3, r3);
  }, t3.prototype.maxPool = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), lt.maxPool(this, t4, e3, n3, r3);
  }, t3.prototype.localResponseNormalization = function(t4, e3, n3, r3) {
    return void 0 === t4 && (t4 = 5), void 0 === e3 && (e3 = 1), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 0.5), lt.localResponseNormalization(this, t4, e3, n3, r3);
  }, t3.prototype.pool = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), lt.pool(this, t4, e3, n3, r3, o3);
  }, t3.prototype.variable = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = true), this.throwIfDisposed(), pt.variable(this, t4, e3, n3);
  }, t3.prototype.unsortedSegmentSum = function(t4, e3) {
    return this.throwIfDisposed(), lt.unsortedSegmentSum(this, t4, e3);
  }, t3.prototype.batchToSpaceND = function(t4, e3) {
    return this.throwIfDisposed(), lt.batchToSpaceND(this, t4, e3);
  }, t3.prototype.spaceToBatchND = function(t4, e3) {
    return this.throwIfDisposed(), lt.spaceToBatchND(this, t4, e3);
  }, t3.prototype.topk = function(t4, e3) {
    return void 0 === t4 && (t4 = 1), void 0 === e3 && (e3 = true), this.throwIfDisposed(), lt.topk(this, t4, e3);
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3, o3, a3, i3, s3) {
    return void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = 0), void 0 === a3 && (a3 = 0), void 0 === i3 && (i3 = 0), void 0 === s3 && (s3 = 0), this.throwIfDisposed(), lt.stridedSlice(this, t4, e3, n3, r3, o3, a3, i3, s3);
  }, t3.prototype.depthToSpace = function(t4, e3) {
    return this.throwIfDisposed(), lt.depthToSpace(this, t4, e3);
  }, t3.prototype.fft = function() {
    return this.throwIfDisposed(), lt.spectral.fft(this);
  }, t3.prototype.ifft = function() {
    return this.throwIfDisposed(), lt.spectral.ifft(this);
  }, t3.prototype.rfft = function() {
    return this.throwIfDisposed(), lt.spectral.rfft(this);
  }, t3.prototype.irfft = function() {
    return this.throwIfDisposed(), lt.spectral.irfft(this);
  }, t3;
}();
Object.defineProperty(ht, Symbol.hasInstance, { value: function(t3) {
  return !!t3 && null != t3.dataId && null != t3.shape && null != t3.dtype;
} });
var pt = function(t3) {
  function n3(e3, n4, r3) {
    void 0 === n4 && (n4 = true);
    var o3 = t3.call(this, e3.shape, e3.dtype, null, e3.dataId) || this;
    o3.trainable = n4, o3.name = r3, null == o3.name && (o3.name = ut().nextVariableId().toString());
    try {
      ut().registerVariable(o3);
    } catch (t4) {
      throw ut().disposeTensor(o3), t4;
    }
    return o3;
  }
  return e(n3, t3), n3.variable = function(t4, e3, r3, o3) {
    return void 0 === e3 && (e3 = true), null != o3 && o3 !== t4.dtype && (t4 = t4.asType(o3)), new n3(t4, e3, r3);
  }, n3.prototype.assign = function(t4) {
    if (t4.dtype !== this.dtype) throw new Error("dtype of the new value (" + t4.dtype + ") and previous value (" + this.dtype + ") must match");
    if (!x(t4.shape, this.shape)) throw new Error("shape of the new value (" + t4.shape + ") and previous value (" + this.shape + ") must match");
    ut().disposeTensor(this), this.dataId = t4.dataId, ut().registerTensor(this);
  }, n3.prototype.dispose = function() {
    ut().disposeVariable(this), this.isDisposedInternal = true;
  }, n3;
}(ht);
Object.defineProperty(pt, Symbol.hasInstance, { value: function(t3) {
  return t3 instanceof ht && null != t3.assign && t3.assign instanceof Function;
} });
var ft;
var dt;
var vt;
var mt;
var gt;
var yt = pt.variable;
!function(t3) {
  t3.R0 = "R0", t3.R1 = "R1", t3.R2 = "R2", t3.R3 = "R3", t3.R4 = "R4", t3.R5 = "R5", t3.R6 = "R6";
}(ft || (ft = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "int32", t3.bool = "int32", t3.complex64 = "complex64";
}(dt || (dt = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "int32", t3.bool = "bool", t3.complex64 = "complex64";
}(vt || (vt = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "float32", t3.bool = "float32", t3.complex64 = "complex64";
}(mt || (mt = {})), function(t3) {
  t3.float32 = "complex64", t3.int32 = "complex64", t3.bool = "complex64", t3.complex64 = "complex64";
}(gt || (gt = {}));
var xt = { float32: mt, int32: dt, bool: vt, complex64: gt };
function bt(t3, e3) {
  if ("string" === t3 || "string" === e3) {
    if ("string" === t3 && "string" === e3) return "string";
    throw new Error("Can not upcast " + t3 + " with " + e3);
  }
  return xt[t3][e3];
}
function wt(t3) {
  return bt(t3, "int32");
}
function Ct(t3, e3) {
  if (t3.dtype === e3.dtype) return [t3, e3];
  var n3 = bt(t3.dtype, e3.dtype);
  return [t3.cast(n3), e3.cast(n3)];
}
function Et(t3, e3) {
  d(t3.dtype === e3.dtype, function() {
    return "The dtypes of the first(" + t3.dtype + ") and second(" + e3.dtype + ") input must match";
  });
}
function Rt(t3) {
  var e3 = [];
  return function t4(e4, n3, r3) {
    if (null == e4) return;
    if (e4 instanceof ht) return void n3.push(e4);
    if (o3 = e4, !Array.isArray(o3) && "object" != typeof o3) return;
    var o3;
    var a3 = e4;
    for (var i3 in a3) {
      var s3 = a3[i3];
      r3.has(s3) || (r3.add(s3), t4(s3, n3, r3));
    }
  }(t3, e3, /* @__PURE__ */ new Set()), e3;
}
var It;
var St = Object.freeze({ makeTypesMatch: Ct, assertTypesMatch: Et, isTensorInList: function(t3, e3) {
  for (var n3 = 0; n3 < e3.length; n3++) if (e3[n3].id === t3.id) return true;
  return false;
}, getTensorsInContainer: Rt });
var Nt = function() {
  function t3() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };
  }
  return t3.prototype.dispose = function() {
    for (var t4 in this.registeredVariables) this.registeredVariables[t4].dispose();
  }, t3;
}();
var kt = function() {
  function t3(t4) {
    this.ENV = t4, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Nt();
  }
  return t3.prototype.ready = function() {
    return r(this, void 0, void 0, function() {
      var t4, e3, n3;
      return o(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (null != this.pendingBackendInit) return [2, this.pendingBackendInit.then(function() {
            })];
            if (null != this.backendInstance) return [2];
            t4 = this.getSortedBackends(), e3 = 0, r3.label = 1;
          case 1:
            return e3 < t4.length ? (n3 = t4[e3], [4, this.initializeBackend(n3).success]) : [3, 5];
          case 2:
            return r3.sent() ? [4, this.setBackend(n3)] : [3, 4];
          case 3:
            return r3.sent(), [2];
          case 4:
            return e3++, [3, 1];
          case 5:
            throw new Error("Could not initialize any backends, all backend initializations failed.");
        }
      });
    });
  }, Object.defineProperty(t3.prototype, "backend", { get: function() {
    if (null != this.pendingBackendInit) throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
    if (null == this.backendInstance) {
      var t4 = this.initializeBackendsAndReturnBest(), e3 = t4.name;
      if (t4.asyncInit) throw new Error("The highest priority backend '" + e3 + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
      this.setBackend(e3);
    }
    return this.backendInstance;
  }, enumerable: true, configurable: true }), t3.prototype.backendNames = function() {
    return Object.keys(this.registryFactory);
  }, t3.prototype.findBackend = function(t4) {
    if (!(t4 in this.registry)) {
      if (!(t4 in this.registryFactory)) return null;
      if (this.initializeBackend(t4).asyncInit) return null;
    }
    return this.registry[t4];
  }, t3.prototype.findBackendFactory = function(t4) {
    return t4 in this.registryFactory ? this.registryFactory[t4].factory : null;
  }, t3.prototype.registerBackend = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = 1), t4 in this.registryFactory ? (console.warn(t4 + " backend was already registered. Reusing existing backend factory."), false) : (this.registryFactory[t4] = { factory: e3, priority: n3 }, true);
  }, t3.prototype.setBackend = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            if (null == this.registryFactory[t4]) throw new Error("Backend name '" + t4 + "' not found in registry");
            return this.backendName = t4, null != this.registry[t4] ? [3, 4] : (this.backendInstance = null, e3 = this.initializeBackend(t4), n3 = e3.success, e3.asyncInit ? [4, n3] : [3, 2]);
          case 1:
            return r3 = o3.sent(), [3, 3];
          case 2:
            r3 = n3, o3.label = 3;
          case 3:
            if (!r3) return [2, false];
            o3.label = 4;
          case 4:
            return this.backendInstance = this.registry[t4], this.profiler = new J(this.backendInstance), [2, true];
        }
      });
    });
  }, t3.prototype.initializeBackend = function(t4) {
    var e3 = this, n3 = At.registryFactory[t4];
    if (null == n3) throw new Error("Cannot initialize backend " + t4 + ", no registration found.");
    try {
      var r3 = n3.factory();
      if (Promise.resolve(r3) === r3) {
        var o3 = ++this.pendingBackendInitId, a3 = r3.then(function(n4) {
          return !(o3 < e3.pendingBackendInitId) && (e3.registry[t4] = n4, e3.pendingBackendInit = null, true);
        }).catch(function(n4) {
          return !(o3 < e3.pendingBackendInitId) && (e3.pendingBackendInit = null, console.warn("Initialization of backend " + t4 + " failed"), console.warn(n4.stack || n4.message), false);
        });
        return this.pendingBackendInit = a3, { success: a3, asyncInit: true };
      }
      return this.registry[t4] = r3, { success: true, asyncInit: false };
    } catch (e4) {
      return console.warn("Initialization of backend " + t4 + " failed"), console.warn(e4.stack || e4.message), { success: false, asyncInit: false };
    }
  }, t3.prototype.removeBackend = function(t4) {
    if (!(t4 in this.registryFactory)) throw new Error(t4 + " backend not found in registry");
    this.backendName === t4 && null != this.pendingBackendInit && this.pendingBackendInitId++, t4 in this.registry && (this.registry[t4].dispose(), delete this.registry[t4]), delete this.registryFactory[t4], this.backendName === t4 && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }, t3.prototype.getSortedBackends = function() {
    var t4 = this;
    if (0 === Object.keys(this.registryFactory).length) throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort(function(e3, n3) {
      return t4.registryFactory[n3].priority - t4.registryFactory[e3].priority;
    });
  }, t3.prototype.initializeBackendsAndReturnBest = function() {
    for (var t4 = this.getSortedBackends(), e3 = 0; e3 < t4.length; e3++) {
      var n3 = t4[e3], r3 = this.initializeBackend(n3), o3 = r3.success, a3 = r3.asyncInit;
      if (a3 || o3) return { name: n3, asyncInit: a3 };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }, t3.prototype.moveData = function(t4, e3) {
    this.write(t4, e3, this.readSync(e3));
  }, t3.prototype.tidy = function(t4, e3) {
    var n3, r3 = this, o3 = null;
    if (null == e3) {
      if ("function" != typeof t4) throw new Error("Please provide a function to tidy()");
      e3 = t4;
    } else {
      if ("string" != typeof t4 && !(t4 instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if ("function" != typeof e3) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      o3 = t4;
    }
    return this.scopedRun(function() {
      return r3.startScope(o3);
    }, function() {
      return r3.endScope(n3);
    }, function() {
      return (n3 = e3()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n3;
    });
  }, t3.prototype.scopedRun = function(t4, e3, n3) {
    t4();
    try {
      var r3 = n3();
      return e3(), r3;
    } catch (t5) {
      throw e3(), t5;
    }
  }, t3.prototype.nextTensorId = function() {
    return t3.nextTensorId++;
  }, t3.prototype.nextVariableId = function() {
    return t3.nextVariableId++;
  }, t3.prototype.clone = function(t4) {
    var e3 = ht.make(t4.shape, { dataId: t4.dataId }, t4.dtype);
    return this.addTapeNode([t4], e3, function(t5) {
      return [t5.toFloat()];
    }), e3;
  }, t3.prototype.runKernel = function(t4, e3, n3) {
    var r3, o3 = this, a3 = [], i3 = this.isTapeOn(), s3 = null != this.state.activeScope ? this.state.activeScope.name : "", u3 = function(t5) {
      i3 && (a3 = t5.map(function(t6) {
        return o3.keep(o3.clone(t6));
      }));
    }, l3 = this.state.numBytes, c3 = this.state.numTensors;
    if (this.scopedRun(function() {
      return o3.state.kernelDepth++;
    }, function() {
      return o3.state.kernelDepth--;
    }, function() {
      r3 = o3.ENV.getBool("DEBUG") ? o3.profiler.profileKernel(s3, function() {
        return t4(o3.backend, u3);
      }) : t4(o3.backend, u3);
    }), i3) {
      var h3 = { id: this.state.nextTapeNodeId++, name: s3, inputs: e3, outputs: Array.isArray(r3) ? r3 : [r3], saved: a3 };
      null != n3 && (h3.gradient = function(t5) {
        return n3(t5, a3);
      }), this.state.activeTape.push(h3);
    }
    return this.state.profiling && this.state.activeProfile.kernels.push({ name: s3, bytesAdded: this.state.numBytes - l3, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - c3, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(e3).map(function(t5) {
      return e3[t5].shape;
    }), outputShape: Array.isArray(r3) ? r3.map(function(t5) {
      return t5.shape;
    }) : r3.shape }), r3;
  }, t3.prototype.registerTensor = function(t4, e3) {
    var n3 = this.state.tensorInfo.has(t4.dataId) ? this.state.tensorInfo.get(t4.dataId).refCount : 0;
    if (this.state.numTensors++, "string" === t4.dtype && this.state.numStringTensors++, 0 === n3) {
      this.state.numDataBuffers++;
      var r3 = 0;
      "complex64" !== t4.dtype && "string" !== t4.dtype && (r3 = t4.size * M(t4.dtype)), this.state.tensorInfo.set(t4.dataId, { backend: null != e3 ? e3 : this.backend, dtype: t4.dtype, shape: t4.shape, bytes: r3, refCount: 0 }), this.state.numBytes += r3, null != e3 ? e3.register(t4.dataId, t4.shape, t4.dtype) : this.backend.register(t4.dataId, t4.shape, t4.dtype);
    }
    this.state.tensorInfo.get(t4.dataId).refCount++, t4 instanceof pt || this.track(t4);
  }, t3.prototype.registerVariable = function(t4) {
    if (null != this.state.registeredVariables[t4.name]) throw new Error("Variable with name " + t4.name + " was already registered");
    this.state.registeredVariables[t4.name] = t4;
  }, t3.prototype.disposeTensor = function(t4) {
    if (this.state.tensorInfo.has(t4.dataId)) {
      this.state.numTensors--, "string" === t4.dtype && this.state.numStringTensors--;
      var e3 = this.state.tensorInfo.get(t4.dataId);
      e3.refCount <= 1 ? ("complex64" !== t4.dtype && (this.state.numBytes -= e3.bytes), this.state.numDataBuffers--, e3.backend.disposeData(t4.dataId), this.state.tensorInfo.delete(t4.dataId)) : this.state.tensorInfo.get(t4.dataId).refCount--;
    }
  }, t3.prototype.disposeVariables = function() {
    for (var t4 in this.state.registeredVariables) {
      var e3 = this.state.registeredVariables[t4];
      this.disposeVariable(e3);
    }
  }, t3.prototype.disposeVariable = function(t4) {
    this.disposeTensor(t4), null != this.state.registeredVariables[t4.name] && delete this.state.registeredVariables[t4.name];
  }, t3.prototype.memory = function() {
    var t4 = this.backend.memory();
    return t4.numTensors = this.state.numTensors, t4.numDataBuffers = this.state.numDataBuffers, t4.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t4.unreliable = true, null == t4.reasons && (t4.reasons = []), t4.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t4;
  }, t3.prototype.profile = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3;
      return o(this, function(r3) {
        return this.state.profiling = true, e3 = this.state.numBytes, n3 = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t4(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t5) {
          return t5.totalBytesSnapshot;
        })), this.state.activeProfile.newBytes = this.state.numBytes - e3, this.state.activeProfile.newTensors = this.state.numTensors - n3, [2, this.state.activeProfile];
      });
    });
  }, t3.prototype.isTapeOn = function() {
    return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
  }, t3.prototype.addTapeNode = function(t4, e3, n3) {
    var r3 = {};
    t4.forEach(function(t5, e4) {
      r3[e4] = t5;
    });
    var o3 = { id: this.state.nextTapeNodeId++, name: this.state.activeScope.name, inputs: r3, outputs: [e3], gradient: function(t5) {
      var e4 = n3(t5), r4 = {};
      return e4.forEach(function(t6, e5) {
        r4[e5] = function() {
          return t6;
        };
      }), r4;
    } };
    this.state.activeTape.push(o3);
  }, t3.prototype.keep = function(t4) {
    return t4.kept = true, t4;
  }, t3.prototype.startTape = function() {
    0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;
  }, t3.prototype.endTape = function() {
    this.state.gradientDepth--;
  }, t3.prototype.startScope = function(t4) {
    var e3 = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    t4 && (e3.name = t4), this.state.scopeStack.push(e3), this.state.activeScope = e3;
  }, t3.prototype.endScope = function(t4) {
    for (var e3 = this, n3 = Rt(t4), r3 = new Set(n3.map(function(t5) {
      return t5.id;
    })), o3 = 0; o3 < this.state.activeScope.track.length; o3++) {
      var a3 = this.state.activeScope.track[o3];
      a3.kept || r3.has(a3.id) || a3.dispose();
    }
    var i3 = this.state.scopeStack.pop();
    this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n3.forEach(function(t5) {
      t5.kept || t5.scopeId !== i3.id || e3.track(t5);
    });
  }, t3.prototype.gradients = function(t4, e3, n3, r3) {
    var o3 = this;
    if (void 0 === r3 && (r3 = false), d(e3.length > 0, function() {
      return "gradients() received an empty list of xs.";
    }), null != n3 && "float32" !== n3.dtype) throw new Error("dy must have 'float32' dtype, but has '" + n3.dtype + "'");
    var a3 = this.scopedRun(function() {
      return o3.startTape();
    }, function() {
      return o3.endTape();
    }, function() {
      return o3.tidy("forward", t4);
    });
    d(a3 instanceof ht, function() {
      return "The result y returned by f() must be a tensor.";
    });
    var i3 = function(t5, e4, n4) {
      for (var r4 = {}, o4 = {}, a4 = 0; a4 < e4.length; a4++) r4[e4[a4].id] = true;
      for (a4 = 0; a4 < t5.length; a4++) {
        var i4 = (d3 = t5[a4]).inputs;
        for (var s3 in i4) {
          for (var u3 = i4[s3], l3 = false, c3 = 0; c3 < e4.length; c3++) if (r4[u3.id]) {
            d3.outputs.forEach(function(t6) {
              return r4[t6.id] = true;
            }), l3 = true, o4[d3.id] = true;
            break;
          }
          if (l3) break;
        }
      }
      var h3 = {};
      h3[n4.id] = true;
      var p3 = {};
      for (a4 = t5.length - 1; a4 >= 0; a4--) for (i4 = (d3 = t5[a4]).inputs, c3 = 0; c3 < d3.outputs.length; c3++) if (h3[d3.outputs[c3].id]) {
        for (var s3 in i4) h3[i4[s3].id] = true, p3[d3.id] = true;
        break;
      }
      var f3 = [];
      for (a4 = 0; a4 < t5.length; a4++) {
        var d3;
        if (o4[(d3 = t5[a4]).id] && p3[d3.id]) {
          var v2 = {};
          for (var s3 in d3.inputs) {
            var m3 = d3.inputs[s3];
            r4[m3.id] && (v2[s3] = m3);
          }
          var g2 = Object.assign({}, d3);
          g2.inputs = v2, g2.outputs = d3.outputs, f3.push(g2);
        }
      }
      return f3;
    }(this.state.activeTape, e3, a3);
    if (!r3 && 0 === i3.length && e3.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", function() {
      var t5, r4, s3 = {};
      s3[a3.id] = null == n3 ? (t5 = a3.shape, r4 = $(y(t5), "float32"), ht.make(t5, { values: r4 })) : n3, function(t6, e4, n4) {
        for (var r5 = function(r6) {
          var o5 = e4[r6], a4 = [];
          if (o5.outputs.forEach(function(e5) {
            var n5 = t6[e5.id];
            if (null != n5) a4.push(n5);
            else {
              var r7 = ht.make(e5.shape, { values: j(e5.size, e5.dtype) }, e5.dtype);
              a4.push(r7);
            }
          }), null == o5.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + o5.name + ".");
          var i4 = o5.gradient(1 === o5.outputs.length ? a4[0] : a4), s4 = function(e5) {
            if (!(e5 in i4)) throw new Error("Cannot backprop through input " + e5 + ". Available gradients found: " + Object.keys(i4) + ".");
            var r7 = n4(function() {
              return i4[e5]();
            });
            if ("float32" !== r7.dtype) throw new Error("Error in gradient for op " + o5.name + ". The gradient of input " + e5 + " must have 'float32' dtype, but has '" + r7.dtype + "'");
            var a5 = o5.inputs[e5];
            if (!x(r7.shape, a5.shape)) throw new Error("Error in gradient for op " + o5.name + ". The gradient of input '" + e5 + "' has shape '" + r7.shape + "', which does not match the shape of the input '" + a5.shape + "'");
            if (null == t6[a5.id]) t6[a5.id] = r7;
            else {
              var s5 = t6[a5.id];
              t6[a5.id] = s5.add(r7), s5.dispose();
            }
          };
          for (var u4 in o5.inputs) s4(u4);
        }, o4 = e4.length - 1; o4 >= 0; o4--) r5(o4);
      }(s3, i3, function(t6) {
        return o3.tidy(t6);
      });
      var u3 = e3.map(function(t6) {
        return s3[t6.id];
      });
      return 0 === o3.state.gradientDepth && (o3.state.activeTape.forEach(function(t6) {
        for (var e4 in t6.saved) t6.saved[e4].dispose();
      }), o3.state.activeTape = null), { value: a3, grads: u3 };
    });
  }, t3.prototype.customGrad = function(t4) {
    var e3 = this;
    return d(z(t4), function() {
      return "The f passed in customGrad(f) must be a function.";
    }), function() {
      for (var n3, r3 = [], o3 = 0; o3 < arguments.length; o3++) r3[o3] = arguments[o3];
      d(r3.every(function(t5) {
        return t5 instanceof ht;
      }), function() {
        return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
      });
      var a3 = {};
      return r3.forEach(function(t5, e4) {
        a3[e4] = t5;
      }), e3.runKernel(function(e4, o4) {
        return d((n3 = t4.apply(void 0, r3.concat([o4]))).value instanceof ht, function() {
          return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
        }), d(z(n3.gradFunc), function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
        }), n3.value;
      }, a3, function(t5, e4) {
        var o4 = n3.gradFunc(t5, e4), a4 = Array.isArray(o4) ? o4 : [o4];
        d(a4.length === r3.length, function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
        }), d(a4.every(function(t6) {
          return t6 instanceof ht;
        }), function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
        });
        var i3 = {};
        return a4.forEach(function(t6, e5) {
          i3[e5] = function() {
            return t6;
          };
        }), i3;
      });
    };
  }, t3.prototype.write = function(t4, e3, n3) {
    var r3 = this.state.tensorInfo.get(e3), o3 = r3.backend;
    if (t4 = t4 || this.backend, "string" === r3.dtype) {
      var a3 = B(n3);
      this.state.numBytes += a3 - r3.bytes, r3.bytes = a3;
    }
    t4 !== o3 && (o3.disposeData(e3), r3.backend = t4, t4.register(e3, r3.shape, r3.dtype)), t4.write(e3, n3);
  }, t3.prototype.readSync = function(t4) {
    return this.state.tensorInfo.get(t4).backend.readSync(t4);
  }, t3.prototype.read = function(t4) {
    return this.state.tensorInfo.get(t4).backend.read(t4);
  }, t3.prototype.fromPixels = function(t4, e3) {
    return this.backend.fromPixels(t4, e3);
  }, t3.prototype.time = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3;
      return o(this, function(r3) {
        switch (r3.label) {
          case 0:
            return e3 = K(), [4, this.backend.time(t4)];
          case 1:
            return (n3 = r3.sent()).wallMs = K() - e3, [2, n3];
        }
      });
    });
  }, t3.prototype.track = function(t4) {
    return null != this.state.activeScope && (t4.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t4)), t4;
  }, Object.defineProperty(t3.prototype, "registeredVariables", { get: function() {
    return this.state.registeredVariables;
  }, enumerable: true, configurable: true }), t3.prototype.reset = function() {
    for (var t4 in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Nt(), this.registry) this.registry[t4].dispose(), delete this.registry[t4];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }, t3.nextTensorId = 0, t3.nextVariableId = 0, t3;
}();
var At = function() {
  var t3 = function() {
    if (null == It) {
      var t4 = void 0;
      if ("undefined" != typeof window) t4 = window;
      else if ("undefined" != typeof global) t4 = global;
      else if ("undefined" != typeof process) t4 = process;
      else {
        if ("undefined" == typeof self) throw new Error("Could not find a global object");
        t4 = self;
      }
      It = t4;
    }
    return It;
  }();
  if (null == t3._tfengine) {
    var e3 = new a(t3);
    t3._tfengine = new kt(e3);
  }
  return u(t3._tfengine.ENV), ut = function() {
    return t3._tfengine;
  }, t3._tfengine;
}();
function Tt() {
  return "undefined" != typeof window || "undefined" != typeof WorkerGlobalScope;
}
s.registerFlag("DEBUG", function() {
  return false;
}, function(t3) {
  t3 && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
}), s.registerFlag("IS_BROWSER", function() {
  return Tt();
}), s.registerFlag("IS_NODE", function() {
  return "undefined" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;
}), s.registerFlag("IS_CHROME", function() {
  return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
}), s.registerFlag("PROD", function() {
  return false;
}), s.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function() {
  return s.getBool("DEBUG");
}), s.registerFlag("DEPRECATION_WARNINGS_ENABLED", function() {
  return true;
}), s.registerFlag("IS_TEST", function() {
  return false;
});
var Dt = {};
var _t = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function Ot(t3, e3) {
  Dt[t3] = e3;
}
function Ft(t3) {
  t3 in Dt || (Dt[t3] = function(t4) {
    if (1 !== t4 && 2 !== t4) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    var e4 = function(t5) {
      if ("undefined" != typeof OffscreenCanvas && 2 === t5) return new OffscreenCanvas(300, 150);
      if ("undefined" != typeof document) return document.createElement("canvas");
      throw new Error("Cannot create a canvas in this context");
    }(t4);
    if (e4.addEventListener("webglcontextlost", function(e5) {
      e5.preventDefault(), delete Dt[t4];
    }, false), 1 === t4) return e4.getContext("webgl", _t) || e4.getContext("experimental-webgl", _t);
    return e4.getContext("webgl2", _t);
  }(t3));
  var e3 = Dt[t3];
  return e3.isContextLost() ? (delete Dt[t3], Ft(t3)) : (e3.disable(e3.DEPTH_TEST), e3.disable(e3.STENCIL_TEST), e3.disable(e3.BLEND), e3.disable(e3.DITHER), e3.disable(e3.POLYGON_OFFSET_FILL), e3.disable(e3.SAMPLE_COVERAGE), e3.enable(e3.SCISSOR_TEST), e3.enable(e3.CULL_FACE), e3.cullFace(e3.BACK), Dt[t3]);
}
function Mt(t3, e3, n3) {
  var r3 = n3();
  return e3 && function(t4) {
    var e4 = t4.getError();
    if (e4 !== t4.NO_ERROR) throw new Error("WebGL Error: " + Wt(t4, e4));
  }(t3), r3;
}
var Bt = 596e-10;
var Pt = 65504;
function Lt(t3) {
  return !!(s.getBool("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === t3 || Bt < Math.abs(t3) && Math.abs(t3) < Pt);
}
function Wt(t3, e3) {
  switch (e3) {
    case t3.NO_ERROR:
      return "NO_ERROR";
    case t3.INVALID_ENUM:
      return "INVALID_ENUM";
    case t3.INVALID_VALUE:
      return "INVALID_VALUE";
    case t3.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case t3.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case t3.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case t3.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return "Unknown error code " + e3;
  }
}
function Ut(t3, e3, n3) {
  return le(t3, e3, function() {
    return t3.getExtension(n3);
  }, 'Extension "' + n3 + '" not supported on this browser.');
}
function zt(t3, e3, n3) {
  var r3 = le(t3, e3, function() {
    return t3.createShader(t3.VERTEX_SHADER);
  }, "Unable to create vertex WebGLShader.");
  if (Mt(t3, e3, function() {
    return t3.shaderSource(r3, n3);
  }), Mt(t3, e3, function() {
    return t3.compileShader(r3);
  }), false === t3.getShaderParameter(r3, t3.COMPILE_STATUS)) throw console.log(t3.getShaderInfoLog(r3)), new Error("Failed to compile vertex shader.");
  return r3;
}
function Vt(t3, e3, n3) {
  var r3 = le(t3, e3, function() {
    return t3.createShader(t3.FRAGMENT_SHADER);
  }, "Unable to create fragment WebGLShader.");
  if (Mt(t3, e3, function() {
    return t3.shaderSource(r3, n3);
  }), Mt(t3, e3, function() {
    return t3.compileShader(r3);
  }), false === t3.getShaderParameter(r3, t3.COMPILE_STATUS)) throw function(t4, e4) {
    var n4 = Ht.exec(e4);
    if (null == n4) return console.log("Couldn't parse line number in error: " + e4), void console.log(t4);
    for (var r4 = +n4[1], o3 = t4.split("\n"), a3 = o3.length.toString().length + 2, i3 = o3.map(function(t5, e5) {
      return E((e5 + 1).toString(), a3) + t5;
    }), s3 = 0, u3 = 0; u3 < i3.length; u3++) s3 = Math.max(i3[u3].length, s3);
    var l3 = i3.slice(0, r4 - 1), c3 = i3.slice(r4 - 1, r4), h3 = i3.slice(r4);
    console.log(l3.join("\n")), console.log(e4.split("\n")[0]), console.log("%c " + E(c3[0], s3), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(h3.join("\n"));
  }(n3, t3.getShaderInfoLog(r3)), new Error("Failed to compile fragment shader.");
  return r3;
}
var Gt;
var qt;
var Ht = /ERROR: [0-9]+:([0-9]+):/g;
function $t(t3, e3) {
  return le(t3, e3, function() {
    return t3.createProgram();
  }, "Unable to create WebGLProgram.");
}
function jt(t3, e3, n3) {
  if (Mt(t3, e3, function() {
    return t3.linkProgram(n3);
  }), false === t3.getProgramParameter(n3, t3.LINK_STATUS)) throw console.log(t3.getProgramInfoLog(n3)), new Error("Failed to link vertex and fragment shaders.");
}
function Kt(t3, e3, n3) {
  if (Mt(t3, e3, function() {
    return t3.validateProgram(n3);
  }), false === t3.getProgramParameter(n3, t3.VALIDATE_STATUS)) throw console.log(t3.getProgramInfoLog(n3)), new Error("Shader program validation failed.");
}
function Xt(t3, e3, n3) {
  var r3 = le(t3, e3, function() {
    return t3.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Mt(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, r3);
  }), Mt(t3, e3, function() {
    return t3.bufferData(t3.ARRAY_BUFFER, n3, t3.STATIC_DRAW);
  }), r3;
}
function Yt(t3, e3, n3) {
  var r3 = le(t3, e3, function() {
    return t3.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Mt(t3, e3, function() {
    return t3.bindBuffer(t3.ELEMENT_ARRAY_BUFFER, r3);
  }), Mt(t3, e3, function() {
    return t3.bufferData(t3.ELEMENT_ARRAY_BUFFER, n3, t3.STATIC_DRAW);
  }), r3;
}
function Qt(t3, e3) {
  return le(t3, e3, function() {
    return t3.createTexture();
  }, "Unable to create WebGLTexture.");
}
function Jt(t3, e3) {
  var n3 = s.getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (t3 <= 0 || e3 <= 0) {
    var r3 = "[" + t3 + "x" + e3 + "]";
    throw new Error("Requested texture size " + r3 + " is invalid.");
  }
  if (t3 > n3 || e3 > n3) {
    r3 = "[" + t3 + "x" + e3 + "]";
    throw new Error("Requested texture size " + r3 + " greater than WebGL maximum on this browser / GPU " + ("[" + n3 + "x" + n3 + "]") + ".");
  }
}
function Zt(t3, e3) {
  return le(t3, e3, function() {
    return t3.createFramebuffer();
  }, "Unable to create WebGLFramebuffer.");
}
function te(t3, e3, n3, r3, o3, a3, i3, s3) {
  var u3 = t3.getAttribLocation(n3, r3);
  return -1 !== u3 && (Mt(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, o3);
  }), Mt(t3, e3, function() {
    return t3.vertexAttribPointer(u3, a3, t3.FLOAT, false, i3, s3);
  }), Mt(t3, e3, function() {
    return t3.enableVertexAttribArray(u3);
  }), true);
}
function ee(t3, e3, n3, r3) {
  ce(t3, r3), Mt(t3, e3, function() {
    return t3.activeTexture(t3.TEXTURE0 + r3);
  }), Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  });
}
function ne(t3, e3, n3, r3) {
  return le(t3, e3, function() {
    return t3.getUniformLocation(n3, r3);
  }, 'uniform "' + r3 + '" not present in program.');
}
function re(t3, e3, n3) {
  return t3.getUniformLocation(e3, n3);
}
function oe(t3, e3, n3, r3, o3, a3) {
  Mt(t3, e3, function() {
    return ee(t3, e3, r3, a3);
  }), Mt(t3, e3, function() {
    return t3.uniform1i(o3, a3);
  });
}
function ae(t3, e3, n3, r3) {
  Mt(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, r3);
  }), Mt(t3, e3, function() {
    return t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, n3, 0);
  });
}
function ie(t3, e3, n3) {
  Mt(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, n3);
  }), Mt(t3, e3, function() {
    return t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, null, 0);
  });
}
function se(t3) {
  var e3 = t3.checkFramebufferStatus(t3.FRAMEBUFFER);
  if (e3 !== t3.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + ue(t3, e3));
}
function ue(t3, e3) {
  switch (e3) {
    case t3.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case t3.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case t3.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case t3.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return "unknown error " + e3;
  }
}
function le(t3, e3, n3, r3) {
  var o3 = Mt(t3, e3, function() {
    return n3();
  });
  if (null == o3) throw new Error(r3);
  return o3;
}
function ce(t3, e3) {
  var n3 = t3.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r3 = e3 + t3.TEXTURE0;
  if (r3 < t3.TEXTURE0 || r3 > n3) throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n3 + "]") + ".");
}
function he(t3, e3) {
  return void 0 === e3 && (e3 = 2), y(t3.slice(0, t3.length - e3));
}
function pe(t3) {
  if (0 === t3.length) throw Error("Cannot get rows and columns of an empty shape array.");
  return [t3.length > 1 ? t3[t3.length - 2] : 1, t3[t3.length - 1]];
}
function fe(t3) {
  var e3 = [1, 1, 1];
  return 0 === t3.length || 1 === t3.length && 1 === t3[0] || (e3 = [he(t3)].concat(pe(t3))), e3;
}
function de(t3, e3) {
  var n3;
  void 0 === e3 && (e3 = false);
  var r3 = s.getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (e3 && (r3 *= 2, 1 === (t3 = t3.map(function(e4, n4) {
    return n4 >= t3.length - 2 ? p(t3[n4]) : t3[n4];
  })).length && (t3 = [2, t3[0]])), 2 !== t3.length) {
    var o3 = N(t3);
    t3 = o3.newShape;
  }
  var a3 = y(t3);
  if (t3.length <= 1 && a3 <= r3) return [1, a3];
  if (2 === t3.length && t3[0] <= r3 && t3[1] <= r3) return t3;
  if (3 === t3.length && t3[0] * t3[1] <= r3 && t3[2] <= r3) return [t3[0] * t3[1], t3[2]];
  if (3 === t3.length && t3[0] <= r3 && t3[1] * t3[2] <= r3) return [t3[0], t3[1] * t3[2]];
  if (4 === t3.length && t3[0] * t3[1] * t3[2] <= r3 && t3[3] <= r3) return [t3[0] * t3[1] * t3[2], t3[3]];
  if (4 === t3.length && t3[0] <= r3 && t3[1] * t3[2] * t3[3] <= r3) return [t3[0], t3[1] * t3[2] * t3[3]];
  if (e3) {
    var i3 = he(t3), u3 = 2, l3 = 2;
    return t3.length && (u3 = (n3 = pe(t3))[0], l3 = n3[1]), C(a3 = i3 * (u3 / 2) * (l3 / 2)).map(function(t4) {
      return 2 * t4;
    });
  }
  return C(a3);
}
function ve(t3) {
  return t3 % 2 == 0;
}
function me(t3, e3) {
  if (x(t3 = t3.slice(-2), e3 = e3.slice(-2))) return true;
  if (!t3.length || !e3.length) return true;
  if (0 === t3[0] || 0 === t3[1] || 0 === e3[0] || 0 === e3[1]) return true;
  if (t3.length !== e3.length) {
    var n3 = t3.slice(-1)[0], r3 = e3.slice(-1)[0];
    if (n3 === r3) return true;
    if (ve(n3) && ve(r3) && (1 === t3[0] || 1 === e3[0])) return true;
  }
  return t3[1] === e3[1] && ve(t3[0]) && ve(e3[0]);
}
function ge(t3) {
  if (null == Gt) {
    var e3 = Ft(t3);
    Gt = e3.getParameter(e3.MAX_TEXTURE_SIZE);
  }
  return Gt;
}
function ye(t3) {
  if (null == qt) {
    var e3 = Ft(t3);
    qt = e3.getParameter(e3.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, qt);
}
function xe(t3) {
  if (0 === t3) return 0;
  var e3 = Ft(t3);
  return be(e3, "EXT_disjoint_timer_query_webgl2") && 2 === t3 ? 2 : be(e3, "EXT_disjoint_timer_query") ? 1 : 0;
}
function be(t3, e3) {
  return null != t3.getExtension(e3);
}
function we(t3) {
  try {
    if (null != Ft(t3)) return true;
  } catch (t4) {
    return false;
  }
  return false;
}
function Ce(t3) {
  if (0 === t3) return false;
  var e3 = Ft(t3);
  if (1 === t3) {
    if (!be(e3, "OES_texture_float")) return false;
  } else if (!be(e3, "EXT_color_buffer_float")) return false;
  return Re(e3, t3);
}
function Ee(t3) {
  if (0 === t3) return false;
  var e3 = Ft(t3);
  if (1 === t3) {
    if (!be(e3, "OES_texture_float")) return false;
    if (!be(e3, "WEBGL_color_buffer_float")) return false;
  } else if (!be(e3, "EXT_color_buffer_float")) return false;
  return Re(e3, t3);
}
function Re(t3, e3) {
  var n3 = t3.createFramebuffer(), r3 = t3.createTexture();
  t3.bindTexture(t3.TEXTURE_2D, r3);
  var o3 = 2 === e3 ? t3.RGBA32F : t3.RGBA;
  t3.texImage2D(t3.TEXTURE_2D, 0, o3, 1, 1, 0, t3.RGBA, t3.FLOAT, null), t3.bindFramebuffer(t3.FRAMEBUFFER, n3), t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, r3, 0);
  var a3 = t3.checkFramebufferStatus(t3.FRAMEBUFFER) === t3.FRAMEBUFFER_COMPLETE;
  return t3.bindTexture(t3.TEXTURE_2D, null), t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteTexture(r3), t3.deleteFramebuffer(n3), a3;
}
function Ie(t3) {
  return 2 === t3 && null != Ft(t3).fenceSync;
}
var Se = Object.freeze({ callAndCheck: Mt, canBeRepresented: Lt, getWebGLErrorMessage: Wt, getExtensionOrThrow: Ut, createVertexShader: zt, createFragmentShader: Vt, createProgram: $t, linkProgram: jt, validateProgram: Kt, createStaticVertexBuffer: Xt, createStaticIndexBuffer: Yt, getNumChannels: function() {
  return 2 === s.getNumber("WEBGL_VERSION") ? 1 : 4;
}, createTexture: Qt, validateTextureSize: Jt, createFramebuffer: Zt, bindVertexBufferToProgramAttribute: te, bindTextureUnit: ee, unbindTextureUnit: function(t3, e3, n3) {
  ce(t3, n3), Mt(t3, e3, function() {
    return t3.activeTexture(t3.TEXTURE0 + n3);
  }), Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}, getProgramUniformLocationOrThrow: ne, getProgramUniformLocation: re, bindTextureToProgramUniformSampler: oe, bindCanvasToFramebuffer: function(t3, e3) {
  Mt(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, null);
  }), Mt(t3, e3, function() {
    return t3.viewport(0, 0, t3.canvas.width, t3.canvas.height);
  }), Mt(t3, e3, function() {
    return t3.scissor(0, 0, t3.canvas.width, t3.canvas.height);
  });
}, bindColorTextureToFramebuffer: ae, unbindColorTextureFromFramebuffer: ie, validateFramebuffer: se, getFramebufferErrorMessage: ue, getBatchDim: he, getRowsCols: pe, getShapeAs3D: fe, getTextureShapeFromLogicalShape: de, isReshapeFree: me, get MAX_TEXTURE_SIZE() {
  return Gt;
}, get MAX_TEXTURES_IN_SHADER() {
  return qt;
}, getWebGLMaxTextureSize: ge, getMaxTexturesInShader: ye, getWebGLDisjointQueryTimerVersion: xe, isWebGLVersionEnabled: we, isRenderToFloatTextureEnabled: Ce, isDownloadFloatTextureEnabled: Ee, isWebGLFenceEnabled: Ie });
function Ne() {
  s.set("PROD", true);
}
function ke() {
  s.set("DEBUG", true);
}
function Ae() {
  s.set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function Te(t3) {
  s.getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t3 + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function De() {
  At.disposeVariables();
}
function _e() {
  return At.memory();
}
function Oe(t3) {
  return At.profile(t3);
}
function Fe(t3, e3) {
  return At.tidy(t3, e3);
}
function Me(t3) {
  Rt(t3).forEach(function(t4) {
    return t4.dispose();
  });
}
function Be(t3) {
  return At.keep(t3);
}
function Pe(t3) {
  return At.time(t3);
}
function Le(t3) {
  return At.setBackend(t3);
}
function We() {
  return At.ready();
}
function Ue() {
  return At.backendName;
}
function ze(t3) {
  At.removeBackend(t3);
}
function Ve(t3) {
  return At.findBackend(t3);
}
function Ge(t3) {
  return At.findBackendFactory(t3);
}
function qe(t3, e3, n3) {
  return void 0 === n3 && (n3 = 1), At.registerBackend(t3, e3, n3);
}
function He() {
  return At.backend;
}
function $e(t3, e3) {
  s.setPlatform(t3, e3);
}
function je() {
  for (var t3 = [], e3 = 0; e3 < arguments.length; e3++) t3[e3] = arguments[e3];
  s.getBool("IS_TEST") || console.warn.apply(console, t3);
}
function Ke(t3) {
  var e3 = t3;
  if (F(t3)) return [t3.length];
  if (!Array.isArray(t3)) return [];
  for (var n3 = []; Array.isArray(e3) || F(e3); ) n3.push(e3.length), e3 = e3[0];
  return Array.isArray(t3) && s.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && function t4(e4, n4, r3) {
    r3 = r3 || [];
    if (!Array.isArray(e4) && !F(e4)) return void d(0 === n4.length, function() {
      return "Element arr[" + r3.join("][") + "] is a primitive, but should be an array/TypedArray of " + n4[0] + " elements";
    });
    d(n4.length > 0, function() {
      return "Element arr[" + r3.join("][") + "] should be a primitive, but is an array of " + e4.length + " elements";
    });
    d(e4.length === n4[0], function() {
      return "Element arr[" + r3.join("][") + "] should have " + n4[0] + " elements, but has " + e4.length + " elements";
    });
    var o3 = n4.slice(1);
    for (var a3 = 0; a3 < e4.length; ++a3) t4(e4[a3], o3, r3.concat(a3));
  }(t3, n3, []), n3;
}
function Xe(t3, e3, n3, r3) {
  if (null != t3 && ("numeric" !== t3 && t3 !== e3 || "numeric" === t3 && "string" === e3)) throw new Error("Argument '" + n3 + "' passed to '" + r3 + "' must be " + t3 + " tensor, but got " + e3 + " tensor");
}
function Ye(t3, e3, n3, r3) {
  if (void 0 === r3 && (r3 = "numeric"), t3 instanceof ht) return Xe(r3, t3.dtype, e3, n3), t3;
  var o3 = U(t3);
  if ("string" !== o3 && ["bool", "int32", "float32"].indexOf(r3) >= 0 && (o3 = r3), Xe(r3, o3, e3, n3), null == t3 || !F(t3) && !Array.isArray(t3) && "number" != typeof t3 && "boolean" != typeof t3 && "string" != typeof t3) {
    var a3 = null == t3 ? "null" : t3.constructor.name;
    throw new Error("Argument '" + e3 + "' passed to '" + n3 + "' must be a Tensor or TensorLike, but got '" + a3 + "'");
  }
  var i3 = Ke(t3);
  F(t3) || Array.isArray(t3) || (t3 = [t3]);
  var u3 = "string" !== o3 ? q(t3, o3, s.getBool("DEBUG")) : g(t3);
  return ht.make(i3, { values: u3 }, o3);
}
function Qe(t3, e3, n3, r3) {
  if (void 0 === r3 && (r3 = "numeric"), !Array.isArray(t3)) throw new Error("Argument " + e3 + " passed to " + n3 + " must be a `Tensor[]` or `TensorLike[]`");
  return t3.map(function(t4, r4) {
    return Ye(t4, e3 + "[" + r4 + "]", n3);
  }, r3);
}
function Je(t3, e3) {
  for (var n3 = 0; n3 < t3.length; ++n3) if (t3[t3.length - n3 - 1] !== e3 - 1 - n3) return false;
  return true;
}
function Ze(t3, e3, n3) {
  for (var r3 = t3.length + e3.length, o3 = [], a3 = 0, i3 = 0, s3 = 0; s3 < r3; s3++) -1 === n3.indexOf(s3) ? o3.push(t3[a3++]) : o3.push(e3[i3++]);
  return o3;
}
function tn(t3, e3) {
  for (var n3 = [], r3 = t3.length, o3 = 0; o3 < r3; o3++) -1 === e3.indexOf(o3) && n3.push(t3[o3]);
  return [n3, e3.map(function(e4) {
    return t3[e4];
  })];
}
function en(t3, e3) {
  return Ze(t3, e3.map(function(t4) {
    return 1;
  }), e3);
}
function nn(t3, e3, n3) {
  d(Je(e3, n3), function() {
    return t3 + " supports only inner-most axes for now. Got axes " + e3 + " and rank-" + n3 + " input.";
  });
}
function rn(t3, e3) {
  if (Je(t3, e3)) return null;
  for (var n3 = [], r3 = 0; r3 < e3; ++r3) -1 === t3.indexOf(r3) && n3.push(r3);
  return t3.forEach(function(t4) {
    return n3.push(t4);
  }), n3;
}
function on(t3) {
  return t3.map(function(t4, e3) {
    return [e3, t4];
  }).sort(function(t4, e3) {
    return t4[1] - e3[1];
  }).map(function(t4) {
    return t4[0];
  });
}
function an(t3, e3) {
  for (var n3 = [], r3 = e3 - t3; r3 < e3; ++r3) n3.push(r3);
  return n3;
}
function sn(t3, e3) {
  var n3 = t3[0].length;
  t3.forEach(function(t4, e4) {
    d(t4.length === n3, function() {
      return "Error in concat" + n3 + "D: rank of tensors[" + e4 + "] must be the same as the rank of the rest (" + n3 + ")";
    });
  }), d(e3 >= 0 && e3 < n3, function() {
    return "Error in concat" + n3 + "D: axis must be between 0 and " + (n3 - 1) + ".";
  });
  var r3 = t3[0];
  t3.forEach(function(t4, o3) {
    for (var a3 = 0; a3 < n3; a3++) d(a3 === e3 || t4[a3] === r3[a3], function() {
      return "Error in concat" + n3 + "D: Shape of tensors[" + o3 + "] (" + t4 + ") does not match the shape of the rest (" + r3 + ") along the non-concatenated axis " + o3 + ".";
    });
  });
}
function un(t3, e3) {
  for (var n3 = t3[0].slice(), r3 = 1; r3 < t3.length; r3++) n3[e3] += t3[r3][e3];
  return n3;
}
function ln(t3) {
  var e3 = Object.keys(t3);
  if (1 !== e3.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + e3.length + " keys.");
  var n3 = e3[0], r3 = t3[n3];
  n3.endsWith("_") && (n3 = n3.substring(0, n3.length - 1));
  var o3 = function() {
    for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
    At.startScope(n3);
    try {
      var o4 = r3.apply(void 0, t4);
      return o4 instanceof Promise && console.error("Cannot return a Promise inside of tidy."), At.endScope(o4), o4;
    } catch (t5) {
      throw At.endScope(null), t5;
    }
  };
  return Object.defineProperty(o3, "name", { value: n3, configurable: true }), o3;
}
s.registerFlag("HAS_WEBGL", function() {
  return s.getNumber("WEBGL_VERSION") > 0;
}), s.registerFlag("WEBGL_VERSION", function() {
  return we(2) ? 2 : we(1) ? 1 : 0;
}), s.registerFlag("WEBGL_BUFFER_SUPPORTED", function() {
  return 2 === s.get("WEBGL_VERSION");
}), s.registerFlag("WEBGL_CPU_FORWARD", function() {
  return true;
}), s.registerFlag("WEBGL_PACK", function() {
  return s.getBool("HAS_WEBGL");
}), s.registerFlag("WEBGL_PACK_NORMALIZATION", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_PACK_CLIP", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_PACK_DEPTHWISECONV", function() {
  return false;
}), s.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_PACK_REDUCE", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_LAZILY_UNPACK", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_CONV_IM2COL", function() {
  return s.getBool("WEBGL_PACK");
}), s.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function() {
  return ge(s.getNumber("WEBGL_VERSION"));
}), s.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function() {
  return ye(s.getNumber("WEBGL_VERSION"));
}), s.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", function() {
  var t3 = s.getNumber("WEBGL_VERSION");
  return 0 === t3 ? 0 : xe(t3);
}), s.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", function() {
  return s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && (t3 = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t3) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t3.substr(0, 4))));
  var t3;
}), s.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function() {
  return Ce(s.getNumber("WEBGL_VERSION"));
}), s.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function() {
  return Ee(s.getNumber("WEBGL_VERSION"));
}), s.registerFlag("WEBGL_FENCE_API_ENABLED", function() {
  return Ie(s.getNumber("WEBGL_VERSION"));
}), s.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function() {
  return s.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
}), ct = Te;
var cn = ln({ complex_: function(t3, e3) {
  var n3 = Ye(t3, "real", "complex"), r3 = Ye(e3, "imag", "complex");
  return v(n3.shape, r3.shape, "real and imag shapes, " + n3.shape + " and " + r3.shape + ", must match in call to tf.complex()."), At.runKernel(function(t4) {
    return t4.complex(n3, r3);
  }, { $real: n3, $imag: r3 });
} });
var hn = ln({ real_: function(t3) {
  var e3 = Ye(t3, "input", "real");
  return At.runKernel(function(t4) {
    return t4.real(e3);
  }, { $input: e3 });
} });
var pn = ln({ imag_: function(t3) {
  var e3 = Ye(t3, "input", "imag");
  return At.runKernel(function(t4) {
    return t4.imag(e3);
  }, { $input: e3 });
} });
function fn(t3, e3, n3) {
  return dn(t3, e3, Ke(t3), n3);
}
function dn(t3, e3, n3, r3) {
  if (null == r3 && (r3 = U(t3)), "complex64" === r3) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!F(t3) && !Array.isArray(t3) && "number" != typeof t3 && "boolean" != typeof t3 && "string" != typeof t3) throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (null != e3) {
    X(e3);
    var o3 = y(e3), a3 = y(n3);
    d(o3 === a3, function() {
      return "Based on the provided shape, [" + e3 + "], the tensor should have " + o3 + " values but has " + a3;
    });
    for (var i3 = 0; i3 < n3.length; ++i3) {
      var u3 = n3[i3], l3 = i3 !== n3.length - 1 || u3 !== y(e3.slice(i3));
      d(n3[i3] === e3[i3] || !l3, function() {
        return "Error creating a new Tensor. Inferred shape (" + n3 + ") does not match the provided shape (" + e3 + "). ";
      });
    }
  }
  return F(t3) || Array.isArray(t3) || (t3 = [t3]), e3 = e3 || n3, t3 = "string" !== r3 ? q(t3, r3, s.getBool("DEBUG")) : g(t3), ht.make(e3, { values: t3 }, r3);
}
function vn(t3, e3) {
  if ((F(t3) || Array.isArray(t3)) && "complex64" !== e3) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  return dn(t3, [], [], e3);
}
function mn(t3, e3) {
  m(t3);
  var n3 = Ke(t3);
  if (1 !== n3.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return dn(t3, null, n3, e3);
}
function gn(t3, e3, n3) {
  if (m(t3), null != e3 && 2 !== e3.length) throw new Error("tensor2d() requires shape to have two numbers");
  var r3 = Ke(t3);
  if (2 !== r3.length && 1 !== r3.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return dn(t3, e3, r3, n3);
}
function yn(t3, e3, n3) {
  if (m(t3), null != e3 && 3 !== e3.length) throw new Error("tensor3d() requires shape to have three numbers");
  var r3 = Ke(t3);
  if (3 !== r3.length && 1 !== r3.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return dn(t3, e3, r3, n3);
}
function xn(t3, e3, n3) {
  if (m(t3), null != e3 && 4 !== e3.length) throw new Error("tensor4d() requires shape to have four numbers");
  var r3 = Ke(t3);
  if (4 !== r3.length && 1 !== r3.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return dn(t3, e3, r3, n3);
}
function bn(t3, e3, n3) {
  if (m(t3), null != e3 && 5 !== e3.length) throw new Error("tensor5d() requires shape to have five numbers");
  var r3 = Ke(t3);
  if (5 !== r3.length && 1 !== r3.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return dn(t3, e3, r3, n3);
}
function wn(t3, e3, n3) {
  if (m(t3), null != e3 && 6 !== e3.length) throw new Error("tensor6d() requires shape to have six numbers");
  var r3 = Ke(t3);
  if (6 !== r3.length && 1 !== r3.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return dn(t3, e3 = e3 || r3, r3, n3);
}
function Cn(t3, e3) {
  if (void 0 === e3 && (e3 = "float32"), "complex64" === e3) {
    var n3 = Cn(t3, "float32"), r3 = En(t3, "float32");
    return cn(n3, r3);
  }
  var o3 = $(y(t3), e3);
  return ht.make(t3, { values: o3 }, e3);
}
function En(t3, e3) {
  if (void 0 === e3 && (e3 = "float32"), "complex64" === e3) {
    var n3 = En(t3, "float32"), r3 = En(t3, "float32");
    return cn(n3, r3);
  }
  var o3 = j(y(t3), e3);
  return ht.make(t3, { values: o3 }, e3);
}
function Rn(t3, e3, n3) {
  return At.runKernel(function(r3) {
    return r3.fill(t3, e3, n3);
  }, {});
}
function In(t3, e3, n3) {
  if (n3 <= 0) throw new Error("The number of values should be positive.");
  return At.runKernel(function(r3) {
    return r3.linspace(t3, e3, n3);
  }, {});
}
function Sn(t3, e3, n3, r3) {
  if (void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = "float32"), 0 === n3) throw new Error("Cannot have a step of zero");
  if (t3 === e3 || t3 < e3 && n3 < 0 || e3 < t3 && n3 > 1) return En([0], r3);
  var o3 = j(Math.abs(Math.ceil((e3 - t3) / n3)), r3);
  e3 < t3 && 1 === n3 && (n3 = -1), o3[0] = t3;
  for (var a3 = 1; a3 < o3.length; a3++) o3[a3] = o3[a3 - 1] + n3;
  return mn(o3, r3);
}
var Nn = ln({ onesLike_: function(t3) {
  var e3 = Ye(t3, "x", "onesLike");
  if ("complex64" === e3.dtype) {
    var n3 = Nn(hn(e3)), r3 = kn(pn(e3));
    return cn(n3, r3);
  }
  return At.runKernel(function(t4) {
    return t4.onesLike(e3);
  }, { $x: e3 }, function(t4, e4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var kn = ln({ zerosLike_: function(t3) {
  var e3 = Ye(t3, "x", "zerosLike");
  return At.runKernel(function(t4) {
    return t4.zerosLike(e3);
  }, { $x: e3 }, function(t4, e4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var An = ln({ concat_: function(t3, e3) {
  void 0 === e3 && (e3 = 0), d(t3.length >= 1, function() {
    return "Pass at least one tensor to concat";
  });
  var n3 = Qe(t3, "tensors", "concat");
  e3 = S(e3, n3[0].shape)[0];
  var r3 = un(n3.map(function(t4) {
    return t4.shape;
  }), e3);
  if (0 === y(r3)) return fn([], r3);
  if (1 === (n3 = n3.filter(function(t4) {
    return t4.size > 0;
  })).length) return n3[0];
  var o3 = n3.map(function(t4) {
    return t4.shape;
  });
  sn(o3, e3);
  var a3 = n3;
  return At.runKernel(function(t4) {
    return t4.concat(n3, e3);
  }, a3, function(t4) {
    var n4 = o3.map(function(t5) {
      return t5[e3];
    });
    return Fn(t4, n4, e3).map(function(t5) {
      return function() {
        return t5;
      };
    });
  });
} });
var Tn = ln({ concat1d_: function(t3) {
  return An(t3, 0);
} });
var Dn = ln({ concat2d_: function(t3, e3) {
  return An(t3, e3);
} });
var _n = ln({ concat3d_: function(t3, e3) {
  return An(t3, e3);
} });
var On = ln({ concat4d_: function(t3, e3) {
  return An(t3, e3);
} });
var Fn = ln({ split_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3, o3 = Ye(t3, "x", "split");
  return n3 = S(n3, o3.shape)[0], "number" == typeof e3 ? (d(o3.shape[n3] % e3 == 0, function() {
    return "Number of splits must evenly divide the axis.";
  }), r3 = new Array(e3).fill(o3.shape[n3] / e3)) : (d(o3.shape[n3] === e3.reduce(function(t4, e4) {
    return t4 + e4;
  }), function() {
    return "The sum of sizes must match the size of the axis dimension.";
  }), r3 = e3), At.runKernel(function(t4) {
    return t4.split(o3, r3, n3);
  }, { $x: o3 }, function(t4) {
    return { $x: function() {
      return An(t4, n3);
    } };
  });
} });
function Mn(t3, e3) {
  return t3(e3 = { exports: {} }, e3.exports), e3.exports;
}
var Bn = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4, n4 = this, r4 = (e4 = 4022871197, function(t6) {
        t6 = t6.toString();
        for (var n5 = 0; n5 < t6.length; n5++) {
          var r5 = 0.02519603282416938 * (e4 += t6.charCodeAt(n5));
          r5 -= e4 = r5 >>> 0, e4 = (r5 *= e4) >>> 0, e4 += 4294967296 * (r5 -= e4);
        }
        return 23283064365386963e-26 * (e4 >>> 0);
      });
      n4.next = function() {
        var t6 = 2091639 * n4.s0 + 23283064365386963e-26 * n4.c;
        return n4.s0 = n4.s1, n4.s1 = n4.s2, n4.s2 = t6 - (n4.c = 0 | t6);
      }, n4.c = 1, n4.s0 = r4(" "), n4.s1 = r4(" "), n4.s2 = r4(" "), n4.s0 -= r4(t5), n4.s0 < 0 && (n4.s0 += 1), n4.s1 -= r4(t5), n4.s1 < 0 && (n4.s1 += 1), n4.s2 -= r4(t5), n4.s2 < 0 && (n4.s2 += 1), r4 = null;
    }
    function o3(t5, e4) {
      return e4.c = t5.c, e4.s0 = t5.s0, e4.s1 = t5.s1, e4.s2 = t5.s2, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = n4.next;
      return i3.int32 = function() {
        return 4294967296 * n4.next() | 0;
      }, i3.double = function() {
        return i3() + 11102230246251565e-32 * (2097152 * i3() | 0);
      }, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.alea = a3;
  }(0, t3, false);
});
var Pn = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.next = function() {
        var t6 = e4.x ^ e4.x << 11;
        return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w ^= e4.w >>> 19 ^ t6 ^ t6 >>> 8;
      }, t5 === (0 | t5) ? e4.x = t5 : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 64; r4++) e4.x ^= 0 | n4.charCodeAt(r4), e4.next();
    }
    function o3(t5, e4) {
      return e4.x = t5.x, e4.y = t5.y, e4.z = t5.z, e4.w = t5.w, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xor128 = a3;
  }(0, t3, false);
});
var Ln = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.next = function() {
        var t6 = e4.x ^ e4.x >>> 2;
        return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w = e4.v, (e4.d = e4.d + 362437 | 0) + (e4.v = e4.v ^ e4.v << 4 ^ t6 ^ t6 << 1) | 0;
      }, e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.v = 0, t5 === (0 | t5) ? e4.x = t5 : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 64; r4++) e4.x ^= 0 | n4.charCodeAt(r4), r4 == n4.length && (e4.d = e4.x << 10 ^ e4.x >>> 4), e4.next();
    }
    function o3(t5, e4) {
      return e4.x = t5.x, e4.y = t5.y, e4.z = t5.z, e4.w = t5.w, e4.v = t5.v, e4.d = t5.d, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xorwow = a3;
  }(0, t3, false);
});
var Wn = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this;
      e4.next = function() {
        var t6, n4, r4 = e4.x, o4 = e4.i;
        return t6 = r4[o4], n4 = (t6 ^= t6 >>> 7) ^ t6 << 24, n4 ^= (t6 = r4[o4 + 1 & 7]) ^ t6 >>> 10, n4 ^= (t6 = r4[o4 + 3 & 7]) ^ t6 >>> 3, n4 ^= (t6 = r4[o4 + 4 & 7]) ^ t6 << 7, t6 = r4[o4 + 7 & 7], n4 ^= (t6 ^= t6 << 13) ^ t6 << 9, r4[o4] = n4, e4.i = o4 + 1 & 7, n4;
      }, function(t6, e5) {
        var n4, r4 = [];
        if (e5 === (0 | e5)) r4[0] = e5;
        else for (e5 = "" + e5, n4 = 0; n4 < e5.length; ++n4) r4[7 & n4] = r4[7 & n4] << 15 ^ e5.charCodeAt(n4) + r4[n4 + 1 & 7] << 13;
        for (; r4.length < 8; ) r4.push(0);
        for (n4 = 0; n4 < 8 && 0 === r4[n4]; ++n4) ;
        for (8 == n4 ? r4[7] = -1 : r4[n4], t6.x = r4, t6.i = 0, n4 = 256; n4 > 0; --n4) t6.next();
      }(e4, t5);
    }
    function o3(t5, e4) {
      return e4.x = t5.x.slice(), e4.i = t5.i, e4;
    }
    function a3(t5, e4) {
      null == t5 && (t5 = +/* @__PURE__ */ new Date());
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && (a4.x && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xorshift7 = a3;
  }(0, t3, false);
});
var Un = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this;
      e4.next = function() {
        var t6, n4, r4 = e4.w, o4 = e4.X, a4 = e4.i;
        return e4.w = r4 = r4 + 1640531527 | 0, n4 = o4[a4 + 34 & 127], t6 = o4[a4 = a4 + 1 & 127], n4 ^= n4 << 13, t6 ^= t6 << 17, n4 ^= n4 >>> 15, t6 ^= t6 >>> 12, n4 = o4[a4] = n4 ^ t6, e4.i = a4, n4 + (r4 ^ r4 >>> 16) | 0;
      }, function(t6, e5) {
        var n4, r4, o4, a4, i3, s3 = [], u3 = 128;
        for (e5 === (0 | e5) ? (r4 = e5, e5 = null) : (e5 += "\0", r4 = 0, u3 = Math.max(u3, e5.length)), o4 = 0, a4 = -32; a4 < u3; ++a4) e5 && (r4 ^= e5.charCodeAt((a4 + 32) % e5.length)), 0 === a4 && (i3 = r4), r4 ^= r4 << 10, r4 ^= r4 >>> 15, r4 ^= r4 << 4, r4 ^= r4 >>> 13, a4 >= 0 && (i3 = i3 + 1640531527 | 0, o4 = 0 == (n4 = s3[127 & a4] ^= r4 + i3) ? o4 + 1 : 0);
        for (o4 >= 128 && (s3[127 & (e5 && e5.length || 0)] = -1), o4 = 127, a4 = 512; a4 > 0; --a4) r4 = s3[o4 + 34 & 127], n4 = s3[o4 = o4 + 1 & 127], r4 ^= r4 << 13, n4 ^= n4 << 17, r4 ^= r4 >>> 15, n4 ^= n4 >>> 12, s3[o4] = r4 ^ n4;
        t6.w = i3, t6.X = s3, t6.i = o4;
      }(e4, t5);
    }
    function o3(t5, e4) {
      return e4.i = t5.i, e4.w = t5.w, e4.X = t5.X.slice(), e4;
    }
    function a3(t5, e4) {
      null == t5 && (t5 = +/* @__PURE__ */ new Date());
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && (a4.X && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xor4096 = a3;
  }(0, t3, false);
});
var zn = Mn(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.next = function() {
        var t6 = e4.b, n5 = e4.c, r5 = e4.d, o4 = e4.a;
        return t6 = t6 << 25 ^ t6 >>> 7 ^ n5, n5 = n5 - r5 | 0, r5 = r5 << 24 ^ r5 >>> 8 ^ o4, o4 = o4 - t6 | 0, e4.b = t6 = t6 << 20 ^ t6 >>> 12 ^ n5, e4.c = n5 = n5 - r5 | 0, e4.d = r5 << 16 ^ n5 >>> 16 ^ o4, e4.a = o4 - t6 | 0;
      }, e4.a = 0, e4.b = 0, e4.c = -1640531527, e4.d = 1367130551, t5 === Math.floor(t5) ? (e4.a = t5 / 4294967296 | 0, e4.b = 0 | t5) : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 20; r4++) e4.b ^= 0 | n4.charCodeAt(r4), e4.next();
    }
    function o3(t5, e4) {
      return e4.a = t5.a, e4.b = t5.b, e4.c = t5.c, e4.d = t5.d, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.tychei = a3;
  }(0, t3, false);
});
var Vn = Mn(function(t3) {
  !function(e3, n3) {
    var r3, o3 = this, a3 = 256, i3 = 6, s3 = "random", u3 = n3.pow(a3, i3), l3 = n3.pow(2, 52), c3 = 2 * l3, h3 = a3 - 1;
    function p3(t4, h4, p4) {
      var g2 = [], y3 = v2(function t5(e4, n4) {
        var r4, o4 = [], a4 = typeof e4;
        if (n4 && "object" == a4) for (r4 in e4) try {
          o4.push(t5(e4[r4], n4 - 1));
        } catch (t6) {
        }
        return o4.length ? o4 : "string" == a4 ? e4 : e4 + "\0";
      }((h4 = 1 == h4 ? { entropy: true } : h4 || {}).entropy ? [t4, m3(e3)] : null == t4 ? function() {
        try {
          var t5;
          return r3 && (t5 = r3.randomBytes) ? t5 = t5(a3) : (t5 = new Uint8Array(a3), (o3.crypto || o3.msCrypto).getRandomValues(t5)), m3(t5);
        } catch (t6) {
          var n4 = o3.navigator, i4 = n4 && n4.plugins;
          return [+/* @__PURE__ */ new Date(), o3, i4, o3.screen, m3(e3)];
        }
      }() : t4, 3), g2), x3 = new f3(g2), b3 = function() {
        for (var t5 = x3.g(i3), e4 = u3, n4 = 0; t5 < l3; ) t5 = (t5 + n4) * a3, e4 *= a3, n4 = x3.g(1);
        for (; t5 >= c3; ) t5 /= 2, e4 /= 2, n4 >>>= 1;
        return (t5 + n4) / e4;
      };
      return b3.int32 = function() {
        return 0 | x3.g(4);
      }, b3.quick = function() {
        return x3.g(4) / 4294967296;
      }, b3.double = b3, v2(m3(x3.S), e3), (h4.pass || p4 || function(t5, e4, r4, o4) {
        return o4 && (o4.S && d3(o4, x3), t5.state = function() {
          return d3(x3, {});
        }), r4 ? (n3[s3] = t5, e4) : t5;
      })(b3, y3, "global" in h4 ? h4.global : this == n3, h4.state);
    }
    function f3(t4) {
      var e4, n4 = t4.length, r4 = this, o4 = 0, i4 = r4.i = r4.j = 0, s4 = r4.S = [];
      for (n4 || (t4 = [n4++]); o4 < a3; ) s4[o4] = o4++;
      for (o4 = 0; o4 < a3; o4++) s4[o4] = s4[i4 = h3 & i4 + t4[o4 % n4] + (e4 = s4[o4])], s4[i4] = e4;
      (r4.g = function(t5) {
        for (var e5, n5 = 0, o5 = r4.i, i5 = r4.j, s5 = r4.S; t5--; ) e5 = s5[o5 = h3 & o5 + 1], n5 = n5 * a3 + s5[h3 & (s5[o5] = s5[i5 = h3 & i5 + e5]) + (s5[i5] = e5)];
        return r4.i = o5, r4.j = i5, n5;
      })(a3);
    }
    function d3(t4, e4) {
      return e4.i = t4.i, e4.j = t4.j, e4.S = t4.S.slice(), e4;
    }
    function v2(t4, e4) {
      for (var n4, r4 = t4 + "", o4 = 0; o4 < r4.length; ) e4[h3 & o4] = h3 & (n4 ^= 19 * e4[h3 & o4]) + r4.charCodeAt(o4++);
      return m3(e4);
    }
    function m3(t4) {
      return String.fromCharCode.apply(0, t4);
    }
    if (n3["seed" + s3] = p3, v2(n3.random(), e3), t3.exports) {
      t3.exports = p3;
      try {
        r3 = require_crypto();
      } catch (t4) {
      }
    }
  }([], Math);
});
Vn.alea = Bn, Vn.xor128 = Pn, Vn.xorwow = Ln, Vn.xorshift7 = Wn, Vn.xor4096 = Un, Vn.tychei = zn;
var Gn = Vn.alea;
var qn = function() {
  function t3(t4, e3, n3, r3, o3) {
    this.mean = t4, this.stdDev = e3, this.dtype = n3, this.nextVal = NaN, this.truncated = r3, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
    var a3 = o3 || Math.random();
    this.random = Gn(a3.toString());
  }
  return t3.prototype.nextValue = function() {
    if (!isNaN(this.nextVal)) {
      var t4 = this.nextVal;
      return this.nextVal = NaN, t4;
    }
    for (var e3, n3, r3 = false; !r3; ) {
      var o3 = void 0, a3 = void 0, i3 = void 0;
      do {
        i3 = (o3 = 2 * this.random() - 1) * o3 + (a3 = 2 * this.random() - 1) * a3;
      } while (i3 >= 1 || 0 === i3);
      var s3 = Math.sqrt(-2 * Math.log(i3) / i3);
      e3 = this.mean + this.stdDev * o3 * s3, n3 = this.mean + this.stdDev * a3 * s3, this.truncated && !this.isValidTruncated(e3) || (r3 = true);
    }
    return this.truncated && !this.isValidTruncated(n3) || (this.nextVal = this.convertValue(n3)), this.convertValue(e3);
  }, t3.prototype.convertValue = function(t4) {
    return null == this.dtype || "float32" === this.dtype ? t4 : Math.round(t4);
  }, t3.prototype.isValidTruncated = function(t4) {
    return t4 <= this.upper && t4 >= this.lower;
  }, t3;
}();
var Hn = function() {
  function t3(t4, e3, n3, r3) {
    void 0 === t4 && (t4 = 0), void 0 === e3 && (e3 = 1);
    var o3 = this;
    if (this.canReturnFloat = function() {
      return null == o3.dtype || "float32" === o3.dtype;
    }, this.min = t4, this.range = e3 - t4, this.dtype = n3, null == r3 && (r3 = Math.random()), "number" == typeof r3 && (r3 = r3.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error("The difference between " + t4 + " - " + e3 + " <= 1 and dtype is not float");
    this.random = Gn(r3);
  }
  return t3.prototype.convertValue = function(t4) {
    return this.canReturnFloat() ? t4 : Math.round(t4);
  }, t3.prototype.nextValue = function() {
    return this.convertValue(this.min + this.range * this.random());
  }, t3;
}();
function $n(t3, e3, n3) {
  return void 0 === e3 && (e3 = "float32"), e3 = e3 || "float32", X(t3), new st(t3, e3, n3);
}
function jn(t3, e3) {
  void 0 === e3 && (e3 = false), console.log(t3.toString(e3));
}
var Kn = ln({ batchToSpaceND_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "batchToSpaceND"), o3 = e3.reduce(function(t4, e4) {
    return t4 * e4;
  });
  return d(r3.rank >= 1 + e3.length, function() {
    return "input rank is " + r3.rank + " but should be > than blockShape.length " + e3.length;
  }), d(n3.length === e3.length, function() {
    return "crops.length is " + n3.length + " but should be equal to blockShape.length  " + e3.length;
  }), d(r3.shape[0] % o3 == 0, function() {
    return "input tensor batch is " + r3.shape[0] + " but is not divisible by the product of the elements of blockShape " + e3.join(" * ") + " === " + o3;
  }), At.runKernel(function(t4) {
    return t4.batchToSpaceND(r3, e3, n3);
  }, { $x: r3 }, function(t4) {
    return { $x: function() {
      return t4.spaceToBatchND(e3, n3);
    } };
  });
} });
var Xn = ln({ cast_: function(t3, e3) {
  var n3 = Ye(t3, "x", "cast");
  if (!_(e3)) throw new Error("Failed to cast to unknown dtype " + e3);
  if ("string" === e3 && "string" !== n3.dtype || "string" !== e3 && "string" === n3.dtype) throw new Error("Only strings can be casted to strings");
  return At.runKernel(function(t4) {
    return t4.cast(n3, e3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return t4.clone();
    } };
  });
} });
var Yn = ln({ clone_: function(t3) {
  var e3 = Ye(t3, "x", "clone", null);
  return At.runKernel(function(t4) {
    return ht.make(e3.shape, { dataId: e3.dataId }, e3.dtype);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return t4.toFloat();
    } };
  });
} });
var Qn = ln({ cumsum_: function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false);
  var o3 = Ye(t3, "x", "cumsum"), a3 = rn([e3 |= 0], o3.rank), i3 = o3;
  null != a3 && (i3 = o3.transpose(a3));
  var s3 = an(1, o3.rank)[0], u3 = At.runKernel(function(t4) {
    return t4.cumsum(i3, s3, n3, r3);
  }, { permutedX: i3 }, function(t4) {
    return { permutedX: function() {
      return t4.cumsum(e3, n3, !r3);
    } };
  });
  return null != a3 && (u3 = u3.transpose(a3)), u3;
} });
var Jn = ln({ depthToSpace_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = "NHWC");
  var r3 = Ye(t3, "x", "depthToSpace"), o3 = "NHWC" === n3 ? r3.shape[1] : r3.shape[2], a3 = "NHWC" === n3 ? r3.shape[2] : r3.shape[3], i3 = "NHWC" === n3 ? r3.shape[3] : r3.shape[1];
  return d(o3 * e3 >= 0, function() {
    return "Negative dimension size caused by overflow when multiplying\n      " + o3 + " and " + e3 + "  for depthToSpace with input shape\n      " + r3.shape;
  }), d(a3 * e3 >= 0, function() {
    return "Negative dimension size caused by overflow when multiplying\n      " + a3 + " and " + e3 + " for depthToSpace with input shape\n          " + r3.shape;
  }), d(i3 % (e3 * e3) == 0, function() {
    return "Dimension size must be evenly divisible by " + e3 * e3 + " but is " + i3 + " for depthToSpace with input shape " + r3.shape;
  }), At.runKernel(function(t4) {
    return t4.depthToSpace(r3, e3, n3);
  }, { $x: r3 });
} });
var Zn = ln({ expandDims_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = Ye(t3, "x", "expandDims", null);
  d(e3 <= n3.rank, function() {
    return "Axis must be <= rank of the tensor";
  });
  var r3 = n3.shape.slice();
  return e3 < 0 && (d(-(n3.rank + 1) <= e3, function() {
    return "Axis must be in the interval [" + -(n3.rank + 1) + ", " + n3.rank + "]";
  }), e3 = n3.rank + e3 + 1), r3.splice(e3, 0, 1), hr(n3, r3);
} });
var tr = ln({ eye_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = "float32"), null == e3 && (e3 = t3);
  for (var o3 = $n([t3, e3], r3), a3 = t3 <= e3 ? t3 : e3, i3 = 0; i3 < a3; ++i3) o3.set(1, i3, i3);
  var s3 = o3.toTensor().as2D(t3, e3);
  if (null == n3) return s3;
  if (1 === n3.length) return vr(Zn(s3, 0), [n3[0], 1, 1]);
  if (2 === n3.length) return vr(Zn(Zn(s3, 0), 0), [n3[0], n3[1], 1, 1]);
  if (3 === n3.length) return vr(Zn(Zn(Zn(s3, 0), 0), 0), [n3[0], n3[1], n3[2], 1, 1]);
  throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n3.length + "D.");
} });
var er = ln({ multinomial_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = false);
  var o3 = Ye(t3, "logits", "multinomial"), a3 = o3.size, i3 = o3.rank;
  if (a3 < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a3 + ".");
  if (i3 > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i3);
  n3 = n3 || Math.random();
  var s3 = 1 === i3 ? o3.as2D(1, -1) : o3, u3 = At.runKernel(function(t4) {
    return t4.multinomial(s3, r3, e3, n3);
  }, { logits2D: s3 });
  return 1 === i3 ? u3.as1D() : u3;
} });
var nr = ln({ oneHot_: function(t3, e3, n3, r3) {
  if (void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 0), e3 < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + e3);
  var o3 = Ye(t3, "indices", "oneHot", "int32"), a3 = o3.shape.concat([e3]);
  return o3 = o3.flatten(), At.runKernel(function(t4) {
    return t4.oneHot(o3, e3, n3, r3);
  }, { $indices: o3 }, function(t4) {
    return { $indices: function() {
      return En(o3.shape, "float32");
    } };
  }).reshape(a3);
} });
var rr = ln({ pad_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3 = Ye(t3, "x", "pad");
  if (0 === r3.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  var o3 = e3.map(function(t4) {
    return t4[0];
  });
  return At.runKernel(function(t4) {
    return t4.pad(r3, e3, n3);
  }, { $x: r3 }, function(t4) {
    return { $x: function() {
      return t4.slice(o3, r3.shape);
    } };
  });
} });
var or = ln({ pad1d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), d(2 === e3.length, function() {
    return "Invalid number of paddings. Must be length of 2.";
  }), rr(t3, [e3], n3);
} });
var ar = ln({ pad2d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), d(2 === e3.length && 2 === e3[0].length && 2 === e3[1].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), rr(t3, e3, n3);
} });
var ir = ln({ pad3d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), d(3 === e3.length && 2 === e3[0].length && 2 === e3[1].length && 2 === e3[2].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), rr(t3, e3, n3);
} });
var sr = ln({ pad4d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), d(4 === e3.length && 2 === e3[0].length && 2 === e3[1].length && 2 === e3[2].length && 2 === e3[3].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), rr(t3, e3, n3);
} });
var ur = ln({ rand_: function(t3, e3, n3) {
  var r3 = y(t3), o3 = null;
  if (null == n3 || "float32" === n3) o3 = new Float32Array(r3);
  else if ("int32" === n3) o3 = new Int32Array(r3);
  else {
    if ("bool" !== n3) throw new Error("Unknown data type " + n3);
    o3 = new Uint8Array(r3);
  }
  for (var a3 = 0; a3 < r3; a3++) o3[a3] = e3();
  return ht.make(t3, { values: o3 }, n3);
} });
var lr = ln({ randomNormal_: function(t3, e3, n3, r3, o3) {
  if (void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), null != r3 && "bool" === r3) throw new Error("Unsupported data type " + r3);
  for (var a3 = new qn(e3, n3, r3, false, o3), i3 = $n(t3, r3), s3 = 0; s3 < i3.values.length; s3++) i3.values[s3] = a3.nextValue();
  return i3.toTensor();
} });
var cr = ln({ randomUniform_: function(t3, e3, n3, r3, o3) {
  void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = "float32");
  for (var a3 = $n(t3, r3), i3 = new Hn(e3, n3, null, o3), s3 = 0; s3 < a3.values.length; s3++) a3.values[s3] = i3.nextValue();
  return a3.toTensor();
} });
var hr = ln({ reshape_: function(t3, e3) {
  var n3 = Ye(t3, "x", "reshape", null);
  return e3 = I(e3, n3.size), d(n3.size === y(e3), function() {
    return "new shape and old shape must have the same number of elements.";
  }), At.runKernel(function(t4) {
    return t4.reshape(n3, e3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return t4.reshape(n3.shape);
    } };
  });
} });
var pr = ln({ spaceToBatchND_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "spaceToBatchND");
  return d(r3.rank >= 1 + e3.length, function() {
    return "input rank " + r3.rank + " should be > than [blockShape] " + e3.length;
  }), d(n3.length === e3.length, function() {
    return "paddings.shape[0] " + n3.length + " must be equal to [blockShape] " + e3.length;
  }), d(r3.shape.reduce(function(t4, r4, o3) {
    return o3 > 0 && o3 <= e3.length ? t4 && (r4 + n3[o3 - 1][0] + n3[o3 - 1][1]) % e3[o3 - 1] == 0 : t4;
  }, true), function() {
    return "input spatial dimensions " + r3.shape.slice(1) + " with paddings " + n3.toString() + " must be divisible by blockShapes " + e3.toString();
  }), At.runKernel(function(t4) {
    return t4.spaceToBatchND(r3, e3, n3);
  }, { $x: r3 }, function(t4) {
    return { $x: function() {
      return t4.batchToSpaceND(e3, n3);
    } };
  });
} });
var fr = ln({ squeeze_: function(t3, e3) {
  var n3 = Ye(t3, "x", "squeeze");
  return hr(n3, N(n3.shape, e3).newShape);
} });
var dr = ln({ stack_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = Qe(t3, "tensors", "stack");
  if (d(n3.length >= 1, function() {
    return "Pass at least one tensor to tf.stack";
  }), 1 === n3.length) return n3[0].expandDims(e3);
  var r3 = n3[0].rank, o3 = n3[0].shape, a3 = n3[0].dtype;
  d(e3 <= r3, function() {
    return "Axis must be <= rank of the tensor";
  }), n3.forEach(function(t4) {
    v(o3, t4.shape, "All tensors passed to stack must have matching shapes");
  }), n3.forEach(function(t4) {
    d(a3 === t4.dtype, function() {
      return "All tensors passed to stack must have matching dtypes";
    });
  });
  var i3 = n3.map(function(t4) {
    return t4.expandDims(e3);
  });
  return An(i3, e3);
} });
var vr = ln({ tile_: function(t3, e3) {
  var n3 = Ye(t3, "x", "tile", null);
  return d(n3.rank === e3.length, function() {
    return "Error in transpose: rank of input " + n3.rank + " must match length of reps " + e3 + ".";
  }), At.runKernel(function(t4, r3) {
    var o3 = t4.tile(n3, e3);
    return r3([n3]), o3;
  }, { $x: n3 }, function(t4, n4) {
    var r3 = n4[0];
    return { $x: function() {
      var n5 = kn(r3);
      if (1 === r3.rank) for (var o3 = 0; o3 < e3[0]; ++o3) n5 = n5.add(t4.slice([o3 * r3.shape[0]], [r3.shape[0]]));
      else if (2 === r3.rank) for (o3 = 0; o3 < e3[0]; ++o3) for (var a3 = 0; a3 < e3[1]; ++a3) n5 = n5.add(t4.slice([o3 * r3.shape[0], a3 * r3.shape[1]], [r3.shape[0], r3.shape[1]]));
      else if (3 === r3.rank) for (o3 = 0; o3 < e3[0]; ++o3) for (a3 = 0; a3 < e3[1]; ++a3) for (var i3 = 0; i3 < e3[2]; ++i3) n5 = n5.add(t4.slice([o3 * r3.shape[0], a3 * r3.shape[1], i3 * r3.shape[2]], [r3.shape[0], r3.shape[1], r3.shape[2]]));
      else {
        if (4 !== r3.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + r3.rank + " tensors yet.");
        for (o3 = 0; o3 < e3[0]; ++o3) for (a3 = 0; a3 < e3[1]; ++a3) for (i3 = 0; i3 < e3[2]; ++i3) for (var s3 = 0; s3 < e3[3]; ++s3) n5 = n5.add(t4.slice([o3 * r3.shape[0], a3 * r3.shape[1], i3 * r3.shape[2], s3 * r3.shape[3]], [r3.shape[0], r3.shape[1], r3.shape[2], r3.shape[3]]));
      }
      return n5;
    } };
  });
} });
var mr = ln({ truncatedNormal_: function(t3, e3, n3, r3, o3) {
  if (void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), null != r3 && "bool" === r3) throw new Error("Unsupported data type " + r3);
  for (var a3 = new qn(e3, n3, r3, true, o3), i3 = $n(t3, r3), s3 = 0; s3 < i3.values.length; s3++) i3.values[s3] = a3.nextValue();
  return i3.toTensor();
} });
var gr = ln({ unstack_: function(t3, e3) {
  void 0 === e3 && (e3 = 0), e3 = e3 || 0;
  var n3 = Ye(t3, "x", "unstack");
  return d(e3 >= -n3.shape.length && e3 < n3.shape.length, function() {
    return "Axis = " + e3 + " is not in [-" + n3.shape.length + ", " + n3.shape.length + ")";
  }), e3 < 0 && (e3 += n3.shape.length), At.runKernel(function(t4) {
    return t4.unstack(n3, e3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return dr(t4, e3);
    } };
  });
} });
var yr = function(t3, e3) {
  return r(this, void 0, void 0, function() {
    var n3, r3, a3, i3, s3, u3, l3, c3, h3, p3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          return n3 = Ye(t3, "x", "setdiff1d"), r3 = Ye(e3, "y", "setdiff1d"), d(n3.dtype === r3.dtype, function() {
            return "x and y should have the same dtype, but got x (" + n3.dtype + ") and y (" + r3.dtype + ").";
          }), d(1 === n3.rank, function() {
            return "x should be 1D tensor, but got x (" + n3.shape + ").";
          }), d(1 === r3.rank, function() {
            return "y should be 1D tensor, but got y (" + r3.shape + ").";
          }), [4, n3.data()];
        case 1:
          return a3 = o3.sent(), [4, r3.data()];
        case 2:
          for (i3 = o3.sent(), s3 = new Set(i3), u3 = 0, h3 = 0; h3 < a3.length; h3++) s3.has(a3[h3]) || u3++;
          for (l3 = new st([u3], n3.dtype), c3 = new st([u3], "int32"), h3 = 0, p3 = 0; h3 < a3.length; h3++) s3.has(a3[h3]) || (l3.values[p3] = a3[h3], c3.values[p3] = h3, p3++);
          return [2, [l3.toTensor(), c3.toTensor()]];
      }
    });
  });
};
function xr(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = true);
  var o3 = [];
  if (r3) (o3 = o3.concat(e3.slice(0))).push(t3[0] / n3), o3 = o3.concat(t3.slice(1));
  else {
    o3 = o3.concat(t3[0]);
    for (var a3 = e3.length, i3 = 0; i3 < a3; ++i3) o3 = o3.concat([t3[i3 + 1] / e3[i3], e3[i3]]);
    o3 = o3.concat(t3.slice(a3 + 1));
  }
  return o3;
}
function br(t3, e3, n3) {
  void 0 === n3 && (n3 = true);
  var r3 = [];
  if (n3) {
    r3.push(e3);
    for (var o3 = e3 + 1; o3 < t3; ++o3) o3 <= 2 * e3 ? (r3.push(o3), r3.push(o3 - (e3 + 1))) : r3.push(o3);
  } else {
    var a3 = [], i3 = [];
    for (o3 = 1; o3 < t3; ++o3) o3 >= 2 * e3 + 1 || o3 % 2 == 1 ? i3.push(o3) : a3.push(o3);
    r3.push.apply(r3, a3), r3.push(0), r3.push.apply(r3, i3);
  }
  return r3;
}
function wr(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = true);
  var o3 = [];
  r3 ? o3.push(t3[0] / n3) : o3.push(t3[0] * n3);
  for (var a3 = 1; a3 < t3.length; ++a3) a3 <= e3.length ? r3 ? o3.push(e3[a3 - 1] * t3[a3]) : o3.push(t3[a3] / e3[a3 - 1]) : o3.push(t3[a3]);
  return o3;
}
function Cr(t3, e3) {
  for (var n3 = [0], r3 = 0; r3 < e3; ++r3) n3.push(t3[r3][0]);
  return n3;
}
function Er(t3, e3, n3) {
  for (var r3 = t3.slice(0, 1), o3 = 0; o3 < n3; ++o3) r3.push(t3[o3 + 1] - e3[o3][0] - e3[o3][1]);
  return r3;
}
function Rr(t3, e3) {
  if (t3.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + t3.rank + ".");
  if (e3.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + e3.rank + ".");
  if ("int32" !== e3.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + e3.dtype + ".");
  if (e3.shape[e3.rank - 1] > t3.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + e3.shape[e3.rank - 1] + " vs. " + t3.rank);
  if (0 === t3.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + t3.shape + ".");
  for (var n3 = e3.shape, r3 = n3[n3.length - 1], o3 = 1, a3 = 0; a3 < n3.length - 1; ++a3) o3 *= n3[a3];
  var i3 = t3.shape, s3 = n3.slice();
  s3.pop();
  var u3 = 1;
  for (a3 = r3; a3 < t3.rank; ++a3) u3 *= i3[a3], s3.push(i3[a3]);
  var l3 = G(t3.shape).map(function(t4) {
    return t4 / u3;
  }).concat([1]).slice(0, r3);
  return [s3, o3, u3, l3];
}
var Ir = 30;
function Sr(t3) {
  return t3 <= Ir ? t3 : V(t3, Math.floor(Math.sqrt(t3)));
}
function Nr(t3, e3, n3) {
  if (e3.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + e3.rank + ".");
  if (t3.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + t3.rank + ".");
  if ("int32" !== e3.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + e3.dtype);
  if (n3.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + n3);
  if (0 === n3.length) {
    if (0 === e3.size) throw new Error("Indices specified for empty output. indices shape: " + e3.shape);
    if (0 === t3.size) throw new Error("Updates specified for empty output. updates shape: " + t3.shape);
  }
  !function(t4, e4, n4) {
    var r3 = e4.rank > 1 ? e4.shape[e4.rank - 1] : 1, o3 = e4.rank > 1 ? e4.rank - 1 : 1, a3 = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n4.shape + ", indices.shape: " + e4.shape + ", shape: " + t4 + ", sliceDim: " + r3 + ", and batchDim: " + o3 + ".";
    if (n4.rank < o3) throw new Error(a3 + " update.rank < " + o3 + ". ");
    if (t4.length < r3 + (n4.rank - o3)) throw new Error(a3 + " Output shape length < " + (r3 + (n4.rank - o3)));
    if (n4.rank !== o3 + t4.length - r3) throw new Error(a3 + " update.rank != " + (o3 + t4.length - r3));
    for (var i3 = 0; i3 < o3; ++i3) if (n4.shape[i3] !== e4.shape[i3]) throw new Error(a3 + " updates.shape[" + i3 + "] (" + n4.shape[i3] + ") != indices.shape[" + i3 + "] (" + e4.shape[i3] + ").");
    for (i3 = 0; i3 < n4.rank - o3; ++i3) if (n4.shape[i3 + o3] !== t4[i3 + r3]) throw new Error(a3 + " updates.shape[" + (i3 + o3) + "] (" + n4.shape[i3 + o3] + ") != shape[" + (i3 + o3) + "] (" + t4[i3 + o3] + ")");
  }(n3, e3, t3);
}
function kr(t3, e3, n3) {
  for (var r3 = e3.rank > 1 ? e3.shape[e3.rank - 1] : 1, o3 = n3.length, a3 = 1, i3 = r3; i3 < o3; ++i3) a3 *= n3[i3];
  var s3 = r3 < 1 ? 1 : r3;
  return { sliceRank: r3, numUpdates: e3.size / s3, sliceSize: a3, strides: G(n3.slice(0, r3)).concat([1]), outputSize: y(n3) };
}
function Ar(t3, e3, n3, r3, o3, a3, i3, s3, u3) {
  if (void 0 === o3 && (o3 = 0), void 0 === a3 && (a3 = 0), void 0 === i3 && (i3 = 0), void 0 === s3 && (s3 = 0), void 0 === u3 && (u3 = 0), 0 !== i3) throw new Error("ellipsis mask is not yet supported");
  if (0 !== s3) throw new Error("new axis mask is not yet supported");
  for (var l3 = [], c3 = [], h3 = [], p3 = 0; p3 < t3.length; p3++) l3[p3] = Tr(o3, e3, r3, t3, p3), c3[p3] = Dr(a3, n3, r3, t3, p3), u3 & 1 << p3 && (c3[p3] = l3[p3] + 1, h3.push(p3));
  var f3 = new Array(t3.length).fill(0);
  return f3 = f3.map(function(t4, e4) {
    for (var n4 = 0, o4 = r3[e4] || 1, a4 = l3[e4]; !(o4 > 0 ? a4 >= c3[e4] : a4 <= c3[e4]); a4 += o4) n4 += 1;
    return n4;
  }), [l3, f3, h3];
}
function Tr(t3, e3, n3, r3, o3) {
  var a3 = e3[o3], i3 = n3[o3] || 1;
  (t3 & 1 << o3 || null == a3) && (a3 = i3 > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
  var s3 = r3[o3];
  return a3 < 0 && (a3 += s3), a3 = h(0, a3, s3 - 1);
}
function Dr(t3, e3, n3, r3, o3) {
  var a3 = e3[o3], i3 = n3[o3] || 1;
  (t3 & 1 << o3 || null == a3) && (a3 = i3 > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
  var s3 = r3[o3];
  return a3 < 0 && (a3 += s3), a3 = i3 > 0 ? h(0, a3, s3) : h(-1, a3, s3 - 1);
}
function _r(t3, e3, n3) {
  for (var r3 = n3.length, o3 = 0; o3 < n3.length; o3++) if (n3[o3] > 1) {
    r3 = o3;
    break;
  }
  for (o3 = r3 + 1; o3 < n3.length; o3++) if (e3[o3] > 0 || n3[o3] !== t3[o3]) return false;
  return true;
}
function Or(t3, e3) {
  for (var n3 = t3.length > 0 ? t3[t3.length - 1] : 1, r3 = 0; r3 < t3.length - 1; r3++) n3 += t3[r3] * e3[r3];
  return n3;
}
function Fr(t3) {
  return d(z(t3), function() {
    return "The f passed in grad(f) must be a function";
  }), function(e3, n3) {
    var r3 = Ye(e3, "x", "tf.grad", null), o3 = null != n3 ? Ye(n3, "dy", "tf.grad") : null;
    return At.tidy(function() {
      var e4 = At.gradients(function() {
        return t3(r3);
      }, [r3], o3), n4 = e4.value, a3 = e4.grads;
      return null != o3 && v(n4.shape, o3.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Ur(a3), a3[0];
    });
  };
}
function Mr(t3) {
  return d(z(t3), function() {
    return "The f passed in grads(f) must be a function";
  }), function(e3, n3) {
    d(Array.isArray(e3), function() {
      return "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s";
    });
    var r3 = Qe(e3, "args", "tf.grads", null), o3 = null != n3 ? Ye(n3, "dy", "tf.grads") : null;
    return At.tidy(function() {
      var e4 = At.gradients(function() {
        return t3.apply(void 0, r3);
      }, r3, o3), n4 = e4.value, a3 = e4.grads;
      return null != o3 && v(n4.shape, o3.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Ur(a3), a3;
    });
  };
}
function Br(t3) {
  return d(z(t3), function() {
    return "The f passed in valueAndGrad(f) must be a function";
  }), function(e3, n3) {
    d(e3 instanceof ht, function() {
      return "The x passed in valueAndGrad(f)(x) must be a tensor";
    }), d(null == n3 || n3 instanceof ht, function() {
      return "The dy passed in valueAndGrad(f)(x, dy) must be a tensor";
    });
    var r3 = At.gradients(function() {
      return t3(e3);
    }, [e3], n3), o3 = r3.grads, a3 = r3.value;
    return Ur(o3), { grad: o3[0], value: a3 };
  };
}
function Pr(t3) {
  return d(z(t3), function() {
    return "The f passed in valueAndGrads(f) must be a function";
  }), function(e3, n3) {
    d(Array.isArray(e3) && e3.every(function(t4) {
      return t4 instanceof ht;
    }), function() {
      return "The args passed in valueAndGrads(f)(args) must be array of tensors";
    }), d(null == n3 || n3 instanceof ht, function() {
      return "The dy passed in valueAndGrads(f)(args, dy) must be a tensor";
    });
    var r3 = At.gradients(function() {
      return t3.apply(void 0, e3);
    }, e3, n3);
    return null != n3 && v(r3.value.shape, n3.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Ur(r3.grads), r3;
  };
}
function Lr(t3, e3) {
  d(z(t3), function() {
    return "The f passed in variableGrads(f) must be a function";
  }), d(null == e3 || Array.isArray(e3) && e3.every(function(t4) {
    return t4 instanceof pt;
  }), function() {
    return "The varList passed in variableGrads(f, varList) must be an array of variables";
  });
  var n3 = null != e3;
  if (!n3) for (var r3 in e3 = [], At.registeredVariables) e3.push(At.registeredVariables[r3]);
  var o3 = n3 ? e3.filter(function(t4) {
    return !t4.trainable;
  }) : null, a3 = e3.length;
  d((e3 = e3.filter(function(t4) {
    return t4.trainable;
  })).length > 0, function() {
    return "variableGrads() expects at least one of the input variables to be trainable, but none of the " + a3 + " variables is trainable.";
  });
  var i3 = At.gradients(t3, e3, null, true), s3 = i3.value, u3 = i3.grads;
  d(u3.some(function(t4) {
    return null != t4;
  }), function() {
    return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
  }), d(0 === s3.rank, function() {
    return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + s3.rank + " tensor";
  });
  var l3 = {};
  return e3.forEach(function(t4, e4) {
    null != u3[e4] && (l3[t4.name] = u3[e4]);
  }), null != o3 && o3.forEach(function(t4) {
    return l3[t4.name] = null;
  }), { value: s3, grads: l3 };
}
function Wr(t3) {
  return At.customGrad(t3);
}
function Ur(t3) {
  if (t3.filter(function(t4) {
    return null == t4;
  }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
}
var zr = ln({ softmax_: function(t3, e3) {
  void 0 === e3 && (e3 = -1);
  var n3 = Ye(t3, "logits", "softmax");
  if (-1 === e3 && (e3 = n3.rank - 1), e3 !== n3.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n3.rank + " and dim was " + e3);
  return Wr(function(t4, n4) {
    var r3 = t4.logSumExp([e3], true), o3 = t4.toFloat().sub(r3).exp();
    return n4([o3]), { value: o3, gradFunc: function(t5, n5) {
      var r4 = n5[0], o4 = t5.mul(r4);
      return o4.sub(o4.sum([e3], true).mul(r4));
    } };
  })(n3);
} });
var Vr = ln({ logSoftmax_: function(t3, e3) {
  void 0 === e3 && (e3 = -1);
  var n3 = Ye(t3, "logits", "logSoftmax");
  if (-1 === e3 && (e3 = n3.rank - 1), e3 !== n3.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n3.rank + " and axis was " + e3);
  return Wr(function(t4, n4) {
    var r3 = t4.max(e3, true), o3 = t4.sub(r3), a3 = o3.toFloat().sub(o3.exp().sum(e3, true).log());
    return n4([a3]), { value: a3, gradFunc: function(t5, n5) {
      var r4 = n5[0].exp();
      return t5.sub(t5.sum(e3, true).mul(r4));
    } };
  })(n3);
} });
var Gr = function() {
  function t3(t4, e3) {
    this.backend = t4, this.dataMover = e3, this.data = /* @__PURE__ */ new WeakMap();
  }
  return t3.prototype.get = function(t4) {
    return this.data.has(t4) || this.dataMover.moveData(this.backend, t4), this.data.get(t4);
  }, t3.prototype.set = function(t4, e3) {
    this.data.set(t4, e3);
  }, t3.prototype.has = function(t4) {
    return this.data.has(t4);
  }, t3.prototype.delete = function(t4) {
    return this.data.delete(t4);
  }, t3;
}();
var qr = function() {
  function t3() {
  }
  return t3.prototype.time = function(t4) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.read = function(t4) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.readSync = function(t4) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.disposeData = function(t4) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.write = function(t4, e3) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.fromPixels = function(t4, e3) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.register = function(t4, e3, n3) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.memory = function() {
    throw new Error("Not yet implemented.");
  }, t3.prototype.floatPrecision = function() {
    throw new Error("Not yet implemented");
  }, t3.prototype.epsilon = function() {
    return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
  }, t3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.fusedBatchMatMul = function(t4, e3, n3, r3, o3, a3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.slice = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3, o3, a3, i3, s3, u3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.unstack = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.reverse = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.concat = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.neg = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.add = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.addN = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.subtract = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.multiply = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.realDivide = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.floorDiv = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sum = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.prod = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.argMin = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.argMax = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.equal = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.notEqual = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.less = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.lessEqual = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.greater = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.greaterEqual = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.logicalNot = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.logicalAnd = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.logicalOr = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.where = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.select = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.topk = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.min = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.minimum = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.mod = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.max = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.maximum = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.all = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.any = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.squaredDifference = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.ceil = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.floor = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.round = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sign = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.isNaN = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.isInf = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.isFinite = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.pow = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.exp = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.expm1 = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.log = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.log1p = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sqrt = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.rsqrt = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.square = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.reciprocal = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.relu = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.prelu = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.elu = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.eluDer = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.selu = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.int = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.clip = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.abs = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.complexAbs = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sigmoid = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.softplus = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sin = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.cos = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.tan = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.asin = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.acos = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.atan = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.atan2 = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sinh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.cosh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.tanh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.asinh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.acosh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.atanh = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.erf = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.step = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv2d = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv2dDerInput = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv3d = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv3dDerInput = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.maxPool = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.avgPool = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.reshape = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.cast = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.tile = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.pad = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.transpose = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.gather = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.gatherND = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.scatterND = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.batchToSpaceND = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.spaceToBatchND = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3, a3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.LRNGrad = function(t4, e3, n3, r3, o3, a3, i3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.multinomial = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.oneHot = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.cumsum = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.fft = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.ifft = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.complex = function(t4, e3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.real = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.imag = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.cropAndResize = function(t4, e3, n3, r3, o3, a3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.depthToSpace = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.split = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.fill = function(t4, e3, n3) {
    throw new Error("Not yet implemented.");
  }, t3.prototype.onesLike = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.zerosLike = function(t4) {
    throw new Error("Not yet implemented");
  }, t3.prototype.linspace = function(t4, e3, n3) {
    throw new Error("Not yet implemented");
  }, t3.prototype.dispose = function() {
    throw new Error("Not yet implemented");
  }, t3;
}();
function Hr(t3, e3) {
  for (var n3 = t3.length, r3 = [], o3 = 0; o3 < n3; o3++) {
    var a3 = n3 - 1 - o3, i3 = t3[a3] || 1;
    (e3[e3.length - 1 - o3] || 1) > 1 && 1 === i3 && r3.unshift(a3);
  }
  return r3;
}
function $r(t3, e3) {
  for (var n3 = [], r3 = 0; r3 < e3.length; r3++) {
    var o3 = t3[t3.length - r3 - 1], a3 = e3.length - r3 - 1, i3 = e3[a3];
    (null == o3 || 1 === o3 && i3 > 1) && n3.unshift(a3);
  }
  return n3;
}
function jr(t3, e3) {
  for (var n3 = [], r3 = Math.max(t3.length, e3.length), o3 = 0; o3 < r3; o3++) {
    var a3 = t3[t3.length - o3 - 1];
    null == a3 && (a3 = 1);
    var i3 = e3[e3.length - o3 - 1];
    if (null == i3 && (i3 = 1), 1 === a3) n3.unshift(i3);
    else if (1 === i3) n3.unshift(a3);
    else {
      if (a3 !== i3) throw Error("Operands could not be broadcast together with shapes " + t3 + " and " + e3 + ".");
      n3.unshift(a3);
    }
  }
  return n3;
}
function Kr(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === i3 && (i3 = "channelsLast");
  var s3, u3 = Jr(e3), l3 = u3[0], c3 = u3[1];
  if ("channelsLast" === i3) s3 = [l3, c3, t3[3], t3[3]];
  else {
    if ("channelsFirst" !== i3) throw new Error("Unknown dataFormat " + i3);
    s3 = [l3, c3, t3[1], t3[1]];
  }
  return Xr(t3, s3, n3, r3, o3, a3, false, i3);
}
function Xr(t3, e3, n3, r3, o3, a3, i3, s3) {
  void 0 === i3 && (i3 = false), void 0 === s3 && (s3 = "channelsLast");
  var u3 = [-1, -1, -1, -1], l3 = u3[0], c3 = u3[1], h3 = u3[2], p3 = u3[3];
  if ("channelsLast" === s3) l3 = t3[0], c3 = t3[1], h3 = t3[2], p3 = t3[3];
  else {
    if ("channelsFirst" !== s3) throw new Error("Unknown dataFormat " + s3);
    l3 = t3[0], p3 = t3[1], c3 = t3[2], h3 = t3[3];
  }
  var f3, v2 = e3[0], m3 = e3[1], g2 = e3[3], y3 = Jr(n3), x3 = y3[0], w3 = y3[1], C3 = Jr(r3), E3 = C3[0], R3 = C3[1], I3 = to(v2, E3), S3 = to(m3, R3), N3 = function(t4, e4, n4, r4, o4, a4, i4, s4) {
    var u4, l4, c4;
    if ("number" == typeof t4) {
      var h4 = 0 === t4 ? "VALID" : "NUMBER";
      u4 = { top: t4, bottom: t4, left: t4, right: t4, type: h4 };
      var p4 = function(t5, e5, n5, r5, o5, a5) {
        null == o5 && (o5 = Qr(t5, e5, r5));
        var i5 = t5[0], s5 = t5[1], u5 = eo((i5 - e5 + 2 * o5) / r5 + 1, a5);
        d(b(u5), function() {
          return "The output # of rows (" + u5 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var l5 = eo((s5 - e5 + 2 * o5) / r5 + 1, a5);
        return d(b(l5), function() {
          return "The output # of columns (" + l5 + ") must be an integer. Change the stride and/or zero pad parameters";
        }), [u5, l5, n5];
      }([e4, n4, 1], a4, 1, r4, t4, s4);
      l4 = p4[0], c4 = p4[1];
    } else if ("same" === t4) {
      l4 = Math.ceil(e4 / r4), c4 = Math.ceil(n4 / o4);
      var f4 = Math.max(0, (l4 - 1) * r4 + a4 - e4), v3 = Math.max(0, (c4 - 1) * o4 + i4 - n4), m4 = Math.floor(f4 / 2), g3 = f4 - m4, y4 = Math.floor(v3 / 2), x4 = v3 - y4;
      u4 = { top: m4, bottom: g3, left: y4, right: x4, type: "SAME" };
    } else {
      if ("valid" !== t4) throw Error("Unknown padding parameter: " + t4);
      u4 = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, l4 = Math.ceil((e4 - a4 + 1) / r4), c4 = Math.ceil((n4 - i4 + 1) / o4);
    }
    return { padInfo: u4, outHeight: l4, outWidth: c4 };
  }(o3, c3, h3, x3, w3, I3, S3, a3), k3 = N3.padInfo, A3 = N3.outHeight, T3 = N3.outWidth, D3 = i3 ? g2 * p3 : g2;
  return "channelsFirst" === s3 ? f3 = [l3, D3, A3, T3] : "channelsLast" === s3 && (f3 = [l3, A3, T3, D3]), { batchSize: l3, dataFormat: s3, inHeight: c3, inWidth: h3, inChannels: p3, outHeight: A3, outWidth: T3, outChannels: D3, padInfo: k3, strideHeight: x3, strideWidth: w3, filterHeight: v2, filterWidth: m3, effectiveFilterHeight: I3, effectiveFilterWidth: S3, dilationHeight: E3, dilationWidth: R3, inShape: t3, outShape: f3, filterShape: e3 };
}
function Yr(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = false), void 0 === i3 && (i3 = "channelsLast");
  var s3 = [-1, -1, -1, -1, -1], u3 = s3[0], l3 = s3[1], c3 = s3[2], h3 = s3[3], p3 = s3[4];
  if ("channelsLast" === i3) u3 = t3[0], l3 = t3[1], c3 = t3[2], h3 = t3[3], p3 = t3[4];
  else {
    if ("channelsFirst" !== i3) throw new Error("Unknown dataFormat " + i3);
    u3 = t3[0], p3 = t3[1], l3 = t3[2], c3 = t3[3], h3 = t3[4];
  }
  var f3, d3 = e3[0], v2 = e3[1], m3 = e3[2], g2 = e3[4], y3 = Zr(n3), x3 = y3[0], b3 = y3[1], w3 = y3[2], C3 = Zr(r3), E3 = C3[0], R3 = C3[1], I3 = C3[2], S3 = function(t4, e4, n4, r4, o4, a4, i4, s4, u4, l4) {
    var c4, h4, p4, f4;
    if ("same" === t4) {
      h4 = Math.ceil(e4 / o4), p4 = Math.ceil(n4 / a4), f4 = Math.ceil(r4 / i4);
      var d4 = (h4 - 1) * o4 + s4 - e4, v3 = (p4 - 1) * a4 + u4 - n4, m4 = (f4 - 1) * i4 + l4 - r4, g3 = Math.floor(d4 / 2), y4 = d4 - g3, x4 = Math.floor(v3 / 2), b4 = v3 - x4, w4 = Math.floor(m4 / 2), C4 = m4 - w4;
      c4 = { top: x4, bottom: b4, left: w4, right: C4, front: g3, back: y4, type: "SAME" };
    } else {
      if ("valid" !== t4) throw Error("Unknown padding parameter: " + t4);
      c4 = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, h4 = Math.ceil((e4 - s4 + 1) / o4), p4 = Math.ceil((n4 - u4 + 1) / a4), f4 = Math.ceil((r4 - l4 + 1) / i4);
    }
    return { padInfo: c4, outDepth: h4, outHeight: p4, outWidth: f4 };
  }(o3, l3, c3, h3, x3, b3, w3, to(d3, E3), to(v2, R3), to(m3, I3)), N3 = S3.padInfo, k3 = S3.outDepth, A3 = S3.outHeight, T3 = S3.outWidth, D3 = a3 ? g2 * p3 : g2;
  return "channelsFirst" === i3 ? f3 = [u3, D3, k3, A3, T3] : "channelsLast" === i3 && (f3 = [u3, k3, A3, T3, D3]), { batchSize: u3, dataFormat: i3, inDepth: l3, inHeight: c3, inWidth: h3, inChannels: p3, outDepth: k3, outHeight: A3, outWidth: T3, outChannels: D3, padInfo: N3, strideDepth: x3, strideHeight: b3, strideWidth: w3, filterDepth: d3, filterHeight: v2, filterWidth: m3, dilationDepth: E3, dilationHeight: R3, dilationWidth: I3, inShape: t3, outShape: f3, filterShape: e3 };
}
function Qr(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = 1);
  var o3 = to(e3, r3);
  return Math.floor((t3[0] * (n3 - 1) - n3 + o3) / 2);
}
function Jr(t3) {
  return "number" == typeof t3 ? [t3, t3] : t3;
}
function Zr(t3) {
  return "number" == typeof t3 ? [t3, t3, t3] : t3;
}
function to(t3, e3) {
  return e3 <= 1 ? t3 : t3 + (t3 - 1) * (e3 - 1);
}
function eo(t3, e3) {
  if (!e3) return t3;
  switch (e3) {
    case "round":
      return Math.round(t3);
    case "ceil":
      return Math.ceil(t3);
    case "floor":
      return Math.floor(t3);
    default:
      throw new Error("Unknown roundingMode " + e3);
  }
}
function no(t3) {
  var e3 = Jr(t3), n3 = e3[0], r3 = e3[1];
  return 1 === n3 && 1 === r3;
}
function ro(t3, e3) {
  return no(t3) || no(e3);
}
function oo(t3, e3, n3) {
  if ("complex64" === e3) {
    if ("complex64" === t3.dtype) return t3.clone();
    var r3 = En(t3.shape), o3 = t3.toFloat(), a3 = n3.complex(o3, r3);
    return r3.dispose(), o3.dispose(), a3;
  }
  if (!O(t3.dtype, e3)) return ht.make(t3.shape, { dataId: t3.dataId }, e3);
  if ("complex64" === t3.dtype) {
    var i3 = n3.real(t3);
    a3 = i3.cast(e3);
    return i3.dispose(), a3;
  }
  if ("int32" === e3) return n3.int(t3);
  if ("bool" === e3) {
    var s3 = vn(0, t3.dtype);
    a3 = n3.notEqual(t3, s3);
    return s3.dispose(), a3;
  }
  throw new Error("Error in Cast: failed to cast " + t3.dtype + " to " + e3);
}
function ao(t3, e3) {
  return ht.make(e3, { dataId: t3.dataId }, t3.dtype);
}
function io(t3, e3, n3) {
  var r3 = (e3 - t3) / (n3 - 1), o3 = j(n3, "float32");
  o3[0] = t3;
  for (var a3 = 1; a3 < o3.length; a3++) o3[a3] = o3[a3 - 1] + r3;
  return mn(o3, "float32");
}
var so = Object.freeze({ castTensor: oo, reshapeTensor: ao, linspaceImpl: io, upcastType: bt, axesAreInnerMostDims: Je, combineLocations: Ze, computeOutAndReduceShapes: tn, expandShapeToKeepDim: en, assertAxesAreInnerMostDims: nn, getAxesPermutation: rn, getUndoAxesPermutation: on, getInnerMostAxes: an, getBroadcastDims: Hr, getReductionAxes: $r, assertAndGetBroadcastShape: jr, assertParamsConsistent: sn, computeOutShape: un, computePool2DInfo: Kr, computeConv2DInfo: Xr, computeConv3DInfo: Yr, computeDefaultPad: Qr, tupleValuesAreOne: no, eitherStridesOrDilationsAreOne: ro });
function uo(t3, e3) {
  if (t3.length !== e3.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + t3.length + ", imag: " + e3.length + ".");
  for (var n3 = new Float32Array(2 * t3.length), r3 = 0; r3 < n3.length; r3 += 2) n3[r3] = t3[r3 / 2], n3[r3 + 1] = e3[r3 / 2];
  return n3;
}
function lo(t3, e3) {
  return { real: t3[2 * e3], imag: t3[2 * e3 + 1] };
}
function co(t3, e3, n3, r3) {
  t3[2 * r3] = e3, t3[2 * r3 + 1] = n3;
}
function ho(t3, e3, n3) {
  var r3 = (n3 ? 2 : -2) * Math.PI * (t3 / e3);
  return { real: Math.cos(r3), imag: Math.sin(r3) };
}
function po(t3, e3, n3, r3, o3) {
  for (var a3 = Array.from(e3).map(function(t4, e4) {
    return { score: t4, boxIndex: e4 };
  }).filter(function(t4) {
    return t4.score > o3;
  }).sort(function(t4, e4) {
    return e4.score - t4.score;
  }), i3 = [], s3 = 0; s3 < a3.length; s3++) {
    var u3 = a3[s3], l3 = u3.score, c3 = u3.boxIndex;
    if (l3 < o3) break;
    for (var h3 = false, p3 = i3.length - 1; p3 >= 0; --p3) {
      if (fo(t3, c3, i3[p3]) >= r3) {
        h3 = true;
        break;
      }
    }
    if (!h3 && (i3.push(c3), i3.length >= n3)) break;
  }
  return mn(i3, "int32");
}
function fo(t3, e3, n3) {
  var r3 = t3.subarray(4 * e3, 4 * e3 + 4), o3 = t3.subarray(4 * n3, 4 * n3 + 4), a3 = Math.min(r3[0], r3[2]), i3 = Math.min(r3[1], r3[3]), s3 = Math.max(r3[0], r3[2]), u3 = Math.max(r3[1], r3[3]), l3 = Math.min(o3[0], o3[2]), c3 = Math.min(o3[1], o3[3]), h3 = Math.max(o3[0], o3[2]), p3 = Math.max(o3[1], o3[3]), f3 = (s3 - a3) * (u3 - i3), d3 = (h3 - l3) * (p3 - c3);
  if (f3 <= 0 || d3 <= 0) return 0;
  var v2 = Math.max(a3, l3), m3 = Math.max(i3, c3), g2 = Math.min(s3, h3), y3 = Math.min(u3, p3), x3 = Math.max(g2 - v2, 0) * Math.max(y3 - m3, 0);
  return x3 / (f3 + d3 - x3);
}
function vo(t3, e3, n3) {
  var r3 = new Array(t3.rank).fill(0), o3 = t3.shape.slice();
  return e3.map(function(e4) {
    o3[n3] = e4;
    var a3 = t3.slice(r3, o3);
    return r3[n3] += e4, a3;
  });
}
function mo(t3, e3) {
  for (var n3 = new Array(t3.rank), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3.shape[r3] * e3[r3];
  var o3 = $n(n3, t3.dtype);
  for (r3 = 0; r3 < o3.values.length; ++r3) {
    for (var a3 = o3.indexToLoc(r3), i3 = new Array(t3.rank), s3 = 0; s3 < i3.length; s3++) i3[s3] = a3[s3] % t3.shape[s3];
    var u3 = t3.locToIndex(i3);
    o3.values[r3] = t3.values[u3];
  }
  return o3.toTensor();
}
function go(t3, e3, n3, r3, o3) {
  for (var a3 = e3[e3.length - 1], i3 = [t3.length / a3, a3], s3 = i3[0], u3 = i3[1], l3 = k(n3, s3 * r3), c3 = k("int32", s3 * r3), h3 = 0; h3 < s3; h3++) {
    for (var p3 = h3 * u3, f3 = t3.subarray(p3, p3 + u3), d3 = [], v2 = 0; v2 < f3.length; v2++) d3.push({ value: f3[v2], index: v2 });
    d3.sort(function(t4, e4) {
      return e4.value - t4.value;
    });
    var m3 = h3 * r3, g2 = l3.subarray(m3, m3 + r3), y3 = c3.subarray(m3, m3 + r3);
    for (v2 = 0; v2 < r3; v2++) g2[v2] = d3[v2].value, y3[v2] = d3[v2].index;
  }
  var x3 = e3.slice();
  return x3[x3.length - 1] = r3, [fn(l3, x3, n3), fn(c3, x3, "int32")];
}
function yo(t3, e3) {
  for (var n3 = [], r3 = 0; r3 < e3.length; r3++) e3[r3] && n3.push(r3);
  var o3 = $n(t3, "int32"), a3 = $n([n3.length, t3.length], "int32");
  for (r3 = 0; r3 < n3.length; r3++) {
    var i3 = o3.indexToLoc(n3[r3]), s3 = r3 * t3.length;
    a3.values.set(i3, s3);
  }
  return a3.toTensor();
}
var xo = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.outputShape = [], this.outputShape = t3, this.variableNames = e3.map(function(t4, e4) {
      return "T" + e4;
    });
    var n3 = [];
    this.variableNames.forEach(function(t4) {
      n3.push("float v" + t4 + " = get" + t4 + "AtOutCoords();");
    });
    var r3 = this.variableNames.map(function(t4) {
      return "v" + t4;
    }).join(" + ");
    this.userCode = "\n      void main() {\n        " + n3.join("\n        ") + "\n\n        float result = " + r3 + ";\n        setOutput(result);\n      }\n    ";
  };
}();
var bo = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.outputShape = [], this.usesPackedTextures = true, this.outputShape = t3, this.variableNames = e3.map(function(t4, e4) {
      return "T" + e4;
    });
    var n3 = [];
    this.variableNames.forEach(function(t4) {
      n3.push("vec4 v" + t4 + " = get" + t4 + "AtOutCoords();");
    });
    var r3 = this.variableNames.map(function(t4) {
      return "v" + t4;
    }).join(" + ");
    this.userCode = "\n      void main() {\n        " + n3.join("\n        ") + "\n\n        vec4 result = " + r3 + ";\n        setOutput(result);\n      }\n    ";
  };
}();
var wo = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["A"];
    var r3 = t3.windowSize, o3 = t3.batchSize, a3 = t3.inSize, i3 = Math.ceil(a3 / r3);
    n3 || this.variableNames.push("bestIndicesA"), this.outputShape = [o3, i3];
    var s3 = "max" === e3 ? ">" : "<", u3 = n3 ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r3 + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + r3 + "; i++) {\n          int inIdx = " + u3 + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s3 + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
  };
}();
function Co(t3, e3) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e3).map(function(e4) {
    return t3 + "." + e4;
  });
}
function Eo(t3, e3) {
  return 1 === e3 ? [t3] : Co(t3, e3);
}
function Ro() {
  var t3, e3, n3, r3, o3, a3, i3, u3, l3, c3;
  return 2 === s.getNumber("WEBGL_VERSION") ? (t3 = "#version 300 es", e3 = "in", n3 = "out", r3 = "in", o3 = "texture", a3 = "outputColor", i3 = "out vec4 outputColor;", u3 = "\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 0. || val == 0.) ? false : true;\n      }\n    ", l3 = "\n      const float INFINITY = uintBitsToFloat(uint(0x7f800000));\n    ", c3 = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (t3 = "", e3 = "attribute", n3 = "varying", r3 = "varying", o3 = "texture2D", a3 = "gl_FragColor", i3 = "", u3 = "\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n    ", l3 = "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ", c3 = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), { version: t3, attribute: e3, varyingVs: n3, varyingFs: r3, texture2D: o3, output: a3, defineOutput: i3, defineSpecialNaN: u3, defineSpecialInf: l3, defineRound: c3 };
}
function Io(t3, e3, n3) {
  void 0 === n3 && (n3 = "index");
  var r3 = G(e3);
  return r3.map(function(e4, o3) {
    return "int " + t3[o3] + " = " + n3 + " / " + e4 + "; " + (o3 === r3.length - 1 ? "int " + t3[o3 + 1] + " = " + n3 + " - " + t3[o3] + " * " + e4 : "index -= " + t3[o3] + " * " + e4) + ";";
  }).join("");
}
function So(t3) {
  var e3 = G(t3).map(function(t4) {
    return t4.toString();
  });
  return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + e3[0] + " + coords.y * " + e3[1] + " + coords.z;\n  }\n";
}
var No = "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
function ko(t3, e3, n3, r3) {
  var o3 = [];
  t3.forEach(function(t4) {
    var e4 = y(t4.shapeInfo.logicalShape);
    t4.shapeInfo.isUniform ? o3.push("uniform float " + t4.name + (e4 > 1 ? "[" + e4 + "]" : "") + ";") : (o3.push("uniform sampler2D " + t4.name + ";"), o3.push("uniform int offset" + t4.name + ";"));
  });
  var a3, i3, s3 = o3.join("\n"), u3 = t3.map(function(t4) {
    return function(t5, e4, n4) {
      void 0 === n4 && (n4 = false);
      var r4 = "";
      r4 += n4 ? To(t5) : Ao(t5);
      var o4 = t5.shapeInfo.logicalShape, a4 = e4.logicalShape;
      o4.length <= a4.length && (r4 += n4 ? function(t6, e5) {
        var n5, r5 = t6.name, o5 = r5.charAt(0).toUpperCase() + r5.slice(1), a5 = "get" + o5 + "AtOutCoords", i4 = t6.shapeInfo.logicalShape.length, s4 = e5.logicalShape.length, u4 = Hr(t6.shapeInfo.logicalShape, e5.logicalShape), l4 = Po(s4), c4 = s4 - i4, h4 = ["x", "y", "z", "w", "u", "v"];
        n5 = 0 === i4 ? "" : s4 < 2 && u4.length >= 1 ? "coords = 0;" : u4.map(function(t7) {
          return "coords." + h4[t7 + c4] + " = 0;";
        }).join("\n");
        var p4 = "";
        p4 = s4 < 2 && i4 > 0 ? "coords" : t6.shapeInfo.logicalShape.map(function(t7, e6) {
          return "coords." + h4[e6 + c4];
        }).join(", ");
        var f3 = "return outputValue;", d3 = 1 === y(t6.shapeInfo.logicalShape), v2 = 1 === y(e5.logicalShape);
        if (1 !== i4 || d3 || v2) {
          if (d3 && !v2) f3 = 1 === s4 ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
          else if (u4.length) {
            var m3 = i4 - 2, g2 = i4 - 1;
            u4.indexOf(m3) > -1 && u4.indexOf(g2) > -1 ? f3 = "return vec4(outputValue.x);" : u4.indexOf(m3) > -1 ? f3 = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u4.indexOf(g2) > -1 && (f3 = "return vec4(outputValue.xx, outputValue.zz);");
          }
        } else f3 = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
        return "\n    vec4 " + a5 + "() {\n      " + l4 + " coords = getOutputCoords();\n      " + n5 + "\n      vec4 outputValue = get" + o5 + "(" + p4 + ");\n      " + f3 + "\n    }\n  ";
      }(t5, e4) : function(t6, e5) {
        var n5 = t6.name, r5 = n5.charAt(0).toUpperCase() + n5.slice(1), o5 = "get" + r5 + "AtOutCoords", a5 = e5.texShape, i4 = t6.shapeInfo.texShape, s4 = t6.shapeInfo.logicalShape.length, u4 = e5.logicalShape.length;
        if (!t6.shapeInfo.isUniform && s4 === u4 && null == t6.shapeInfo.flatOffset && x(i4, a5)) return "\n      float " + o5 + "() {\n        return sampleTexture(" + n5 + ", resultUV);\n      }\n    ";
        var l4, c4 = Po(u4), h4 = Hr(t6.shapeInfo.logicalShape, e5.logicalShape), p4 = u4 - s4, f3 = ["x", "y", "z", "w", "u", "v"];
        l4 = 0 === s4 ? "" : u4 < 2 && h4.length >= 1 ? "coords = 0;" : h4.map(function(t7) {
          return "coords." + f3[t7 + p4] + " = 0;";
        }).join("\n");
        var d3 = "";
        d3 = u4 < 2 && s4 > 0 ? "coords" : t6.shapeInfo.logicalShape.map(function(t7, e6) {
          return "coords." + f3[e6 + p4];
        }).join(", ");
        return "\n    float " + o5 + "() {\n      " + c4 + " coords = getOutputCoords();\n      " + l4 + "\n      return get" + r5 + "(" + d3 + ");\n    }\n  ";
      }(t5, e4));
      return r4;
    }(t4, e3, r3);
  }).join("\n"), l3 = e3.texShape, c3 = Ro(), h3 = function(t4) {
    return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + t4.texture2D + "(textureSampler, uv).r;\n    }\n  ";
  }(c3), p3 = function(t4) {
    return t4.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + t4.varyingFs + " vec2 resultUV;\n    " + t4.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    #define isnan(value) isnan_custom(value)\n    " + t4.defineSpecialNaN + "\n    bvec4 isnan_custom(vec4 val) {\n      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n    }\n\n    " + t4.defineSpecialInf + "\n    " + t4.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + Do + "\n    " + _o + "\n    " + Oo + "\n  ";
  }(c3);
  return e3.isPacked ? (a3 = function(t4, e4) {
    switch (t4.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t5, e5) {
          var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)];
          if (1 === n5[0]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n5[1] + ".0);\n      }\n    ";
          if (1 === n5[1]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n5[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n      return 2 * (resTexRC.x * " + n5[1] + " + resTexRC.y);\n    }\n  ";
        }(0, e4);
      case 2:
        return function(t5, e5) {
          var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)];
          if (x(t5, e5)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n5[0] + ", " + n5[1] + "));\n      }\n    ";
          var r5 = Math.ceil(t5[1] / 2);
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n\n      int index = resTexRC.x * " + n5[1] + " + resTexRC.y;\n      int r = 2 * (index / " + r5 + ");\n      int c = imod(index, " + r5 + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
        }(t4, e4);
      case 3:
        return n4 = t4, r4 = e4, o4 = [Math.ceil(r4[0] / 2), Math.ceil(r4[1] / 2)], a4 = Math.ceil(n4[2] / 2), i4 = a4 * Math.ceil(n4[1] / 2), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + o4[0] + ", " + o4[1] + "));\n      int index = resTexRC.x * " + o4[1] + " + resTexRC.y;\n\n      int b = index / " + i4 + ";\n      index -= b * " + i4 + ";\n\n      int r = 2 * (index / " + a4 + ");\n      int c = imod(index, " + a4 + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
      default:
        return function(t5, e5) {
          for (var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)], r5 = Math.ceil(t5[t5.length - 1] / 2), o5 = r5 * Math.ceil(t5[t5.length - 2] / 2), a5 = o5, i5 = "", s4 = "b, r, c", u4 = 2; u4 < t5.length - 1; u4++) a5 *= t5[t5.length - u4 - 1], i5 = "\n      int b" + u4 + " = index / " + a5 + ";\n      index -= b" + u4 + " * " + a5 + ";\n    " + i5, s4 = "b" + u4 + ", " + s4;
          return "\n    ivec" + t5.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n      int index = resTexRC.x * " + n5[1] + " + resTexRC.y;\n\n      " + i5 + "\n\n      int b = index / " + o5 + ";\n      index -= b * " + o5 + ";\n\n      int r = 2 * (index / " + r5 + ");\n      int c = imod(index, " + r5 + ") * 2;\n\n      return ivec" + t5.length + "(" + s4 + ");\n    }\n  ";
        }(t4, e4);
    }
    var n4, r4, o4, a4, i4;
  }(e3.logicalShape, l3), i3 = function(t4) {
    return "\n    void setOutput(vec4 val) {\n      " + t4.output + " = val;\n    }\n  ";
  }(c3)) : (a3 = function(t4, e4) {
    switch (t4.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t5, e5) {
          if (1 === e5[0]) return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + e5[1] + ".0);\n      }\n    ";
          if (1 === e5[1]) return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + e5[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e5[0] + ", " + e5[1] + "));\n      return resTexRC.x * " + e5[1] + " + resTexRC.y;\n    }\n  ";
        }(0, e4);
      case 2:
        return function(t5, e5) {
          if (x(t5, e5)) return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + e5[0] + ", " + e5[1] + "));\n      }\n    ";
          if (1 === t5[1]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e5[0] + ", " + e5[1] + "));\n        int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
          if (1 === t5[0]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e5[0] + ", " + e5[1] + "));\n        int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n      int r = index / " + t5[1] + ";\n      int c = index - r * " + t5[1] + ";\n      return ivec2(r, c);\n    }\n  ";
        }(t4, e4);
      case 3:
        return n4 = e4, r4 = Io(["r", "c", "d"], t4), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n4[0] + ", " + n4[1] + "));\n      int index = resTexRC.x * " + n4[1] + " + resTexRC.y;\n      " + r4 + "\n      return ivec3(r, c, d);\n    }\n  ";
      case 4:
        return function(t5, e5) {
          var n5 = Io(["r", "c", "d", "d2"], t5);
          return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n      " + n5 + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
        }(t4, e4);
      case 5:
        return function(t5, e5) {
          var n5 = Io(["r", "c", "d", "d2", "d3"], t5);
          return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + e5[0] + ",\n                             " + e5[1] + "));\n\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n\n      " + n5 + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
        }(t4, e4);
      case 6:
        return function(t5, e5) {
          var n5 = Io(["r", "c", "d", "d2", "d3", "d4"], t5);
          return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n\n      " + n5 + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
        }(t4, e4);
      default:
        throw new Error(t4.length + "-D output sampling is not yet supported");
    }
    var n4, r4;
  }(e3.logicalShape, l3), i3 = function(t4) {
    return "\n    void setOutput(float val) {\n      " + t4.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
  }(c3)), r3 && (p3 += Fo), [p3, h3, i3, s3, a3, u3, n3].join("\n");
}
function Ao(t3) {
  var e3 = t3.shapeInfo.logicalShape;
  switch (e3.length) {
    case 0:
      return function(t4) {
        var e4 = t4.name, n3 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1);
        if (t4.shapeInfo.isUniform) return "float " + n3 + "() {return " + e4 + ";}";
        var r3 = t4.shapeInfo.texShape, o3 = r3[0], a3 = r3[1];
        if (1 === o3 && 1 === a3) return "\n      float " + n3 + "() {\n        return sampleTexture(" + e4 + ", halfCR);\n      }\n    ";
        var i3 = t4.shapeInfo.texShape, s3 = i3[0], u3 = i3[1], l3 = Mo(e4);
        return "\n    float " + n3 + "() {\n      vec2 uv = uvFromFlat(" + s3 + ", " + u3 + ", " + l3 + ");\n      return sampleTexture(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 1:
      return function(t4) {
        var e4 = t4.name, n3 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1);
        if (t4.shapeInfo.isUniform) return "\n      float " + n3 + "(int index) {\n        " + Bo(t4) + "\n      }\n    ";
        var r3 = t4.shapeInfo.texShape, o3 = r3[0], a3 = r3[1];
        if (1 === a3 && 1 === o3) return "\n      float " + n3 + "(int index) {\n        return sampleTexture(" + e4 + ", halfCR);\n      }\n    ";
        var i3 = Mo(e4);
        if (1 === a3) return "\n      float " + n3 + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i3 + ") + 0.5) / " + o3 + ".0);\n        return sampleTexture(" + e4 + ", uv);\n      }\n    ";
        if (1 === o3) return "\n      float " + n3 + "(int index) {\n        vec2 uv = vec2((float(index + " + i3 + ") + 0.5) / " + a3 + ".0, 0.5);\n        return sampleTexture(" + e4 + ", uv);\n      }\n    ";
        return "\n    float " + n3 + "(int index) {\n      vec2 uv = uvFromFlat(" + o3 + ", " + a3 + ", index + " + i3 + ");\n      return sampleTexture(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 2:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = t4.shapeInfo.texShape;
        if (null != o3 && x(e4, o3)) {
          var a3 = o3[0], i3 = o3[1];
          return "\n    float " + r3 + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i3 + ".0, " + a3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        }
        var s3 = N(e4), u3 = s3.newShape, l3 = s3.keptDims, c3 = u3;
        if (c3.length < e4.length) {
          var h3 = Lo(t4, c3);
          return "\n      " + Ao(h3) + "\n      float " + r3 + "(int row, int col) {\n        return " + r3 + "(" + Wo(["row", "col"], l3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + e4[1] + ", 1)));\n        " + Bo(t4) + "\n      }\n    ";
        var p3 = o3[0], f3 = o3[1], d3 = Mo(n3);
        if (1 === f3) return "\n    float " + r3 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d3 + "), vec3(" + e4[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + p3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        if (1 === p3) return "\n    float " + r3 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d3 + "), vec3(" + e4[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + f3 + ".0, 0.5);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        return "\n  float " + r3 + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + e4[1] + " + col + " + d3 + ";\n    vec2 uv = uvFromFlat(" + p3 + ", " + f3 + ", index);\n    return sampleTexture(" + n3 + ", uv);\n  }\n";
      }(t3);
    case 3:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[1] * e4[2], a3 = e4[2], i3 = N(e4), s3 = i3.newShape, u3 = i3.keptDims, l3 = s3;
        if (l3.length < e4.length) {
          var c3 = Lo(t4, l3);
          return "\n        " + Ao(c3) + "\n        float " + r3 + "(int row, int col, int depth) {\n          return " + r3 + "(" + Wo(["row", "col", "depth"], u3) + ");\n        }\n      ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + o3 + ", " + a3 + ", 1)));\n        " + Bo(t4) + "\n      }\n    ";
        var h3 = t4.shapeInfo.texShape, p3 = h3[0], f3 = h3[1], d3 = t4.shapeInfo.flatOffset;
        if (f3 === o3 && null == d3) return "\n        float " + r3 + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + a3 + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + f3 + ".0, " + p3 + ".0);\n          return sampleTexture(" + n3 + ", uv);\n        }\n      ";
        if (f3 === a3 && null == d3) return "\n    float " + r3 + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + e4[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + f3 + ".0, " + p3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        var v2 = Mo(n3);
        return "\n      float " + r3 + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + o3 + " + col * " + a3 + " + depth + " + v2 + ";\n        vec2 uv = uvFromFlat(" + p3 + ", " + f3 + ", index);\n        return sampleTexture(" + n3 + ", uv);\n      }\n  ";
      }(t3);
    case 4:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[3], a3 = e4[2] * o3, i3 = e4[1] * a3, s3 = N(e4), u3 = s3.newShape, l3 = s3.keptDims;
        if (u3.length < e4.length) {
          var c3 = Lo(t4, u3);
          return "\n      " + Ao(c3) + "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        return " + r3 + "(" + Wo(["row", "col", "depth", "depth2"], l3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i3 + ", " + a3 + ", " + o3 + ", 1)));\n        " + Bo(t4) + "\n      }\n    ";
        var h3 = t4.shapeInfo.flatOffset, p3 = t4.shapeInfo.texShape, f3 = p3[0], d3 = p3[1];
        if (d3 === i3 && null == h3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + a3 + ", " + o3 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + d3 + ".0, " + f3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (d3 === o3 && null == h3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + e4[1] * e4[2] + ", " + e4[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + d3 + ".0, " + f3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var v2 = Mo(n3);
        return "\n    float " + r3 + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i3 + " + col * " + a3 + " +\n          depth * " + o3 + " + depth2;\n      vec2 uv = uvFromFlat(" + f3 + ", " + d3 + ", index + " + v2 + ");\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    case 5:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[4], a3 = e4[3] * o3, i3 = e4[2] * a3, s3 = e4[1] * i3, u3 = N(e4), l3 = u3.newShape, c3 = u3.keptDims;
        if (l3.length < e4.length) {
          var h3 = Lo(t4, l3);
          return "\n      " + Ao(h3) + "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r3 + "(" + Wo(["row", "col", "depth", "depth2", "depth3"], c3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + s3 + ", " + i3 + ", " + a3 + ", " + o3 + ")) +\n          depth3;\n        " + Bo(t4) + "\n      }\n    ";
        var p3 = t4.shapeInfo.flatOffset, f3 = t4.shapeInfo.texShape, d3 = f3[0], v2 = f3[1];
        if (v2 === s3 && null == p3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i3 + ", " + a3 + ", " + o3 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + v2 + ".0, " + d3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (v2 === o3 && null == p3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + e4[1] * e4[2] * e4[3] + ",\n               " + e4[2] * e4[3] + ", " + e4[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + v2 + ".0, " + d3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var m3 = Mo(n3);
        return "\n    float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + s3 + " + col * " + i3 + " + depth * " + a3 + " +\n          depth2 * " + o3 + " + depth3 + " + m3 + ";\n      vec2 uv = uvFromFlat(" + d3 + ", " + v2 + ", index);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    case 6:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = N(e4), a3 = o3.newShape, i3 = o3.keptDims;
        if (a3.length < e4.length) {
          var s3 = Lo(t4, a3);
          return "\n      " + Ao(s3) + "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r3 + "(" + Wo(["row", "col", "depth", "depth2", "depth3", "depth4"], i3) + ");\n      }\n    ";
        }
        var u3 = e4[5], l3 = e4[4] * u3, c3 = e4[3] * l3, h3 = e4[2] * c3, p3 = e4[1] * h3;
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + p3 + ", " + h3 + ", " + c3 + ", " + l3 + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + u3 + ", 1)));\n        " + Bo(t4) + "\n      }\n    ";
        var f3 = t4.shapeInfo.flatOffset, d3 = t4.shapeInfo.texShape, v2 = d3[0], m3 = d3[1];
        if (m3 === p3 && null == f3) return "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + h3 + ", " + c3 + ", " + l3 + ", " + u3 + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + m3 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (m3 === u3 && null == f3) return "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + e4[1] * e4[2] * e4[3] * e4[4] + ",\n               " + e4[2] * e4[3] * e4[4] + ",\n               " + e4[3] * e4[4] + ",\n               " + e4[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + m3 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var g2 = Mo(n3);
        return "\n    float " + r3 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + p3 + " + col * " + h3 + " + depth * " + c3 + " +\n          depth2 * " + l3 + " + depth3 * " + u3 + " + depth4 + " + g2 + ";\n      vec2 uv = uvFromFlat(" + v2 + ", " + m3 + ", index);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    default:
      throw new Error(e3.length + "-D input sampling is not yet supported");
  }
}
function To(t3) {
  var e3, n3, r3;
  switch (t3.shapeInfo.logicalShape.length) {
    case 0:
      return e3 = t3.name, n3 = "get" + e3.charAt(0).toUpperCase() + e3.slice(1), r3 = Ro(), "\n    vec4 " + n3 + "() {\n      return " + r3.texture2D + "(" + e3 + ", halfCR);\n    }\n  ";
    case 1:
      return function(t4) {
        var e4 = t4.name, n4 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1), r4 = t4.shapeInfo.texShape, o3 = [Math.ceil(r4[0] / 2), Math.ceil(r4[1] / 2)], a3 = Ro();
        return "\n    vec4 " + n4 + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o3[0] + ", " + o3[1] + ", index);\n      return " + a3.texture2D + "(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 2:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n4 = t4.name, r4 = "get" + n4.charAt(0).toUpperCase() + n4.slice(1), o3 = t4.shapeInfo.texShape, a3 = o3[0], i3 = o3[1], s3 = Ro();
        if (null != o3 && x(e4, o3)) return "\n      vec4 " + r4 + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i3 + ".0, " + a3 + ".0);\n\n        return " + s3.texture2D + "(" + n4 + ", uv);\n      }\n    ";
        var u3 = [Math.ceil(o3[0] / 2), Math.ceil(o3[1] / 2)], l3 = Math.ceil(e4[1] / 2);
        return "\n    vec4 " + r4 + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + l3 + ", " + u3[0] + ", " + u3[1] + ", row, col);\n      return " + s3.texture2D + "(" + n4 + ", uv);\n    }\n  ";
      }(t3);
    case 3:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n4 = t4.name, r4 = "get" + n4.charAt(0).toUpperCase() + n4.slice(1), o3 = t4.shapeInfo.texShape, a3 = [Math.ceil(o3[0] / 2), Math.ceil(o3[1] / 2)];
        if (1 === e4[0]) {
          var i3 = e4.slice(1), s3 = Lo(t4, i3);
          return "\n        " + To(s3) + "\n        vec4 " + r4 + "(int b, int row, int col) {\n          return " + r4 + "(" + Wo(["b", "row", "col"], [1, 2]) + ");\n        }\n      ";
        }
        var u3 = a3[0], l3 = a3[1], c3 = Math.ceil(e4[2] / 2), h3 = c3 * Math.ceil(e4[1] / 2), p3 = Ro();
        return "\n    vec4 " + r4 + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + u3 + ", " + l3 + ", " + h3 + ", " + c3 + ", b, row, col);\n      return " + p3.texture2D + "(" + n4 + ", uv);\n    }\n  ";
      }(t3);
    default:
      return function(t4) {
        for (var e4 = t4.shapeInfo.logicalShape, n4 = e4.length, r4 = t4.name, o3 = "get" + r4.charAt(0).toUpperCase() + r4.slice(1), a3 = t4.shapeInfo.texShape, i3 = [Math.ceil(a3[0] / 2), Math.ceil(a3[1] / 2)], s3 = i3[0], u3 = i3[1], l3 = Math.ceil(e4[n4 - 1] / 2), c3 = l3 * Math.ceil(e4[n4 - 2] / 2), h3 = "int b, int row, int col", p3 = "b * " + c3 + " + (row / 2) * " + l3 + " + (col / 2)", f3 = 2; f3 < n4 - 1; f3++) h3 = "int b" + f3 + ", " + h3, c3 *= e4[n4 - f3 - 1], p3 = "b" + f3 + " * " + c3 + " + " + p3;
        var d3 = Ro();
        return "\n    vec4 " + o3 + "(" + h3 + ") {\n      int index = " + p3 + ";\n      int texR = index / " + u3 + ";\n      int texC = index - texR * " + u3 + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + u3 + ", " + s3 + ");\n      return " + d3.texture2D + "(" + r4 + ", uv);\n    }\n  ";
      }(t3);
  }
}
var Do = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var _o = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var Oo = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var Fo = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
function Mo(t3) {
  return "offset" + t3;
}
function Bo(t3) {
  var e3 = t3.name, n3 = y(t3.shapeInfo.logicalShape);
  return n3 < 2 ? "return " + e3 + ";" : "\n    for (int i = 0; i < " + n3 + "; i++) {\n      if (i == index) {\n        return " + e3 + "[i];\n      }\n    }\n  ";
}
function Po(t3) {
  if (t3 <= 1) return "int";
  if (2 === t3) return "ivec2";
  if (3 === t3) return "ivec3";
  if (4 === t3) return "ivec4";
  if (5 === t3) return "ivec5";
  if (6 === t3) return "ivec6";
  throw Error("GPU for rank " + t3 + " is not yet supported");
}
function Lo(t3, e3) {
  var n3 = JSON.parse(JSON.stringify(t3));
  return n3.shapeInfo.logicalShape = e3, n3;
}
function Wo(t3, e3) {
  return e3.map(function(e4) {
    return t3[e4];
  }).join(", ");
}
var Uo = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, d(t3.length > 2, function() {
      return "Packed arg" + (n3.charAt(0).toUpperCase() + n3.slice(1)) + " supports only inputs with rank above 2.";
    });
    var o3 = t3[t3.length - 1], a3 = Math.ceil(o3 / e3);
    this.outputShape = t3.slice(0, -1), a3 > 1 && this.outputShape.push(a3), r3 || this.variableNames.push("bestIndicesA");
    var i3, s3, u3 = this.outputShape, l3 = u3.length, c3 = Po(l3), h3 = Eo("coords", l3);
    if (1 === a3) {
      var p3 = Po(s3 = l3 + 1);
      i3 = "\n        " + p3 + " sourceLocR = " + p3 + "(" + h3.join() + ", 0);\n        ++" + h3[l3 - 1] + ";\n        " + p3 + " sourceLocG = " + p3 + "(" + h3.join() + ", 0);\n        ++" + h3[l3 - 2] + ";\n        " + p3 + " sourceLocA = " + p3 + "(" + h3.join() + ", 0);\n        --" + h3[l3 - 1] + ";\n        " + p3 + " sourceLocB = " + p3 + "(" + h3.join() + ", 0);\n        --" + h3[l3 - 2] + ";";
    } else s3 = l3, i3 = "\n        " + c3 + " sourceLocR = coords;\n        ++" + h3[l3 - 1] + ";\n        " + c3 + " sourceLocG = coords;\n        ++" + h3[l3 - 2] + ";\n        " + c3 + " sourceLocA = coords;\n        --" + h3[l3 - 1] + ";\n        " + c3 + " sourceLocB = coords;\n        --" + h3[l3 - 2] + ";";
    var f3 = ["x", "y", "z", "w", "u", "v"].slice(0, s3), v2 = "." + f3[s3 - 1], m3 = f3.map(function(t4) {
      return "int " + t4;
    }), g2 = Eo("sourceLocR", s3 - 1).concat("inIdx.r"), y3 = Eo("sourceLocG", s3 - 1).concat("inIdx.g"), x3 = Eo("sourceLocB", s3 - 1).concat("inIdx.b"), b3 = Eo("sourceLocA", s3 - 1).concat("inIdx.a"), w3 = "max" === n3 ? "greaterThan" : "lessThan", C3 = r3 ? "" : "\n          inIdx = round(vec4(getBestIndicesAChannel(" + g2.join() + "),\n                             getBestIndicesAChannel(" + y3.join() + "),\n                             getBestIndicesAChannel(" + x3.join() + "),\n                             getBestIndicesAChannel(" + b3.join() + ")));", E3 = "vec4(\n            getAChannel(" + g2.join() + "),\n            hasNextCol ? getAChannel(" + y3.join() + ") : 0.,\n            hasNextRow ? getAChannel(" + x3.join() + ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" + b3.join() + ") : 0.)", R3 = r3 ? "" : "\n      float getBestIndicesAChannel(" + m3.join() + ") {\n        return getChannel(getBestIndicesA(" + f3.join() + "),\n                                          vec2(" + f3.slice(-2).join() + "));\n      }";
    this.userCode = "\n      float getAChannel(" + m3.join() + ") {\n        return getChannel(getA(" + f3.join() + "),\n                               vec2(" + f3.slice(-2).join() + "));\n      }\n      " + R3 + "\n      void main() {\n        " + c3 + " coords = getOutputCoords();\n        bool hasNextCol = " + h3[l3 - 1] + " < " + (u3[l3 - 1] - 1) + ";\n        bool hasNextRow = " + h3[l3 - 2] + " < " + (u3[l3 - 2] - 1) + ";\n        " + i3 + "\n        ivec4 srcIdx = ivec4(sourceLocR" + v2 + ", sourceLocG" + v2 + ",\n          sourceLocB" + v2 + ", sourceLocA" + v2 + ") * " + e3 + ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " + E3 + ";\n\n        for (int i = 0; i < " + e3 + "; i++) {\n          inIdx = srcIdx;\n          " + C3 + "\n          vec4 candidate = " + E3 + ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" + w3 + "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
  };
}();
var zo = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["dy"], this.outputShape = t3.inShape;
    var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = t3.dilationHeight, i3 = t3.dilationWidth, s3 = t3.effectiveFilterHeight, u3 = t3.effectiveFilterWidth, l3 = s3 - 1 - t3.padInfo.top, c3 = u3 - 1 - t3.padInfo.left, h3 = 1 / (e3 * n3);
    this.userCode = "\n      const ivec2 pads = ivec2(" + l3 + ", " + c3 + ");\n      const float avgMultiplier = float(" + h3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s3 + ";\n            wR += " + a3 + ") {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + u3 + ";\n            wC+= " + i3 + ") {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var Vo = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3, a3) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], jr(t3, e3), jr(t3, n3);
    var i3 = "0.0";
    null != r3 && (jr(t3, r3), this.variableNames.push("offset"), i3 = "getOffsetAtOutCoords()");
    var s3 = "1.0";
    null != o3 && (jr(t3, o3), this.variableNames.push("scale"), s3 = "getScaleAtOutCoords()"), this.outputShape = t3, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i3 + ";\n        float scale = " + s3 + ";\n        float inv = scale * inversesqrt(variance + float(" + a3 + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
  };
}();
var Go = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3, a3) {
    this.usesPackedTextures = true, this.variableNames = ["x", "mean", "variance"], jr(t3, e3), jr(t3, n3);
    var i3 = "vec4(0.0)";
    null != r3 && (jr(t3, r3), this.variableNames.push("offset"), i3 = "getOffsetAtOutCoords()");
    var s3 = "vec4(1.0)";
    null != o3 && (jr(t3, o3), this.variableNames.push("scale"), s3 = "getScaleAtOutCoords()"), this.outputShape = t3, this.userCode = "\n      void main() {\n        vec4 offset = " + i3 + ";\n        vec4 scale = " + s3 + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + a3 + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
  };
}();
var qo = "return areal * breal - aimag * bimag;";
var Ho = "return areal * bimag + aimag * breal;";
var $o = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = jr(e3, n3), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + t3 + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
  };
}();
var jo = "return a + b;";
var Ko = "return a - b;";
var Xo = "return a * b;";
var Yo = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["A", "B"], this.outputShape = jr(e3, n3), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + t3 + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
  };
}();
var Qo = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    void 0 === r3 && (r3 = false), this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.usesPackedTextures = true, this.outputShape = jr(e3, n3);
    var o3 = this.outputShape.length, a3 = "";
    if (r3) if (0 === o3 || 1 === y(this.outputShape)) a3 = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
    else if (a3 = "\n          " + Po(o3) + " coords = getOutputCoords();\n        ", 1 === o3) a3 += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
    else {
      var i3 = Eo("coords", o3);
      a3 += "\n            bool nextRowOutOfBounds =\n              (" + i3[o3 - 2] + " + 1) >= " + this.outputShape[o3 - 2] + ";\n            bool nextColOutOfBounds =\n              (" + i3[o3 - 1] + " + 1) >= " + this.outputShape[o3 - 1] + ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
    }
    this.userCode = "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + t3 + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " + a3 + "\n\n        setOutput(result);\n      }\n    ";
  };
}();
var Jo = function() {
  function t3(t4) {
    this.variableNames = ["A"], this.outputShape = t4, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, min, max));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4, e3) {
    var n3 = this;
    return function(r3, o3) {
      null == n3.minLoc && (n3.minLoc = r3.getUniformLocationNoThrow(o3, "min"), n3.maxLoc = r3.getUniformLocationNoThrow(o3, "max")), r3.gl.uniform1f(n3.minLoc, t4), r3.gl.uniform1f(n3.maxLoc, e3);
    };
  }, t3;
}();
var Zo = function() {
  function t3(t4) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = t4, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(min), vec4(max)));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4, e3) {
    var n3 = this;
    return function(r3, o3) {
      null == n3.minLoc && (n3.minLoc = r3.getUniformLocationNoThrow(o3, "min"), n3.maxLoc = r3.getUniformLocationNoThrow(o3, "max")), r3.gl.uniform1f(n3.minLoc, t4), r3.gl.uniform1f(n3.maxLoc, e3);
    };
  }, t3;
}();
var ta = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["real", "imag"], this.outputShape = t3, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
  };
}();
var ea = /* @__PURE__ */ function() {
  return function(t3) {
    this.outputShape = [], this.outputShape = un(t3, 1), this.variableNames = t3.map(function(t4, e4) {
      return "T" + e4;
    });
    var e3 = new Array(t3.length - 1);
    e3[0] = t3[0][1];
    for (var n3 = 1; n3 < e3.length; n3++) e3[n3] = e3[n3 - 1] + t3[n3][1];
    var r3 = ["if (yC < " + e3[0] + ") setOutput(getT0(yR, yC));"];
    for (n3 = 1; n3 < e3.length; n3++) {
      var o3 = e3[n3 - 1];
      r3.push("else if (yC < " + e3[n3] + ") setOutput(getT" + n3 + "(yR, yC-" + o3 + "));");
    }
    var a3 = e3.length, i3 = e3[e3.length - 1];
    r3.push("else setOutput(getT" + a3 + "(yR, yC-" + i3 + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r3.join("\n        ") + "\n      }\n    ";
  };
}();
var na = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.usesPackedTextures = true, this.outputShape = [], this.outputShape = un(t3, e3);
    var n3 = this.outputShape, r3 = n3.length, o3 = Po(r3), a3 = Eo("coords", r3), i3 = ["x", "y", "z", "w", "u", "v"].slice(0, r3);
    this.variableNames = t3.map(function(t4, e4) {
      return "T" + e4;
    });
    var s3 = new Array(t3.length - 1);
    s3[0] = t3[0][e3];
    for (var u3 = 1; u3 < s3.length; u3++) s3[u3] = s3[u3 - 1] + t3[u3][e3];
    var l3 = i3[e3], c3 = "vec2(" + i3.slice(-2).join() + ")", h3 = i3.join(), p3 = "if (" + l3 + " < " + s3[0] + ")\n          return getChannel(getT0(" + h3 + "), " + c3 + ");";
    for (u3 = 1; u3 < s3.length; u3++) {
      var f3 = s3[u3 - 1];
      p3 += "\n        else if (" + l3 + " < " + s3[u3] + ") {\n          " + l3 + " -= " + f3 + ";\n          return getChannel(getT" + u3 + "(" + h3 + "), " + c3 + ");\n        }";
    }
    var d3 = s3.length;
    p3 += "\n        else {\n          " + l3 + " -= " + s3[s3.length - 1] + ";\n          return getChannel(getT" + d3 + "(" + h3 + "), " + c3 + ");\n        }", this.userCode = "\n      float getValue(" + i3.map(function(t4) {
      return "int " + t4;
    }) + ") {\n        " + p3 + "\n      }\n\n      void main() {\n        " + o3 + " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" + a3 + "), 0., 0., 0.);\n        if (++" + a3[r3 - 1] + " < " + n3[r3 - 1] + ") {\n          result.g = getValue(" + a3 + ");\n        }\n        if (++" + a3[r3 - 2] + " < " + n3[r3 - 2] + ") {\n          result.a = getValue(" + a3 + ");\n        }\n        if (" + a3[r3 - 2] + " < " + n3[r3 - 2] + " &&\n            --" + a3[r3 - 1] + " < " + n3[r3 - 1] + ") {\n          result.b = getValue(" + a3 + ");\n        }\n        setOutput(result);\n      }\n    ";
  };
}();
var ra = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
    var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n            int xR = wR + yR * " + e3 + " - " + r3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n              int xC = wC + yC * " + n3 + " - " + o3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var oa = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
    var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = e3 - 1 - t3.padInfo.top, i3 = n3 - 1 - t3.padInfo.left;
    this.userCode = "\n      const ivec2 pads = ivec2(" + a3 + ", " + i3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + e3 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e3 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n3 + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + t3.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var aa = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
    var e3 = t3.strideDepth, n3 = t3.strideHeight, r3 = t3.strideWidth, o3 = t3.padInfo.front, a3 = t3.padInfo.top, i3 = t3.padInfo.left;
    this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yF = 0; yF < " + t3.outDepth + "; yF++) {\n            int xF = wF + yF * " + e3 + " - " + o3 + ";\n\n            if (xF < 0 || xF >= " + t3.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n              int xR = wR + yR * " + n3 + " - " + a3 + ";\n\n              if (xR < 0 || xR >= " + t3.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n                int xC = wC + yC * " + r3 + " - " + i3 + ";\n\n                if (xC < 0 || xC >= " + t3.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var ia = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
    var e3 = t3.filterDepth, n3 = t3.filterHeight, r3 = t3.filterWidth, o3 = t3.strideDepth, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = e3 - 1 - t3.padInfo.front, u3 = n3 - 1 - t3.padInfo.top, l3 = r3 - 1 - t3.padInfo.left;
    this.userCode = "\n      const ivec3 pads = ivec3(" + s3 + ", " + u3 + ", " + l3 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + e3 + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + o3 + ".0;\n\n          if (dyF < 0.0 || dyF >= " + t3.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + e3 + " - 1 - wF;\n\n          for (int wR = 0; wR < " + n3 + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + a3 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + n3 + " - 1 - wR;\n\n            for (int wC = 0; wC < " + r3 + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i3 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + r3 + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + t3.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var sa = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
    var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left, a3 = t3.outChannels / t3.inChannels;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + a3 + " + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n            int xR = wR + yR * " + e3 + " - " + r3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n              int xC = wC + yC * " + n3 + " - " + o3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var ua = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
    var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = e3 - 1 - t3.padInfo.top, i3 = n3 - 1 - t3.padInfo.left, s3 = t3.outChannels / t3.inChannels;
    this.userCode = "\n      const ivec2 pads = ivec2(" + a3 + ", " + i3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + e3 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e3 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n3 + " - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s3 + "; dm++) {\n              int d2 = d1 * " + s3 + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var la = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
    var e3 = t3.padInfo.top, n3 = t3.padInfo.left, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = t3.dilationHeight, i3 = t3.dilationWidth, s3 = t3.filterHeight, u3 = t3.filterWidth, l3 = 4 * Math.floor(t3.inChannels / 4), c3 = t3.inChannels % 4;
    this.userCode = "\n      const ivec2 strides = ivec2(" + r3 + ", " + o3 + ");\n      const ivec2 pads = ivec2(" + e3 + ", " + n3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s3 + "; wR++) {\n          int xR = xRCorner + wR * " + a3 + ";\n\n          if (xR < 0 || xR >= " + t3.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + u3 + "; wC++) {\n            int xC = xCCorner + wC * " + i3 + ";\n\n            if (xC < 0 || xC >= " + t3.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + l3 + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (1 === c3) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + l3 + ") *\n                getW(wR, wC, " + l3 + ", d2);\n            } else if (" + (2 === c3) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + l3 + "),\n                getX(batch, xR, xC, " + l3 + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + l3 + ", d2),\n                getW(wR, wC, " + l3 + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (3 === c3) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + l3 + "),\n                getX(batch, xR, xC, " + l3 + " + 1),\n                getX(batch, xR, xC, " + l3 + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + l3 + ", d2),\n                getW(wR, wC, " + l3 + " + 1, d2),\n                getW(wR, wC, " + l3 + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var ca = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
    var e3 = t3.padInfo.front, n3 = t3.padInfo.top, r3 = t3.padInfo.left, o3 = t3.strideDepth, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = t3.dilationDepth, u3 = t3.dilationHeight, l3 = t3.dilationWidth, c3 = t3.filterDepth, h3 = t3.filterHeight, p3 = t3.filterWidth, f3 = 4 * Math.floor(t3.inChannels / 4), d3 = t3.inChannels % 4;
    this.userCode = "\n      const ivec3 strides = ivec3(" + o3 + ", " + a3 + ", " + i3 + ");\n      const ivec3 pads = ivec3(" + e3 + ", " + n3 + ", " + r3 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + c3 + "; wF++) {\n          int xF = xFCorner + wF * " + s3 + ";\n\n          if (xF < 0 || xF >= " + t3.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h3 + "; wR++) {\n            int xR = xRCorner + wR * " + u3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + p3 + "; wC++) {\n              int xC = xCCorner + wC * " + l3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + f3 + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === d3) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + f3 + ") *\n                  getW(wF, wR, wC, " + f3 + ", d2);\n              } else if (" + (2 === d3) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + f3 + "),\n                  getX(batch, xF, xR, xC, " + f3 + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + f3 + ", d2),\n                  getW(wF, wR, wC, " + f3 + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === d3) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + f3 + "),\n                  getX(batch, xF, xR, xC, " + f3 + " + 1),\n                  getX(batch, xF, xR, xC, " + f3 + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + f3 + ", d2),\n                  getW(wF, wR, wC, " + f3 + " + 1, d2),\n                  getW(wF, wR, wC, " + f3 + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var ha = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
    var e3 = t3.inHeight, n3 = t3.inWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = t3.dilationHeight, u3 = t3.dilationWidth, l3 = t3.filterHeight, c3 = t3.filterWidth, h3 = t3.outChannels / t3.inChannels;
    this.userCode = "\n      const ivec2 strides = ivec2(" + a3 + ", " + i3 + ");\n      const ivec2 pads = ivec2(" + r3 + ", " + o3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + h3 + ";\n        int q = d2 - d1 * " + h3 + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + l3 + "; wR++) {\n          int xR = xRCorner + wR * " + s3 + ";\n\n          if (xR < 0 || xR >= " + e3 + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + c3 + "; wC++) {\n            int xC = xCCorner + wC * " + u3 + ";\n\n            if (xC < 0 || xC >= " + n3 + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var pa = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["x", "W"], this.usesPackedTextures = true, this.outputShape = t3.outShape;
    for (var e3 = t3.inHeight, n3 = t3.inWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = t3.dilationHeight, u3 = t3.dilationWidth, l3 = t3.filterHeight, c3 = t3.filterWidth, h3 = c3, f3 = "int xR; int xC; int xCOffset;", d3 = 0; d3 < l3; d3++) for (var v2 = 0; v2 < c3; v2++) f3 += "\n          vec4 xTexelR" + d3 + "C" + 2 * v2 + " = vec4(0.);\n          vec4 wR" + d3 + "C" + v2 + " = vec4(0.);\n          vec4 xR" + d3 + "C" + v2 + " = vec4(0.);";
    for (d3 = 0; d3 < l3; d3++) for (var m3 = 0; m3 < h3; m3++) {
      if (f3 += "\n          xR = xRCorner + " + d3 * s3 + ";\n          xC = xCCorner + " + (v2 = 2 * m3) * u3 + ";\n        ", 1 === i3) {
        if (v2 < c3 && (f3 += o3 % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + e3 + " && xCOffset >= 0 && xCOffset < " + n3 + ") {\n                  xTexelR" + d3 + "C" + v2 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d3 + "C" + v2 + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + e3 + " && xCOffset >= 0 && xCOffset < " + n3 + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR" + d3 + "C" + v2 + " = vec4(previous.zw, xTexelR" + d3 + "C" + v2 + ".xy);\n                } else {\n                  xR" + d3 + "C" + v2 + " = vec4(0, 0, xTexelR" + d3 + "C" + v2 + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + e3 + " && xC >= 0 && xC < " + n3 + ") {\n                  xTexelR" + d3 + "C" + v2 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + d3 + "C" + v2 + " = vec4(0.);\n                }\n\n                xR" + d3 + "C" + v2 + " = xTexelR" + d3 + "C" + v2 + ";\n              ", v2 + 1 < c3)) {
          var g2 = o3 % 2 == 0 ? p(u3) : u3;
          u3 % 2 == 0 && o3 % 2 == 1 || u3 % 2 != 0 && o3 % 2 != 1 ? (f3 += "\n                  xCOffset = xC + " + o3 % 2 + " + " + g2 + ";\n\n                  if(xR >= 0 && xR < " + e3 + " &&\n                    xCOffset >= 0 && xCOffset < " + n3 + ") {\n                    xTexelR" + d3 + "C" + (v2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", u3 > 1 && (f3 += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + e3 + " &&\n                      xCOffset >= 0 && xCOffset < " + n3 + ") {\n                      xTexelR" + d3 + "C" + v2 + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + d3 + "C" + v2 + " = vec4(0.);\n                    }\n                  "), f3 += "\n                  xR" + d3 + "C" + (v2 + 1) + " = vec4(\n                    xTexelR" + d3 + "C" + v2 + ".zw, xTexelR" + d3 + "C" + (v2 + 2) + ".xy);\n                ") : f3 += "\n                  xCOffset = xC + " + g2 + ";\n\n                  if(xR >= 0 && xR < " + e3 + " &&\n                    xCOffset >= 0 && xCOffset < " + n3 + ") {\n                    xTexelR" + d3 + "C" + (v2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + d3 + "C" + (v2 + 1) + " = xTexelR" + d3 + "C" + (v2 + 2) + ";\n                ";
        }
      } else v2 < c3 && (f3 += "\n              if(xR >= 0 && xR < " + e3 + ") {\n            ", o3 % 2 == 1 ? (f3 += "\n                xCOffset = xC + 1 - " + i3 + ";\n                if(xCOffset >= 0 && xCOffset < " + n3 + ") {\n                  xTexelR" + d3 + "C" + v2 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d3 + "C" + v2 + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + n3 + ") {\n                  xTexelR" + d3 + "C" + (v2 + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + d3 + "C" + (v2 + 2) + " = vec4(0.);\n                }\n\n                xR" + d3 + "C" + v2 + " = vec4(\n                  xTexelR" + d3 + "C" + v2 + ".zw, xTexelR" + d3 + "C" + (v2 + 2) + ".zw);\n              ", v2 + 1 < c3 && (f3 += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + i3 + ";\n                  if(xCOffset >= 0 && xCOffset < " + n3 + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + d3 + "C" + (v2 + 1) + " = vec4(xTexelR" + d3 + "C" + (v2 + 2) + ".xy, final.xy);\n                ")) : (f3 += "\n                if(xC >= 0 && xC < " + n3 + ") {\n                  xTexelR" + d3 + "C" + v2 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + d3 + "C" + v2 + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + i3 + ";\n                if(xCOffset >= 0 && xCOffset < " + n3 + ") {\n                  xTexelR" + d3 + "C" + (v2 + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d3 + "C" + (v2 + 2) + " = vec4(0.);\n                }\n\n                xR" + d3 + "C" + v2 + " = vec4(\n                  xTexelR" + d3 + "C" + v2 + ".xy, xTexelR" + d3 + "C" + (v2 + 2) + ".xy);\n              ", v2 + 1 < c3 && (f3 += "\n                  xR" + d3 + "C" + (v2 + 1) + " = vec4(\n                    xTexelR" + d3 + "C" + v2 + ".zw, xTexelR" + d3 + "C" + (v2 + 2) + ".zw);\n                ")), f3 += "}");
      v2 < c3 && (f3 += "\n            vec4 wTexelR" + d3 + "C" + v2 + " = getW(" + d3 + ", " + v2 + ", d1, q);\n            wR" + d3 + "C" + v2 + " = vec4(wTexelR" + d3 + "C" + v2 + ".xz, wTexelR" + d3 + "C" + v2 + ".xz);\n          ", v2 + 1 < c3 && (f3 += "\n              vec4 wTexelR" + d3 + "C" + (v2 + 1) + " = getW(" + d3 + ", " + (v2 + 1) + ", d1, q);\n              wR" + d3 + "C" + (v2 + 1) + " =\n                vec4(wTexelR" + d3 + "C" + (v2 + 1) + ".xz, wTexelR" + d3 + "C" + (v2 + 1) + ".xz);"));
    }
    for (d3 = 0; d3 < l3; d3++) for (v2 = 0; v2 < c3; v2++) f3 += "result += xR" + d3 + "C" + v2 + " * wR" + d3 + "C" + v2 + ";";
    this.userCode = "\n      const ivec2 strides = ivec2(" + a3 + ", " + i3 + ");\n      const ivec2 pads = ivec2(" + r3 + ", " + o3 + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        " + f3 + "\n\n        setOutput(result);\n      }\n    ";
  };
}();
var fa = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    var a3 = t3[0], i3 = t3[1], s3 = t3[2], u3 = t3[3], l3 = e3[0], c3 = n3[0], h3 = n3[1];
    this.outputShape = [l3, c3, h3, u3];
    var p3 = "bilinear" === r3 ? 1 : 0, f3 = [i3 - 1 + ".0", s3 - 1 + ".0"], d3 = f3[0], v2 = f3[1], m3 = c3 > 1 ? ["" + (i3 - 1) / (c3 - 1), "(y2-y1) * height_ratio", "y1*" + d3 + " + float(y)*(height_scale)"] : ["0.0", "0.0", "0.5 * (y1+y2) * " + d3], g2 = m3[0], y3 = m3[1], x3 = m3[2], b3 = h3 > 1 ? ["" + (s3 - 1) / (h3 - 1), "(x2-x1) * width_ratio", "x1*" + v2 + " + float(x)*(width_scale)"] : ["0.0", "0.0", "0.5 * (x1+x2) * " + v2], w3 = b3[0], C3 = b3[1], E3 = b3[2];
    this.userCode = "\n      const float height_ratio = float(" + g2 + ");\n      const float width_ratio = float(" + w3 + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + a3 + ") {\n          return;\n        }\n\n        float height_scale = " + y3 + ";\n        float width_scale = " + C3 + ";\n\n        float in_y = " + x3 + ";\n        if( in_y < 0.0 || in_y > " + d3 + " ) {\n          setOutput(float(" + o3 + "));\n          return;\n        }\n        float in_x = " + E3 + ";\n        if( in_x < 0.0 || in_x > " + v2 + " ) {\n          setOutput(float(" + o3 + "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" + p3 + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
  };
}();
var da = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["x"], this.outputShape = t3;
    var r3 = t3.length, o3 = t3[t3.length - 1], a3 = n3 ? "<" : ">";
    this.userCode = "\n      int getIndex(int i) {\n        " + (n3 ? "return " + o3 + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + Po(r3) + " coords = getOutputCoords();\n        int end = " + va(r3, "coords") + ";\n        float val = 0.0;\n        for (int i = " + o3 + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + a3 + " end) {\n            continue;\n          }\n          if (idx == end && " + e3 + ") {\n            continue;\n          }\n          " + va(r3, "coords") + " = idx;\n          val += getX(" + function(t4, e4) {
      if (1 === t4) return "" + e4;
      if (2 === t4) return e4 + ".x, " + e4 + ".y";
      if (3 === t4) return e4 + ".x, " + e4 + ".y, " + e4 + ".z";
      if (4 === t4) return e4 + ".x, " + e4 + ".y, " + e4 + ".z, " + e4 + ".w";
      throw Error("Cumulative sum for rank " + t4 + " is not yet supported");
    }(r3, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
  };
}();
function va(t3, e3) {
  if (1 === t3) return "" + e3;
  if (2 === t3) return e3 + ".y";
  if (3 === t3) return e3 + ".z";
  if (4 === t3) return e3 + ".w";
  throw Error("Cumulative sum for rank " + t3 + " is not yet supported");
}
var ma = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"];
    var n3 = Ro();
    this.outputShape = t3, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + Io(["r", "c", "d"], t3) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e3[0] + ", " + e3[1] + "));\n        int index = 4 * (resTexRC.x * " + e3[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " + n3.output + " = result;\n      }\n    ";
  };
}();
var ga = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"], this.usesPackedTextures = true;
    var n3 = Ro();
    this.outputShape = t3, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + Io(["r", "c", "d"], t3) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e3[0] + ", " + e3[1] + "));\n        int index = 4 * (resTexRC.x * " + e3[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " + n3.output + " = result;\n      }\n    ";
  };
}();
var ya = function() {
  function t3(t4, e3, n3) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t4, this.blockSize = e3, this.dataFormat = n3, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + e3 + ";\n      int offset_h = imod(h, " + e3 + ");\n      int in_w = w / " + e3 + ";\n      int offset_w = imod(w, " + e3 + ");\n      int offset_d = (offset_h * " + e3 + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
  }
  return t3.prototype.getHeightCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
  }, t3.prototype.getWidthCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
  }, t3.prototype.getDepthCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
  }, t3.prototype.getOutputDepthSize = function() {
    return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
  }, t3.prototype.getInputSamplingString = function() {
    return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }, t3;
}();
var xa = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"];
    var e3 = Ro();
    this.outputShape = t3, this.userCode = "\n      " + No + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + e3.output + " = encode_float(x);\n      }\n    ";
  };
}();
var ba = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"], this.usesPackedTextures = true;
    var e3 = Ro();
    this.outputShape = t3, this.userCode = "\n      " + No + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " + e3.output + " = encode_float(x);\n      }\n    ";
  };
}();
var wa = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    void 0 === n3 && (n3 = false), this.variableNames = ["A"];
    var r3 = Ro(), o3 = e3[0], a3 = e3[1];
    this.outputShape = t3;
    var i3 = "result";
    n3 && (i3 = "floor(result * 255. + 0.5)"), this.userCode = "\n      " + So(t3) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex /= 4;\n        int r = flatIndex / " + a3 + ";\n        int c = imod(flatIndex, " + a3 + ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" + a3 + ".0, " + o3 + ".0);\n        vec4 values = " + r3.texture2D + "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " + r3.output + " = vec4(" + i3 + ", 0., 0., 0.);\n      }\n    ";
  };
}();
var Ca = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    void 0 === n3 && (n3 = false), this.variableNames = ["A"];
    var r3 = Ro(), o3 = e3[0], a3 = e3[1];
    this.outputShape = t3;
    var i3 = "", s3 = "result";
    n3 && (s3 = "floor(result * 255. + 0.5)");
    for (var u3 = 0; u3 <= 1; u3++) for (var l3 = 0; l3 <= 1; l3++) {
      var c3 = 2 * u3 + l3;
      i3 += "\n          localCoords = coords;\n          if(localCoords[2] + " + l3 + " < " + t3[2] + ") {\n            localCoords[2] += " + l3 + ";\n            if(localCoords[1] + " + u3 + " < " + t3[1] + ") {\n              localCoords[1] += " + u3 + ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n    \n              flatIndex /= 4;\n              r = flatIndex / " + a3 + ";\n              c = imod(flatIndex, " + a3 + ");\n              uv = (vec2(c, r) + halfCR) / vec2(" + a3 + ".0, " + o3 + ".0);\n              values = " + r3.texture2D + "(A, uv);\n\n              if(offset == 0) {\n                result[" + c3 + "] = values[0];\n              } else if(offset == 1) {\n                result[" + c3 + "] = values[1];\n              } else if(offset == 2) {\n                result[" + c3 + "] = values[2];\n              } else {\n                result[" + c3 + "] = values[3];\n              }\n            }\n          }\n        ";
    }
    this.userCode = "\n      " + So(t3) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n        \n        " + i3 + "\n\n        " + r3.output + " = " + s3 + ";\n      }\n    ";
  };
}();
var Ea = "return real * expR - imag * expI;";
var Ra = "return real * expI + imag * expR;";
var Ia = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["real", "imag"];
    var r3 = e3[1];
    this.outputShape = e3;
    var o3 = n3 ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI, a3 = n3 ? r3 + ".0" : "1.0";
    this.userCode = "\n      const float exponentMultiplier = " + o3 + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + t3 + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + r3 + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + r3 + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + a3 + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
  };
}();
var Sa = function() {
  function t3(t4, e3) {
    this.outputShape = [], this.variableNames = ["x"], this.outputShape = t4, this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    return function(n3, r3) {
      null == e3.valueLoc && (e3.valueLoc = n3.getUniformLocationNoThrow(r3, "value")), n3.gl.uniform1f(e3.valueLoc, t4);
    };
  }, t3;
}();
var Na = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"];
    var e3 = Ro(), n3 = t3[0], r3 = t3[1];
    this.outputShape = t3, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r3 + ".0, " + n3 + ".0);\n\n        vec4 values = " + e3.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
  };
}();
var ka = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"];
    var e3 = Ro(), n3 = t3[0], r3 = t3[1];
    this.outputShape = t3, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r3 + ".0, " + n3 + ".0);\n            vec4 values = " + e3.texture2D + "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " + e3.output + " = result;\n      }\n    ";
  };
}();
var Aa = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["A", "indices"];
    var r3 = t3.slice();
    r3[n3] = e3, this.outputShape = r3, this.rank = r3.length;
    var o3 = Po(this.rank), a3 = function(t4, e4) {
      var n4 = t4.length;
      if (n4 > 4) throw Error("Gather for rank " + n4 + " is not yet supported");
      if (1 === n4) return "int(getIndices(resRC))";
      for (var r4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o4 = [], a4 = 0; a4 < t4.length; a4++) a4 === e4 ? o4.push("int(getIndices(" + r4[a4] + "))") : o4.push("" + r4[a4]);
      return o4.join();
    }(t3, n3);
    this.userCode = "\n      void main() {\n        " + o3 + " resRC = getOutputCoords();\n        setOutput(getA(" + a3 + "));\n      }\n    ";
  };
}();
var Ta;
var Da;
var _a = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.sliceDim = t3, this.strides = e3, this.variableNames = ["x", "indices"], this.outputShape = n3;
    var r3 = Po(e3.length), o3 = Po(n3.length), a3 = this.sliceDim > 1 ? "strides[j]" : "strides";
    this.userCode = "\n        " + r3 + " strides = " + r3 + "(" + this.strides + ");\n         void main() {\n          " + o3 + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + a3 + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
  };
}();
function Oa(t3, e3) {
  return [e3, t3];
}
function Fa(t3) {
  var e3 = y(t3);
  return C(Math.ceil(e3 / 4));
}
function Ma(t3, e3) {
  return [Math.max(1, Math.ceil(e3 / 2)), Math.max(1, Math.ceil(t3 / 2))];
}
function Ba(t3, e3) {
  var n3 = Ro();
  return zt(t3, e3, n3.version + "\n    precision highp float;\n    " + n3.attribute + " vec3 clipSpacePos;\n    " + n3.attribute + " vec2 uv;\n    " + n3.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
}
function Pa(t3, e3) {
  return Xt(t3, e3, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
}
function La(t3, e3) {
  return Yt(t3, e3, new Uint16Array([0, 1, 2, 2, 1, 3]));
}
function Wa(t3, e3) {
  var n3, r3, o3, a3, i3, u3, l3, c3, h3 = t3;
  return 2 === s.getNumber("WEBGL_VERSION") ? (n3 = h3.R32F, r3 = h3.R16F, o3 = h3.RGBA16F, a3 = h3.RGBA32F, i3 = h3.RED, u3 = 4, l3 = 1, c3 = h3.HALF_FLOAT) : (n3 = t3.RGBA, r3 = t3.RGBA, o3 = t3.RGBA, a3 = h3.RGBA, i3 = t3.RGBA, u3 = 4, l3 = 4, c3 = null != e3 ? e3.HALF_FLOAT_OES : null), { internalFormatFloat: n3, internalFormatHalfFloat: r3, internalFormatPackedHalfFloat: o3, internalFormatPackedFloat: a3, textureFormatFloat: i3, downloadTextureFormat: t3.RGBA, downloadUnpackNumChannels: u3, defaultNumChannels: l3, textureTypeHalfFloat: c3 };
}
function Ua(t3, e3, n3, r3, o3, a3, i3) {
  Jt(n3, r3);
  var s3 = Qt(t3, e3), u3 = t3.TEXTURE_2D;
  return Mt(t3, e3, function() {
    return t3.bindTexture(u3, s3);
  }), Mt(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_WRAP_S, t3.CLAMP_TO_EDGE);
  }), Mt(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_WRAP_T, t3.CLAMP_TO_EDGE);
  }), Mt(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_MIN_FILTER, t3.NEAREST);
  }), Mt(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_MAG_FILTER, t3.NEAREST);
  }), Mt(t3, e3, function() {
    return t3.texImage2D(u3, 0, o3, n3, r3, 0, a3, i3, null);
  }), Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  }), s3;
}
function za(t3, e3, n3, r3, o3) {
  var a3 = Oa(n3, r3);
  return Ua(t3, e3, a3[0], a3[1], o3.internalFormatFloat, o3.textureFormatFloat, t3.FLOAT);
}
function Va(t3, e3, n3, r3, o3) {
  var a3 = Oa(n3, r3);
  return Ua(t3, e3, a3[0], a3[1], o3.internalFormatHalfFloat, o3.textureFormatFloat, o3.textureTypeHalfFloat);
}
function Ga(t3, e3, n3, r3, o3) {
  var a3 = Oa(n3, r3);
  return Ua(t3, e3, a3[0], a3[1], t3.RGBA, t3.RGBA, t3.UNSIGNED_BYTE);
}
function qa(t3, e3, n3, r3, o3) {
  var a3 = Ma(n3, r3);
  return Ua(t3, e3, a3[0], a3[1], o3.internalFormatPackedFloat, t3.RGBA, t3.FLOAT);
}
function Ha(t3, e3, n3, r3, o3) {
  var a3 = Ma(n3, r3);
  return Ua(t3, e3, a3[0], a3[1], o3.internalFormatPackedHalfFloat, t3.RGBA, o3.textureTypeHalfFloat);
}
function $a(t3, e3, n3, r3) {
  return Mt(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, r3);
  }), te(t3, e3, n3, "clipSpacePos", r3, 3, 20, 0) && te(t3, e3, n3, "uv", r3, 2, 20, 12);
}
function ja(t3, e3, n3, r3, o3, a3, i3) {
  var s3, u3, l3;
  Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  }), a3 instanceof Uint8Array ? (s3 = new Uint8Array(r3 * o3 * 4), u3 = t3.UNSIGNED_BYTE, l3 = t3.RGBA) : (s3 = new Float32Array(r3 * o3 * 4), u3 = t3.FLOAT, l3 = i3.internalFormatPackedFloat), s3.set(a3), Mt(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, l3, r3, o3, 0, t3.RGBA, u3, s3);
  }), Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}
function Ka(t3, e3, n3, r3) {
  Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  }), r3.data instanceof Uint8Array ? Mt(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, t3.RGBA, r3.width, r3.height, 0, t3.RGBA, t3.UNSIGNED_BYTE, r3.data);
  }) : Mt(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, t3.RGBA, t3.RGBA, t3.UNSIGNED_BYTE, r3);
  }), Mt(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}
function Xa(t3, e3, n3, r3, o3) {
  var a3 = t3.createBuffer();
  Mt(t3, e3, function() {
    return t3.bindBuffer(t3.PIXEL_PACK_BUFFER, a3);
  });
  var i3 = 16 * n3 * r3;
  return Mt(t3, e3, function() {
    return t3.bufferData(t3.PIXEL_PACK_BUFFER, i3, t3.STREAM_READ);
  }), Mt(t3, e3, function() {
    return t3.readPixels(0, 0, r3, n3, t3.RGBA, t3.FLOAT, 0);
  }), Mt(t3, e3, function() {
    return t3.bindBuffer(t3.PIXEL_PACK_BUFFER, null);
  }), a3;
}
function Ya(t3, e3, n3) {
  var r3 = t3, o3 = new Float32Array(n3);
  return r3.bindBuffer(r3.PIXEL_PACK_BUFFER, e3), r3.getBufferSubData(r3.PIXEL_PACK_BUFFER, 0, o3), r3.bindBuffer(r3.PIXEL_PACK_BUFFER, null), o3;
}
function Qa(t3, e3, n3, r3, o3) {
  var a3 = Oa(n3, r3), i3 = a3[0], s3 = a3[1], u3 = new Uint8Array(n3 * r3 * 4);
  return Mt(t3, e3, function() {
    return t3.readPixels(0, 0, i3, s3, o3.downloadTextureFormat, t3.UNSIGNED_BYTE, u3);
  }), new Float32Array(u3.buffer);
}
function Ja(t3, e3, n3, r3, o3, a3, i3, s3) {
  var u3 = t3, l3 = new Float32Array(function(t4, e4) {
    var n4 = Ma(t4, e4);
    return n4[0] * n4[1] * 4;
  }(a3, i3));
  return u3.bindBuffer(u3.PIXEL_PACK_BUFFER, e3), u3.getBufferSubData(u3.PIXEL_PACK_BUFFER, 0, l3), u3.bindBuffer(u3.PIXEL_PACK_BUFFER, null), l3;
}
function Za(t3, e3, n3, r3) {
  var o3 = new Float32Array(n3 * r3 * 4);
  return Mt(t3, e3, function() {
    return t3.readPixels(0, 0, r3, n3, t3.RGBA, t3.FLOAT, o3);
  }), o3;
}
!function(t3) {
  t3[t3.RENDER = 0] = "RENDER", t3[t3.UPLOAD = 1] = "UPLOAD", t3[t3.PIXELS = 2] = "PIXELS", t3[t3.DOWNLOAD = 3] = "DOWNLOAD";
}(Ta || (Ta = {})), function(t3) {
  t3[t3.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", t3[t3.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", t3[t3.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", t3[t3.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", t3[t3.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
}(Da || (Da = {}));
var ti = Object.freeze({ createVertexShader: Ba, createVertexBuffer: Pa, createIndexBuffer: La, getTextureConfig: Wa, createFloat32MatrixTexture: za, createFloat16MatrixTexture: Va, createUnsignedBytesMatrixTexture: Ga, createPackedMatrixTexture: qa, createFloat16PackedMatrixTexture: Ha, bindVertexProgramAttributeStreams: $a, uploadDenseMatrixToTexture: ja, uploadPixelDataToTexture: Ka, createBufferFromOutputTexture: Xa, downloadFloat32MatrixFromBuffer: Ya, downloadByteEncodedFloatMatrixFromOutputTexture: Qa, downloadPackedMatrixFromBuffer: Ja, downloadMatrixFromPackedOutputTexture: Za });
var ei = function() {
  function t3(t4) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.vertexAttrsAreBound = false, this.itemsToPoll = [];
    var e3 = s.getNumber("WEBGL_VERSION");
    null != t4 ? (this.gl = t4, Ot(e3, t4)) : this.gl = Ft(e3), 1 === s.getNumber("WEBGL_VERSION") ? (this.textureFloatExtension = Ut(this.gl, this.debug, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float"), s.getBool("WEBGL_RENDER_FLOAT32_ENABLED") || (this.textureHalfFloatExtension = Ut(this.gl, this.debug, "OES_texture_half_float"), this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float"))) : this.colorBufferFloatExtension = Ut(this.gl, this.debug, "EXT_color_buffer_float"), this.vertexBuffer = Pa(this.gl, this.debug), this.indexBuffer = La(this.gl, this.debug), this.framebuffer = Zt(this.gl, this.debug), this.textureConfig = Wa(this.gl, this.textureHalfFloatExtension);
  }
  return Object.defineProperty(t3.prototype, "debug", { get: function() {
    return s.getBool("DEBUG");
  }, enumerable: true, configurable: true }), t3.prototype.dispose = function() {
    var t4 = this;
    if (!this.disposed) {
      null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
      var e3 = this.gl;
      Mt(e3, this.debug, function() {
        return e3.finish();
      }), Mt(e3, this.debug, function() {
        return e3.bindFramebuffer(e3.FRAMEBUFFER, null);
      }), Mt(e3, this.debug, function() {
        return e3.deleteFramebuffer(t4.framebuffer);
      }), Mt(e3, this.debug, function() {
        return e3.bindBuffer(e3.ARRAY_BUFFER, null);
      }), Mt(e3, this.debug, function() {
        return e3.bindBuffer(e3.ELEMENT_ARRAY_BUFFER, null);
      }), Mt(e3, this.debug, function() {
        return e3.deleteBuffer(t4.indexBuffer);
      }), this.disposed = true;
    }
  }, t3.prototype.createFloat32MatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), za(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createFloat16MatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), Va(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createUnsignedBytesMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), Ga(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.uploadPixelDataToTexture = function(t4, e3) {
    this.throwIfDisposed(), Ka(this.gl, this.debug, t4, e3);
  }, t3.prototype.uploadDenseMatrixToTexture = function(t4, e3, n3, r3) {
    this.throwIfDisposed(), ja(this.gl, this.debug, t4, e3, n3, r3, this.textureConfig);
  }, t3.prototype.createFloat16PackedMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), Ha(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createPackedMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), qa(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.deleteMatrixTexture = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), this.outputTexture === t4 && (ie(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Mt(this.gl, this.debug, function() {
      return e3.gl.deleteTexture(t4);
    });
  }, t3.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t4, e3, n3) {
    var r3 = this;
    return this.downloadMatrixDriver(t4, function() {
      return Qa(r3.gl, r3.debug, e3, n3, r3.textureConfig);
    });
  }, t3.prototype.downloadPackedMatrixFromBuffer = function(t4, e3, n3, r3, o3, a3) {
    return Ja(this.gl, t4, 0, 0, 0, o3, a3, this.textureConfig);
  }, t3.prototype.downloadFloat32MatrixFromBuffer = function(t4, e3) {
    return Ya(this.gl, t4, e3);
  }, t3.prototype.createBufferFromTexture = function(t4, e3, n3) {
    this.bindTextureToFrameBuffer(t4);
    var r3 = Xa(this.gl, this.debug, e3, n3, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r3;
  }, t3.prototype.createAndWaitForFence = function() {
    var t4 = this.createFence(this.gl);
    return this.pollFence(t4);
  }, t3.prototype.createFence = function(t4) {
    var e3, n3, r3 = this;
    if (s.getBool("WEBGL_FENCE_API_ENABLED")) {
      var o3 = t4, a3 = o3.fenceSync(o3.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t4.flush(), n3 = function() {
        var t5 = o3.clientWaitSync(a3, 0, 0);
        return t5 === o3.ALREADY_SIGNALED || t5 === o3.CONDITION_SATISFIED;
      }, e3 = a3;
    } else s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e3 = this.beginQuery(), this.endQuery(), n3 = function() {
      return r3.isQueryAvailable(e3, s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
    }) : n3 = function() {
      return true;
    };
    return { query: e3, isFencePassed: n3 };
  }, t3.prototype.downloadMatrixFromPackedTexture = function(t4, e3, n3) {
    var r3 = this;
    return this.downloadMatrixDriver(t4, function() {
      return Za(r3.gl, r3.debug, e3, n3);
    });
  }, t3.prototype.createProgram = function(t4) {
    this.throwIfDisposed();
    var e3 = this.gl, n3 = Vt(e3, this.debug, t4), r3 = Ba(e3, this.debug), o3 = $t(e3, this.debug);
    return Mt(e3, this.debug, function() {
      return e3.attachShader(o3, r3);
    }), Mt(e3, this.debug, function() {
      return e3.attachShader(o3, n3);
    }), jt(e3, this.debug, o3), this.debug && Kt(e3, this.debug, o3), this.vertexAttrsAreBound || (this.setProgram(o3), this.vertexAttrsAreBound = $a(e3, this.debug, this.program, this.vertexBuffer)), o3;
  }, t3.prototype.deleteProgram = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), t4 === this.program && (this.program = null), null != t4 && Mt(this.gl, this.debug, function() {
      return e3.gl.deleteProgram(t4);
    });
  }, t3.prototype.setProgram = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), this.program = t4, null != this.program && this.debug && Kt(this.gl, this.debug, this.program), Mt(this.gl, this.debug, function() {
      return e3.gl.useProgram(t4);
    });
  }, t3.prototype.getUniformLocation = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = true), this.throwIfDisposed(), n3 ? ne(this.gl, this.debug, t4, e3) : re(this.gl, t4, e3);
  }, t3.prototype.getAttributeLocation = function(t4, e3) {
    var n3 = this;
    return this.throwIfDisposed(), Mt(this.gl, this.debug, function() {
      return n3.gl.getAttribLocation(t4, e3);
    });
  }, t3.prototype.getUniformLocationNoThrow = function(t4, e3) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t4, e3);
  }, t3.prototype.setInputMatrixTexture = function(t4, e3, n3) {
    this.throwIfDisposed(), this.throwIfNoProgram(), oe(this.gl, this.debug, this.program, t4, e3, n3);
  }, t3.prototype.setOutputMatrixTexture = function(t4, e3, n3) {
    this.setOutputMatrixTextureDriver(t4, n3, e3);
  }, t3.prototype.setOutputPackedMatrixTexture = function(t4, e3, n3) {
    this.throwIfDisposed();
    var r3 = Ma(e3, n3), o3 = r3[0], a3 = r3[1];
    this.setOutputMatrixTextureDriver(t4, o3, a3);
  }, t3.prototype.setOutputMatrixWriteRegion = function(t4, e3, n3, r3) {
    this.setOutputMatrixWriteRegionDriver(n3, t4, r3, e3);
  }, t3.prototype.setOutputPackedMatrixWriteRegion = function(t4, e3, n3, r3) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }, t3.prototype.debugValidate = function() {
    null != this.program && Kt(this.gl, this.debug, this.program), se(this.gl);
  }, t3.prototype.executeProgram = function() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    var t4 = this.gl;
    this.debug && this.debugValidate(), Mt(t4, this.debug, function() {
      return t4.drawElements(t4.TRIANGLES, 6, t4.UNSIGNED_SHORT, 0);
    });
  }, t3.prototype.blockUntilAllProgramsCompleted = function() {
    var t4 = this;
    this.throwIfDisposed(), Mt(this.gl, this.debug, function() {
      return t4.gl.finish();
    });
  }, t3.prototype.getQueryTimerExtension = function() {
    return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = Ut(this.gl, this.debug, 2 === s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }, t3.prototype.getQueryTimerExtensionWebGL2 = function() {
    return this.getQueryTimerExtension();
  }, t3.prototype.getQueryTimerExtensionWebGL1 = function() {
    return this.getQueryTimerExtension();
  }, t3.prototype.beginQuery = function() {
    if (2 === s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
      var t4 = this.gl, e3 = this.getQueryTimerExtensionWebGL2(), n3 = t4.createQuery();
      return t4.beginQuery(e3.TIME_ELAPSED_EXT, n3), n3;
    }
    var r3 = this.getQueryTimerExtensionWebGL1(), o3 = r3.createQueryEXT();
    return r3.beginQueryEXT(r3.TIME_ELAPSED_EXT, o3), o3;
  }, t3.prototype.endQuery = function() {
    if (2 !== s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
      var t4 = this.getQueryTimerExtensionWebGL1();
      t4.endQueryEXT(t4.TIME_ELAPSED_EXT);
    } else {
      var e3 = this.gl, n3 = this.getQueryTimerExtensionWebGL2();
      e3.endQuery(n3.TIME_ELAPSED_EXT);
    }
  }, t3.prototype.waitForQueryAndGetTime = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3 = this;
      return o(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, R(function() {
              return e3.disposed || e3.isQueryAvailable(t4, s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
            })];
          case 1:
            return n3.sent(), [2, this.getQueryTime(t4, s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))];
        }
      });
    });
  }, t3.prototype.getQueryTime = function(t4, e3) {
    if (0 === e3) return null;
    if (2 === e3) {
      var n3 = this.gl;
      return n3.getQueryParameter(t4, n3.QUERY_RESULT) / 1e6;
    }
    var r3 = this.getQueryTimerExtensionWebGL1();
    return r3.getQueryObjectEXT(t4, r3.QUERY_RESULT_EXT) / 1e6;
  }, t3.prototype.isQueryAvailable = function(t4, e3) {
    if (0 === e3) return true;
    if (2 === e3) {
      var n3 = this.gl, r3 = this.getQueryTimerExtensionWebGL2(), o3 = n3.getQueryParameter(t4, n3.QUERY_RESULT_AVAILABLE);
      return null == this.disjoint && (this.disjoint = this.gl.getParameter(r3.GPU_DISJOINT_EXT)), o3 && !this.disjoint;
    }
    o3 = (r3 = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t4, r3.QUERY_RESULT_AVAILABLE_EXT);
    return null == this.disjoint && (this.disjoint = this.gl.getParameter(r3.GPU_DISJOINT_EXT)), o3 && !this.disjoint;
  }, t3.prototype.pollFence = function(t4) {
    var e3 = this;
    return new Promise(function(n3) {
      e3.addItemToPoll(function() {
        return t4.isFencePassed();
      }, function() {
        return n3();
      });
    });
  }, t3.prototype.pollItems = function() {
    for (var t4 = function(t5) {
      for (var e4 = 0; e4 < t5.length; ++e4) {
        var n3 = t5[e4]();
        if (!n3) break;
      }
      return e4 - 1;
    }(this.itemsToPoll.map(function(t5) {
      return t5.isDoneFn;
    })), e3 = 0; e3 <= t4; ++e3) {
      (0, this.itemsToPoll[e3].resolveFn)();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t4 + 1);
  }, t3.prototype.addItemToPoll = function(t4, e3) {
    var n3 = this;
    this.itemsToPoll.push({ isDoneFn: t4, resolveFn: e3 }), this.itemsToPoll.length > 1 || R(function() {
      return n3.pollItems(), 0 === n3.itemsToPoll.length;
    });
  }, t3.prototype.bindTextureToFrameBuffer = function(t4) {
    this.throwIfDisposed(), ae(this.gl, this.debug, t4, this.framebuffer), this.debug && se(this.gl);
  }, t3.prototype.unbindTextureToFrameBuffer = function() {
    null != this.outputTexture ? (ae(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && se(this.gl)) : ie(this.gl, this.debug, this.framebuffer);
  }, t3.prototype.downloadMatrixDriver = function(t4, e3) {
    this.bindTextureToFrameBuffer(t4);
    var n3 = e3();
    return this.unbindTextureToFrameBuffer(), n3;
  }, t3.prototype.setOutputMatrixTextureDriver = function(t4, e3, n3) {
    this.throwIfDisposed();
    var r3 = this.gl;
    ae(r3, this.debug, t4, this.framebuffer), this.debug && se(r3), this.outputTexture = t4, Mt(r3, this.debug, function() {
      return r3.viewport(0, 0, e3, n3);
    }), Mt(r3, this.debug, function() {
      return r3.scissor(0, 0, e3, n3);
    });
  }, t3.prototype.setOutputMatrixWriteRegionDriver = function(t4, e3, n3, r3) {
    var o3 = this;
    this.throwIfDisposed(), Mt(this.gl, this.debug, function() {
      return o3.gl.scissor(t4, e3, n3, r3);
    });
  }, t3.prototype.throwIfDisposed = function() {
    if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
  }, t3.prototype.throwIfNoProgram = function() {
    if (null == this.program) throw new Error("No GPU program is currently set.");
  }, t3;
}();
function ni(t3, e3) {
  if (t3.length !== e3.length) throw Error("Binary was compiled with " + t3.length + " inputs, but was executed with " + e3.length + " inputs");
  t3.forEach(function(t4, n3) {
    var r3 = t4.logicalShape, o3 = e3[n3], a3 = o3.shape;
    if (!x(r3, a3)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r3 + " and " + a3 + " must match");
    if (!t4.isUniform || !o3.isUniform) {
      var i3 = t4.texShape, s3 = o3.isUniform ? null : o3.texData.texShape;
      if (!x(i3, s3)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i3 + " and " + s3 + " must match");
    }
  });
}
var ri = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = t3;
    var r3 = n3.filterWidth, o3 = n3.inChannels, a3 = n3.strideWidth, i3 = n3.strideHeight, s3 = n3.padInfo, u3 = n3.outWidth, l3 = n3.dilationWidth, c3 = n3.dilationHeight, h3 = s3.left, p3 = s3.top, f3 = o3 * r3, d3 = Ro();
    this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            int blockIndex = rc.y + col;\n            int pos = rc.x + row;\n\n            if(blockIndex >= " + t3[1] + " || pos >= " + t3[0] + ") continue;\n\n            int offsetY = int(blockIndex / (" + u3 + ")) * " + i3 + " - " + p3 + ";\n            int d0 = offsetY + " + c3 + " * (pos / " + f3 + ");\n\n            if(d0 >= " + e3[0] + " || d0 < 0) continue;\n\n            int offsetX = int(mod(float(blockIndex), " + u3 + ".) * " + a3 + ". - " + h3 + ".);\n            int d1 = offsetX + " + l3 + " * (int(mod(float(pos), " + f3 + ".) / " + o3 + ".));\n\n            if(d1 >= " + e3[1] + " || d1 < 0) continue;\n\n            vec2 innerDims = vec2(d1, int(mod(float(pos), " + o3 + ".)));\n            result[row * 2 + col] = getChannel(getA(d0, int(innerDims.x),\n                                              int(innerDims.y)), innerDims);\n          }\n        }\n\n        " + d3.output + " = result;\n      }\n    ";
  };
}();
var oi = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3) {
    this.variableNames = ["x"], this.outputShape = [];
    var a3, i3 = e3, s3 = t3[3] - 1;
    this.outputShape = t3;
    var u3 = "float(" + n3 + ") + float(" + r3 + ") * sum";
    a3 = 0.5 === o3 ? "inversesqrt(" + u3 + ")" : 1 === o3 ? "1.0/(" + u3 + ")" : "exp(log(" + u3 + ") * float(-" + o3 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i3 + "; j <= " + i3 + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s3 + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + a3 + ";\n        setOutput(val);\n      }\n    ";
  };
}();
var ai = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t3, this.depth = t3[3], this.depthRadius = e3, this.bias = n3, this.alpha = r3, this.beta = o3, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + e3 + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + e3 + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + r3 + ") * norm + float(" + n3 + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + r3 + ")\n                * float(" + o3 + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + o3 + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
  };
}();
var ii = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3) {
    this.variableNames = ["x"], this.outputShape = [], this.usesPackedTextures = true;
    var a3, i3 = e3, s3 = t3[3] - 1;
    this.outputShape = t3;
    var u3 = "float(" + n3 + ") + float(" + r3 + ") * sum";
    a3 = 0.5 === o3 ? "inversesqrt(" + u3 + ")" : 1 === o3 ? "1.0/(" + u3 + ")" : "exp(log(" + u3 + ") * float(-" + o3 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " + this.outputShape[3] + ";\n        bool hasNextRow = c < " + this.outputShape[2] + ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " + i3 + ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " + i3 + "; j <= " + i3 + "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" + s3 + "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " + a3 + ";\n        setOutput(result);\n      }\n    ";
  };
}();
var si = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t3.inShape;
    var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.dilationHeight, o3 = t3.effectiveFilterHeight, a3 = t3.effectiveFilterWidth, i3 = o3 - 1 - t3.padInfo.top, s3 = a3 - 1 - t3.padInfo.left, u3 = o3 * a3 - 1;
    this.userCode = "\n      const ivec2 pads = ivec2(" + i3 + ", " + s3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + o3 + ";\n          wR += " + r3 + ") {\n          float dyR = float(dyRCorner + wR) / " + e3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + a3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + n3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + u3 + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + a3 + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };
}();
var ui = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3, a3) {
    void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = false), void 0 === a3 && (a3 = null), this.variableNames = ["matrixA", "matrixB"], this.usesPackedTextures = true, this.outputShape = e3;
    var i3 = n3 ? t3[1] : t3[2], s3 = Math.ceil(i3 / 2), u3 = n3 ? "i * 2, rc.y" : "rc.y, i * 2", l3 = r3 ? "rc.z, i * 2" : "i * 2, rc.z", c3 = n3 ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], h3 = r3 ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], p3 = "", f3 = "";
    a3 && (p3 = "vec4 activation(vec4 x) {\n        " + a3 + "\n      }", f3 = "result = activation(result);");
    var d3 = o3 ? "result += getBiasAtOutCoords();" : "";
    o3 && this.variableNames.push("bias"), this.userCode = "\n      " + p3 + "\n\n      const float sharedDimension = " + s3 + ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + s3 + "; i++) {\n          vec4 a = getMatrixA(rc.x, " + u3 + ");\n          vec4 b = getMatrixB(rc.x, " + l3 + ");\n\n          result += (" + c3[0] + " * " + h3[0] + ") + (" + c3[1] + " * " + h3[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + d3 + "\n\n        " + f3 + "\n\n        setOutput(result);\n      }\n    ";
  };
}();
var li = function() {
  function t3(t4, e3, n3) {
    this.variableNames = ["probs"], this.outputShape = [t4, n3], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (e3 - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (e3 - 1) + "));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    return function(n3, r3) {
      null == e3.seedLoc && (e3.seedLoc = n3.getUniformLocation(r3, "seed")), n3.gl.uniform1f(e3.seedLoc, t4);
    };
  }, t3;
}();
var ci = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["indices"], this.outputShape = [t3, e3], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r3 + "), float(" + n3 + "),\n                      float(index == coords.y)));\n      }\n    ";
  };
}();
var hi = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"], this.outputShape = t3;
    var e3 = t3.length;
    if (0 === e3) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
    else {
      var n3 = Eo("rc", e3), r3 = Po(e3), o3 = function(t4, e4, n4) {
        if (1 === t4) return "rc > " + e4[0];
        for (var r4 = "", o4 = t4 - 2; o4 < t4; o4++) r4 += n4[o4] + " >= " + e4[o4], o4 < t4 - 1 && (r4 += "||");
        return r4;
      }(e3, t3, n3), a3 = function(t4, e4, n4, r4) {
        if (1 === t4) return "";
        var o4 = r4.slice(-2);
        return "\n    int r = " + o4[0] + ";\n    int c = " + o4[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + e4 + ";\n    bool rEdge = rp1 >= " + n4 + ";\n  ";
      }(e3, t3[t3.length - 1], t3[t3.length - 2], n3), i3 = function(t4, e4) {
        var n4 = t4.length, r4 = function(t5, e5) {
          for (var n5 = [], r5 = 0; r5 <= 1; r5++) for (var o4 = 0; o4 <= 1; o4++) {
            for (var a4 = (0 === r5 ? "r" : "rp1") + ", " + (0 === o4 ? "c" : "cp1"), i4 = 2; i4 < t5; i4++) a4 = e5[e5.length - 1 - i4] + "," + a4;
            n5.push(a4);
          }
          return n5;
        }(n4, e4);
        return 1 === n4 ? "getA(rc),\n            rc + 1 >= " + t4[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + r4[0] + "),\n          cEdge ? 0. : getA(" + r4[1] + "),\n          rEdge ? 0. : getA(" + r4[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r4[3] + ")";
      }(t3, n3);
      this.userCode = "\n        void main() {\n          " + r3 + " rc = getOutputCoords();\n\n          if(" + o3 + ") {\n            setOutput(vec4(0));\n          } else {\n            " + a3 + "\n\n            setOutput(vec4(" + i3 + "));\n          }\n        }\n      ";
    }
  };
}();
var pi = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["x"], this.outputShape = e3.map(function(e4, n4) {
      return e4[0] + t3[n4] + e4[1];
    });
    var r3 = t3.length, o3 = Po(r3), a3 = e3.map(function(t4) {
      return t4[0];
    }).join(","), i3 = e3.map(function(e4, n4) {
      return e4[0] + t3[n4];
    }).join(","), s3 = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r3);
    this.userCode = 1 !== r3 ? "\n      " + o3 + " start = " + o3 + "(" + a3 + ");\n      " + o3 + " end = " + o3 + "(" + i3 + ");\n\n      void main() {\n        " + o3 + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n3 + "));\n        } else {\n          " + o3 + " coords = outC - start;\n          setOutput(getX(" + s3 + "));\n        }\n      }\n    " : "\n        int start = " + a3 + ";\n        int end = " + i3 + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n3 + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
  };
}();
var fi = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["x"], this.usesPackedTextures = true, this.outputShape = e3.map(function(e4, n4) {
      return e4[0] + t3[n4] + e4[1];
    });
    for (var r3 = t3.length, o3 = Po(r3), a3 = e3.map(function(t4) {
      return t4[0];
    }).join(","), i3 = e3.map(function(e4, n4) {
      return e4[0] + t3[n4];
    }).join(","), s3 = Eo("rc", r3), u3 = Eo("source", r3), l3 = s3[r3 - 1] + " < " + this.outputShape[r3 - 1], c3 = 1 === r3 ? "source" : "vec2(" + u3.slice(-2).join() + ")", h3 = [o3 + " rc = outputLoc;", s3[r3 - 1] + " += 1;\n       if(" + l3 + ") {\n      ", 1 === r3 ? "" : "}\n       rc = outputLoc;\n       " + s3[r3 - 2] + " += 1;\n       if(" + s3[r3 - 2] + " < " + this.outputShape[r3 - 2] + ") {", 1 === r3 ? "" : "  " + s3[r3 - 1] + " += 1;\n         if(" + l3 + ") {"], p3 = 1 === r3 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", f3 = "", d3 = 0, v2 = 1 === r3 ? 2 : 4; d3 < v2; d3++) f3 += "\n        " + h3[d3] + "\n        if (" + p3 + ") {\n          result[" + d3 + "] = float(" + n3 + ");\n        } else {\n          " + o3 + " source = rc - start;\n          result[" + d3 + "] = getChannel(getX(" + u3.join() + "), " + c3 + ");\n        }\n      ";
    f3 += 1 === r3 ? "} " : "}}", this.userCode = "\n      const " + o3 + " start = " + o3 + "(" + a3 + ");\n      const " + o3 + " end = " + o3 + "(" + i3 + ");\n\n      void main() {\n        " + o3 + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + f3 + "\n        setOutput(result);\n      }\n    ";
  };
}();
var di = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    if (this.variableNames = ["x"], "avg" === e3 && n3) throw new Error("Cannot compute positions for average pool.");
    var r3 = t3.filterWidth, o3 = t3.strideHeight, a3 = t3.strideWidth, i3 = t3.dilationHeight, s3 = t3.dilationWidth, u3 = t3.effectiveFilterHeight, l3 = t3.effectiveFilterWidth, c3 = t3.padInfo.top, h3 = t3.padInfo.left;
    this.outputShape = t3.outShape;
    var p3 = "avg" === e3, f3 = "0.0";
    if (p3 || (f3 = "-1.0 / 1e-20"), n3) this.userCode = "\n        const ivec2 strides = ivec2(" + o3 + ", " + a3 + ");\n        const ivec2 pads = ivec2(" + c3 + ", " + h3 + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + u3 + ";\n              wR += " + i3 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + l3 + ";\n                wC += " + s3 + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + l3 + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
    else {
      var d3 = e3 + "(" + e3 + "(" + e3 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
      "avg" === e3 && (d3 = "avgValue / count");
      var v2 = 4 * Math.floor(r3 / 4), m3 = r3 % 4, g2 = "\n      if (" + p3 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
      this.userCode = "\n      const ivec2 strides = ivec2(" + o3 + ", " + a3 + ");\n      const ivec2 pads = ivec2(" + c3 + ", " + h3 + ");\n      const float initializationValue = " + f3 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + t3.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + f3 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + u3 + ";\n            wR += " + i3 + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + t3.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + v2 + "; wC += 4) {\n            int xC = xCCorner + wC * " + s3 + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s3 + ", d),\n              getValue(batch, xR, xC + 2 * " + s3 + ", d),\n              getValue(batch, xR, xC + 3 * " + s3 + ", d)\n            );\n\n            " + g2 + "\n          }\n\n          int xC = xCCorner + " + v2 + ";\n          if (" + (1 === m3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + g2 + "\n          } else if (" + (2 === m3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s3 + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + g2 + "\n          } else if (" + (3 === m3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s3 + ", d),\n              getValue(batch, xR, xC + 2 * " + s3 + ", d),\n              initializationValue\n            );\n\n            " + g2 + "\n          }\n        }\n        setOutput(" + d3 + ");\n      }\n    ";
    }
  };
}();
var vi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["x"];
    var n3 = t3.windowSize, r3 = t3.batchSize, o3 = t3.inSize, a3 = Math.ceil(o3 / n3);
    this.outputShape = [r3, a3];
    var i3 = "0.0", s3 = "";
    "prod" === e3 ? i3 = "1.0" : "min" === e3 ? (i3 = "1.0 / 1e-20", s3 = "min") : "max" === e3 && (i3 = "-1.0 / 1e-20", s3 = "max");
    var u3 = e3 + "(" + e3 + "(" + e3 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
    "sum" === e3 ? u3 = "sumValue" : "prod" === e3 ? u3 = "prodValue" : "all" === e3 ? u3 = "allValue" : "any" === e3 && (u3 = "anyValue");
    var l3 = 4 * Math.floor(n3 / 4), c3 = n3 % 4, h3 = "\n      if (" + ("sum" === e3) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === e3) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + s3 + "(values, minMaxValue);\n      }\n    ", p3 = "vec4";
    "all" === e3 ? (i3 = "1.0", h3 = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", p3 = "bvec4") : "any" === e3 && (i3 = "0.0", h3 = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", p3 = "bvec4");
    var f3 = "";
    o3 % n3 > 0 && (f3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i3 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + f3 + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n3 + ";\n\n        vec4 minMaxValue = vec4(" + i3 + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + l3 + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + p3 + " values = " + p3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + h3 + "\n        }\n\n        int inIdx = inOffset + " + l3 + ";\n        if (" + (1 === c3) + ") {\n          " + p3 + " values = " + p3 + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + h3 + "\n        } else if (" + (2 === c3) + ") {\n          " + p3 + " values = " + p3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + h3 + "\n        } else if (" + (3 === c3) + ") {\n          " + p3 + " values = " + p3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + h3 + "\n        }\n        setOutput(" + u3 + ");\n      }\n    ";
  };
}();
var mi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = t3;
    for (var n3 = "", r3 = 0; r3 < 4; r3++) {
      var o3 = "thisRC = rc;";
      r3 % 2 == 1 && (o3 += "thisRC.z += 1;"), r3 > 1 && (o3 += "thisRC.y += 1;"), n3 += "\n        " + o3 + "\n        " + (r3 > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + r3 + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (r3 > 0 ? "}" : "") + "\n      ";
    }
    this.userCode = "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + Io(["r", "c", "d"], e3) + "\n      return ivec3(r, c, d);\n    }\n  \n      " + So(t3) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + t3[1] + ";\n        int cols = " + t3[2] + ";\n\n        " + n3 + "\n\n        setOutput(result);\n      }\n    ";
  };
}();
var gi = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e3.shape;
    var r3 = e3.shape, o3 = r3[1], a3 = r3[2], i3 = t3.shape, s3 = i3[1], u3 = i3[2], l3 = [n3 && s3 > 1 ? o3 - 1 : o3, n3 && u3 > 1 ? a3 - 1 : a3], c3 = [n3 && s3 > 1 ? s3 - 1 : s3, n3 && u3 > 1 ? u3 - 1 : u3], h3 = l3[0] / c3[0], p3 = l3[1] / c3[1], f3 = 1 / h3, d3 = 1 / p3, v2 = 2 * Math.ceil(f3) + 2, m3 = 2 * Math.ceil(d3) + 2;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h3 + ");\n        const float widthScale = float(" + p3 + ");\n\n        const float invHeightScale = float(" + f3 + ");\n        const float invWidthScale = float(" + d3 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + m3 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s3 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u3 + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (o3 - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (a3 - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
  };
}();
var yi = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["A"], this.outputShape = [];
    var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
    this.outputShape = [o3, e3, n3, s3];
    var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], l3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3];
    this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u3[0] / l3[0] + ",\n          " + u3[1] / l3[1] + ");\n      const vec2 inputShapeRC = vec2(" + a3 + ".0, " + i3 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
  };
}();
var xi = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = [];
    var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
    this.outputShape = [o3, e3, n3, s3];
    var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], l3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3];
    this.userCode = "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " + u3[0] / l3[0] + ",\n          " + u3[1] / l3[1] + ",\n          " + u3[1] / l3[1] + ");\n      const vec3 inputShapeRC = vec3(" + a3 + ".0, " + i3 + ".0,\n                                     " + i3 + ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n        \n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " + (s3 - 1) + "; \n        bool hasNextRow = coords.z < " + (n3 - 1) + ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
  };
}();
var bi = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e3.shape;
    var r3 = e3.shape, o3 = r3[1], a3 = r3[2], i3 = t3.shape, s3 = i3[1], u3 = i3[2], l3 = [n3 && s3 > 1 ? o3 - 1 : o3, n3 && u3 > 1 ? a3 - 1 : a3], c3 = [n3 && s3 > 1 ? s3 - 1 : s3, n3 && u3 > 1 ? u3 - 1 : u3], h3 = l3[0] / c3[0], p3 = l3[1] / c3[1], f3 = 1 / h3, d3 = 1 / p3, v2 = 2 * Math.ceil(f3) + 2, m3 = 2 * Math.ceil(d3) + 2;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h3 + ");\n        const float widthScale = float(" + p3 + ");\n\n        const float invHeightScale = float(" + f3 + ");\n        const float invWidthScale = float(" + d3 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + m3 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s3 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u3 + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + l3[0] + ") *\n                (float(dyR) / float(" + c3[0] + "));\n\n            float sourceFracCol =\n                float(" + l3[1] + ") *\n                  (float(dyC) / float(" + c3[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + o3 + ") - 1),\n                " + n3 + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + a3 + ") - 1),\n                " + n3 + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
  };
}();
var wi = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["A"], this.outputShape = [];
    var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
    this.outputShape = [o3, e3, n3, s3];
    var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], l3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], c3 = r3 ? "0.5" : "0.0";
    this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u3[0] / l3[0] + ",\n          " + u3[1] / l3[1] + ");\n      const vec2 inputShapeRC = vec2(" + a3 + ".0, " + i3 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + c3 + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
  };
}();
var Ci = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["x"];
    var n3 = t3.length;
    if (n3 > 4) throw new Error("WebGL backend: Reverse of rank-" + n3 + " tensor is not yet supported");
    if (this.outputShape = t3, 1 !== n3) {
      var r3 = t3.map(function(n4, r4) {
        return function(n5) {
          return -1 !== e3.indexOf(n5) && 1 !== t3[n5] ? t3[n5] + " - coords[" + n5 + "] - 1" : "coords[" + n5 + "]";
        }(r4);
      }).join(","), o3 = Po(n3);
      this.userCode = "\n      void main() {\n        " + o3 + " coords = getOutputCoords();\n        setOutput(getX(" + r3 + "));\n      }\n    ";
    } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + t3[0] + " - coord - 1));\n        }\n      ";
  };
}();
var Ei = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["x"], this.usesPackedTextures = true;
    var n3 = t3.length;
    if (n3 > 4) throw new Error("WebGL backend: Reverse of rank-" + n3 + " tensor is not yet supported");
    this.outputShape = t3;
    var r3 = Eo("rc", n3), o3 = r3[n3 - 1] + " + 1 < " + this.outputShape[n3 - 1], a3 = r3[n3 - 2] + " + 1 < " + this.outputShape[n3 - 2], i3 = Po(n3);
    function s3(n4) {
      var r4 = t3.map(function(r5, o4) {
        return function(n5, r6) {
          return -1 !== e3.indexOf(n5) && 1 !== t3[n5] ? t3[n5] + " - " + r6[n5] + " - 1" : "" + r6[n5];
        }(o4, n4);
      });
      return "getChannel(getX(" + r4.join(",") + "), vec2(" + r4.slice(-2).join(",") + "))";
    }
    this.userCode = 1 === n3 ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" + t3[0] + " - rc - 1),\n            " + t3[0] + " - rc - 1);\n          if(" + o3 + "){\n              result.g = getChannel(getX(" + t3[0] + " - (rc  + 1) - 1),\n                " + t3[0] + " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      " : "\n        void main() {\n          " + i3 + " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " + function(t4) {
      return s3(t4);
    }(r3.slice()) + ";\n          if(" + o3 + "){\n            result.g = " + function(t4) {
      return t4[n3 - 1] = "(" + t4[n3 - 1] + " + 1)", s3(t4);
    }(r3.slice()) + ";\n          }\n          if(" + a3 + ") {\n            result.b = " + function(t4) {
      return t4[n3 - 2] = "(" + t4[n3 - 2] + " + 1)", s3(t4);
    }(r3.slice()) + ";\n            if(" + o3 + ") {\n              result.a = " + function(t4) {
      return t4[n3 - 1] = "(" + t4[n3 - 1] + " + 1)", t4[n3 - 2] = "(" + t4[n3 - 2] + " + 1)", s3(t4);
    }(r3.slice()) + ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
  };
}();
var Ri = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3, o3, a3, i3) {
    void 0 === i3 && (i3 = true), this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a3;
    var s3 = Po(o3.length), u3 = Po(a3.length), l3 = "";
    1 === n3 ? l3 = "i" : 2 === n3 && (l3 = "i, j");
    var c3 = "getIndices(" + l3 + ")", h3 = "";
    1 === r3 ? h3 = "i" : 2 === r3 && (h3 = "i, coords[1]");
    var p3 = "getUpdates(" + h3 + ")", f3 = e3 > 1 ? "strides[j]" : "strides";
    this.userCode = "\n        " + s3 + " strides = " + s3 + "(" + o3 + ");\n\n        void main() {\n          " + u3 + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + t3 + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + e3 + "; j++) {\n              int index = round(" + c3 + ");\n              flattenedIndex += index * " + f3 + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + p3 + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
  };
}();
var Ii = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["x", "segmentIds"];
    var n3 = t3.windowSize, r3 = t3.batchSize, o3 = t3.inSize, a3 = t3.numSegments, i3 = a3 * Math.ceil(o3 / n3);
    this.outputShape = [r3, i3];
    var s3 = 4 * Math.floor(n3 / 4), u3 = n3 % 4, l3 = "\n        sumValue += dot(values, segFilter);\n    ", c3 = "";
    o3 % n3 > 0 && (c3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return initializationValue;\n        }\n      ");
    var h3 = "";
    o3 % n3 > 0 && (h3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + c3 + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + h3 + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + a3 + ")) * float(" + n3 + "));\n        int currentSeg = int(mod(float(outIdx), float(" + a3 + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s3 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + l3 + "\n        }\n\n        int inIdx = inOffset + " + s3 + ";\n        if (" + (1 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + l3 + "\n        } else if (" + (2 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + l3 + "\n        } else if (" + (3 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + l3 + "\n        }\n        setOutput(sumValue);\n      }\n    ";
  };
}();
var Si = /* @__PURE__ */ function() {
  return function(t3, e3, n3) {
    var r3, o3;
    if (this.variableNames = ["c", "a", "b"], this.outputShape = e3, n3 > 4) throw Error("Where for rank " + n3 + " is not yet supported");
    if (1 === n3) o3 = "resRC", r3 = "resRC";
    else {
      for (var a3 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i3 = [], s3 = [], u3 = 0; u3 < e3.length; u3++) s3.push("" + a3[u3]), u3 < t3 && i3.push("" + a3[u3]);
      r3 = i3.join(), o3 = s3.join();
    }
    var l3 = Po(n3);
    this.userCode = "\n      void main() {\n        " + l3 + " resRC = getOutputCoords();\n        float cVal = getC(" + r3 + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + o3 + "));\n        } else {\n          setOutput(getB(" + o3 + "));\n        }\n      }\n    ";
  };
}();
var Ni = function() {
  function t3(t4) {
    this.variableNames = ["source"], this.outputShape = t4, this.rank = t4.length;
    var e3, n3 = Po(this.rank), r3 = "uniform int start[" + this.rank + "];", o3 = function(t5) {
      if (1 === t5) return "sourceLoc";
      if (t5 <= 6) return ki.slice(0, t5).map(function(t6) {
        return "sourceLoc." + t6;
      }).join(",");
      throw Error("Slicing for rank " + t5 + " is not yet supported");
    }(this.rank);
    e3 = "\n        " + n3 + " sourceLoc;\n        " + n3 + " coords = getOutputCoords();\n        " + t4.map(function(t5, e4) {
      return "sourceLoc." + ki[e4] + " = start[" + e4 + "] + coords." + ki[e4] + ";";
    }).join("\n") + "\n      ", this.userCode = "\n      " + r3 + "\n      void main() {\n        " + e3 + "\n        setOutput(getSource(" + o3 + "));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    if (t4.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t4.length + ")");
    return function(n3, r3) {
      null == e3.startLoc && (e3.startLoc = n3.getUniformLocationNoThrow(r3, "start"), null == e3.startLoc) || n3.gl.uniform1iv(e3.startLoc, t4);
    };
  }, t3;
}();
var ki = ["x", "y", "z", "w", "u", "v"];
var Ai = function() {
  function t3(t4) {
    this.variableNames = ["source"], this.usesPackedTextures = true, this.outputShape = t4, this.rank = t4.length;
    var e3 = Po(this.rank), n3 = Eo("coords", this.rank), r3 = Eo("sourceLoc", this.rank), o3 = 1 === this.rank ? "sourceLoc" : "vec2(" + r3.slice(-2).join() + ")", a3 = "getChannel(getSource(" + r3.join() + "), " + o3 + ")", i3 = "\n      result.x = " + a3 + ";\n      if (++" + n3[this.rank - 1] + " < " + t4[this.rank - 1] + ") {\n        ++" + r3[this.rank - 1] + ";\n        result.y = " + a3 + ";\n        --" + r3[this.rank - 1] + ";\n      }\n    ", s3 = 1 === this.rank ? "" : "\n      --" + n3[this.rank - 1] + ";\n      if (++" + n3[this.rank - 2] + " < " + t4[this.rank - 2] + ") {\n        ++" + r3[this.rank - 2] + ";\n        result.z = " + a3 + ";\n        if (++" + n3[this.rank - 1] + " < " + t4[this.rank - 1] + ") {\n          ++" + r3[this.rank - 1] + ";\n          result.w = " + a3 + ";\n        }\n      }\n    ", u3 = this.rank <= 4 ? "sourceLoc = coords +\n            " + e3 + "(" + t4.map(function(t5, e4) {
      return "start[" + e4 + "]";
    }).join() + ");" : t4.map(function(t5, e4) {
      return r3[e4] + " = " + n3[e4] + " + start[" + e4 + "];";
    }).join("\n");
    this.userCode = "\n      uniform int start[" + this.rank + "];\n      void main() {\n        " + e3 + " coords = getOutputCoords();\n        " + e3 + " sourceLoc;\n        " + u3 + " \n        vec4 result = vec4(0.);\n        " + i3 + "\n        " + s3 + "\n        setOutput(result);\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    if (t4.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t4.length + ")");
    return function(n3, r3) {
      null == e3.startLoc && (e3.startLoc = n3.getUniformLocationNoThrow(r3, "start"), null == e3.startLoc) || n3.gl.uniform1iv(e3.startLoc, t4);
    };
  }, t3;
}();
var Ti = /* @__PURE__ */ function() {
  return function(t3, e3, n3, r3) {
    this.variableNames = ["x"];
    var o3 = n3.filter(function(t4, e4) {
      return -1 === r3.indexOf(e4);
    });
    this.outputShape = o3;
    var a3 = n3.length, i3 = Po(n3.length), s3 = Po(o3.length), u3 = "";
    if (1 === a3) u3 = "coords * strides + begin";
    else {
      var l3 = 0;
      u3 = n3.map(function(t4, e4) {
        return -1 === r3.indexOf(e4) ? (l3++, 1 === o3.length ? "coords * strides[" + e4 + "] + begin[" + e4 + "]" : "coords[" + (l3 - 1) + "] * strides[" + e4 + "] + begin[" + e4 + "]") : "begin[" + e4 + "]";
      }).join(",");
    }
    this.userCode = "\n      " + i3 + " begin = " + i3 + "(" + t3 + ");\n      " + i3 + " strides = " + i3 + "(" + e3 + ");\n\n      void main() {\n        " + s3 + " coords = getOutputCoords();\n        setOutput(getX(" + u3 + "));\n      }\n    ";
  };
}();
var Di = function() {
  function t3(t4) {
    this.gpgpu = t4, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
  }
  return t3.prototype.acquireTexture = function(t4, e3, n3) {
    var r3, o3 = _i(e3, n3), a3 = Oi(t4, o3, n3);
    if (a3 in this.freeTextures || (this.freeTextures[a3] = []), a3 in this.usedTextures || (this.usedTextures[a3] = []), this.freeTextures[a3].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this.log();
      var i3 = this.freeTextures[a3].shift();
      return this.usedTextures[a3].push(i3), i3;
    }
    return this.numUsedTextures++, this.log(), o3 === Da.PACKED_2X2_FLOAT32 ? r3 = this.gpgpu.createPackedMatrixTexture(t4[0], t4[1]) : o3 === Da.PACKED_2X2_FLOAT16 ? r3 = this.gpgpu.createFloat16PackedMatrixTexture(t4[0], t4[1]) : o3 === Da.UNPACKED_FLOAT32 ? r3 = this.gpgpu.createFloat32MatrixTexture(t4[0], t4[1]) : o3 === Da.UNPACKED_FLOAT16 ? r3 = this.gpgpu.createFloat16MatrixTexture(t4[0], t4[1]) : o3 === Da.PACKED_4X1_UNSIGNED_BYTE && (r3 = this.gpgpu.createUnsignedBytesMatrixTexture(t4[0], t4[1])), this.usedTextures[a3].push(r3), r3;
  }, t3.prototype.releaseTexture = function(t4, e3, n3, r3) {
    if (null != this.freeTextures) {
      var o3 = Oi(e3, _i(n3, r3), r3);
      o3 in this.freeTextures || (this.freeTextures[o3] = []), this.freeTextures[o3].push(t4), this.numFreeTextures++, this.numUsedTextures--;
      var a3 = this.usedTextures[o3], i3 = a3.indexOf(t4);
      if (i3 < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
      a3.splice(i3, 1), this.log();
    }
  }, t3.prototype.log = function() {
    if (this.logEnabled) {
      var t4 = this.numFreeTextures + this.numUsedTextures;
      console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + t4 + ")");
    }
  }, t3.prototype.getNumUsedTextures = function() {
    return this.numUsedTextures;
  }, t3.prototype.getNumFreeTextures = function() {
    return this.numFreeTextures;
  }, t3.prototype.dispose = function() {
    var t4 = this;
    if (null != this.freeTextures) {
      for (var e3 in this.freeTextures) this.freeTextures[e3].forEach(function(e4) {
        t4.gpgpu.deleteMatrixTexture(e4);
      });
      for (var e3 in this.usedTextures) this.usedTextures[e3].forEach(function(e4) {
        t4.gpgpu.deleteMatrixTexture(e4);
      });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
    }
  }, t3;
}();
function _i(t3, e3) {
  if (t3 === Ta.UPLOAD) return Da.PACKED_2X2_FLOAT32;
  if (t3 === Ta.RENDER || null == t3) return e3 ? s.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? Da.PACKED_2X2_FLOAT32 : Da.PACKED_2X2_FLOAT16 : s.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? Da.UNPACKED_FLOAT32 : Da.UNPACKED_FLOAT16;
  if (t3 === Ta.DOWNLOAD || t3 === Ta.PIXELS) return Da.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error("Unknown logical texture type " + t3);
}
function Oi(t3, e3, n3) {
  return t3[0] + "_" + t3[1] + "_" + e3 + "_" + n3;
}
var Fi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"];
    for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[r3] * e3[r3];
    this.outputShape = n3, this.rank = n3.length;
    var o3 = Po(this.rank), a3 = function(t4) {
      var e4 = t4.length;
      if (e4 > 5) throw Error("Tile for rank " + e4 + " is not yet supported");
      if (1 === e4) return "imod(resRC, " + t4[0] + ")";
      for (var n4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], r4 = [], o4 = 0; o4 < t4.length; o4++) r4.push("imod(" + n4[o4] + ", " + t4[o4] + ")");
      return r4.join();
    }(t3);
    this.userCode = "\n      void main() {\n        " + o3 + " resRC = getOutputCoords();\n        setOutput(getA(" + a3 + "));\n      }\n    ";
  };
}();
var Mi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"];
    for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[e3[r3]];
    this.outputShape = n3, this.rank = n3.length;
    var o3 = Po(this.rank), a3 = function(t4) {
      var e4 = t4.length;
      if (e4 > 6) throw Error("Transpose for rank " + e4 + " is not yet supported");
      for (var n4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], r4 = new Array(e4), o4 = 0; o4 < t4.length; o4++) r4[t4[o4]] = n4[o4];
      return r4.join();
    }(e3);
    this.userCode = "\n    void main() {\n      " + o3 + " resRC = getOutputCoords();\n      setOutput(getA(" + a3 + "));\n    }\n    ";
  };
}();
var Bi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"], this.usesPackedTextures = true;
    for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[e3[r3]];
    if (this.outputShape = n3, this.rank = n3.length, this.rank > 6) throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
    var o3 = Po(this.rank), a3 = Co("rc", this.rank), i3 = new Array(this.rank);
    for (r3 = 0; r3 < e3.length; r3++) i3[e3[r3]] = a3[r3];
    var s3 = "vec2(" + i3.slice(-2).join() + ")", u3 = "++" + a3[this.rank - 1] + " < " + n3[this.rank - 1], l3 = "getChannel(getA(" + i3.join() + "), " + s3 + ")";
    this.userCode = "\n    void main() {\n      " + o3 + " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " + l3 + ";\n      if(" + u3 + ") {\n        result[1] = " + l3 + ";\n      }\n      --" + a3[this.rank - 1] + ";\n      if(++" + a3[this.rank - 2] + " < " + n3[this.rank - 2] + ") {\n        result[2] = " + l3 + ";\n        if(" + u3 + ") {\n          result[3] = " + l3 + ";\n        }\n      }  \n      setOutput(result);\n    }\n    ";
  };
}();
var Pi = 1.7580993408473768;
var Li = 1.0507009873554805;
var Wi = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"], this.outputShape = t3, this.userCode = "\n      float unaryOperation(float x) {\n        " + e3 + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
  };
}();
var Ui = "if (isnan(x)) return x;";
var zi = "return x;";
var Vi = Ui + "\n  return (x < 0.0) ? 0.0 : x;\n";
var Gi = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + Pi + ";\n  float scale = " + Li + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
var qi = "return exp(x);";
var Hi = Ui + "\n  return sin(x);\n";
var $i = Ui + "\n  return cos(x);\n";
var ji = Ui + "\n  return atan(x);\n";
var Ki = Ui + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));";
var Xi = Ui + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
var Yi = "return x;";
var Qi = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
var Ji = /* @__PURE__ */ function() {
  return function(t3, e3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = t3, this.userCode = "\n      vec4 unaryOperation(vec4 x) {\n        " + e3 + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
  };
}();
var Zi = /* @__PURE__ */ function() {
  return function(t3) {
    this.variableNames = ["A"], this.usesPackedTextures = true, this.outputShape = t3;
    var e3 = t3.length, n3 = Eo("rc", e3), r3 = Po(e3), o3 = function(t4, e4) {
      if (1 === t4) return "rc";
      for (var n4 = "", r4 = 0; r4 < t4; r4++) n4 += e4[r4], r4 < t4 - 1 && (n4 += ",");
      return n4;
    }(e3, n3), a3 = n3.slice(-2), i3 = e3 <= 1 ? "rc" : "vec2(" + a3.join(",") + ")";
    this.userCode = "\n      void main() {\n        " + r3 + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o3 + ");\n\n        setOutput(getChannel(packedInput, " + i3 + "));\n      }\n    ";
  };
}();
var ts = {};
var es = 600;
var ns = function() {
  function t3(t4) {
    if (this.gpgpu = t4, this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.warnedAboutMemory = false, this.disposed = false, !s.getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
    if (null == t4) {
      var e3 = Ft(s.getNumber("WEBGL_VERSION"));
      this.binaryCache = (n3 = s.getNumber("WEBGL_VERSION")) in ts ? ts[n3] : (ts[n3] = {}, ts[n3]), this.gpgpu = new ei(e3), this.canvas = e3.canvas, this.gpgpuCreatedLocally = true;
    } else this.binaryCache = {}, this.gpgpuCreatedLocally = false, this.canvas = t4.gl.canvas;
    var n3;
    this.textureManager = new Di(this.gpgpu), this.numMBBeforeWarning = null == s.global.screen ? 1024 : s.global.screen.height * s.global.screen.width * window.devicePixelRatio * es / 1024 / 1024, this.texData = new Gr(this, At);
  }
  return t3.prototype.register = function(t4, e3, n3) {
    if (this.texData.has(t4)) throw new Error("Data buffer is already registered");
    this.texData.set(t4, { shape: e3, dtype: n3 });
  }, t3.prototype.fromPixels = function(t4, e3) {
    if (null == t4) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
    var n3 = [t4.height, t4.width], r3 = [t4.height, t4.width, e3];
    if (s.getBool("IS_BROWSER")) {
      if (!(t4 instanceof HTMLVideoElement || t4 instanceof HTMLImageElement || t4 instanceof HTMLCanvasElement || t4 instanceof ImageData || t4.data instanceof Uint8Array)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was " + t4.constructor.name);
      if (t4 instanceof HTMLVideoElement) {
        if (null == this.fromPixels2DContext) {
          if ("complete" !== document.readyState) throw new Error("The DOM is not ready yet. Please call tf.browser.fromPixels() once the DOM is ready. One way to do that is to add an event listener for `DOMContentLoaded` on the document object");
          this.fromPixels2DContext = document.createElement("canvas").getContext("2d");
        }
        this.fromPixels2DContext.canvas.width = t4.width, this.fromPixels2DContext.canvas.height = t4.height, this.fromPixels2DContext.drawImage(t4, 0, 0, t4.width, t4.height), t4 = this.fromPixels2DContext.canvas;
      }
    }
    var o3, a3, i3 = this.makeTensorHandle(n3, "int32");
    if (this.texData.get(i3.dataId).usage = Ta.PIXELS, this.gpgpu.uploadPixelDataToTexture(this.getTexture(i3.dataId), t4), s.getBool("WEBGL_PACK")) {
      o3 = new ka(r3);
      var u3 = this.makePackedTensor(o3.outputShape, i3.dtype);
      a3 = this.compileAndRun(o3, [i3], u3);
    } else o3 = new Na(r3), a3 = this.compileAndRun(o3, [i3]);
    return this.disposeData(i3.dataId), a3;
  }, t3.prototype.makeTensorHandle = function(t4, e3) {
    var n3 = {};
    return this.register(n3, t4, e3), { dataId: n3, shape: t4, dtype: e3 };
  }, t3.prototype.write = function(t4, e3) {
    if (null == e3) throw new Error("MathBackendWebGL.write(): values can not be null");
    if (s.getBool("DEBUG")) for (var n3 = 0; n3 < e3.length; n3++) {
      var r3 = e3[n3];
      if (!Lt(r3)) throw Error("The value " + r3 + " cannot be represented on this device.");
    }
    var o3 = this.texData.get(t4);
    if ("complex64" === o3.dtype) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.releaseGPUData(t4), o3.usage = Ta.UPLOAD, o3.values = e3;
  }, t3.prototype.readSync = function(t4) {
    var e3 = this.texData.get(t4), n3 = e3.values, r3 = e3.dtype, o3 = e3.complexTensors, a3 = e3.slice, i3 = e3.shape;
    if (null != a3) {
      var s3 = new Wi(i3, "return x;"), u3 = this.compileAndRun(s3, [{ dataId: t4, shape: i3, dtype: r3 }]), l3 = this.readSync(u3.dataId);
      return u3.dispose(), l3;
    }
    if (null != n3) return this.convertAndCacheOnCPU(t4);
    if ("string" === r3) return n3;
    var c3, h3, p3 = null != this.activeTimers;
    (p3 && (c3 = performance.now()), "complex64" === r3) ? h3 = uo(o3.real.dataSync(), o3.imag.dataSync()) : h3 = this.getValuesFromTexture(t4);
    return p3 && (this.downloadWaitMs += performance.now() - c3), this.convertAndCacheOnCPU(t4, h3);
  }, t3.prototype.read = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3, a3, i3, u3, l3, c3, h3, p3, f3, d3, v2, m3, g2, x3, b3, w3, C3, E3, R3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            if (this.pendingRead.has(t4)) return n3 = this.pendingRead.get(t4), [2, new Promise(function(t5) {
              return n3.push(t5);
            })];
            if (r3 = this.texData.get(t4), a3 = r3.values, i3 = r3.shape, u3 = r3.slice, l3 = r3.dtype, c3 = r3.complexTensors, null != u3) return h3 = new Wi(i3, "return x;"), p3 = this.compileAndRun(h3, [{ dataId: t4, shape: i3, dtype: l3 }]), f3 = this.read(p3.dataId), p3.dispose(), [2, f3];
            if (null != a3) return [2, this.convertAndCacheOnCPU(t4)];
            if (!s.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === s.getNumber("WEBGL_VERSION")) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
            return d3 = null, "complex64" !== l3 && s.get("WEBGL_BUFFER_SUPPORTED") && (v2 = this.decode(t4), t4 = v2.dataId, m3 = this.texData.get(v2.dataId), d3 = (e3 = this.gpgpu).createBufferFromTexture.apply(e3, [m3.texture].concat(Fa(i3)))), this.pendingRead.set(t4, []), "complex64" === l3 ? [3, 2] : [4, this.gpgpu.createAndWaitForFence()];
          case 1:
            o3.sent(), o3.label = 2;
          case 2:
            return "complex64" !== l3 ? [3, 4] : [4, Promise.all([c3.real.data(), c3.imag.data()])];
          case 3:
            return x3 = o3.sent(), b3 = x3[0], w3 = x3[1], g2 = uo(b3, w3), [3, 5];
          case 4:
            null == d3 ? g2 = this.getValuesFromTexture(t4) : (C3 = y(i3), g2 = this.gpgpu.downloadFloat32MatrixFromBuffer(d3, C3), this.disposeData(t4)), o3.label = 5;
          case 5:
            return E3 = this.convertAndCacheOnCPU(t4, g2), R3 = this.pendingRead.get(t4), this.pendingRead.delete(t4), R3.forEach(function(t5) {
              return t5(E3);
            }), this.pendingDisposal.has(t4) && (this.pendingDisposal.delete(t4), this.disposeData(t4)), [2, E3];
        }
      });
    });
  }, t3.prototype.getValuesFromTexture = function(t4) {
    var e3, n3 = this, r3 = this.texData.get(t4), o3 = r3.shape, a3 = r3.dtype, i3 = r3.isPacked, u3 = y(o3);
    if (s.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      var l3 = this.decode(t4), c3 = this.texData.get(l3.dataId), h3 = (e3 = this.gpgpu).downloadMatrixFromPackedTexture.apply(e3, [c3.texture].concat(Fa(o3))).subarray(0, u3);
      return this.disposeData(l3.dataId), h3;
    }
    var p3 = s.getBool("WEBGL_PACK") && true === i3, f3 = p3 ? fe(o3) : o3, d3 = this.makeTensorHandle(f3, "float32");
    d3.size = y(o3), this.texData.get(d3.dataId).usage = Ta.DOWNLOAD;
    var v2 = Fe(function() {
      var e4 = p3 ? new ba(f3) : new xa(f3);
      return n3.compileAndRun(e4, [{ shape: f3, dtype: a3, dataId: t4 }], d3, null);
    }), m3 = this.texData.get(v2.dataId), g2 = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m3.texture, m3.texShape[0], m3.texShape[1]).subarray(0, u3);
    return this.disposeData(d3.dataId), g2;
  }, t3.prototype.time = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3, a3, i3, s3, u3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            return e3 = this.activeTimers, n3 = [], r3 = false, null == this.programTimersStack ? (this.programTimersStack = n3, r3 = true) : this.activeTimers.push(n3), this.activeTimers = n3, t4(), a3 = g(this.activeTimers.map(function(t5) {
              return t5.query;
            })).filter(function(t5) {
              return null != t5;
            }), i3 = g(this.activeTimers.map(function(t5) {
              return t5.name;
            })).filter(function(t5) {
              return null != t5;
            }), this.activeTimers = e3, r3 && (this.programTimersStack = null), [4, Promise.all(a3)];
          case 1:
            return s3 = o3.sent(), u3 = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: f(s3), getExtraProfileInfo: function() {
              return s3.map(function(t5, e4) {
                return { name: i3[e4], ms: t5 };
              }).map(function(t5) {
                return t5.name + ": " + t5.ms;
              }).join(", ");
            }, wallMs: null }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, u3];
        }
      });
    });
  }, t3.prototype.memory = function() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU };
  }, t3.prototype.startTimer = function() {
    return s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : { startMs: performance.now(), endMs: null };
  }, t3.prototype.endTimer = function(t4) {
    return s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), t4) : (t4.endMs = performance.now(), t4);
  }, t3.prototype.getQueryTime = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3;
      return o(this, function(n3) {
        return s.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.waitForQueryAndGetTime(t4)] : [2, (e3 = t4).endMs - e3.startMs];
      });
    });
  }, t3.prototype.disposeData = function(t4) {
    if (!this.pendingDisposal.has(t4)) {
      if (this.pendingRead.has(t4)) this.pendingDisposal.add(t4);
      else if (this.texData.has(t4)) {
        this.releaseGPUData(t4);
        var e3 = this.texData.get(t4).complexTensors;
        null != e3 && (e3.real.dispose(), e3.imag.dispose()), this.texData.delete(t4);
      }
    }
  }, t3.prototype.releaseGPUData = function(t4) {
    var e3 = this.texData.get(t4), n3 = e3.texture, r3 = e3.dtype, o3 = e3.texShape, a3 = e3.usage, i3 = e3.isPacked, s3 = e3.slice, u3 = s3 && s3.origDataId || t4, l3 = this.dataRefCount.get(u3);
    l3 > 1 ? this.dataRefCount.set(u3, l3 - 1) : (this.dataRefCount.delete(u3), null != n3 && (this.numBytesInGPU -= this.computeBytes(o3, r3), this.textureManager.releaseTexture(n3, o3, a3, i3)));
    var c3 = this.texData.get(t4);
    c3.texture = null, c3.texShape = null, c3.isPacked = false, c3.slice = null;
  }, t3.prototype.getTexture = function(t4) {
    return this.uploadToGPU(t4), this.texData.get(t4).texture;
  }, t3.prototype.getCPUBackend = function() {
    return s.getBool("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = At.findBackend("cpu")), this.cpuBackend) : null;
  }, t3.prototype.shouldExecuteOnCPU = function(t4, e3) {
    var n3 = this;
    return void 0 === e3 && (e3 = 128), null != this.getCPUBackend() && t4.every(function(t5) {
      return null == n3.texData.get(t5.dataId).texture && t5.size < e3;
    });
  }, t3.prototype.getGPGPUContext = function() {
    return this.gpgpu;
  }, t3.prototype.complex = function(t4, e3) {
    var n3 = this.makeOutputArray(t4.shape, "complex64");
    return this.texData.get(n3.dataId).complexTensors = { real: At.keep(t4.clone()), imag: At.keep(e3.clone()) }, n3;
  }, t3.prototype.real = function(t4) {
    return this.texData.get(t4.dataId).complexTensors.real.clone();
  }, t3.prototype.imag = function(t4) {
    return this.texData.get(t4.dataId).complexTensors.imag.clone();
  }, t3.prototype.slice = function(t4, e3, n3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.slice(t4, e3, n3);
    if (0 === y(n3)) return fn([], n3, t4.dtype);
    var r3 = this.texData.get(t4.dataId).isPacked, o3 = _r(t4.shape, e3, n3);
    if (r3 || !o3) {
      var a3 = s.getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ai(n3) : new Ni(n3), i3 = a3.getCustomSetupFunc(e3);
      return this.compileAndRun(a3, [t4], null, i3);
    }
    return this.uploadToGPU(t4.dataId), this.shallowSlice(t4, e3, n3);
  }, t3.prototype.shallowSlice = function(t4, e3, n3) {
    var r3 = this.texData.get(t4.dataId), o3 = ht.make(n3, {}, t4.dtype, this), a3 = this.texData.get(o3.dataId);
    Object.assign(a3, r3), a3.shape = n3, a3.dtype = t4.dtype;
    var i3 = Or(e3, t4.strides);
    r3.slice && (i3 += r3.slice.flatOffset), a3.slice = { flatOffset: i3, origDataId: r3.slice && r3.slice.origDataId || t4.dataId };
    var s3 = this.dataRefCount.get(a3.slice.origDataId) || 1;
    return this.dataRefCount.set(a3.slice.origDataId, s3 + 1), o3;
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3, o3, a3, i3, s3, u3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.stridedSlice(t4, e3, n3, r3, o3, a3, i3, s3, u3);
    var l3 = Ar(t4.shape, e3, n3, r3, o3, a3, i3, s3, u3), c3 = l3[0], h3 = l3[1], p3 = l3[2], f3 = h3.filter(function(t5, e4) {
      return -1 === p3.indexOf(e4);
    });
    if (f3.some(function(t5) {
      return 0 === t5;
    })) return fn([], f3);
    var d3 = new Ti(c3, r3, h3, p3);
    return this.compileAndRun(d3, [t4]);
  }, t3.prototype.reverse = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ei(t4.shape, e3) : new Ci(t4.shape, e3);
    return this.compileAndRun(n3, [t4]);
  }, t3.prototype.concat = function(t4, e3) {
    if (this.shouldExecuteOnCPU(t4)) return this.cpuBackend.concat(t4, e3);
    if (1 === t4.length) return t4[0];
    if (t4.length > s.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
      var n3 = Math.floor(t4.length / 2), r3 = this.concat(t4.slice(0, n3), e3), o3 = this.concat(t4.slice(n3), e3);
      return this.concat([r3, o3], e3);
    }
    if (s.getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t4[0].rank > 1) {
      var a3 = new na(t4.map(function(t5) {
        return t5.shape;
      }), e3);
      return this.compileAndRun(a3, t4);
    }
    var i3 = un(t4.map(function(t5) {
      return t5.shape;
    }), e3), u3 = t4.map(function(t5) {
      return t5.as2D(-1, y(t5.shape.slice(e3)));
    }), l3 = new ea(u3.map(function(t5) {
      return t5.shape;
    }));
    return this.compileAndRun(l3, u3).reshape(i3);
  }, t3.prototype.neg = function(t4) {
    var e3 = new Wi(t4.shape, "return -x;");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    var o3 = n3 ? t4.shape[2] : t4.shape[1], a3 = r3 ? e3.shape[1] : e3.shape[2], i3 = n3 ? t4.shape[1] : t4.shape[2], s3 = t4.shape[0];
    if ((1 === o3 || 1 === a3) && i3 > 1e3) {
      n3 && (t4 = t4.transpose([0, 2, 1])), r3 && (e3 = e3.transpose([0, 2, 1]));
      var u3 = 1 === a3 ? t4 : t4.as3D(s3, i3, 1), l3 = 1 === a3 ? 2 : 1, c3 = 1 === a3 ? e3.as3D(s3, 1, i3) : e3;
      return this.multiply(u3, c3).sum(l3, true);
    }
    var h3 = bt(t4.dtype, e3.dtype), p3 = new ui(t4.shape, [s3, o3, a3], n3, r3), f3 = this.makePackedTensor(p3.outputShape, h3);
    return this.compileAndRun(p3, [t4, e3], f3);
  }, t3.prototype.fusedBatchMatMul = function(t4, e3, n3, r3, o3, a3) {
    var i3 = n3 ? t4.shape[2] : t4.shape[1], s3 = r3 ? e3.shape[1] : e3.shape[2], u3 = t4.shape[0], l3 = bt(t4.dtype, e3.dtype), c3 = new ui(t4.shape, [u3, i3, s3], n3, r3, !!o3, a3 ? function(t5, e4) {
      if (void 0 === e4 && (e4 = false), "linear" === t5) return e4 ? Yi : zi;
      if ("relu" === t5) return e4 ? Qi : Vi;
      throw new Error("Activation " + t5 + " has not been implemented for the WebGL backend.");
    }(a3, true) : null), h3 = this.makePackedTensor(c3.outputShape, l3), p3 = [t4, e3];
    return o3 && p3.push(o3), this.compileAndRun(c3, p3, h3);
  }, t3.prototype.multiply = function(t4, e3) {
    if ("complex64" === t4.dtype) {
      var n3 = this.texData.get(t4.dataId), r3 = this.texData.get(e3.dataId), o3 = new $o(qo, t4.shape, e3.shape), a3 = new $o(Ho, t4.shape, e3.shape), i3 = [this.makeComplexComponentTensorHandle(t4, n3.complexTensors.real), this.makeComplexComponentTensorHandle(t4, n3.complexTensors.imag), this.makeComplexComponentTensorHandle(e3, r3.complexTensors.real), this.makeComplexComponentTensorHandle(e3, r3.complexTensors.imag)], u3 = this.compileAndRun(o3, i3), l3 = this.compileAndRun(a3, i3), c3 = this.complex(u3, l3);
      return u3.dispose(), l3.dispose(), c3;
    }
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.multiply(t4, e3);
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, Xo, t4.dtype);
    var h3 = new Yo(Xo, t4.shape, e3.shape), p3 = this.makeOutputArray(h3.outputShape, t4.dtype);
    return this.compileAndRun(h3, [t4, e3], p3);
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3, a3) {
    var i3 = [t4, e3, n3], u3 = null;
    null != a3 && (u3 = a3.shape, i3.push(a3));
    var l3 = null;
    if (null != o3 && (l3 = o3.shape, i3.push(o3)), s.getBool("WEBGL_PACK_NORMALIZATION")) {
      var c3 = new Go(t4.shape, e3.shape, n3.shape, u3, l3, r3);
      return this.compileAndRun(c3, i3);
    }
    var h3 = new Vo(t4.shape, e3.shape, n3.shape, u3, l3, r3);
    return this.compileAndRun(h3, i3);
  }, t3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o3) {
    var a3 = s.getBool("WEBGL_PACK_NORMALIZATION") ? new ii(t4.shape, e3, n3, r3, o3) : new oi(t4.shape, e3, n3, r3, o3);
    return this.compileAndRun(a3, [t4]);
  }, t3.prototype.LRNGrad = function(t4, e3, n3, r3, o3, a3, i3) {
    var s3 = new ai(e3.shape, r3, o3, a3, i3);
    return this.compileAndRun(s3, [e3, n3, t4]);
  }, t3.prototype.tile = function(t4, e3) {
    if ("string" === t4.dtype) return mo($n(t4.shape, t4.dtype, this.readSync(t4.dataId)), e3);
    var n3 = new Fi(t4.shape, e3);
    return this.compileAndRun(n3, [t4]);
  }, t3.prototype.pad = function(t4, e3, n3) {
    var r3 = s.getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new fi(t4.shape, e3, n3) : new pi(t4.shape, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, t3.prototype.transpose = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.transpose(t4, e3);
    var n3 = s.getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Bi(t4.shape, e3) : new Mi(t4.shape, e3);
    return this.compileAndRun(n3, [t4]);
  }, t3.prototype.gather = function(t4, e3, n3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.gather(t4, e3, n3);
    var r3 = new Aa(t4.shape, e3.size, n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.batchToSpaceND = function(t4, e3, n3) {
    d(t4.rank <= 4, function() {
      return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
    });
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o3 = xr(t4.shape, e3, r3), a3 = br(o3.length, e3.length), i3 = wr(t4.shape, e3, r3), s3 = Cr(n3, e3.length), u3 = Er(i3, n3, e3.length);
    return t4.reshape(o3).transpose(a3).reshape(i3).slice(s3, u3);
  }, t3.prototype.spaceToBatchND = function(t4, e3, n3) {
    d(t4.rank <= 4, function() {
      return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
    });
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o3 = [[0, 0]];
    o3.push.apply(o3, n3);
    for (var a3 = 1 + e3.length; a3 < t4.shape.length; ++a3) o3.push([0, 0]);
    var i3 = t4.pad(o3), s3 = xr(i3.shape, e3, r3, false), u3 = br(s3.length, e3.length, false), l3 = wr(i3.shape, e3, r3, false);
    return i3.reshape(s3).transpose(u3).reshape(l3);
  }, t3.prototype.reduce = function(t4, e3, n3) {
    var r3 = t4.shape[0], o3 = t4.shape[1], a3 = Sr(o3), i3 = new vi({ windowSize: a3, inSize: o3, batchSize: r3 }, e3), s3 = i3.outputShape, u3 = s3[0], l3 = s3[1], c3 = this.makeOutputArray([u3, l3], n3);
    return this.compileAndRun(i3, [t4], c3), 1 === c3.shape[1] ? c3 : this.reduce(c3, e3, n3);
  }, t3.prototype.argReduce = function(t4, e3, n3) {
    void 0 === n3 && (n3 = null);
    var r3 = t4.shape[0], o3 = t4.shape[1];
    null != n3 && (r3 = n3.shape[0], o3 = n3.shape[1]);
    var a3 = Sr(o3), i3 = new wo({ windowSize: a3, inSize: o3, batchSize: r3 }, e3, null == n3), s3 = i3.outputShape, u3 = s3[0], l3 = s3[1], c3 = this.makeOutputArray([u3, l3], "int32"), h3 = [t4];
    return null != n3 && h3.push(n3), this.compileAndRun(i3, h3, c3), 1 === c3.shape[1] ? c3 : this.argReduce(t4, e3, c3);
  }, t3.prototype.argReducePacked = function(t4, e3, n3) {
    void 0 === n3 && (n3 = null);
    var r3 = null != n3 ? n3.shape : t4.shape, o3 = Sr(r3[r3.length - 1]), a3 = new Uo(r3, o3, e3, null == n3), i3 = this.makePackedTensor(a3.outputShape, "int32"), s3 = null == n3 ? [t4] : [t4, n3];
    return this.compileAndRun(a3, s3, i3), i3.rank === t4.rank ? this.argReducePacked(t4, e3, i3) : i3;
  }, t3.prototype.sum = function(t4, e3) {
    nn("sum", e3, t4.rank);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3), i3 = wt(t4.dtype);
    return this.reduce(a3, "sum", i3).reshape(r3);
  }, t3.prototype.prod = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.prod(t4, e3);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3), i3 = wt(t4.dtype);
    return this.reduce(a3, "prod", i3).reshape(r3);
  }, t3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    var r3 = 0, o3 = rn([r3], t4.rank), a3 = t4;
    null != o3 && (a3 = t4.transpose(o3), r3 = an(1, t4.rank)[0]);
    var i3 = function(t5, e4, n4) {
      for (var r4 = [], o4 = t5.length, a4 = 0; a4 < o4; a4++) a4 !== e4 ? r4.push(t5[a4]) : r4.push(n4);
      return r4;
    }(a3.shape, r3, n3), s3 = y([a3.shape[r3]]), u3 = a3.as2D(-1, s3), l3 = wt(t4.dtype), c3 = this.segOpCompute(u3, "unsortedSegmentSum", e3, l3, n3).reshape(i3);
    return null != o3 && (c3 = c3.transpose(on(o3))), c3;
  }, t3.prototype.segOpCompute = function(t4, e3, n3, r3, o3) {
    var a3 = t4.shape[0], i3 = t4.shape[1], s3 = function(t5, e4) {
      var n4, r4 = false;
      for (t5 <= Ir ? (n4 = t5, r4 = true) : n4 = V(t5, Math.floor(Math.sqrt(t5))); !r4; ) n4 > e4 || n4 === t5 ? r4 = true : n4 = V(t5, n4 + 1);
      return n4;
    }(i3, o3), u3 = new Ii({ windowSize: s3, inSize: i3, batchSize: a3, numSegments: o3 }, e3), l3 = u3.outputShape, c3 = l3[0], h3 = l3[1], p3 = this.makeOutputArray([c3, h3], r3);
    return this.compileAndRun(u3, [t4, n3], p3), p3.shape[1] === o3 ? p3 : (n3 = Sn(0, o3).tile([i3 / s3]), this.segOpCompute(p3, e3, n3, r3, o3));
  }, t3.prototype.argMinMaxReduce = function(t4, e3, n3) {
    var r3 = [e3];
    if (nn("arg" + n3.charAt(0).toUpperCase() + n3.slice(1), r3, t4.rank), !s.getBool("WEBGL_PACK_REDUCE") || t4.rank <= 2) {
      var o3 = tn(t4.shape, r3), a3 = o3[0], i3 = y(o3[1]), u3 = t4.as2D(-1, i3);
      return this.argReduce(u3, n3).reshape(a3);
    }
    return this.argReducePacked(t4, n3);
  }, t3.prototype.argMin = function(t4, e3) {
    return this.argMinMaxReduce(t4, e3, "min");
  }, t3.prototype.argMax = function(t4, e3) {
    return this.argMinMaxReduce(t4, e3, "max");
  }, t3.prototype.cumsum = function(t4, e3, n3, r3) {
    if (e3 !== t4.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (t4.rank - 1) + " but got axis=" + e3);
    var o3 = new da(t4.shape, n3, r3);
    return this.compileAndRun(o3, [t4]);
  }, t3.prototype.equal = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(equal(a, b));\n", "bool");
    var n3 = new Yo("return float(a == b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.notEqual = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(notEqual(a, b));\n", "bool");
    var n3 = new Yo("return float(a != b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.less = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.less(t4, e3);
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(lessThan(a, b));\n", "bool");
    var n3 = new Yo("return float(a < b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.lessEqual = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(lessThanEqual(a, b));\n", "bool");
    var n3 = new Yo("return float(a <= b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.greater = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.greater(t4, e3);
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(greaterThan(a, b));\n", "bool");
    var n3 = new Yo("return float(a > b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.greaterEqual = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(greaterThanEqual(a, b));\n", "bool");
    var n3 = new Yo("return float(a >= b);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.logicalNot = function(t4) {
    var e3 = new Wi(t4.shape, "return float(!(x >= 1.0));");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.logicalAnd = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n", "bool");
    var n3 = new Yo("return float(a >= 1.0 && b >= 1.0);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.logicalOr = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n", "bool");
    var n3 = new Yo("return float(a >= 1.0 || b >= 1.0);", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "bool");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.select = function(t4, e3, n3) {
    var r3 = new Si(t4.rank, e3.shape, e3.rank), o3 = this.makeOutputArray(r3.outputShape, bt(e3.dtype, n3.dtype));
    return this.compileAndRun(r3, [t4, e3, n3], o3);
  }, t3.prototype.where = function(t4) {
    je("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    var e3 = t4.dataSync();
    return yo(t4.shape, e3);
  }, t3.prototype.topk = function(t4, e3, n3) {
    return go(t4.dataSync(), t4.shape, t4.dtype, e3);
  }, t3.prototype.min = function(t4, e3) {
    nn("min", e3, t4.rank);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3);
    return this.reduce(a3, "min", a3.dtype).reshape(r3);
  }, t3.prototype.minimum = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.minimum(t4, e3);
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Yo("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.mod = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Yo("if (b == 0.0) return NAN;\n  return mod(a, b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.max = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.max(t4, e3);
    nn("max", e3, t4.rank);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3);
    return this.reduce(a3, "max", a3.dtype).reshape(r3);
  }, t3.prototype.maximum = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.maximum(t4, e3);
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Yo("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.all = function(t4, e3) {
    nn("all", e3, t4.rank);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3);
    return this.reduce(a3, "all", a3.dtype).reshape(r3);
  }, t3.prototype.any = function(t4, e3) {
    nn("any", e3, t4.rank);
    var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = y(n3[1]), a3 = t4.as2D(-1, o3);
    return this.reduce(a3, "any", a3.dtype).reshape(r3);
  }, t3.prototype.squaredDifference = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("return (a - b) * (a - b);", t4.shape, e3.shape) : new Yo("return (a - b) * (a - b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.realDivide = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) {
      return this.packedBinaryOp(t4, e3, "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(b.x == 0.0) {\n    result.x = NAN;\n  } else if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(b.y == 0.0) {\n    result.y = NAN;\n  } else if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(b.z == 0.0) {\n    result.z = NAN;\n  } else if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(b.w == 0.0) {\n    result.w = NAN;\n  } else if(a.w == b.w) {\n    result.w = 1.;\n  }\n  \n  return result;\n", "float32", true);
    }
    var n3 = new Yo("\nif (b == 0.0) {\n  return NAN;\n} \nif (a == b) {\n  return 1.0;\n};\nreturn a / b;", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "float32");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.floorDiv = function(t4, e3) {
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n", "int32");
    var n3 = new Yo("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n", t4.shape, e3.shape), r3 = this.makeOutputArray(n3.outputShape, "int32");
    return this.compileAndRun(n3, [t4, e3], r3);
  }, t3.prototype.add = function(t4, e3) {
    if ("complex64" === t4.dtype && "complex64" === e3.dtype) return this.complexSeparableBinaryOp(t4, e3, jo);
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.add(t4, e3);
    var n3 = bt(t4.dtype, e3.dtype);
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, jo, n3);
    var r3 = new Yo(jo, t4.shape, e3.shape), o3 = this.makeOutputArray(r3.outputShape, n3);
    return this.compileAndRun(r3, [t4, e3], o3);
  }, t3.prototype.packedBinaryOp = function(t4, e3, n3, r3, o3) {
    void 0 === o3 && (o3 = false);
    var a3 = new Qo(n3, t4.shape, e3.shape, o3), i3 = this.makePackedTensor(a3.outputShape, r3);
    return this.compileAndRun(a3, [t4, e3], i3);
  }, t3.prototype.complexSeparableBinaryOp = function(t4, e3, n3) {
    var r3 = this, o3 = this.texData.get(t4.dataId), a3 = this.texData.get(e3.dataId), i3 = [[o3.complexTensors.real, a3.complexTensors.real], [o3.complexTensors.imag, a3.complexTensors.imag]].map(function(o4) {
      var a4 = o4[0], i4 = o4[1], s4 = r3.makeComplexComponentTensorHandle(t4, a4), u4 = r3.makeComplexComponentTensorHandle(e3, i4), l4 = new Yo(n3, t4.shape, e3.shape), c3 = r3.makeOutputArray(l4.outputShape, bt(a4.dtype, i4.dtype));
      return r3.compileAndRun(l4, [s4, u4], c3);
    }), s3 = i3[0], u3 = i3[1], l3 = this.complex(s3, u3);
    return s3.dispose(), u3.dispose(), l3;
  }, t3.prototype.makeComplexComponentTensorHandle = function(t4, e3) {
    return { dataId: e3.dataId, dtype: e3.dtype, shape: t4.shape };
  }, t3.prototype.addN = function(t4) {
    if (1 === t4.length) return t4[0];
    if (t4.length > s.get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
      var e3 = Math.floor(t4.length / 2), n3 = this.addN(t4.slice(0, e3)), r3 = this.addN(t4.slice(e3));
      return this.addN([n3, r3]);
    }
    var o3 = t4.map(function(t5) {
      return t5.dtype;
    }).reduce(function(t5, e4) {
      return bt(t5, e4);
    }), a3 = t4.map(function(t5) {
      return t5.shape;
    }), i3 = s.getBool("WEBGL_PACK"), u3 = i3 ? new bo(t4[0].shape, a3) : new xo(t4[0].shape, a3), l3 = i3 ? this.makePackedTensor(u3.outputShape, o3) : this.makeOutputArray(u3.outputShape, o3);
    return this.compileAndRun(u3, t4, l3);
  }, t3.prototype.subtract = function(t4, e3) {
    if ("complex64" === t4.dtype && "complex64" === e3.dtype) return this.complexSeparableBinaryOp(t4, e3, Ko);
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.subtract(t4, e3);
    var n3 = bt(t4.dtype, e3.dtype);
    if (s.getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, Ko, t4.dtype);
    var r3 = new Yo(Ko, t4.shape, e3.shape), o3 = this.makeOutputArray(r3.outputShape, n3);
    return this.compileAndRun(r3, [t4, e3], o3);
  }, t3.prototype.pow = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS"), r3 = n3 ? new Qo("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Yo("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", t4.shape, e3.shape), o3 = bt(t4.dtype, e3.dtype), a3 = n3 ? this.makePackedTensor(r3.outputShape, o3) : this.makeOutputArray(r3.outputShape, o3);
    return this.compileAndRun(r3, [t4, e3], a3);
  }, t3.prototype.ceil = function(t4) {
    var e3 = new Wi(t4.shape, "return ceil(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.floor = function(t4) {
    var e3 = new Wi(t4.shape, "return floor(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.sign = function(t4) {
    var e3 = new Wi(t4.shape, "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.isNaN = function(t4) {
    var e3 = new Wi(t4.shape, "return float(isnan(x));"), n3 = this.makeOutputArray(e3.outputShape, "bool");
    return this.compileAndRun(e3, [t4], n3);
  }, t3.prototype.isInf = function(t4) {
    var e3 = new Wi(t4.shape, "return float(isinf(x));"), n3 = this.makeOutputArray(e3.outputShape, "bool");
    return this.compileAndRun(e3, [t4], n3);
  }, t3.prototype.isFinite = function(t4) {
    var e3 = new Wi(t4.shape, "return float(!isnan(x) && !isinf(x));"), n3 = this.makeOutputArray(e3.outputShape, "bool");
    return this.compileAndRun(e3, [t4], n3);
  }, t3.prototype.round = function(t4) {
    var e3 = new Wi(t4.shape, "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.exp = function(t4) {
    var e3;
    return e3 = s.getBool("WEBGL_PACK") ? new Ji(t4.shape, qi) : new Wi(t4.shape, qi), this.compileAndRun(e3, [t4]);
  }, t3.prototype.expm1 = function(t4) {
    var e3 = new Wi(t4.shape, "return exp(x) - 1.0;");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.log = function(t4) {
    var e3;
    return e3 = s.getBool("WEBGL_PACK") ? new Ji(t4.shape, "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n") : new Wi(t4.shape, "if (x < 0.0) return NAN;\n  return log(x);"), this.compileAndRun(e3, [t4]);
  }, t3.prototype.log1p = function(t4) {
    var e3 = new Wi(t4.shape, "return log(1.0 + x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.sqrt = function(t4) {
    var e3 = new Wi(t4.shape, "return sqrt(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.rsqrt = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.rsqrt(t4);
    var e3 = new Wi(t4.shape, "return inversesqrt(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.square = function(t4) {
    var e3 = new Wi(t4.shape, "return x * x;");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.reciprocal = function(t4) {
    var e3 = new Wi(t4.shape, "return 1.0 / x;");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.relu = function(t4) {
    var e3;
    return e3 = s.getBool("WEBGL_PACK") ? new Ji(t4.shape, Qi) : new Wi(t4.shape, Vi), this.compileAndRun(e3, [t4]);
  }, t3.prototype.prelu = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n", t4.shape, e3.shape) : new Yo("return (a < 0.) ? b * a : a;", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.elu = function(t4) {
    var e3 = new Wi(t4.shape, "return (x >= 0.0) ? x : (exp(x) - 1.0);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.eluDer = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n", t4.shape, e3.shape) : new Yo("return (b >= 1.0) ? a : a * (b + 1.0);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.selu = function(t4) {
    var e3 = new Wi(t4.shape, Gi);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.int = function(t4) {
    var e3 = new Wi(t4.shape, "return float(int(x));"), n3 = this.makeOutputArray(e3.outputShape, "int32");
    return this.compileAndRun(e3, [t4], n3);
  }, t3.prototype.clip = function(t4, e3, n3) {
    var r3, o3 = (r3 = s.getBool("WEBGL_PACK_CLIP") ? new Zo(t4.shape) : new Jo(t4.shape)).getCustomSetupFunc(e3, n3);
    return this.compileAndRun(r3, [t4], null, o3);
  }, t3.prototype.abs = function(t4) {
    var e3 = new Wi(t4.shape, "return abs(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.complexAbs = function(t4) {
    var e3 = this.texData.get(t4.dataId), n3 = new ta(t4.shape), r3 = [this.makeComplexComponentTensorHandle(t4, e3.complexTensors.real), this.makeComplexComponentTensorHandle(t4, e3.complexTensors.imag)];
    return this.compileAndRun(n3, r3);
  }, t3.prototype.sigmoid = function(t4) {
    var e3 = new Wi(t4.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.softplus = function(t4) {
    var e3 = new Wi(t4.shape, "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.sin = function(t4) {
    var e3 = new Wi(t4.shape, Hi);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.cos = function(t4) {
    var e3 = new Wi(t4.shape, $i);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.tan = function(t4) {
    var e3 = new Wi(t4.shape, "return tan(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.asin = function(t4) {
    var e3 = new Wi(t4.shape, "return asin(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.acos = function(t4) {
    var e3 = new Wi(t4.shape, "return acos(x);");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.atan = function(t4) {
    var e3 = new Wi(t4.shape, ji);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.atan2 = function(t4, e3) {
    var n3 = s.getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Qo("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Yo("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, t3.prototype.sinh = function(t4) {
    var e3 = new Wi(t4.shape, "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.cosh = function(t4) {
    var e3 = new Wi(t4.shape, "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.tanh = function(t4) {
    var e3 = new Wi(t4.shape, "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.asinh = function(t4) {
    var e3 = new Wi(t4.shape, "return log(x + sqrt(x * x + 1.0));");
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.acosh = function(t4) {
    var e3 = new Wi(t4.shape, Ki);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.atanh = function(t4) {
    var e3 = new Wi(t4.shape, Xi);
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.erf = function(t4) {
    var e3 = new Wi(t4.shape, '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n');
    return this.compileAndRun(e3, [t4]);
  }, t3.prototype.step = function(t4, e3) {
    var n3 = new Wi(t4.shape, function(t5) {
      return void 0 === t5 && (t5 = 0), Ui + "\n    return x > 0.0 ? 1.0 : float(" + t5 + ");\n  ";
    }(e3));
    return this.compileAndRun(n3, [t4]);
  }, t3.prototype.conv2dByMatMul = function(t4, e3, n3) {
    var r3 = t4.shape, o3 = this.texData.get(t4.dataId), a3 = n3.inChannels, i3 = r3[0] * r3[1] * r3[2], u3 = n3.outChannels, l3 = (1 === i3 || 1 === u3) && a3 > 1e3, c3 = r3[2] % 2 != 0 && !!o3.isPacked;
    if (l3 || !s.getBool("WEBGL_LAZILY_UNPACK") || !s.getBool("WEBGL_PACK_BINARY_OPERATIONS") || !c3) {
      var h3 = this.reshape(t4, [1, r3[0] * r3[1] * r3[2], n3.inChannels]), p3 = this.reshape(e3, [1, n3.inChannels, n3.outChannels]);
      return this.reshape(this.batchMatMul(h3, p3, false, false), n3.outShape);
    }
    var f3 = ht.make([1, r3[0] * r3[1] * (r3[2] + 1), n3.inChannels], { dataId: t4.dataId }, t4.dtype, this), v2 = o3.shape;
    o3.shape = o3.shape.slice(), o3.shape[o3.shape.length - 2]++, d(me(o3.shape, f3.shape), function() {
      return "packed reshape " + o3.shape + " to " + f3.shape + " isn't free";
    });
    var m3 = this.reshape(e3, [1, n3.inChannels, n3.outChannels]), g2 = this.batchMatMul(f3, m3, false, false), y3 = this.texData.get(g2.dataId);
    return d(y3.isPacked, function() {
      return "batchMatMul result is expected to be packed";
    }), o3.shape = v2, y3.shape = n3.outShape, ht.make(n3.outShape, { dataId: g2.dataId }, g2.dtype, this);
  }, t3.prototype.conv2dWithIm2Row = function(t4, e3, n3) {
    var r3 = n3.filterWidth, o3 = n3.filterHeight, a3 = n3.inChannels, i3 = n3.outWidth, s3 = n3.outHeight, u3 = r3 * o3 * a3, l3 = s3 * i3, c3 = [u3, l3], h3 = t4.squeeze([0]), p3 = e3.reshape([1, u3, -1]), f3 = new ri(c3, h3.shape, n3), d3 = this.compileAndRun(f3, [h3]).reshape([1, c3[0], c3[1]]), v2 = new ui(d3.shape, [1, l3, n3.outChannels], true, false);
    return this.compileAndRun(v2, [d3, p3]).reshape([1, s3, i3, n3.outChannels]);
  }, t3.prototype.conv2d = function(t4, e3, n3) {
    if (1 === n3.filterHeight && 1 === n3.filterWidth && 1 === n3.dilationHeight && 1 === n3.dilationWidth && 1 === n3.strideHeight && 1 === n3.strideWidth && ("SAME" === n3.padInfo.type || "VALID" === n3.padInfo.type)) return this.conv2dByMatMul(t4, e3, n3);
    if (s.getBool("WEBGL_CONV_IM2COL") && 1 === t4.shape[0]) return this.conv2dWithIm2Row(t4, e3, n3);
    var r3 = new la(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.conv2dDerInput = function(t4, e3, n3) {
    var r3 = new oa(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    var r3 = new ra(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    var r3;
    return s.getBool("WEBGL_PACK_DEPTHWISECONV") && n3.strideWidth <= 2 && n3.outChannels / n3.inChannels == 1 ? (r3 = new pa(n3), this.compileAndRun(r3, [t4, e3], this.makePackedTensor(n3.outShape, t4.dtype))) : (r3 = new ha(n3), this.compileAndRun(r3, [t4, e3]));
  }, t3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    var r3 = new ua(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    var r3 = new sa(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.conv3d = function(t4, e3, n3) {
    var r3 = new ca(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.conv3dDerInput = function(t4, e3, n3) {
    var r3 = new ia(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    var r3 = new aa(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, t3.prototype.maxPool = function(t4, e3) {
    var n3 = new di(e3, "max", false), r3 = this.makeOutputArray(n3.outputShape, t4.dtype);
    return this.compileAndRun(n3, [t4], r3);
  }, t3.prototype.avgPool = function(t4, e3) {
    var n3 = new di(e3, "avg", false), r3 = this.makeOutputArray(n3.outputShape, "float32");
    return this.compileAndRun(n3, [t4], r3);
  }, t3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    var o3 = new di(r3, "max", true), a3 = this.compileAndRun(o3, [e3]), i3 = new si(r3), s3 = this.makeOutputArray(i3.outputShape, e3.dtype), u3 = this.compileAndRun(i3, [t4, a3], s3);
    return a3.dispose(), u3;
  }, t3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    var r3 = new zo(n3), o3 = this.makeOutputArray(r3.outputShape, e3.dtype);
    return this.compileAndRun(r3, [t4], o3);
  }, t3.prototype.cast = function(t4, e3) {
    return oo(t4, e3, this);
  }, t3.prototype.unstack = function(t4, e3) {
    for (var n3 = t4.shape[e3], r3 = new Array(t4.rank - 1), o3 = 0, a3 = 0; a3 < t4.rank; a3++) a3 !== e3 && (r3[o3++] = t4.shape[a3]);
    var i3 = new Array(t4.rank).fill(0), s3 = t4.shape.slice();
    s3[e3] = 1;
    var u3 = new Array(n3);
    for (a3 = 0; a3 < u3.length; a3++) i3[e3] = a3, u3[a3] = this.slice(t4, i3, s3).reshape(r3);
    return u3;
  }, t3.prototype.reshape = function(t4, e3) {
    var n3 = this.texData.get(t4.dataId);
    return !n3.isPacked || me(t4.shape, e3) || null !== n3.texture && me(n3.shape, e3) ? ao(t4, e3) : this.packedReshape(t4, e3);
  }, t3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    var o3 = s.getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new xi(t4.shape, e3, n3, r3) : new yi(t4.shape, e3, n3, r3);
    return this.compileAndRun(o3, [t4]);
  }, t3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    var r3 = new gi(t4, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    var o3 = new wi(t4.shape, e3, n3, r3);
    return this.compileAndRun(o3, [t4]);
  }, t3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    var r3 = new bi(t4, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, t3.prototype.multinomial = function(t4, e3, n3, r3) {
    var o3 = e3 ? t4 : zr(t4), a3 = o3.shape[0], i3 = o3.shape[1], s3 = new li(a3, i3, n3), u3 = this.makeOutputArray(s3.outputShape, "int32"), l3 = s3.getCustomSetupFunc(r3);
    return this.compileAndRun(s3, [o3], u3, l3);
  }, t3.prototype.oneHot = function(t4, e3, n3, r3) {
    var o3 = new ci(t4.size, e3, n3, r3);
    return this.compileAndRun(o3, [t4]);
  }, t3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o3) {
    return je("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), po(t4.dataSync(), e3.dataSync(), n3, r3, o3);
  }, t3.prototype.cropAndResize = function(t4, e3, n3, r3, o3, a3) {
    var i3 = new fa(t4.shape, e3.shape, r3, o3, a3);
    return this.compileAndRun(i3, [t4, e3, n3]);
  }, t3.prototype.depthToSpace = function(t4, e3, n3) {
    d(e3 > 1, function() {
      return "blockSize should be > 1 for depthToSpace, but was: " + e3;
    });
    var r3 = t4.shape[0], o3 = "NHWC" === n3 ? t4.shape[1] : t4.shape[2], a3 = "NHWC" === n3 ? t4.shape[2] : t4.shape[3], i3 = "NHWC" === n3 ? t4.shape[3] : t4.shape[1], s3 = o3 * e3, u3 = a3 * e3, l3 = i3 / (e3 * e3), c3 = new ya("NHWC" === n3 ? [r3, s3, u3, l3] : [r3, l3, s3, u3], e3, n3);
    return this.compileAndRun(c3, [t4]);
  }, t3.prototype.split = function(t4, e3, n3) {
    return vo(t4, e3, n3);
  }, t3.prototype.scatterND = function(t4, e3, n3) {
    var r3 = kr(0, t4, n3), o3 = r3.sliceRank, a3 = r3.numUpdates, i3 = r3.sliceSize, s3 = r3.strides, u3 = r3.outputSize, l3 = [u3 / i3, i3], c3 = t4.reshape([a3, o3]), h3 = e3.reshape([a3, i3]);
    if (0 === u3) return ao(fn([]), n3);
    var p3 = vn(0), f3 = new Ri(a3, o3, c3.rank, h3.rank, s3, l3);
    return this.compileAndRun(f3, [h3, c3, p3]).reshape(n3);
  }, t3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    var o3 = kr(0, t4, n3), a3 = o3.sliceRank, i3 = o3.numUpdates, s3 = o3.strides, u3 = o3.outputSize, l3 = new Ri(i3, a3, t4.rank, e3.rank, s3, [u3, 1], false);
    return this.compileAndRun(l3, [e3, t4, r3]).reshape(n3);
  }, t3.prototype.fft = function(t4) {
    return this.fftImpl(t4, false);
  }, t3.prototype.ifft = function(t4) {
    return this.fftImpl(t4, true);
  }, t3.prototype.fftImpl = function(t4, e3) {
    var n3 = this.texData.get(t4.dataId), r3 = new Ia(Ea, t4.shape, e3), o3 = new Ia(Ra, t4.shape, e3), a3 = [this.makeComplexComponentTensorHandle(t4, n3.complexTensors.real), this.makeComplexComponentTensorHandle(t4, n3.complexTensors.imag)], i3 = this.compileAndRun(r3, a3), s3 = this.compileAndRun(o3, a3), u3 = this.complex(i3, s3).as2D(t4.shape[0], t4.shape[1]);
    return i3.dispose(), s3.dispose(), u3;
  }, t3.prototype.gatherND = function(t4, e3) {
    var n3 = e3.shape, r3 = n3[n3.length - 1], o3 = Rr(t4, e3), a3 = o3[0], i3 = o3[1], s3 = o3[2], u3 = o3[3], l3 = e3.reshape([i3, r3]), c3 = t4.reshape([t4.size / s3, s3]), h3 = new _a(r3, u3, [i3, s3]);
    return this.compileAndRun(h3, [c3, l3]).reshape(a3);
  }, t3.prototype.fill = function(t4, e3, n3) {
    if ("string" === (n3 = n3 || U(e3))) {
      var r3 = A(n3, y(t4));
      return r3.fill(e3), ht.make(t4, { values: r3 }, n3);
    }
    var o3 = new Sa(t4, e3), a3 = o3.getCustomSetupFunc(e3), i3 = this.makeOutputArray(t4, n3);
    return this.compileAndRun(o3, [], i3, a3);
  }, t3.prototype.onesLike = function(t4) {
    if ("string" === t4.dtype) throw new Error("onesLike is not supported under string dtype");
    return this.fill(t4.shape, 1, t4.dtype);
  }, t3.prototype.zerosLike = function(t4) {
    return this.fill(t4.shape, "string" === t4.dtype ? "" : 0, t4.dtype);
  }, t3.prototype.linspace = function(t4, e3, n3) {
    return io(t4, e3, n3);
  }, t3.prototype.makeOutputArray = function(t4, e3) {
    return ht.make(t4, {}, e3, this);
  }, t3.prototype.makePackedTensor = function(t4, e3) {
    var n3 = ht.make(t4, {}, e3, this);
    return this.texData.get(n3.dataId).isPacked = true, n3;
  }, t3.prototype.unpackTensor = function(t4) {
    var e3 = new Zi(t4.shape);
    return this.compileAndRun(e3, [t4], ht.make(e3.outputShape, {}, t4.dtype, this));
  }, t3.prototype.packTensor = function(t4) {
    var e3 = new hi(t4.shape);
    return this.compileAndRun(e3, [t4], this.makePackedTensor(t4.shape, t4.dtype), null, true);
  }, t3.prototype.packedReshape = function(t4, e3) {
    var n3 = t4.reshape([he(t4.shape)].concat(pe(t4.shape))), r3 = [he(e3)].concat(pe(e3)), o3 = new mi(r3, n3.shape);
    return this.compileAndRun(o3, [n3]).reshape(e3);
  }, t3.prototype.decode = function(t4) {
    var e3, n3 = this.texData.get(t4), r3 = n3.isPacked, o3 = n3.shape, a3 = n3.dtype, i3 = fe(o3), s3 = Fa(o3), u3 = this.makeTensorHandle(o3, "float32");
    return this.texData.get(u3.dataId).isPacked = true, this.texData.get(u3.dataId).dtype = a3, this.texData.get(u3.dataId).texShape = s3.map(function(t5) {
      return 2 * t5;
    }), e3 = r3 ? new ga(i3, s3) : new ma(i3, s3), this.compileAndRun(e3, [{ shape: i3, dtype: a3, dataId: t4 }], u3, null, true), u3;
  }, t3.prototype.compileAndRun = function(t4, e3, n3, r3, o3) {
    var a3 = this;
    if (void 0 === o3 && (o3 = false), null == n3 && (n3 = t4.usesPackedTextures ? this.makePackedTensor(t4.outputShape, e3[0].dtype) : this.makeOutputArray(t4.outputShape, e3[0].dtype)), 0 === n3.size) return this.texData.get(n3.dataId).values = k(n3.dtype, 0), n3;
    var i3 = e3.map(function(e4) {
      if ("complex64" === e4.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      var n4 = a3.texData.get(e4.dataId);
      if (null == n4.texture) {
        if (!t4.usesPackedTextures && y(e4.shape) <= s.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: e4.shape, texData: null, isUniform: true, uniformValues: n4.values };
        t4.usesPackedTextures && (n4.isPacked = true, n4.shape = e4.shape);
      } else if (!!n4.isPacked != !!t4.usesPackedTextures) e4 = n4.isPacked ? a3.unpackTensor(e4) : a3.packTensor(e4), n4 = a3.texData.get(e4.dataId);
      else if (n4.isPacked && !me(n4.shape, e4.shape)) {
        var r4 = e4, o4 = e4.shape;
        e4.shape = n4.shape, e4 = a3.packedReshape(e4, o4), n4 = a3.texData.get(e4.dataId), r4.shape = o4;
      }
      return a3.uploadToGPU(e4.dataId), { shape: e4.shape, texData: n4, isUniform: false };
    });
    this.uploadToGPU(n3.dataId);
    var u3, l3 = { shape: n3.shape, texData: this.texData.get(n3.dataId), isUniform: false }, c3 = function(t5, e4, n4) {
      var r4 = "";
      e4.concat(n4).forEach(function(t6) {
        var e5 = null != t6.texData && null != t6.texData.slice && t6.texData.slice.flatOffset > 0, n5 = t6.isUniform ? "uniform" : t6.texData.texShape;
        r4 += t6.shape + "_" + n5 + "_" + e5;
      });
      var o4 = t5.userCode, a4 = t5.constructor.name;
      return a4 += "_" + r4 + "_" + o4;
    }(t4, i3, l3), h3 = this.getAndSaveBinary(c3, function() {
      return function(t5, e4, n4, r4) {
        var o4 = e4.userCode, a4 = n4.map(function(t6, n5) {
          var r5 = { logicalShape: t6.shape, texShape: t6.isUniform ? null : t6.texData.texShape, isUniform: t6.isUniform, isPacked: !t6.isUniform && t6.texData.isPacked, flatOffset: null };
          return null != t6.texData && null != t6.texData.slice && t6.texData.slice.flatOffset > 0 && (r5.flatOffset = t6.texData.slice.flatOffset), { name: e4.variableNames[n5], shapeInfo: r5 };
        }), i4 = a4.map(function(t6) {
          return t6.shapeInfo;
        }), u4 = { logicalShape: r4.shape, texShape: r4.texData.texShape, isUniform: false, isPacked: r4.texData.isPacked, flatOffset: null }, l4 = ko(a4, u4, o4, e4.usesPackedTextures), c4 = t5.createProgram(l4), h4 = null, p4 = t5.getUniformLocation(c4, "NAN", false);
        1 === s.getNumber("WEBGL_VERSION") && (h4 = t5.getUniformLocation(c4, "INFINITY", false));
        for (var f3 = {}, d3 = 0; d3 < e4.variableNames.length; d3++) {
          var v2 = e4.variableNames[d3];
          f3[v2] = t5.getUniformLocation(c4, v2, false), f3["offset" + v2] = t5.getUniformLocation(c4, "offset" + v2, false);
        }
        return { program: e4, source: l4, webGLProgram: c4, uniformLocations: f3, inShapeInfos: i4, outShapeInfo: u4, infLoc: h4, nanLoc: p4 };
      }(a3.gpgpu, t4, i3, l3);
    }), p3 = null != this.activeTimers;
    return p3 && (u3 = this.startTimer()), function(t5, e4, n4, r4, o4) {
      ni(e4.inShapeInfos, n4), ni([e4.outShapeInfo], [r4]);
      var a4 = r4.texData.texture, i4 = r4.texData.texShape;
      r4.texData.isPacked ? t5.setOutputPackedMatrixTexture(a4, i4[0], i4[1]) : t5.setOutputMatrixTexture(a4, i4[0], i4[1]), t5.setProgram(e4.webGLProgram), 1 === s.getNumber("WEBGL_VERSION") && null !== e4.infLoc && t5.gl.uniform1f(e4.infLoc, 1 / 0), null !== e4.nanLoc && t5.gl.uniform1f(e4.nanLoc, NaN), n4.forEach(function(n5, r5) {
        var o5 = e4.program.variableNames[r5], a5 = e4.uniformLocations[o5], i5 = e4.uniformLocations["offset" + o5];
        if (null != a5) if (n5.isUniform) if (y(n5.shape) < 2) t5.gl.uniform1f(a5, n5.uniformValues[0]);
        else {
          var s3 = n5.uniformValues;
          s3 instanceof Float32Array || (s3 = new Float32Array(s3)), t5.gl.uniform1fv(a5, s3);
        }
        else null != n5.texData.slice && null != i5 && t5.gl.uniform1i(i5, n5.texData.slice.flatOffset), t5.setInputMatrixTexture(n5.texData.texture, a5, r5);
      }), null != o4 && o4(t5, e4.webGLProgram), t5.executeProgram();
    }(this.gpgpu, h3, i3, l3, r3), p3 && (u3 = this.endTimer(u3), this.activeTimers.push({ name: t4.constructor.name, query: this.getQueryTime(u3) })), !s.getBool("WEBGL_LAZILY_UNPACK") && this.texData.get(n3.dataId).isPacked && false === o3 ? this.unpackTensor(n3) : n3;
  }, t3.prototype.getAndSaveBinary = function(t4, e3) {
    return t4 in this.binaryCache || (this.binaryCache[t4] = e3()), this.binaryCache[t4];
  }, t3.prototype.getTextureManager = function() {
    return this.textureManager;
  }, t3.prototype.dispose = function() {
    this.disposed || (this.textureManager.dispose(), null != this.canvas && null != this.canvas.remove ? this.canvas.remove() : this.canvas = null, null != this.fromPixels2DContext && null != this.fromPixels2DContext.canvas.remove && this.fromPixels2DContext.canvas.remove(), this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }, t3.prototype.floatPrecision = function() {
    var t4 = this;
    return null == this.floatPrecisionValue && (this.floatPrecisionValue = Fe(function() {
      var e3 = s.getBool("DEBUG");
      s.set("DEBUG", false);
      var n3 = t4.abs(vn(1e-8)).dataSync()[0];
      return s.set("DEBUG", e3), n3 > 0 ? 32 : 16;
    })), this.floatPrecisionValue;
  }, t3.prototype.epsilon = function() {
    return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
  }, t3.prototype.uploadToGPU = function(t4) {
    var e3, n3 = this.texData.get(t4), r3 = n3.shape, o3 = n3.dtype, a3 = n3.values, i3 = n3.texture, s3 = n3.usage, u3 = n3.isPacked;
    if (null == i3) {
      var l3, c3 = null != this.activeTimers;
      c3 && (l3 = performance.now());
      var h3 = n3.texShape;
      if (null == h3 && (h3 = de(r3, u3), n3.texShape = h3), null != a3) {
        var p3 = fe(r3), f3 = void 0, d3 = h3[1], v2 = h3[0], m3 = a3 instanceof Uint8Array;
        u3 ? (d3 = (e3 = Ma(h3[0], h3[1]))[0], v2 = e3[1], f3 = new Ca(p3, [v2, d3], m3)) : f3 = new wa(p3, [v2, d3], m3);
        var g2 = this.makeTensorHandle([v2, d3], o3);
        this.texData.get(g2.dataId).usage = m3 ? Ta.PIXELS : Ta.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g2.dataId), d3, v2, a3);
        var x3 = this.makeTensorHandle(f3.outputShape, g2.dtype);
        x3.size = y(f3.outputShape), this.texData.get(x3.dataId).isPacked = u3, this.compileAndRun(f3, [g2], x3);
        var b3 = this.texData.get(x3.dataId);
        n3.texture = b3.texture, n3.texShape = b3.texShape, n3.isPacked = b3.isPacked, n3.usage = b3.usage, this.disposeData(g2.dataId), this.texData.delete(x3.dataId), n3.values = null, c3 && (this.uploadWaitMs += performance.now() - l3);
      } else {
        var w3 = this.acquireTexture(h3, s3, o3, u3);
        n3.texture = w3;
      }
    }
  }, t3.prototype.convertAndCacheOnCPU = function(t4, e3) {
    var n3 = this.texData.get(t4), r3 = n3.dtype;
    return this.releaseGPUData(t4), null != e3 && (n3.values = function(t5, e4) {
      if ("float32" === e4 || "complex64" === e4) return t5;
      if ("int32" === e4 || "bool" === e4) {
        for (var n4 = "int32" === e4 ? new Int32Array(t5.length) : new Uint8Array(t5.length), r4 = 0; r4 < n4.length; ++r4) n4[r4] = Math.round(t5[r4]);
        return n4;
      }
      throw new Error("Unknown dtype " + e4);
    }(e3, r3)), n3.values;
  }, t3.prototype.acquireTexture = function(t4, e3, n3, r3) {
    if (this.numBytesInGPU += this.computeBytes(t4, n3), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {
      var o3 = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn("High memory usage in GPU: " + o3 + " MB, most likely due to a memory leak");
    }
    return this.textureManager.acquireTexture(t4, e3, r3);
  }, t3.prototype.computeBytes = function(t4, e3) {
    return t4[0] * t4[1] * M(e3);
  }, t3;
}();
Tt() && At.registerBackend("webgl", function() {
  return new ns();
}, 2);
var rs = ln({ abs_: function(t3) {
  var e3 = Ye(t3, "x", "abs");
  return "complex64" === e3.dtype ? At.runKernel(function(t4) {
    return t4.complexAbs(e3);
  }, { $x: e3 }) : At.runKernel(function(t4, n3) {
    var r3 = t4.abs(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.toFloat().step(-1));
    } };
  });
} });
var os = ln({ acos_: function(t3) {
  var e3 = Ye(t3, "x", "acos");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.acos(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(vn(1).sub(n3.toFloat().square()).sqrt()).neg();
    } };
  });
} });
var as = ln({ acosh_: function(t3) {
  var e3 = Ye(t3, "x", "acosh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.acosh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(n3.toFloat().square().sub(1).sqrt());
    } };
  });
} });
var is = ln({ asin_: function(t3) {
  var e3 = Ye(t3, "x", "asin");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.asin(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(vn(1).sub(n3.toFloat().square()).sqrt());
    } };
  });
} });
var ss = ln({ asinh_: function(t3) {
  var e3 = Ye(t3, "x", "asinh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.asinh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(vn(1).add(n3.toFloat().square()).sqrt());
    } };
  });
} });
var us = ln({ atan_: function(t3) {
  var e3 = Ye(t3, "x", "atan");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.atan(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.toFloat().square().add(1));
    } };
  });
} });
var ls = ln({ atanh_: function(t3) {
  var e3 = Ye(t3, "x", "atanh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.atanh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(vn(1).sub(n3.toFloat().square()));
    } };
  });
} });
var cs = ln({ ceil_: function(t3) {
  var e3 = Ye(t3, "x", "ceil");
  return At.runKernel(function(t4) {
    return t4.ceil(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var hs = ln({ clipByValue_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "clipByValue");
  return d(e3 <= n3, function() {
    return "Error in clip: min (" + e3 + ") must be less than or equal to max (" + n3 + ").";
  }), At.runKernel(function(t4, o3) {
    var a3 = t4.clip(r3, e3, n3);
    return o3([r3]), a3;
  }, { $x: r3 }, function(t4, r4) {
    var o3 = r4[0];
    return { $x: function() {
      return t4.where(o3.greaterEqual(e3).logicalAnd(o3.lessEqual(n3)), kn(t4));
    } };
  });
} });
var ps = ln({ cos_: function(t3) {
  var e3 = Ye(t3, "x", "cos");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.cos(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().sin().neg().mul(t4);
    } };
  });
} });
var fs = ln({ cosh_: function(t3) {
  var e3 = Ye(t3, "x", "cosh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.cosh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().sinh().mulStrict(t4);
    } };
  });
} });
var ds = ln({ erf_: function(t3) {
  var e3 = Ye(t3, "x", "erf");
  return d("int32" === e3.dtype || "float32" === e3.dtype, function() {
    return "Input dtype must be `int32` or `float32`.";
  }), "int32" === e3.dtype && (e3 = e3.toFloat()), At.runKernel(function(t4, n3) {
    var r3 = t4.erf(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
    } };
  });
} });
var vs = ln({ exp_: function(t3) {
  var e3 = Ye(t3, "x", "exp");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.exp(e3);
    return n3([r3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    return { $x: function() {
      return t4.mulStrict(e4[0]);
    } };
  });
} });
var ms = ln({ expm1_: function(t3) {
  var e3 = Ye(t3, "x", "expm1");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.expm1(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.exp());
    } };
  });
} });
var gs = ln({ floor_: function(t3) {
  var e3 = Ye(t3, "x", "floor");
  return At.runKernel(function(t4) {
    return t4.floor(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var ys = ln({ log_: function(t3) {
  var e3 = Ye(t3, "x", "log");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.log(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.toFloat());
    } };
  });
} });
var xs = ln({ log1p_: function(t3) {
  var e3 = Ye(t3, "x", "log1p");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.log1p(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.add(1));
    } };
  });
} });
var bs = ln({ logSigmoid_: function(t3) {
  var e3 = Ye(t3, "x", "logSigmoid");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.softplus(e3.neg()).neg();
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.neg().sigmoid());
    } };
  });
} });
var ws = ln({ neg_: function(t3) {
  var e3 = Ye(t3, "x", "neg");
  return At.runKernel(function(t4) {
    return t4.neg(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return t4.neg();
    } };
  });
} });
var Cs = ln({ reciprocal_: function(t3) {
  var e3 = Ye(t3, "x", "reciprocal");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.reciprocal(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.square().neg());
    } };
  });
} });
var Es = ln({ round_: function(t3) {
  var e3 = Ye(t3, "x", "round");
  return At.runKernel(function(t4) {
    return t4.round(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var Rs = ln({ rsqrt_: function(t3) {
  var e3 = Ye(t3, "x", "rsqrt");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.rsqrt(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.pow(1.5).mul(2)).neg();
    } };
  });
} });
var Is = ln({ sigmoid_: function(t3) {
  var e3 = Ye(t3, "x", "sigmoid");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.sigmoid(e3);
    return n3([r3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.mul(vn(1).sub(n3)));
    } };
  });
} });
var Ss = ln({ sign_: function(t3) {
  var e3 = Ye(t3, "x", "sign");
  return At.runKernel(function(t4) {
    return t4.sign(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var Ns = ln({ isNaN_: function(t3) {
  var e3 = Ye(t3, "x", "isNaN");
  return At.runKernel(function(t4) {
    return t4.isNaN(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var ks = ln({ isInf_: function(t3) {
  var e3 = Ye(t3, "x", "isInf");
  return At.runKernel(function(t4) {
    return t4.isInf(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var As = ln({ isFinite_: function(t3) {
  var e3 = Ye(t3, "x", "isFinite");
  return At.runKernel(function(t4) {
    return t4.isFinite(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var Ts = ln({ sin_: function(t3) {
  var e3 = Ye(t3, "x", "sin");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.sin(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().cos().mul(t4);
    } };
  });
} });
var Ds = ln({ sinh_: function(t3) {
  var e3 = Ye(t3, "x", "sinh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.sinh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().cosh().mulStrict(t4);
    } };
  });
} });
var _s = ln({ softplus_: function(t3) {
  var e3 = Ye(t3, "x", "softplus");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.softplus(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.sigmoid());
    } };
  });
} });
var Os = ln({ sqrt_: function(t3) {
  var e3 = Ye(t3, "x", "sqrt");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.sqrt(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.toFloat().sqrt().mul(2));
    } };
  });
} });
var Fs = ln({ square_: function(t3) {
  var e3 = Ye(t3, "x", "square");
  return At.runKernel(function(t4, n3) {
    return n3([e3]), t4.square(e3);
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.toFloat().mul(2));
    } };
  });
} });
var Ms = ln({ step_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = Ye(t3, "x", "step");
  return At.runKernel(function(t4) {
    return t4.step(n3, e3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return kn(t4);
    } };
  });
} });
var Bs = ln({ tan_: function(t3) {
  var e3 = Ye(t3, "x", "tan");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.tan(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.cos().square());
    } };
  });
} });
var Ps = ln({ tanh_: function(t3) {
  var e3 = Ye(t3, "x", "tanh");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.tanh(e3);
    return n3([r3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return vn(1).sub(n3.square()).mulStrict(t4);
    } };
  });
} });
function Ls(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = Ye(t3, "x", "batchNorm"), l3 = Ye(e3, "mean", "batchNorm"), c3 = Ye(n3, "variance", "batchNorm");
  return null != o3 && (i3 = Ye(o3, "scale", "batchNorm")), null != r3 && (s3 = Ye(r3, "offset", "batchNorm")), d(2 === u3.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + u3.rank + ".";
  }), d(2 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + l3.rank + ".";
  }), d(2 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + c3.rank + ".";
  }), null != i3 && d(2 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && d(2 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s3.rank + ".";
  }), zs(u3, l3, c3, s3, i3, a3);
}
function Ws(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = Ye(t3, "x", "batchNorm"), l3 = Ye(e3, "mean", "batchNorm"), c3 = Ye(n3, "variance", "batchNorm");
  return null != o3 && (i3 = Ye(o3, "scale", "batchNorm")), null != r3 && (s3 = Ye(r3, "offset", "batchNorm")), d(3 === u3.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + u3.rank + ".";
  }), d(3 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + l3.rank + ".";
  }), d(3 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + c3.rank + ".";
  }), null != i3 && d(3 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && d(3 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s3.rank + ".";
  }), zs(u3, l3, c3, s3, i3, a3);
}
function Us(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = Ye(t3, "x", "batchNorm"), l3 = Ye(e3, "mean", "batchNorm"), c3 = Ye(n3, "variance", "batchNorm");
  return null != o3 && (i3 = Ye(o3, "scale", "batchNorm")), null != r3 && (s3 = Ye(r3, "offset", "batchNorm")), d(4 === u3.rank, function() {
    return "Error in batchNorm4D: x must be rank 4 but got rank " + u3.rank + ".";
  }), d(4 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + l3.rank + ".";
  }), d(4 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + c3.rank + ".";
  }), null != i3 && d(4 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && d(4 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s3.rank + ".";
  }), zs(u3, l3, c3, s3, i3, a3);
}
function zs(t3, e3, n3, r3, o3, a3) {
  null == a3 && (a3 = 1e-3);
  var i3, s3, u3, l3 = Ye(t3, "x", "batchNorm"), c3 = Ye(e3, "mean", "batchNorm"), h3 = Ye(n3, "variance", "batchNorm");
  null != o3 && (i3 = Ye(o3, "scale", "batchNorm")), null != r3 && (s3 = Ye(r3, "offset", "batchNorm")), d(c3.rank === h3.rank, function() {
    return "Batch normalization gradient requires mean and variance to have equal ranks.";
  }), d(null == s3 || c3.rank === s3.rank, function() {
    return "Batch normalization gradient requires mean and offset to have equal ranks.";
  }), d(null == i3 || c3.rank === i3.rank, function() {
    return "Batch normalization gradient requires mean and scale to have equal ranks.";
  }), u3 = 0 === l3.rank || 1 === l3.rank ? l3.as4D(1, 1, 1, l3.size) : 2 === l3.rank ? l3.as4D(1, 1, l3.shape[0], l3.shape[1]) : 3 === l3.rank ? l3.as4D(1, l3.shape[0], l3.shape[1], l3.shape[2]) : l3;
  return At.runKernel(function(t4, e4) {
    var n4 = t4.batchNormalization(u3, Vs(c3), Vs(h3), a3, Vs(i3), Vs(s3));
    return e4([l3, c3, h3, i3]), n4;
  }, { $x: l3, $mean: c3, $variance: h3, $scale: i3, $offset: s3 }, function(t4, e4) {
    var n4 = e4, r4 = n4[0], o4 = n4[1], i4 = n4[2], s4 = n4[3], l4 = null == s4 ? vn(1) : s4, c4 = $r(o4.shape, u3.shape), h4 = [];
    if (1 === o4.rank) {
      for (var p3 = 0; p3 < u3.shape.length - 1; ++p3) h4.push(u3.shape[p3]);
      h4.push(1);
    }
    var f3 = r4.sub(o4), d3 = t4.mul(l4), v2 = Rs(i4.add(vn(a3))), m3 = v2.mul(v2).mul(v2).mul(vn(-0.5));
    return { $x: function() {
      return 1 === o4.rank ? t4.mul(vr(v2.as4D(1, 1, 1, o4.shape[0]), h4)).mul(l4).reshape(r4.shape) : t4.mul(v2).mul(l4).reshape(r4.shape);
    }, $mean: function() {
      var t5 = v2.mul(vn(-1)).mul(d3);
      return 1 === o4.rank && (t5 = t5.sum(c4)), t5.reshape(o4.shape);
    }, $variance: function() {
      var t5 = m3.mul(f3).mul(d3);
      return 1 === o4.rank && (t5 = t5.sum(c4)), t5.reshape(o4.shape);
    }, $scale: function() {
      var e5 = f3.mul(v2), n5 = t4.mul(e5);
      return 1 === o4.rank && (n5 = n5.sum(c4)), n5.reshape(o4.shape);
    }, $offset: function() {
      var e5 = t4;
      return 1 === o4.rank && (e5 = e5.sum(c4)), e5.reshape(o4.shape);
    } };
  }).reshape(l3.shape);
}
function Vs(t3) {
  return null == t3 ? null : 0 === t3.rank ? t3.as1D() : 1 === t3.rank ? t3 : 2 === t3.rank ? t3.as4D(1, 1, t3.shape[0], t3.shape[1]) : 3 === t3.rank ? t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]) : t3;
}
function Gs() {
  Te("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
}
var qs = ln({ batchNormalization2d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Gs(), Ls(t3, e3, n3, a3, o3, r3);
} });
var Hs = ln({ batchNormalization3d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Gs(), Ws(t3, e3, n3, a3, o3, r3);
} });
var $s = ln({ batchNormalization4d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Gs(), Us(t3, e3, n3, a3, o3, r3);
} });
var js = ln({ batchNormalization_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Gs(), zs(t3, e3, n3, a3, o3, r3);
} });
var Ks = ln({ batchNorm_: zs });
var Xs = ln({ batchNorm2d_: Ls });
var Ys = ln({ batchNorm3d_: Ws });
var Qs = ln({ batchNorm4d_: Us });
function Js(t3, e3, n3, r3, o3, a3) {
  d(t3.length === e3.rank, function() {
    return "Length of inShape (" + t3.length + ") and rank of dy (" + e3.rank + ") must match";
  });
  var i3 = t3, s3 = e3, u3 = false;
  3 === e3.rank && (u3 = true, s3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2]), i3 = [1, t3[0], t3[1], t3[2]]);
  var l3 = i3[3], c3 = s3.shape[3];
  d(4 === i3.length, function() {
    return "Error in conv2dDerInput: inShape must be length 4, but got length " + i3.length + ".";
  }), d(4 === s3.rank, function() {
    return "Error in conv2dDerInput: dy must be rank 4, but got rank " + s3.rank;
  }), d(4 === n3.rank, function() {
    return "Error in conv2dDerInput: filter must be rank 4, but got rank " + n3.rank;
  }), d(l3 === n3.shape[2], function() {
    return "Error in conv2dDerInput: depth of input (" + l3 + ") must match input depth for filter " + n3.shape[2] + ".";
  }), d(c3 === n3.shape[3], function() {
    return "Error in conv2dDerInput: depth of output (" + c3 + ") must match output depth for filter " + n3.shape[3] + ".";
  }), null != a3 && d(b(o3), function() {
    return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var h3 = Xr(i3, n3.shape, r3, 1, o3, a3), p3 = At.runKernel(function(t4, e4) {
    var r4 = t4.conv2dDerInput(s3, n3, h3);
    return e4([n3, s3]), r4;
  }, { dy4D: s3, filter: n3 }, function(t4, e4) {
    var n4 = e4[0], i4 = e4[1];
    return { dy4D: function() {
      return nu(t4, n4, r3, o3, "NHWC", 1, a3);
    }, filter: function() {
      return ou(t4, i4, n4.shape, r3, o3, a3);
    } };
  });
  return u3 ? p3.as3D(p3.shape[1], p3.shape[2], p3.shape[3]) : p3;
}
function Zs(t3, e3, n3, r3, o3, a3) {
  var i3 = t3;
  3 === t3.rank && (i3 = t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]));
  var s3 = e3;
  3 === s3.rank && (s3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2])), d(4 === i3.rank, function() {
    return "Error in conv2dDerFilter: input must be rank 4, but got shape " + i3.shape + ".";
  }), d(4 === s3.rank, function() {
    return "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s3.shape + ".";
  }), d(4 === n3.length, function() {
    return "Error in conv2dDerFilter: filterShape must be length 4, but got " + n3 + ".";
  }), d(i3.shape[3] === n3[2], function() {
    return "Error in conv2dDerFilter: depth of input " + i3.shape[3] + ") must match input depth in filter (" + n3[2] + ".";
  }), d(s3.shape[3] === n3[3], function() {
    return "Error in conv2dDerFilter: depth of dy (" + s3.shape[3] + ") must match output depth for filter (" + n3[3] + ").";
  }), null != a3 && d(b(o3), function() {
    return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var u3 = Xr(i3.shape, n3, r3, 1, o3, a3);
  return At.runKernel(function(t4) {
    return t4.conv2dDerFilter(i3, s3, u3);
  }, { x4D: i3, dy4D: s3 });
}
function tu(t3) {
  var e3 = function(t4) {
    return "number" == typeof t4 ? [t4, t4, t4] : 2 === t4.length ? [t4[0], t4[1], 1] : t4;
  }(t3), n3 = e3[0], r3 = e3[1], o3 = e3[2];
  return 1 === n3 && 1 === r3 && 1 === o3;
}
var eu = ln({ conv1d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NWC"), void 0 === a3 && (a3 = 1);
  var s3 = Ye(t3, "x", "conv1d"), u3 = Ye(e3, "filter", "conv1d"), l3 = s3, c3 = false;
  2 === s3.rank && (c3 = true, l3 = s3.as3D(1, s3.shape[0], s3.shape[1])), d(3 === l3.rank, function() {
    return "Error in conv1d: input must be rank 3, but got rank " + l3.rank + ".";
  }), d(3 === u3.rank, function() {
    return "Error in conv1d: filter must be rank 3, but got rank " + u3.rank + ".";
  }), null != i3 && d(b(r3), function() {
    return "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  }), d(l3.shape[2] === u3.shape[1], function() {
    return "Error in conv1d: depth of input (" + l3.shape[2] + ") must match input depth for filter " + u3.shape[1] + ".";
  }), d(ro(n3, a3), function() {
    return "Error in conv1D: Either stride or dilation must be 1. Got stride " + n3 + " and dilation '" + a3 + "'";
  }), d("NWC" === o3, function() {
    return "Error in conv1d: got dataFormat of " + o3 + " but only NWC is currently supported.";
  });
  var h3 = u3.as4D(1, u3.shape[0], u3.shape[1], u3.shape[2]), p3 = l3.as4D(l3.shape[0], 1, l3.shape[1], l3.shape[2]), f3 = nu(p3, h3, [1, n3], r3, "NHWC", [1, a3], i3);
  return c3 ? f3.as2D(f3.shape[2], f3.shape[3]) : f3.as3D(f3.shape[0], f3.shape[2], f3.shape[3]);
} });
var nu = ln({ conv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NHWC"), void 0 === a3 && (a3 = [1, 1]);
  var s3 = Ye(t3, "x", "conv2d"), u3 = Ye(e3, "filter", "conv2d"), l3 = s3, c3 = false;
  3 === s3.rank && (c3 = true, l3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), d(4 === l3.rank, function() {
    return "Error in conv2d: input must be rank 4, but got rank " + l3.rank + ".";
  }), d(4 === u3.rank, function() {
    return "Error in conv2d: filter must be rank 4, but got rank " + u3.rank + ".";
  }), null != i3 && d(b(r3), function() {
    return "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  }), d(l3.shape[3] === u3.shape[2], function() {
    return "Error in conv2d: depth of input (" + l3.shape[3] + ") must match input depth for filter " + u3.shape[2] + ".";
  }), d(ro(n3, a3), function() {
    return "Error in conv2D: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  }), d("NHWC" === o3, function() {
    return "Error in conv2d: got dataFormat of " + o3 + " but only NHWC is currently supported.";
  });
  var h3 = Xr(l3.shape, u3.shape, n3, a3, r3, i3), p3 = At.runKernel(function(t4, e4) {
    var n4 = t4.conv2d(l3, u3, h3);
    return e4([u3, l3]), n4;
  }, { x: l3, $filter: u3 }, function(t4, e4) {
    var o4 = e4, i4 = o4[0], s4 = o4[1];
    return d(no(a3), function() {
      return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a3 + "'";
    }), { x: function() {
      return Js(s4.shape, t4, i4, n3, r3);
    }, $filter: function() {
      return Zs(s4, t4, i4.shape, n3, r3);
    } };
  });
  return c3 ? p3.as3D(p3.shape[1], p3.shape[2], p3.shape[3]) : p3;
} });
var ru = ln({ conv3d_: function(t3, e3, n3, r3, o3, a3) {
  void 0 === o3 && (o3 = "NDHWC"), void 0 === a3 && (a3 = [1, 1, 1]);
  var i3 = Ye(t3, "x", "conv3d"), s3 = Ye(e3, "filter", "conv3d"), u3 = i3, l3 = false;
  4 === i3.rank && (l3 = true, u3 = i3.as5D(1, i3.shape[0], i3.shape[1], i3.shape[2], i3.shape[3])), d(5 === u3.rank, function() {
    return "Error in conv3d: input must be rank 5, but got rank " + u3.rank + ".";
  }), d(5 === s3.rank, function() {
    return "Error in conv3d: filter must be rank 5, but got rank " + s3.rank + ".";
  }), d(u3.shape[4] === s3.shape[3], function() {
    return "Error in conv3d: depth of input (" + u3.shape[4] + ") must match input depth for filter " + s3.shape[3] + ".";
  }), d(function(t4, e4) {
    return tu(t4) || tu(e4);
  }(n3, a3), function() {
    return "Error in conv3D: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  }), d("NDHWC" === o3, function() {
    return "Error in conv3d: got dataFormat of " + o3 + " but only NDHWC is currently supported.";
  });
  var c3 = Yr(u3.shape, s3.shape, n3, a3, r3), h3 = At.runKernel(function(t4, e4) {
    var n4 = t4.conv3d(u3, s3, c3);
    return e4([u3, s3]), n4;
  }, { x: u3, $filter: s3 }, function(t4, e4) {
    d(tu(a3), function() {
      return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a3 + "'";
    });
    var o4 = e4[0], i4 = e4[1];
    return { x: function() {
      return function(t5, e5, n4, r4, o5) {
        d(t5.length === e5.rank, function() {
          return "Length of inShape (" + t5.length + ") and rank of dy (" + e5.rank + ") must match";
        });
        var a4 = t5, i5 = e5, s4 = false;
        4 === e5.rank && (s4 = true, i5 = e5.as5D(1, e5.shape[0], e5.shape[1], e5.shape[2], e5.shape[3]), a4 = [1, t5[0], t5[1], t5[2], t5[3]]);
        var u4 = a4[4], l4 = i5.shape[4];
        d(5 === a4.length, function() {
          return "Error in conv3dDerInput: inShape must be length 5, but got length " + a4.length + ".";
        }), d(5 === i5.rank, function() {
          return "Error in conv3dDerInput: dy must be rank 5, but got rank " + i5.rank;
        }), d(5 === n4.rank, function() {
          return "Error in conv3dDerInput: filter must be rank 5, but got rank " + n4.rank;
        }), d(u4 === n4.shape[3], function() {
          return "Error in conv3dDerInput: depth of input (" + u4 + ") must match input depth for filter " + n4.shape[3] + ".";
        }), d(l4 === n4.shape[4], function() {
          return "Error in conv3dDerInput: depth of output (" + l4 + ") must match output depth for filter " + n4.shape[4] + ".";
        });
        var c4 = Yr(a4, n4.shape, r4, 1, o5), h4 = At.runKernel(function(t6) {
          return t6.conv3dDerInput(i5, n4, c4);
        }, { dy5D: i5 });
        return s4 ? h4.as4D(h4.shape[1], h4.shape[2], h4.shape[3], h4.shape[4]) : h4;
      }(o4.shape, t4, i4, n3, r3);
    }, $filter: function() {
      return function(t5, e5, n4, r4, o5) {
        var a4 = t5;
        4 === t5.rank && (a4 = t5.as5D(1, t5.shape[0], t5.shape[1], t5.shape[2], t5.shape[3]));
        var i5 = e5;
        4 === i5.rank && (i5 = e5.as5D(1, e5.shape[0], e5.shape[1], e5.shape[2], e5.shape[3])), d(5 === a4.rank, function() {
          return "Error in conv3dDerFilter: input must be rank 5, but got shape " + a4.shape + ".";
        }), d(5 === i5.rank, function() {
          return "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i5.shape + ".";
        }), d(5 === n4.length, function() {
          return "Error in conv3dDerFilter: filterShape must be length 5, but got " + n4 + ".";
        }), d(a4.shape[4] === n4[3], function() {
          return "Error in conv3dDerFilter: depth of input " + a4.shape[4] + ") must match input depth in filter (" + n4[3] + ".";
        }), d(i5.shape[4] === n4[4], function() {
          return "Error in conv3dDerFilter: depth of dy (" + i5.shape[4] + ") must match output depth for filter (" + n4[4] + ").";
        });
        var s4 = Yr(a4.shape, n4, r4, 1, o5);
        return At.runKernel(function(t6) {
          return t6.conv3dDerFilter(a4, i5, s4);
        }, { x5D: a4, dy5D: i5 });
      }(o4, t4, i4.shape, n3, r3);
    } };
  });
  return l3 ? h3.as4D(h3.shape[1], h3.shape[2], h3.shape[3], h3.shape[4]) : h3;
} });
var ou = ln({ conv2dDerFilter_: Zs });
var au = ln({ depthwiseConv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NHWC"), void 0 === a3 && (a3 = [1, 1]);
  var s3 = Ye(t3, "x", "depthwiseConv2d"), u3 = Ye(e3, "filter", "depthwiseConv2d"), l3 = s3, c3 = false;
  3 === s3.rank && (c3 = true, l3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), d(4 === l3.rank, function() {
    return "Error in depthwiseConv2d: input must be rank 4, but got rank " + l3.rank + ".";
  }), d(4 === u3.rank, function() {
    return "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u3.rank + ".";
  }), d(l3.shape[3] === u3.shape[2], function() {
    return "Error in depthwiseConv2d: number of input channels (" + l3.shape[3] + ") must match the inChannels dimension in filter " + u3.shape[2] + ".";
  }), null == a3 && (a3 = [1, 1]), d(ro(n3, a3), function() {
    return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  }), null != i3 && d(b(r3), function() {
    return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  });
  var h3 = Xr(l3.shape, u3.shape, n3, a3, r3, i3, true), p3 = At.runKernel(function(t4, e4) {
    var n4 = t4.depthwiseConv2D(l3, u3, h3);
    return e4([l3, u3]), n4;
  }, { x: l3, $filter: u3 }, function(t4, e4) {
    d(no(a3), function() {
      return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a3 + "'";
    });
    var n4 = e4[0], r4 = e4[1];
    return { x: function() {
      return function(t5, e5, n5, r5) {
        var o4 = e5, a4 = false;
        3 === e5.rank && (a4 = true, o4 = e5.as4D(1, e5.shape[0], e5.shape[1], e5.shape[2]));
        var i4 = At.runKernel(function(t6) {
          return t6.depthwiseConv2DDerInput(o4, n5, r5);
        }, { dy4D: o4 });
        return a4 ? i4.as3D(i4.shape[1], i4.shape[2], i4.shape[3]) : i4;
      }(n4.shape, t4, r4, h3);
    }, $filter: function() {
      return function(t5, e5, n5, r5) {
        var o4 = t5;
        3 === t5.rank && (o4 = t5.as4D(1, t5.shape[0], t5.shape[1], t5.shape[2]));
        var a4 = e5;
        return 3 === a4.rank && (a4 = e5.as4D(1, e5.shape[0], e5.shape[1], e5.shape[2])), At.runKernel(function(t6) {
          return t6.depthwiseConv2DDerFilter(o4, a4, r5);
        }, { x4D: o4, dy4D: a4 });
      }(n4, t4, r4.shape, h3);
    } };
  });
  return c3 ? p3.as3D(p3.shape[1], p3.shape[2], p3.shape[3]) : p3;
} });
var iu = ln({ separableConv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = [1, 1]), void 0 === i3 && (i3 = "NHWC");
  var s3 = Ye(t3, "x", "separableConv2d"), u3 = Ye(e3, "depthwiseFilter", "separableConv2d"), l3 = Ye(n3, "pointwiseFilter", "separableConv2d"), c3 = s3, h3 = false;
  if (3 === s3.rank && (h3 = true, c3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), "NCHW" === i3) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  d(4 === c3.rank, function() {
    return "Error in separableConv2d: input must be rank 4, but got rank " + c3.rank + ".";
  }), d(4 === u3.rank, function() {
    return "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u3.rank + ".";
  }), d(4 === l3.rank, function() {
    return "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u3.rank + ".";
  }), d(1 === l3.shape[0], function() {
    return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + l3.shape[0] + ".";
  }), d(1 === l3.shape[1], function() {
    return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " + l3.shape[1] + ".";
  });
  var p3 = u3.shape[2], f3 = u3.shape[3];
  d(l3.shape[2] === p3 * f3, function() {
    return "Error in separableConv2d: the third dimension of pointwise filter must be " + p3 * f3 + ", but got " + l3.shape[2] + ".";
  });
  var v2 = au(c3, u3, r3, o3, i3, a3), m3 = nu(v2, l3, 1, "valid", i3);
  return h3 ? m3.as3D(m3.shape[1], m3.shape[2], m3.shape[3]) : m3;
} });
var su = ln({ conv2dTranspose_: function(t3, e3, n3, r3, o3, a3) {
  return Js(n3, Ye(t3, "x", "conv2dTranspose"), Ye(e3, "filter", "conv2dTranspose"), r3, o3, a3);
} });
var uu = ln({ matMul_: function(t3, e3, n3, r3) {
  var o3;
  void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false);
  var a3 = Ye(t3, "a", "matMul"), i3 = Ye(e3, "b", "matMul");
  o3 = Ct(a3, i3), a3 = o3[0], i3 = o3[1];
  var s3 = n3 ? a3.shape[a3.rank - 2] : a3.shape[a3.rank - 1], u3 = r3 ? i3.shape[i3.rank - 1] : i3.shape[i3.rank - 2], l3 = n3 ? a3.shape[a3.rank - 1] : a3.shape[a3.rank - 2], c3 = r3 ? i3.shape[i3.rank - 2] : i3.shape[i3.rank - 1], h3 = a3.shape.slice(0, -2), p3 = i3.shape.slice(0, -2), f3 = y(h3), v2 = y(p3);
  d(a3.rank >= 2 && i3.rank >= 2 && a3.rank === i3.rank, function() {
    return "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a3.rank + " and " + i3.rank + ".";
  }), d(x(h3, p3), function() {
    return "Error in matMul: outer dimensions (" + h3 + ") and (" + p3 + ") of Tensors with shapes " + a3.shape + " and " + i3.shape + " must match.";
  }), d(s3 === u3, function() {
    return "Error in matMul: inner shapes (" + s3 + ") and (" + u3 + ") of Tensors with shapes " + a3.shape + " and " + i3.shape + " and transposeA=" + n3 + " and transposeB=" + r3 + " must match.";
  });
  var m3 = a3.shape.slice(0, -2).concat([l3, c3]), g2 = n3 ? a3.as3D(f3, s3, l3) : a3.as3D(f3, l3, s3), b3 = r3 ? i3.as3D(v2, c3, u3) : i3.as3D(v2, u3, c3);
  return At.runKernel(function(t4, e4) {
    var o4 = t4.batchMatMul(g2, b3, n3, r3);
    return e4([g2, b3]), o4;
  }, { $a: g2, $b: b3 }, function(t4, e4) {
    var o4 = e4, a4 = o4[0], i4 = o4[1];
    return n3 || r3 ? !n3 && r3 ? { $a: function() {
      return t4.matMul(i4, false, false);
    }, $b: function() {
      return t4.matMul(a4, true, false);
    } } : n3 && !r3 ? { $a: function() {
      return i4.matMul(t4, false, true);
    }, $b: function() {
      return a4.matMul(t4, false, false);
    } } : { $a: function() {
      return i4.matMul(t4, true, true);
    }, $b: function() {
      return t4.matMul(a4, true, true);
    } } : { $a: function() {
      return t4.matMul(i4, false, true);
    }, $b: function() {
      return a4.matMul(t4, true, false);
    } };
  }).reshape(m3);
} });
var lu = ln({ dot_: function(t3, e3) {
  var n3 = Ye(t3, "t1", "dot"), r3 = Ye(e3, "t2", "dot");
  d(!(1 !== n3.rank && 2 !== n3.rank || 1 !== r3.rank && 2 !== r3.rank), function() {
    return "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n3.rank + " and " + r3.rank + ".";
  });
  var o3 = 1 === n3.rank ? n3.size : n3.shape[1], a3 = 1 === r3.rank ? r3.size : r3.shape[0];
  return d(o3 === a3, function() {
    return "Error in dot: inner dimensions of inputs must match, but got " + o3 + " and " + a3 + ".";
  }), 1 === n3.rank && 1 === r3.rank ? n3.as2D(1, -1).matMul(r3.as2D(-1, 1)).asScalar() : 1 === n3.rank && 2 === r3.rank ? n3.as2D(1, -1).matMul(r3.as2D(r3.shape[0], r3.shape[1])).as1D() : 2 === n3.rank && 1 === r3.rank ? n3.matMul(r3.as2D(-1, 1)).as1D() : n3.matMul(r3.as2D(r3.shape[0], r3.shape[1]));
} });
var cu = ln({ outerProduct_: function(t3, e3) {
  var n3 = Ye(t3, "v1", "outerProduct"), r3 = Ye(e3, "v2", "outerProduct");
  return d(1 === n3.rank && 1 === r3.rank, function() {
    return "Error in outerProduct: inputs must be rank 1, but got ranks " + n3.rank + " and " + r3.rank + ".";
  }), n3.as2D(-1, 1).matMul(r3.as2D(1, -1));
} });
var hu = ln({ reverse_: function(t3, e3) {
  var n3 = Ye(t3, "x", "reverse");
  if (0 === n3.rank) return n3.clone();
  var r3 = S(e3, n3.shape);
  return At.runKernel(function(t4) {
    return t4.reverse(n3, r3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return t4.reverse(r3);
    } };
  }).reshapeAs(n3);
} });
var pu = ln({ reverse1d_: function(t3) {
  var e3 = Ye(t3, "x", "reverse");
  return d(1 === e3.rank, function() {
    return "Error in reverse1D: x must be rank 1 but got rank " + e3.rank + ".";
  }), hu(e3, 0);
} });
var fu = ln({ reverse2d_: function(t3, e3) {
  var n3 = Ye(t3, "x", "reverse");
  return d(2 === n3.rank, function() {
    return "Error in reverse2D: x must be rank 2 but got rank " + n3.rank + ".";
  }), hu(n3, e3);
} });
var du = ln({ reverse3d_: function(t3, e3) {
  var n3 = Ye(t3, "x", "reverse");
  return d(3 === n3.rank, function() {
    return "Error in reverse3D: x must be rank 3 but got rank " + n3.rank + ".";
  }), hu(n3, e3);
} });
var vu = ln({ reverse4d_: function(t3, e3) {
  var n3 = Ye(t3, "x", "reverse");
  return d(4 === n3.rank, function() {
    return "Error in reverse4D: x must be rank 4 but got rank " + n3.rank + ".";
  }), hu(n3, e3);
} });
function mu(t3, e3, n3, r3, o3, a3) {
  var i3 = Ye(t3, "x", "maxPool"), s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), null == r3 && (r3 = [1, 1]), d(4 === s3.rank, function() {
    return "Error in maxPool: input must be rank 4 but got rank " + s3.rank + ".";
  }), d(ro(n3, r3), function() {
    return "Error in maxPool: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + r3 + "'";
  }), null != a3 && d(b(o3), function() {
    return "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var l3 = Kr(s3.shape, e3, n3, r3, o3, a3), c3 = At.runKernel(function(t4, e4) {
    var n4 = t4.maxPool(s3, l3);
    return e4([s3, n4]), n4;
  }, { x: s3 }, function(t4, a4) {
    var i4 = a4[0], s4 = a4[1];
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a5, i5, s5) {
        var u4 = Ye(t5, "dy", "maxPoolBackprop"), l4 = Ye(e4, "input", "maxPoolBackprop"), c4 = Ye(n4, "output", "maxPoolBackprop");
        d(l4.rank === u4.rank, function() {
          return "Rank of input (" + l4.rank + ") does not match rank of dy (" + u4.rank + ")";
        }), null == a5 && (a5 = [1, 1]), d(ro(o4, a5), function() {
          return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o4 + " and dilations '" + a5 + "'";
        }), d(4 === u4.rank, function() {
          return "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u4.rank + ".";
        }), d(4 === l4.rank, function() {
          return "Error in maxPoolBackprop: input must be rank 4 but got rank " + l4.rank + ".";
        }), null != s5 && d(b(i5), function() {
          return "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + s5 + " but got pad " + i5 + ".";
        });
        var h3 = Kr(l4.shape, r4, o4, a5, i5, s5);
        return At.runKernel(function(t6) {
          return t6.maxPoolBackprop(u4, l4, c4, h3);
        }, { $dy: u4, $input: l4 });
      }(t4, i4, s4, e3, n3, r3, o3);
    } };
  });
  return u3 ? c3.as3D(c3.shape[1], c3.shape[2], c3.shape[3]) : c3;
}
function gu(t3, e3, n3, r3, o3, a3) {
  var i3 = Ye(t3, "x", "avgPool", "float32");
  null == r3 && (r3 = [1, 1]), d(ro(n3, r3), function() {
    return "Error in avgPool: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + r3 + "'";
  });
  var s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), d(4 === s3.rank, function() {
    return "Error in avgPool: x must be rank 4 but got rank " + s3.rank + ".";
  }), null != a3 && d(b(o3), function() {
    return "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var l3 = Kr(s3.shape, e3, n3, r3, o3, a3), c3 = At.runKernel(function(t4) {
    return t4.avgPool(s3, l3);
  }, { x: s3 }, function(t4) {
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a4) {
        var i4 = Ye(t5, "dy", "avgPoolBackprop"), s4 = Ye(e4, "input", "avgPoolBackprop");
        d(s4.rank === i4.rank, function() {
          return "Rank of input (" + s4.rank + ") does not match rank of dy (" + i4.rank + ")";
        }), null == o4 && (o4 = [1, 1]), d(ro(r4, o4), function() {
          return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r4 + " and dilations '" + o4 + "'";
        });
        var u4 = s4, l4 = i4, c4 = false;
        3 === s4.rank && (c4 = true, u4 = s4.as4D(1, s4.shape[0], s4.shape[1], s4.shape[2]), l4 = i4.as4D(1, i4.shape[0], i4.shape[1], i4.shape[2])), d(4 === l4.rank, function() {
          return "Error in avgPoolBackprop: dy must be rank 4 but got rank " + l4.rank + ".";
        }), d(4 === u4.rank, function() {
          return "Error in avgPoolBackprop: input must be rank 4 but got rank " + u4.rank + ".";
        });
        var h3 = Kr(u4.shape, n4, r4, o4, a4), p3 = At.runKernel(function(t6) {
          return t6.avgPoolBackprop(l4, u4, h3);
        }, { dy4D: l4, input4D: u4 });
        return c4 ? p3.as3D(p3.shape[1], p3.shape[2], p3.shape[3]) : p3;
      }(t4, s3, e3, n3, r3, o3);
    } };
  });
  return c3 = c3.cast(i3.dtype), u3 ? c3.as3D(c3.shape[1], c3.shape[2], c3.shape[3]) : c3;
}
var yu = ln({ maxPool_: function(t3, e3, n3, r3, o3) {
  return mu(t3, e3, n3, 1, r3, o3);
} });
var xu = ln({ avgPool_: function(t3, e3, n3, r3, o3) {
  return gu(t3, e3, n3, 1, r3, o3);
} });
var bu = ln({ pool_: function(t3, e3, n3, r3, o3, a3) {
  null == o3 && (o3 = [1, 1]), null == a3 && (a3 = 1), 0 === r3 && (r3 = "valid");
  var i3 = Ye(t3, "x", "maxPool"), s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), d(ro(a3, o3), function() {
    return "Error in pool: Either strides or dilations must be 1. Got strides " + a3 + " and dilations '" + o3 + "'";
  });
  var l3, c3 = Kr(s3.shape, e3, a3, o3, r3), h3 = [c3.dilationHeight, c3.dilationWidth];
  l3 = "same" === r3 ? function(t4, e4) {
    var n4 = t4.map(function(t5, n5) {
      return t5 + (t5 - 1) * (e4[n5] - 1);
    }).map(function(t5) {
      return t5 - 1;
    }), r4 = n4.map(function(t5) {
      return Math.floor(t5 / 2);
    }), o4 = n4.map(function(t5, e5) {
      return t5 - r4[e5];
    });
    return n4.map(function(t5, e5) {
      return [r4[e5], o4[e5]];
    });
  }([c3.filterHeight, c3.filterWidth], h3) : [[0, 0], [0, 0]];
  var p3 = 1 === h3[0] && 1 === h3[1], f3 = function(t4, e4, n4) {
    var r4 = n4.map(function(t5) {
      return t5[0];
    }), o4 = n4.map(function(t5) {
      return t5[1];
    }), a4 = t4.concat(r4, o4), i4 = e4.map(function(t5, e5) {
      return (t5 - a4[e5] % t5) % t5;
    }), s4 = o4.map(function(t5, e5) {
      return t5 + i4[e5];
    }), u4 = e4.map(function(t5, e5) {
      return [r4[e5], s4[e5]];
    }), l4 = e4.map(function(t5, e5) {
      return [0, i4[e5]];
    });
    return [u4, l4];
  }([c3.inHeight, c3.inWidth], h3, l3), v2 = f3[0], m3 = f3[1], g2 = p3 ? r3 : "valid", y3 = p3 ? s3 : pr(s3, h3, v2), x3 = ("avg" === n3 ? function() {
    return gu(y3, e3, a3, 1, g2);
  } : function() {
    return mu(y3, e3, a3, 1, g2);
  })(), b3 = p3 ? x3 : Kn(x3, h3, m3);
  return u3 ? b3.as3D(b3.shape[1], b3.shape[2], b3.shape[3]) : b3;
} });
var wu = ln({ slice_: function(t3, e3, n3) {
  var r3, o3, a3 = Ye(t3, "x", "slice");
  if (0 === a3.rank) throw new Error("Slicing scalar is not possible");
  r3 = "number" == typeof e3 ? [e3].concat(new Array(a3.rank - 1).fill(0)) : e3.length < a3.rank ? e3.concat(new Array(a3.rank - e3.length).fill(0)) : e3.slice(), o3 = (o3 = null == n3 ? new Array(a3.rank).fill(-1) : "number" == typeof n3 ? [n3].concat(new Array(a3.rank - 1).fill(-1)) : n3.length < a3.rank ? n3.concat(new Array(a3.rank - n3.length).fill(-1)) : n3).map(function(t4, e4) {
    return t4 >= 0 ? t4 : (d(-1 === t4, function() {
      return "Bad value in size";
    }), a3.shape[e4] - r3[e4]);
  }), function(t4, e4, n4) {
    d(t4.rank === e4.length, function() {
      return "Error in slice" + t4.rank + "D: Length of begin " + e4 + " must match the rank of the array (" + t4.rank + ").";
    }), d(t4.rank === n4.length, function() {
      return "Error in slice" + t4.rank + "D: Length of size " + n4 + " must match the rank of the array (" + t4.rank + ").";
    });
    for (var r4 = function(r5) {
      d(e4[r5] + n4[r5] <= t4.shape[r5], function() {
        return "Error in slice" + t4.rank + "D: begin[" + r5 + "] + size[" + r5 + "] (" + (e4[r5] + n4[r5]) + ") would overflow input.shape[" + r5 + "] (" + t4.shape[r5] + ")";
      });
    }, o4 = 0; o4 < t4.rank; ++o4) r4(o4);
  }(a3, r3, o3);
  var i3 = a3.shape;
  return At.runKernel(function(t4) {
    return t4.slice(a3, r3, o3);
  }, { $x: a3 }, function(t4) {
    for (var e4 = [], n4 = 0; n4 < t4.rank; n4++) e4.push([r3[n4], i3[n4] - r3[n4] - o3[n4]]);
    return { $x: function() {
      return t4.pad(e4);
    } };
  });
} });
var Cu = ln({ slice1d_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "slice1d");
  return d(1 === r3.rank, function() {
    return "slice1d expects a rank-1 tensor, but got a rank-" + r3.rank + " tensor";
  }), wu(r3, [e3], [n3]);
} });
var Eu = ln({ slice2d_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "slice2d");
  return d(2 === r3.rank, function() {
    return "slice2d expects a rank-2 tensor, but got a rank-" + r3.rank + " tensor";
  }), wu(r3, e3, n3);
} });
var Ru = ln({ slice3d_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "slice3d");
  return d(3 === r3.rank, function() {
    return "slice3d expects a rank-3 tensor, but got a rank-" + r3.rank + " tensor";
  }), wu(r3, e3, n3);
} });
var Iu = ln({ slice4d_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "slice4d");
  return d(4 === r3.rank, function() {
    return "slice4d expects a rank-4 tensor, but got a rank-" + r3.rank + " tensor";
  }), wu(r3, e3, n3);
} });
function Su(t3, e3, n3, r3, o3) {
  return e3.rank < n3.rank && (e3 = e3.reshape(en(e3.shape, r3))), t3.rank < n3.rank && (t3 = t3.reshape(en(t3.shape, r3))), { $x: function() {
    var r4 = t3.mul(n3.equal(e3).cast(t3.dtype));
    return null == o3 ? r4 : r4.transpose(o3);
  } };
}
var Nu = ln({ all_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "all", "bool"), o3 = S(e3, r3.shape), a3 = o3, i3 = rn(a3, r3.rank);
  null != i3 && (r3 = r3.transpose(i3), a3 = an(a3.length, r3.rank));
  var s3 = At.runKernel(function(t4) {
    return t4.all(r3, a3);
  }, { $x: r3 });
  if (n3) {
    var u3 = en(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var ku = ln({ any_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "any", "bool"), o3 = S(e3, r3.shape), a3 = o3, i3 = rn(a3, r3.rank);
  null != i3 && (r3 = r3.transpose(i3), a3 = an(a3.length, r3.rank));
  var s3 = At.runKernel(function(t4) {
    return t4.any(r3, a3);
  }, { $x: r3 });
  if (n3) {
    var u3 = en(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var Au = ln({ argMax_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = Ye(t3, "x", "argMax");
  null == e3 && (e3 = 0);
  var r3 = S(e3, n3.shape), o3 = rn(r3, n3.rank);
  return null != o3 && (n3 = n3.transpose(o3), r3 = an(r3.length, n3.rank)), At.runKernel(function(t4, e4) {
    var o4 = t4.argMax(n3, r3[0]);
    return e4([n3]), o4;
  }, { $x: n3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $x: function() {
      return kn(n4);
    } };
  });
} });
var Tu = ln({ argMin_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = Ye(t3, "x", "argMin");
  null == e3 && (e3 = 0);
  var r3 = S(e3, n3.shape), o3 = rn(r3, n3.rank);
  return null != o3 && (n3 = n3.transpose(o3), r3 = an(r3.length, n3.rank)), At.runKernel(function(t4, e4) {
    var o4 = t4.argMin(n3, r3[0]);
    return e4([n3]), o4;
  }, { $x: n3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $x: function() {
      return kn(n4);
    } };
  });
} });
var Du = ln({ logSumExp_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "logSumExp"), o3 = S(e3, r3.shape), a3 = r3.max(o3, true), i3 = r3.sub(a3).exp().sum(o3).log(), s3 = a3.reshape(i3.shape).add(i3);
  if (n3) {
    var u3 = en(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var _u = ln({ max_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "max"), o3 = r3, a3 = S(e3, r3.shape), i3 = a3, s3 = rn(i3, r3.rank);
  null != s3 && (r3 = r3.transpose(s3), i3 = an(i3.length, r3.rank));
  var u3 = At.runKernel(function(t4, e4) {
    var n4 = t4.max(r3, i3);
    return e4([o3, n4]), n4;
  }, { $x: r3 }, function(t4, e4) {
    return Su(t4, e4[1], e4[0], a3, s3);
  });
  if (n3) {
    var l3 = en(u3.shape, a3);
    u3 = u3.reshape(l3);
  }
  return u3;
} });
var Ou = ln({ mean_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "mean"), o3 = S(e3, r3.shape), a3 = y(tn(r3.shape, o3)[1]);
  return Wr(function(t4) {
    var r4 = vn(a3);
    return { value: (r4.dtype === t4.dtype ? t4 : t4.cast(r4.dtype)).div(r4).sum(e3, n3), gradFunc: function(e4) {
      var n4 = t4.shape.slice();
      return o3.forEach(function(t5) {
        n4[t5] = 1;
      }), e4.reshape(n4).mul(Cn(t4.shape, "float32")).div(a3);
    } };
  })(r3);
} });
var Fu = ln({ min_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "min"), o3 = r3, a3 = S(e3, r3.shape), i3 = a3, s3 = rn(i3, r3.rank);
  null != s3 && (r3 = r3.transpose(s3), i3 = an(i3.length, r3.rank));
  var u3 = At.runKernel(function(t4, e4) {
    var n4 = t4.min(r3, i3);
    return e4([o3, n4]), n4;
  }, { $x: r3 }, function(t4, e4) {
    return Su(t4, e4[1], e4[0], a3, s3);
  });
  if (n3) {
    var l3 = en(u3.shape, a3);
    u3 = u3.reshape(l3);
  }
  return u3;
} });
var Mu = ln({ moments_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = S(e3, (t3 = Ye(t3, "x", "moments")).shape), o3 = t3.mean(r3, n3), a3 = o3.shape;
  n3 || (a3 = en(o3.shape, r3));
  var i3 = t3.toFloat().sub(o3.reshape(a3)).square();
  return { mean: o3, variance: i3.mean(r3, n3) };
} });
var Bu = ln({ sum_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "sum");
  "bool" === r3.dtype && (r3 = r3.toInt());
  var o3 = S(e3, r3.shape);
  return Wr(function(t4) {
    var e4 = rn(o3, t4.rank), r4 = o3, a3 = t4;
    null != e4 && (a3 = t4.transpose(e4), r4 = an(r4.length, t4.rank));
    var i3 = At.runKernel(function(t5) {
      return t5.sum(a3, r4);
    }, { permutedX: a3 });
    if (n3) {
      var s3 = en(i3.shape, o3);
      i3 = i3.reshape(s3);
    }
    return { value: i3, gradFunc: function(e5) {
      var n4 = t4.shape.slice();
      return o3.forEach(function(t5) {
        n4[t5] = 1;
      }), e5.reshape(n4).mul(Cn(t4.shape, "float32"));
    } };
  })(r3);
} });
var Pu = ln({ prod_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "x", "prod");
  "bool" === r3.dtype && (r3 = r3.toInt());
  var o3 = S(e3, r3.shape), a3 = rn(o3, r3.rank), i3 = o3, s3 = r3;
  null != a3 && (s3 = r3.transpose(a3), i3 = an(i3.length, r3.rank));
  var u3 = At.runKernel(function(t4) {
    return t4.prod(s3, i3);
  }, { permutedX: s3 });
  if (n3) {
    var l3 = en(u3.shape, o3);
    u3 = u3.reshape(l3);
  }
  return u3;
} });
var Lu = ln({ equal_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "equal"), o3 = Ye(e3, "b", "equal");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4) {
    return t4.equal(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var Wu = ln({ equalStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "equalStrict"), r3 = Ye(e3, "b", "equalStrict");
  return v(n3.shape, r3.shape, "Error in equalStrict: "), n3.equal(r3);
} });
var Uu = ln({ greater_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "greater"), o3 = Ye(e3, "b", "greater");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4) {
    return t4.greater(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var zu = ln({ greaterEqual_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "greaterEqual"), o3 = Ye(e3, "b", "greaterEqual");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4, e4) {
    var n4 = t4.greaterEqual(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      return kn(n4);
    }, $b: function() {
      return kn(r4);
    } };
  });
} });
var Vu = ln({ greaterEqualStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "greaterEqualStrict"), r3 = Ye(e3, "b", "greaterEqualStrict");
  return v(n3.shape, r3.shape, "Error in greaterEqualStrict: "), n3.greaterEqual(r3);
} });
var Gu = ln({ greaterStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "greaterStrict"), r3 = Ye(e3, "b", "greaterStrict");
  return v(n3.shape, r3.shape, "Error in greaterStrict: "), n3.greater(r3);
} });
var qu = ln({ less_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "less"), o3 = Ye(e3, "b", "less");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4) {
    return t4.less(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var Hu = ln({ lessEqual_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "lessEqual"), o3 = Ye(e3, "b", "lessEqual");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4) {
    return t4.lessEqual(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var $u = ln({ lessEqualStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "lessEqualStrict"), r3 = Ye(e3, "b", "lessEqualStrict");
  return v(n3.shape, r3.shape, "Error in lessEqualStrict: "), n3.lessEqual(r3);
} });
var ju = ln({ lessStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "lessStrict"), r3 = Ye(e3, "b", "lessStrict");
  return v(n3.shape, r3.shape, "Error in lessStrict: "), n3.less(r3);
} });
var Ku = ln({ notEqual_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "notEqual"), o3 = Ye(e3, "b", "notEqual");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4) {
    return t4.notEqual(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var Xu = ln({ notEqualStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "notEqualStrict"), r3 = Ye(e3, "b", "notEqualStrict");
  return v(n3.shape, r3.shape, "Error in notEqualStrict: "), n3.notEqual(r3);
} });
var Yu = ln({ add_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "add"), o3 = Ye(e3, "b", "add");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4) {
    return t4.add(r3, o3);
  }, { $a: r3, $b: o3 }, function(t4) {
    return { $a: function() {
      var e4 = t4, n4 = $r(r3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.reshape(r3.shape);
    }, $b: function() {
      var e4 = t4, n4 = $r(o3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.reshape(o3.shape);
    } };
  });
} });
var Qu = ln({ addN_: function(t3) {
  d(Array.isArray(t3), function() {
    return "The argument passed to tf.addN() must be a list of tensors";
  }), d(t3.length >= 1, function() {
    return "Must pass at least one tensor to tf.addN(), but got " + t3.length;
  });
  var e3 = t3.map(function(t4, e4) {
    return Ye(t4, "tensors" + e4, "addN");
  }), n3 = e3[0];
  e3.forEach(function(t4) {
    if (t4.dtype !== n3.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e3.forEach(function(t4) {
    if (!x(t4.shape, n3.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  var r3 = e3;
  return At.runKernel(function(t4) {
    return t4.addN(e3);
  }, r3, function(t4) {
    var n4 = {};
    return e3.forEach(function(e4, r4) {
      n4[r4] = function() {
        return t4.clone();
      };
    }), n4;
  });
} });
var Ju = ln({ addStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "addStrict"), r3 = Ye(e3, "b", "addStrict");
  return v(n3.shape, r3.shape, "Error in addStrict: "), n3.add(r3);
} });
var Zu = ln({ atan2_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "atan2"), o3 = Ye(e3, "b", "atan2");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4, e4) {
    var n4 = t4.atan2(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = Yu(n4.square(), r4.square()), o4 = t4.mul(r4.div(e5)), i3 = $r(n4.shape, a3);
      return i3.length > 0 && (o4 = o4.sum(i3)), o4.reshape(n4.shape);
    }, $b: function() {
      var e5 = Yu(n4.square(), r4.square()), o4 = ws(t4.mul(n4.div(e5))), i3 = $r(r4.shape, a3);
      return i3.length > 0 && (o4 = o4.sum(i3)), o4.reshape(r4.shape);
    } };
  });
} });
var tl = ln({ div_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "div"), o3 = Ye(e3, "b", "div");
  if (n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], "int32" === r3.dtype && "int32" === o3.dtype) return nl(r3, o3);
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4, e4) {
    var n4 = t4.realDivide(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = t4.div(r4.toFloat()), o4 = $r(n4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(n4.shape) : e5;
    }, $b: function() {
      var e5 = t4.mul(n4.toFloat()), o4 = $r(r4.shape, a3);
      o4.length > 0 && (e5 = e5.sum(o4).reshape(r4.shape));
      var i3 = r4.square();
      return e5.div(i3.toFloat()).neg();
    } };
  });
} });
var el = ln({ divStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "div"), r3 = Ye(e3, "b", "div");
  return v(n3.shape, r3.shape, "Error in divideStrict: "), n3.div(r3);
} });
var nl = ln({ floorDiv_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "floorDiv"), o3 = Ye(e3, "b", "floorDiv");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4, e4) {
    var n4 = t4.floorDiv(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = t4.div(r4.toFloat()), o4 = $r(n4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(n4.shape) : e5;
    }, $b: function() {
      var e5 = t4.mul(n4.toFloat()), o4 = $r(r4.shape, a3);
      o4.length > 0 && (e5 = e5.sum(o4).reshape(r4.shape));
      var i3 = r4.square();
      return e5.div(i3.toFloat()).neg();
    } };
  });
} });
var rl = ln({ maximum_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "maximum"), o3 = Ye(e3, "b", "maximum");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], "bool" === r3.dtype && (r3 = r3.toInt(), o3 = o3.toInt()), jr(r3.shape, o3.shape), At.runKernel(function(t4, e4) {
    var n4 = t4.maximum(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      return t4.mul(n4.greaterEqual(r4).toFloat());
    }, $b: function() {
      return t4.mul(n4.less(r4).toFloat());
    } };
  });
} });
var ol = ln({ maximumStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "maximumStrict"), r3 = Ye(e3, "b", "maximumStrict");
  return v(n3.shape, r3.shape, "Error in maximumStrict: "), n3.maximum(r3);
} });
var al = ln({ minimum_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "minimum"), o3 = Ye(e3, "b", "minimum");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], "bool" === r3.dtype && (r3 = r3.toInt(), o3 = o3.toInt()), jr(r3.shape, o3.shape), At.runKernel(function(t4, e4) {
    var n4 = t4.minimum(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      return t4.mul(n4.lessEqual(r4).toFloat());
    }, $b: function() {
      return t4.mul(n4.greater(r4).toFloat());
    } };
  });
} });
var il = ln({ minimumStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "minimumStrict"), r3 = Ye(e3, "b", "minimumStrict");
  return v(n3.shape, r3.shape, "Error in minimumStrict: "), n3.minimum(r3);
} });
var sl = ln({ mod_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "mod"), o3 = Ye(e3, "b", "mod");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4, e4) {
    var n4 = t4.mod(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = $r(n4.shape, a3);
      return e5.length > 0 ? t4.sum(e5).reshape(n4.shape) : t4;
    }, $b: function() {
      var e5 = t4.mul(n4.div(r4).floor().neg()), o4 = $r(r4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(r4.shape) : e5;
    } };
  });
} });
var ul = ln({ modStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "modStrict"), r3 = Ye(e3, "b", "modStrict");
  return v(n3.shape, r3.shape, "Error in modStrict: "), n3.mod(r3);
} });
var ll = ln({ mul_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "mul"), o3 = Ye(e3, "b", "mul");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4, e4) {
    var n4 = t4.multiply(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = t4.mul(r4.toFloat()), o4 = $r(n4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(n4.shape) : e5;
    }, $b: function() {
      var e5 = t4.mul(n4.toFloat()), o4 = $r(r4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(r4.shape) : e5;
    } };
  });
} });
var cl = ln({ mulStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "mul"), r3 = Ye(e3, "b", "mul");
  return v(n3.shape, r3.shape, "Error in multiplyStrict: "), n3.mul(r3);
} });
var hl = ln({ pow_: function(t3, e3) {
  var n3 = Ye(t3, "base", "pow"), r3 = Ye(e3, "exp", "pow"), o3 = jr(n3.shape, r3.shape);
  return t3 = n3.cast(bt(n3.dtype, r3.dtype)), e3 = r3.cast(bt(n3.dtype, r3.dtype)), At.runKernel(function(t4, e4) {
    var o4 = t4.pow(n3, r3);
    return e4([n3, r3, o4]), o4;
  }, { $base: n3, $exp: r3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], a3 = e4[2];
    return { $base: function() {
      var e5 = r4.toFloat(), a4 = t4.mul(e5.mul(n4.pow(e5.sub(vn(1))))), i3 = $r(n4.shape, o3);
      return i3.length > 0 && (a4 = a4.sum(i3)), a4.reshape(n4.shape);
    }, $exp: function() {
      var e5 = n4.greater(0), i3 = n4.log().where(e5, kn(n4)), s3 = t4.mul(a3.mul(i3)), u3 = $r(r4.shape, o3);
      return u3.length > 0 && (s3 = s3.sum(u3)), s3.reshape(r4.shape);
    } };
  });
} });
var pl = ln({ powStrict_: function(t3, e3) {
  return v(t3.shape, e3.shape, "Error in powStrict: "), t3.pow(e3);
} });
var fl = ln({ squaredDifference_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "squaredDifference"), o3 = Ye(e3, "b", "squaredDifference");
  return n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1], jr(r3.shape, o3.shape), At.runKernel(function(t4, e4) {
    var n4 = t4.squaredDifference(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o4 = vn(2);
    return { $a: function() {
      return t4.mul(n4.sub(r4).mul(o4));
    }, $b: function() {
      return t4.mul(r4.sub(n4).mul(o4));
    } };
  });
} });
var dl = ln({ squaredDifferenceStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "squaredDifferenceStrict"), r3 = Ye(e3, "b", "squaredDifferenceStrict");
  return v(n3.shape, r3.shape, "Error in squaredDifferenceStrict: "), n3.squaredDifference(r3);
} });
var vl = ln({ sub_: function(t3, e3) {
  var n3, r3 = Ye(t3, "a", "sub"), o3 = Ye(e3, "b", "sub");
  n3 = Ct(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = jr(r3.shape, o3.shape);
  return At.runKernel(function(t4) {
    return t4.subtract(r3, o3);
  }, { $a: r3, $b: o3 }, function(t4) {
    return { $a: function() {
      var e4 = t4, n4 = $r(r3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.reshape(r3.shape);
    }, $b: function() {
      var e4 = t4, n4 = $r(o3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.neg().reshape(o3.shape);
    } };
  });
} });
var ml = ln({ subStrict_: function(t3, e3) {
  var n3 = Ye(t3, "a", "subStrict"), r3 = Ye(e3, "b", "subStrict");
  return v(n3.shape, r3.shape, "Error in subStrict: "), n3.sub(r3);
} });
var gl = ln({ logicalAnd_: function(t3, e3) {
  var n3 = Ye(t3, "a", "logicalAnd", "bool"), r3 = Ye(e3, "b", "logicalAnd", "bool");
  return jr(n3.shape, r3.shape), At.runKernel(function(t4) {
    return t4.logicalAnd(n3, r3);
  }, { $a: n3, $b: r3 });
} });
var yl = ln({ logicalNot_: function(t3) {
  var e3 = Ye(t3, "x", "logicalNot", "bool");
  return At.runKernel(function(t4) {
    return t4.logicalNot(e3);
  }, { $x: e3 });
} });
var xl = ln({ logicalOr_: function(t3, e3) {
  var n3 = Ye(t3, "a", "logicalOr", "bool"), r3 = Ye(e3, "b", "logicalOr", "bool");
  return jr(n3.shape, r3.shape), At.runKernel(function(t4) {
    return t4.logicalOr(n3, r3);
  }, { $a: n3, $b: r3 });
} });
var bl = ln({ logicalXor_: function(t3, e3) {
  var n3 = Ye(t3, "a", "logicalXor", "bool"), r3 = Ye(e3, "b", "logicalXor", "bool");
  return jr(n3.shape, r3.shape), xl(t3, e3).logicalAnd(gl(t3, e3).logicalNot());
} });
var wl = ln({ where_: function(t3, e3, n3) {
  var r3 = Ye(e3, "a", "where"), o3 = Ye(n3, "b", "where"), a3 = Ye(t3, "condition", "where", "bool");
  return v(r3.shape, o3.shape, "Error in where: "), 1 === a3.rank ? d(a3.shape[0] === r3.shape[0], function() {
    return "The first dimension of `a` must match the size of `condition`.";
  }) : v(a3.shape, o3.shape, "Error in where: "), At.runKernel(function(t4, e4) {
    var n4 = t4.select(a3, r3, o3);
    return e4([a3]), n4;
  }, { $condition: a3, $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $condition: function() {
      return kn(n4).toFloat();
    }, $a: function() {
      return t4.mul(n4.cast(t4.dtype));
    }, $b: function() {
      return t4.mul(n4.logicalNot().cast(t4.dtype));
    } };
  });
} });
var Cl = function(t3) {
  return r(this, void 0, void 0, function() {
    var e3, n3, r3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          return [4, (e3 = Ye(t3, "condition", "whereAsync", "bool")).data()];
        case 1:
          return n3 = o3.sent(), r3 = yo(e3.shape, n3), t3 !== e3 && e3.dispose(), [2, r3];
      }
    });
  });
};
var El = ln({ elu_: function(t3) {
  var e3 = Ye(t3, "x", "elu");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.elu(e3);
    return n3([r3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return At.runKernel(function(e5) {
        return e5.eluDer(t4, n3);
      }, { dy: t4, y: n3 });
    } };
  });
} });
var Rl = ln({ leakyRelu_: function(t3, e3) {
  void 0 === e3 && (e3 = 0.2);
  var n3 = Ye(t3, "x", "leakyRelu");
  return rl(vn(e3).mul(n3), n3);
} });
var Il = ln({ prelu_: function(t3, e3) {
  var n3 = Ye(t3, "x", "prelu"), r3 = Ye(e3, "alpha", "prelu");
  return At.runKernel(function(t4, e4) {
    var o3 = t4.prelu(n3, r3);
    return e4([n3, r3]), o3;
  }, { $x: n3, $alpha: r3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o3 = n4.greater(0);
    return { $x: function() {
      return wl(o3, t4, t4.mul(r4));
    }, $alpha: function() {
      var e5 = wl(o3, kn(t4), t4.mul(n4)), a3 = $r(r4.shape, t4.shape);
      return a3.length > 0 && (e5 = e5.sum(a3)), e5.reshape(r4.shape);
    } };
  });
} });
var Sl = ln({ relu_: function(t3) {
  var e3 = Ye(t3, "x", "relu");
  return "bool" === e3.dtype ? e3.toInt() : At.runKernel(function(t4, n3) {
    var r3 = t4.relu(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mulStrict(n3.step().toFloat());
    } };
  });
} });
var Nl = ln({ selu_: function(t3) {
  var e3 = Ye(t3, "x", "selu");
  return At.runKernel(function(t4, n3) {
    var r3 = t4.selu(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      var e5 = n3.greater(vn(0)), r3 = vn(Pi), o3 = vn(Li), a3 = t4.mul(o3), i3 = t4.mul(r3).mul(n3.toFloat().exp());
      return wl(e5, a3, i3);
    } };
  });
} });
var kl = ln({ transpose_: function(t3, e3) {
  var n3 = Ye(t3, "x", "transpose");
  return null == e3 && (e3 = n3.shape.map(function(t4, e4) {
    return e4;
  }).reverse()), d(n3.rank === e3.length, function() {
    return "Error in transpose: rank of input " + n3.rank + " must match length of perm " + e3 + ".";
  }), e3.forEach(function(t4) {
    d(t4 >= 0 && t4 < n3.rank, function() {
      return "All entries in 'perm' must be between 0 and " + (n3.rank - 1) + " but got " + e3;
    });
  }), n3.rank <= 1 ? n3.clone() : At.runKernel(function(t4) {
    return t4.transpose(n3, e3);
  }, { $x: n3 }, function(t4) {
    var n4 = on(e3);
    return { $x: function() {
      return t4.transpose(n4);
    } };
  });
} });
var Al = ln({ localResponseNormalization_: function(t3, e3, n3, r3, o3) {
  void 0 === e3 && (e3 = 5), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 1), void 0 === o3 && (o3 = 0.5);
  var a3 = Ye(t3, "x", "localResponseNormalization");
  d(4 === a3.rank || 3 === a3.rank, function() {
    return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a3.rank + ".";
  }), d(b(e3), function() {
    return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " + e3 + ".";
  });
  var i3 = a3, s3 = false;
  3 === a3.rank && (s3 = true, i3 = a3.as4D(1, a3.shape[0], a3.shape[1], a3.shape[2]));
  var u3 = At.runKernel(function(t4, a4) {
    var s4 = t4.localResponseNormalization4D(i3, e3, n3, r3, o3);
    return a4([i3, s4]), s4;
  }, { x4D: i3 }, function(t4, a4) {
    var i4 = a4[0], s4 = a4[1];
    return { x4D: function() {
      return At.runKernel(function(a5) {
        return a5.LRNGrad(t4, i4, s4, e3, n3, r3, o3);
      }, {});
    } };
  });
  return s3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var Tl = ln({ norm_: function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = "euclidean"), void 0 === n3 && (n3 = null), void 0 === r3 && (r3 = false);
  var o3 = function t4(e4, n4, r4) {
    if (void 0 === r4 && (r4 = null), 0 === e4.rank) return e4.abs();
    if (1 !== e4.rank && null === r4) return t4(e4.reshape([-1]), n4, r4);
    if (1 === e4.rank || "number" == typeof r4 || Array.isArray(r4) && 1 === r4.length) {
      if (1 === n4) return e4.abs().sum(r4);
      if (n4 === 1 / 0) return e4.abs().max(r4);
      if (n4 === -1 / 0) return e4.abs().min(r4);
      if ("euclidean" === n4 || 2 === n4) return e4.abs().pow(vn(2, "int32")).sum(r4).sqrt();
      throw new Error("Error in norm: invalid ord value: " + n4);
    }
    if (Array.isArray(r4) && 2 === r4.length) {
      if (1 === n4) return e4.abs().sum(r4[0]).max(r4[1] - 1);
      if (n4 === 1 / 0) return e4.abs().sum(r4[1]).max(r4[0]);
      if (n4 === -1 / 0) return e4.abs().sum(r4[1]).min(r4[0]);
      if ("fro" === n4 || "euclidean" === n4) return e4.square().sum(r4).sqrt();
      throw new Error("Error in norm: invalid ord value: " + n4);
    }
    throw new Error("Error in norm: invalid axis: " + r4);
  }(t3 = Ye(t3, "x", "norm"), e3, n3), a3 = o3.shape;
  if (r3) {
    var i3 = S(n3, t3.shape);
    a3 = en(o3.shape, i3);
  }
  return o3.reshape(a3);
} });
function Dl(t3, e3) {
  for (var n3 = [], r3 = t3; r3 < e3; ++r3) n3.push(r3);
  return n3;
}
function _l(t3) {
  for (var e3 = [], n3 = 0; n3 < t3.length; ++n3) for (var r3 = 0; r3 < t3[n3].length; ++r3) e3.push(t3[n3][r3]);
  return e3;
}
var Ol = ln({ gather_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3 = Ye(t3, "x", "gather"), o3 = Ye(e3, "indices", "gather", "int32");
  n3 = S(n3, r3.shape)[0];
  var a3 = function(t4, e4, n4) {
    for (var r4 = t4.shape[n4], o4 = [], a4 = 1, i3 = 1, s3 = 0; s3 < n4; s3++) o4.push(t4.shape[s3]), a4 *= t4.shape[s3];
    for (s3 = 0; s3 < e4.rank; s3++) o4.push(e4.shape[s3]);
    for (s3 = n4 + 1; s3 < t4.rank; s3++) o4.push(t4.shape[s3]), i3 *= t4.shape[s3];
    return { batchSize: a4, sliceSize: i3, dimSize: r4, outputShape: o4 };
  }(r3, o3, n3);
  return At.runKernel(function(t4, e4) {
    var a4 = t4.gather(r3, o3.flatten(), n3);
    return e4([o3]), a4;
  }, { $x: r3 }, function(t4, e4) {
    var o4 = e4[0];
    return { $x: function() {
      var e5 = r3.shape, a4 = o4.size, i3 = e5.slice(0, n3), s3 = i3.length, u3 = e5.slice(n3, e5.length).slice(1), l3 = u3.length, c3 = Dl(0, s3), h3 = Dl(s3 + 1, s3 + 1 + l3), p3 = _l([i3, [a4], u3]), f3 = t4.reshape(p3), d3 = o4.reshape([a4]), v2 = _l([[s3], c3, h3]), m3 = f3.transpose(v2), g2 = Fl(m3, d3, r3.shape[n3]), y3 = on(v2);
      return g2 = g2.transpose(y3);
    } };
  }).reshape(a3.outputShape);
} });
var Fl = ln({ unsortedSegmentSum_: function(t3, e3, n3) {
  var r3 = Ye(t3, "x", "unsortedSegmentSum"), o3 = Ye(e3, "segmentIds", "unsortedSegmentSum", "int32");
  return d(b(n3), function() {
    return "numSegments must be of dtype int";
  }), At.runKernel(function(t4, e4) {
    var a3 = t4.unsortedSegmentSum(r3, o3, n3);
    return e4([o3]), a3;
  }, { $x: r3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $x: function() {
      return function(t5, e5) {
        for (var n5 = rl(e5, kn(e5)), r4 = Ol(t5, n5), o4 = zu(e5, vn(0, "int32")), a3 = r4.rank - o4.rank, i3 = 0; i3 < a3; ++i3) o4 = Zn(o4, i3 + 1);
        o4 = gl(o4, Cn(r4.shape, "bool"));
        var s3 = kn(r4);
        return wl(o4, r4, s3);
      }(t4, n4);
    } };
  });
} });
var Ml = ln({ basicLSTMCell_: function(t3, e3, n3, r3, o3, a3) {
  var i3 = Ye(t3, "forgetBias", "basicLSTMCell"), s3 = Ye(e3, "lstmKernel", "basicLSTMCell"), u3 = Ye(n3, "lstmBias", "basicLSTMCell"), l3 = Ye(r3, "data", "basicLSTMCell"), c3 = Ye(o3, "c", "basicLSTMCell"), h3 = Ye(a3, "h", "basicLSTMCell"), p3 = l3.concat(h3, 1).matMul(s3).add(u3), f3 = p3.shape[0], d3 = p3.shape[1] / 4, v2 = [f3, d3], m3 = p3.slice([0, 0], v2), g2 = p3.slice([0, d3], v2), y3 = p3.slice([0, 2 * d3], v2), x3 = p3.slice([0, 3 * d3], v2), b3 = m3.sigmoid().mulStrict(g2.tanh()).addStrict(c3.mulStrict(i3.add(y3).sigmoid())), w3 = b3.tanh().mulStrict(x3.sigmoid());
  return [b3, w3];
} });
var Bl = ln({ multiRNNCell_: function(t3, e3, n3, r3) {
  for (var o3 = Ye(e3, "data", "multiRNNCell"), a3 = Qe(n3, "c", "multiRNNCell"), i3 = Qe(r3, "h", "multiRNNCell"), s3 = o3, u3 = [], l3 = 0; l3 < t3.length; l3++) {
    var c3 = t3[l3](s3, a3[l3], i3[l3]);
    u3.push(c3[0]), u3.push(c3[1]), s3 = c3[1];
  }
  var h3 = [], p3 = [];
  for (l3 = 0; l3 < u3.length; l3 += 2) h3.push(u3[l3]), p3.push(u3[l3 + 1]);
  return [h3, p3];
} });
var Pl = ln({ movingAverage_: function(t3, e3, n3, r3, o3) {
  void 0 === o3 && (o3 = true);
  var a3 = Ye(t3, "v", "movingAverage"), i3 = Ye(e3, "x", "movingAverage"), s3 = Ye(n3, "decay", "movingAverage");
  Et(a3, i3), d(x(a3.shape, i3.shape), function() {
    return "Shape mismatch in v and x";
  });
  var u3 = vn(1), l3 = u3.sub(s3), c3 = i3.sub(a3).mul(l3);
  if (o3) {
    d(null != r3, function() {
      return "When using zeroDebias: true, step is required.";
    });
    var h3 = Ye(r3, "step", "movingAverage");
    c3 = c3.div(u3.sub(hl(s3, h3)));
  }
  return a3.add(c3);
} });
var Ll = ln({ stridedSlice_: function(t3, e3, n3, r3, o3, a3, i3, s3, u3) {
  if (void 0 === o3 && (o3 = 0), void 0 === a3 && (a3 = 0), void 0 === i3 && (i3 = 0), void 0 === s3 && (s3 = 0), void 0 === u3 && (u3 = 0), 0 !== i3) throw new Error("ellipsis mask is not yet supported");
  if (0 !== s3) throw new Error("new axis mask is not yet supported");
  var l3 = Ye(t3, "x", "stridedSlice");
  if (r3.every(function(t4) {
    return 1 === t4;
  })) {
    var c3 = Ar(l3.shape, e3, n3, r3, o3, a3, i3, s3, u3), h3 = c3[0], p3 = c3[1], f3 = c3[2], d3 = p3.filter(function(t4, e4) {
      return -1 === f3.indexOf(e4);
    });
    return wu(l3, h3, p3).reshape(d3);
  }
  return At.runKernel(function(t4) {
    return t4.stridedSlice(l3, e3, n3, r3, o3, a3, i3, s3, u3);
  }, { $x: l3 });
} });
var Wl = ln({ topk_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = 1), void 0 === n3 && (n3 = true);
  var r3 = Ye(t3, "x", "topk");
  if (0 === r3.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
  var o3 = r3.shape[r3.shape.length - 1];
  if (e3 > o3) throw new Error("'k' passed to topk() must be <= the last dimension (" + o3 + ") but got " + e3);
  var a3 = At.runKernel(function(t4) {
    return t4.topk(r3, e3, n3);
  }, { $x: r3 });
  return { values: a3[0], indices: a3[1] };
} });
var Ul = ln({ scatterND_: function(t3, e3, n3) {
  var r3 = Ye(t3, "indices", "scatterND", "int32"), o3 = Ye(e3, "updates", "scatterND");
  return Nr(o3, r3, n3), At.runKernel(function(t4) {
    return t4.scatterND(r3, o3, n3);
  }, { $indices: r3, $updates: o3 });
} });
var zl = ln({ fft_: function(t3) {
  d("complex64" === t3.dtype, function() {
    return "The dtype for tf.spectral.fft() must be complex64 but got " + t3.dtype + ".";
  });
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3, r3 = t3.as2D(n3, e3);
  return At.runKernel(function(t4) {
    return t4.fft(r3);
  }, { input: t3 }).reshape(t3.shape);
} });
var Vl = ln({ ifft_: function(t3) {
  d("complex64" === t3.dtype, function() {
    return "The dtype for tf.spectral.ifft() must be complex64 but got " + t3.dtype + ".";
  });
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3, r3 = t3.as2D(n3, e3);
  return At.runKernel(function(t4) {
    return t4.ifft(r3);
  }, { input: t3 }).reshape(t3.shape);
} });
var Gl = ln({ rfft_: function(t3, e3) {
  d("float32" === t3.dtype, function() {
    return "The dtype for rfft() must be real value but got " + t3.dtype;
  });
  var n3, r3 = t3.shape[t3.shape.length - 1], o3 = t3.size / r3;
  if (null != e3 && e3 < r3) {
    var a3 = t3.shape.map(function(t4) {
      return 0;
    }), i3 = t3.shape.map(function(t4) {
      return t4;
    });
    i3[t3.shape.length - 1] = e3, n3 = t3.slice(a3, i3), r3 = e3;
  } else if (null != e3 && e3 > r3) {
    var s3 = t3.shape.map(function(t4) {
      return t4;
    });
    s3[t3.shape.length - 1] = e3 - r3, n3 = t3.concat(En(s3), t3.shape.length - 1), r3 = e3;
  } else n3 = t3;
  var u3 = n3.zerosLike(), l3 = cn(n3, u3).as2D(o3, r3), c3 = zl(l3), h3 = Math.floor(r3 / 2) + 1, p3 = hn(c3), f3 = pn(c3), v2 = p3.split([h3, r3 - h3], p3.shape.length - 1), m3 = f3.split([h3, r3 - h3], f3.shape.length - 1), g2 = n3.shape.slice();
  return g2[n3.shape.length - 1] = h3, cn(v2[0], m3[0]).reshape(g2);
} });
var ql = ln({ irfft_: function(t3) {
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3;
  if (e3 <= 2) {
    var r3 = t3.as2D(n3, e3), o3 = Vl(r3);
    return hn(o3);
  }
  var a3 = [n3, 2 * (e3 - 1)], i3 = hn(t3).as2D(n3, e3), s3 = pn(t3).as2D(n3, e3), u3 = i3.slice([0, 1], [n3, e3 - 2]).reverse(1), l3 = s3.slice([0, 1], [n3, e3 - 2]).reverse(1).mul(vn(-1)), c3 = i3.concat(u3, 1), h3 = s3.concat(l3, 1);
  return r3 = cn(c3, h3).as2D(a3[0], a3[1]), o3 = Vl(r3), hn(o3);
} });
var Hl = Object.freeze({ fft: zl, ifft: Vl, rfft: Gl, irfft: ql });
var $l = ln({ sparseToDense_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = 0);
  var o3 = Ye(t3, "sparseIndices", "sparseToDense", "int32"), a3 = Ye(e3, "sparseValues", "sparseToDense"), i3 = Ye(r3, "defaultValue", "sparseToDense", a3.dtype);
  return function(t4, e4, n4, r4) {
    if ("int32" !== t4.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + t4.dtype + ".");
    if (t4.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + t4.shape + ".");
    var o4 = t4.rank > 0 ? t4.shape[0] : 1, a4 = t4.rank > 1 ? t4.shape[1] : 1;
    if (n4.length !== a4) throw new Error("outputShape has incorrect number of elements:, " + n4.length + ", should be: " + a4 + ".");
    var i4 = e4.size;
    if (0 !== e4.rank && (1 !== e4.rank || i4 !== o4)) throw new Error("sparseValues has incorrect shape " + e4.shape + ", should be [] or [" + o4 + "]");
    if (e4.dtype !== r4.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
  }(o3, a3, n3, i3), At.runKernel(function(t4) {
    return t4.sparseToDense(o3, a3, n3, i3);
  }, { $sparseIndices: o3, $sparseValues: a3, $defaultValue: i3 });
} });
var jl = ln({ gatherND_: function(t3, e3) {
  var n3 = Ye(e3, "indices", "gatherND", "int32"), r3 = Ye(t3, "x", "gatherND");
  return At.runKernel(function(t4) {
    return t4.gatherND(r3, n3);
  }, { $x: r3, $indices: n3 });
} });
var Kl = ln({ dropout_: function(t3, e3, n3, r3) {
  if (null != n3 && !x(t3.shape, n3)) throw new Error("Non-default noise shape is not implemented yet: " + JSON.stringify(n3));
  var o3 = cr(t3.shape, 0, 1, "float32", r3).greater(e3);
  return o3 = o3.div(vl(1, e3)), t3.mul(o3);
} });
function Xl(t3, e3, n3) {
  for (var r3 = 1 - t3 % 2, o3 = new Float32Array(t3), a3 = 0; a3 < t3; ++a3) {
    var i3 = 2 * Math.PI * a3 / (t3 + r3 - 1);
    o3[a3] = e3 - n3 * Math.cos(i3);
  }
  return mn(o3, "float32");
}
var Yl;
var Ql = ln({ hannWindow_: function(t3) {
  return Xl(t3, 0.5, 0.5);
} });
var Jl = ln({ hammingWindow_: function(t3) {
  return Xl(t3, 0.54, 0.46);
} });
var Zl = ln({ frame_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = 0);
  for (var a3 = 0, i3 = []; a3 + e3 <= t3.size; ) i3.push(wu(t3, a3, e3)), a3 += n3;
  if (r3) {
    var s3 = a3 + e3 - t3.size, u3 = An([wu(t3, a3, e3 - s3), Rn([s3], o3)]);
    i3.push(u3);
  }
  return 0 === i3.length ? gn([], [0, e3]) : An(i3).as2D(i3.length, e3);
} });
var tc = Object.freeze({ hannWindow: Ql, hammingWindow: Jl, frame: Zl });
!function(t3) {
  t3[t3.NONE = 0] = "NONE", t3[t3.MEAN = 1] = "MEAN", t3[t3.SUM = 2] = "SUM", t3[t3.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
}(Yl || (Yl = {}));
var ec = ln({ absoluteDifference_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var o3 = Ye(t3, "labels", "absoluteDifference"), a3 = Ye(e3, "predictions", "absoluteDifference"), i3 = null;
  null != n3 && (i3 = Ye(n3, "weights", "absoluteDifference")), v(o3.shape, a3.shape, "Error in absoluteDifference: ");
  var s3 = o3.sub(a3).abs();
  return nc(s3, i3, r3);
} });
var nc = ln({ computeWeightedLoss_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var r3 = Ye(t3, "losses", "computeWeightedLoss"), o3 = null;
  null != e3 && (o3 = Ye(e3, "weights", "computeWeightedLoss"));
  var a3 = null == o3 ? r3 : r3.mul(o3);
  if (n3 === Yl.NONE) return a3;
  if (n3 === Yl.SUM) return a3.sum();
  if (n3 === Yl.MEAN) {
    if (null == o3) return a3.mean();
    var i3 = r3.size / o3.size, s3 = a3.sum().div(o3.sum());
    return i3 > 1 ? s3.div(vn(i3)) : s3;
  }
  if (n3 === Yl.SUM_BY_NONZERO_WEIGHTS) {
    if (null == o3) return a3.sum().div(vn(r3.size));
    var u3 = o3.mul(Cn(r3.shape)).notEqual(vn(0)).sum().toFloat();
    return a3.sum().div(u3);
  }
  throw Error("Unknown reduction: " + n3);
} });
var rc = ln({ cosineDistance_: function(t3, e3, n3, r3, o3) {
  void 0 === o3 && (o3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var a3 = Ye(t3, "labels", "cosineDistance"), i3 = Ye(e3, "predictions", "cosineDistance"), s3 = null;
  null != r3 && (s3 = Ye(r3, "weights", "cosineDistance")), v(a3.shape, i3.shape, "Error in cosineDistance: ");
  var u3 = vn(1).sub(a3.mul(i3).sum(n3, true));
  return nc(u3, s3, o3);
} });
var oc = ln({ hingeLoss_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var o3 = Ye(t3, "labels", "hingeLoss"), a3 = Ye(e3, "predictions", "hingeLoss"), i3 = null;
  null != n3 && (i3 = Ye(n3, "weights", "hingeLoss")), v(o3.shape, a3.shape, "Error in hingeLoss: ");
  var s3 = vn(1);
  o3 = vn(2).mul(o3).sub(s3);
  var u3 = s3.sub(o3.mul(a3)).relu();
  return nc(u3, i3, r3);
} });
var ac = ln({ huberLoss_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 1), void 0 === o3 && (o3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var a3 = Ye(t3, "labels", "huberLoss"), i3 = Ye(e3, "predictions", "huberLoss"), s3 = null;
  null != n3 && (s3 = Ye(n3, "weights", "huberLoss")), v(a3.shape, i3.shape, "Error in huberLoss: ");
  var u3 = vn(r3), l3 = i3.sub(a3).abs(), c3 = al(l3, u3), h3 = l3.sub(c3), p3 = vn(0.5).mul(c3.square()).add(u3.mul(h3));
  return nc(p3, s3, o3);
} });
var ic = ln({ logLoss_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 1e-7), void 0 === o3 && (o3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var a3 = Ye(t3, "labels", "logLoss"), i3 = Ye(e3, "predictions", "logLoss"), s3 = null;
  null != n3 && (s3 = Ye(n3, "weights", "logLoss")), v(a3.shape, i3.shape, "Error in logLoss: ");
  var u3 = vn(1), l3 = vn(r3), c3 = a3.mul(i3.add(l3).log()).neg().sub(u3.sub(a3).mul(u3.sub(i3).add(l3).log()));
  return nc(c3, s3, o3);
} });
var sc = ln({ meanSquaredError_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var o3 = Ye(t3, "labels", "meanSquaredError"), a3 = Ye(e3, "predictions", "meanSquaredError"), i3 = null;
  null != n3 && (i3 = Ye(n3, "weights", "meanSquaredError")), v(o3.shape, a3.shape, "Error in meanSquaredError: ");
  var s3 = o3.squaredDifference(a3);
  return nc(s3, i3, r3);
} });
var uc = ln({ sigmoidCrossEntropy_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var a3 = Ye(t3, "multiClassLabels", "sigmoidCrossEntropy"), i3 = Ye(e3, "logits", "sigmoidCrossEntropy"), s3 = null;
  if (null != n3 && (s3 = Ye(n3, "weights", "sigmoidCrossEntropy")), v(a3.shape, i3.shape, "Error in sigmoidCrossEntropy: "), r3 > 0) {
    var u3 = vn(r3), l3 = vn(1), c3 = vn(0.5);
    a3 = a3.mul(l3.sub(u3)).add(c3.mul(u3));
  }
  var h3 = function(t4, e4) {
    var n4 = Ye(t4, "labels", "sigmoidCrossEntropyWithLogits"), r4 = Ye(e4, "logits", "sigmoidCrossEntropyWithLogits");
    v(n4.shape, r4.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    var o4 = r4.relu(), a4 = r4.mul(n4), i4 = r4.abs().neg().exp().log1p();
    return o4.sub(a4).add(i4);
  }(a3, i3);
  return nc(h3, s3, o3);
} });
var lc = ln({ softmaxCrossEntropy_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = Yl.SUM_BY_NONZERO_WEIGHTS);
  var a3 = Ye(t3, "onehotLabels", "softmaxCrossEntropy"), i3 = Ye(e3, "logits", "softmaxCrossEntropy"), s3 = null;
  if (null != n3 && (s3 = Ye(n3, "weights", "softmaxCrossEntropy")), v(a3.shape, i3.shape, "Error in softmaxCrossEntropy: "), r3 > 0) {
    var u3 = vn(r3), l3 = vn(1), c3 = vn(a3.shape[1]);
    a3 = a3.mul(l3.sub(u3)).add(u3.div(c3));
  }
  var h3 = function(t4, e4, n4) {
    if (void 0 === n4 && (n4 = -1), -1 === n4 && (n4 = e4.rank - 1), n4 !== e4.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + e4.rank + " and dim was " + n4);
    return Wr(function(t5, e5, r4) {
      var o4 = e5.logSumExp([n4], true), a4 = e5.toFloat().sub(o4);
      return r4([t5, a4]), { value: a4.mul(t5).neg().sum([n4]), gradFunc: function(t6, e6) {
        var r5 = e6[0], o5 = e6[1], a5 = en(t6.shape, [n4]);
        return [t6.reshape(a5).mul(r5.toFloat().sub(o5.exp())), t6.reshape(a5).mul(o5.exp().sub(r5.toFloat()))];
      } };
    })(t4, e4);
  }(a3, i3);
  return nc(h3, s3, o3);
} });
var cc = Object.freeze({ get Reduction() {
  return Yl;
}, absoluteDifference: ec, computeWeightedLoss: nc, cosineDistance: rc, hingeLoss: oc, huberLoss: ac, logLoss: ic, meanSquaredError: sc, sigmoidCrossEntropy: uc, softmaxCrossEntropy: lc });
function hc(t3, e3) {
  return void 0 === e3 && (e3 = false), At.tidy(function() {
    if (2 !== t3.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + t3.shape.length + "D Tensor.");
    for (var n3 = t3.shape[0], r3 = t3.shape[1], o3 = tr(n3), a3 = t3.clone(), i3 = gn([[1]], [1, 1]), s3 = i3.clone(), u3 = n3 >= r3 ? r3 : n3, l3 = function(t4) {
      var e4, u4 = a3, l4 = s3, c4 = o3;
      e4 = At.tidy(function() {
        var e5 = a3.slice([t4, t4], [n3 - t4, 1]), u5 = e5.norm(), l5 = a3.slice([t4, t4], [1, 1]), c5 = l5.sign().neg(), h3 = l5.sub(c5.mul(u5)), p3 = e5.div(h3);
        s3 = 1 === p3.shape[0] ? i3.clone() : i3.concat(p3.slice([1, 0], [p3.shape[0] - 1, p3.shape[1]]), 0);
        var f3 = c5.matMul(h3).div(u5).neg(), d3 = a3.slice([t4, 0], [n3 - t4, r3]), v2 = f3.mul(s3);
        a3 = 0 === t4 ? d3.sub(v2.matMul(s3.transpose().matMul(d3))) : a3.slice([0, 0], [t4, r3]).concat(d3.sub(v2.matMul(s3.transpose().matMul(d3))), 0);
        var m3 = o3.slice([0, t4], [n3, o3.shape[1] - t4]);
        return o3 = 0 === t4 ? m3.sub(m3.matMul(s3).matMul(v2.transpose())) : o3.slice([0, 0], [n3, t4]).concat(m3.sub(m3.matMul(s3).matMul(v2.transpose())), 1), [s3, a3, o3];
      }), s3 = e4[0], a3 = e4[1], o3 = e4[2], Me([u4, l4, c4]);
    }, c3 = 0; c3 < u3; ++c3) l3(c3);
    return !e3 && n3 > r3 && (o3 = o3.slice([0, 0], [n3, r3]), a3 = a3.slice([0, 0], [r3, r3])), [o3, a3];
  });
}
var pc = ln({ gramSchmidt_: function(t3) {
  var e3;
  if (Array.isArray(t3)) {
    e3 = false, d(null != t3 && t3.length > 0, function() {
      return "Gram-Schmidt process: input must not be null, undefined, or empty";
    });
    for (var n3 = t3[0].shape[0], r3 = function(e4) {
      d(t3[e4].shape[0] === n3, function() {
        return "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + t3[e4].shape[0] + " vs. " + n3 + ")";
      });
    }, o3 = 1; o3 < t3.length; ++o3) r3(o3);
  } else e3 = true, t3 = Fn(t3, t3.shape[0], 0).map(function(t4) {
    return fr(t4, [0]);
  });
  d(t3.length <= t3[0].shape[0], function() {
    return "Gram-Schmidt: Number of vectors (" + t3.length + ") exceeds number of dimensions (" + t3[0].shape[0] + ").";
  });
  var a3 = [], i3 = t3, s3 = function(t4) {
    a3.push(At.tidy(function() {
      var e4 = i3[t4];
      if (t4 > 0) for (var n4 = 0; n4 < t4; ++n4) {
        var r4 = Bu(a3[n4].mulStrict(e4)).mul(a3[n4]);
        e4 = e4.sub(r4);
      }
      return e4.div(Tl(e4, "euclidean"));
    }));
  };
  for (o3 = 0; o3 < t3.length; ++o3) s3(o3);
  return e3 ? dr(a3, 0) : a3;
} });
var fc = ln({ qr_: function(t3, e3) {
  if (void 0 === e3 && (e3 = false), t3.rank < 2) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + t3.rank);
  if (2 === t3.rank) return hc(t3, e3);
  var n3 = t3.shape.slice(0, t3.shape.length - 2).reduce(function(t4, e4) {
    return t4 * e4;
  }), r3 = gr(t3.reshape([n3, t3.shape[t3.shape.length - 2], t3.shape[t3.shape.length - 1]]), 0), o3 = [], a3 = [];
  return r3.forEach(function(t4) {
    var n4 = hc(t4, e3), r4 = n4[0], i3 = n4[1];
    o3.push(r4), a3.push(i3);
  }), [dr(o3, 0).reshape(t3.shape), dr(a3, 0).reshape(t3.shape)];
} });
var dc = Object.freeze({ gramSchmidt: pc, qr: fc });
function vc(t3, e3, n3, r3, o3) {
  null == r3 && (r3 = 0.5), null == o3 && (o3 = Number.NEGATIVE_INFINITY);
  var a3 = t3.shape[0];
  return n3 = Math.min(n3, a3), d(0 <= r3 && r3 <= 1, function() {
    return "iouThreshold must be in [0, 1], but was '" + r3 + "'";
  }), d(2 === t3.rank, function() {
    return "boxes must be a 2D tensor, but was of rank '" + t3.rank + "'";
  }), d(4 === t3.shape[1], function() {
    return "boxes must have 4 columns, but 2nd dimension was " + t3.shape[1];
  }), d(1 === e3.rank, function() {
    return "scores must be a 1D tensor";
  }), d(e3.shape[0] === a3, function() {
    return "scores has incompatible shape with boxes. Expected " + a3 + ", but was " + e3.shape[0];
  }), { maxOutputSize: n3, iouThreshold: r3, scoreThreshold: o3 };
}
var mc = ln({ resizeBilinear_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "images", "resizeBilinear");
  d(3 === r3.rank || 4 === r3.rank, function() {
    return "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r3.rank + ".";
  }), d(2 === e3.length, function() {
    return "Error in resizeBilinear: new shape must 2D, but got shape " + e3 + ".";
  });
  var o3 = r3, a3 = false;
  3 === r3.rank && (a3 = true, o3 = r3.as4D(1, r3.shape[0], r3.shape[1], r3.shape[2]));
  var i3 = e3[0], s3 = e3[1], u3 = At.runKernel(function(t4, e4) {
    return e4([o3]), t4.resizeBilinear(o3, i3, s3, n3);
  }, { batchImages: o3 }, function(t4, e4) {
    return { batchImages: function() {
      return At.runKernel(function(r4) {
        return r4.resizeBilinearBackprop(t4, e4[0], n3);
      }, {});
    } };
  });
  return a3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var gc = ln({ resizeNearestNeighbor_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = false);
  var r3 = Ye(t3, "images", "resizeNearestNeighbor");
  d(3 === r3.rank || 4 === r3.rank, function() {
    return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r3.rank + ".";
  }), d(2 === e3.length, function() {
    return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + e3 + ".";
  }), d("float32" === r3.dtype || "int32" === r3.dtype, function() {
    return "`images` must have `int32` or `float32` as dtype";
  });
  var o3 = r3, a3 = false;
  3 === r3.rank && (a3 = true, o3 = r3.as4D(1, r3.shape[0], r3.shape[1], r3.shape[2]));
  var i3 = e3[0], s3 = e3[1], u3 = At.runKernel(function(t4, e4) {
    return e4([o3]), t4.resizeNearestNeighbor(o3, i3, s3, n3);
  }, { batchImages: o3 }, function(t4, e4) {
    return { batchImages: function() {
      return At.runKernel(function(r4) {
        return r4.resizeNearestNeighborBackprop(t4, e4[0], n3);
      }, {});
    } };
  });
  return a3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var yc = ln({ nonMaxSuppression_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0.5), void 0 === o3 && (o3 = Number.NEGATIVE_INFINITY);
  var a3 = Ye(t3, "boxes", "nonMaxSuppression"), i3 = Ye(e3, "scores", "nonMaxSuppression"), s3 = vc(a3, i3, n3, r3, o3);
  return n3 = s3.maxOutputSize, r3 = s3.iouThreshold, o3 = s3.scoreThreshold, At.runKernel(function(t4) {
    return t4.nonMaxSuppression(a3, i3, n3, r3, o3);
  }, { $boxes: a3 });
} });
var xc = function(t3, e3, n3, a3, i3) {
  return void 0 === a3 && (a3 = 0.5), void 0 === i3 && (i3 = Number.NEGATIVE_INFINITY), r(this, void 0, void 0, function() {
    var r3, s3, u3, l3, c3, h3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          return r3 = Ye(t3, "boxes", "nonMaxSuppressionAsync"), s3 = Ye(e3, "scores", "nonMaxSuppressionAsync"), u3 = vc(r3, s3, n3, a3, i3), n3 = u3.maxOutputSize, a3 = u3.iouThreshold, i3 = u3.scoreThreshold, [4, r3.data()];
        case 1:
          return l3 = o3.sent(), [4, s3.data()];
        case 2:
          return c3 = o3.sent(), h3 = po(l3, c3, n3, a3, i3), r3 !== t3 && r3.dispose(), s3 !== e3 && s3.dispose(), [2, h3];
      }
    });
  });
};
var bc = ln({ cropAndResize_: function(t3, e3, n3, r3, o3, a3) {
  var i3 = Ye(t3, "image", "cropAndResize", "float32"), s3 = Ye(e3, "boxes", "cropAndResize", "float32"), u3 = Ye(n3, "boxInd", "cropAndResize", "int32");
  o3 = o3 || "bilinear", a3 = a3 || 0;
  var l3 = s3.shape[0];
  return d(4 === i3.rank, function() {
    return "Error in cropAndResize: image must be rank 4,but got rank " + i3.rank + ".";
  }), d(2 === s3.rank && 4 === s3.shape[1], function() {
    return "Error in cropAndResize: boxes must be have size [" + l3 + ",4] but had shape " + s3.shape + ".";
  }), d(1 === u3.rank && u3.shape[0] === l3, function() {
    return "Error in cropAndResize: boxInd must be have size [" + l3 + "] but had shape " + s3.shape + ".";
  }), d(2 === r3.length, function() {
    return "Error in cropAndResize: cropSize must be of length 2, but got length " + r3.length + ".";
  }), d(r3[0] >= 1 && r3[1] >= 1, function() {
    return "cropSize must be atleast [1,1], but was " + r3;
  }), d("bilinear" === o3 || "nearest" === o3, function() {
    return "method must be bilinear or nearest, but was " + o3;
  }), At.runKernel(function(t4, e4) {
    return t4.cropAndResize(i3, s3, u3, r3, o3, a3);
  }, { $image: i3, $boxes: s3 });
} });
var wc = Object.freeze({ resizeBilinear: mc, resizeNearestNeighbor: gc, nonMaxSuppression: yc, nonMaxSuppressionAsync: xc, cropAndResize: bc });
var Cc = ln({ matMul_: function(t3, e3, n3, r3, o3, a3) {
  var i3;
  void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false), void 0 === a3 && (a3 = "linear");
  var s3 = Ye(t3, "a", "fused matMul"), u3 = Ye(e3, "b", "fused matMul");
  i3 = Ct(s3, u3), s3 = i3[0], u3 = i3[1];
  var l3 = n3 ? s3.shape[s3.rank - 2] : s3.shape[s3.rank - 1], c3 = r3 ? u3.shape[u3.rank - 1] : u3.shape[u3.rank - 2], h3 = n3 ? s3.shape[s3.rank - 1] : s3.shape[s3.rank - 2], p3 = r3 ? u3.shape[u3.rank - 2] : u3.shape[u3.rank - 1], f3 = s3.shape.slice(0, -2), v2 = u3.shape.slice(0, -2), m3 = y(f3), g2 = y(v2);
  d(s3.rank >= 2 && u3.rank >= 2 && s3.rank === u3.rank, function() {
    return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + s3.rank + " and " + u3.rank + ".";
  }), d(x(f3, v2), function() {
    return "Error in fused matMul: outer dimensions (" + f3 + ") and (" + v2 + ") of Tensors with shapes " + s3.shape + " and " + u3.shape + " must match.";
  }), d(l3 === c3, function() {
    return "Error in fused matMul: inner shapes (" + l3 + ") and (" + c3 + ") of Tensors with shapes " + s3.shape + " and " + u3.shape + " and transposeA=" + n3 + " and transposeB=" + r3 + " must match.";
  });
  var b3, w3 = s3.shape.slice(0, -2).concat([h3, p3]), C3 = n3 ? s3.as3D(m3, l3, h3) : s3.as3D(m3, h3, l3), E3 = r3 ? u3.as3D(g2, p3, c3) : u3.as3D(g2, c3, p3);
  null != o3 && jr(w3, (b3 = Ct(b3 = Ye(o3, "bias", "fused matMul"), s3)[0]).shape);
  var R3 = { $a: C3, $b: E3 };
  return null != o3 && (R3.$bias = b3), At.runKernel(function(t4, e4) {
    var o4 = t4.fusedBatchMatMul(C3, E3, n3, r3, b3, a3);
    return e4([C3, E3, o4]), o4;
  }, R3, function(t4, e4) {
    var i4, s4 = e4[0], u4 = e4[1], l4 = e4[2];
    if (null == a3 || "linear" === a3) i4 = t4;
    else {
      if ("relu" !== a3) throw new Error("Gradient for activation " + a3 + " has not been implemented yet.");
      i4 = t4.mul(l4.step());
    }
    var c4 = {};
    return null != o3 && (c4 = { $bias: function() {
      var t5 = i4, e5 = $r(b3.shape, i4.shape);
      return e5.length > 0 && (t5 = t5.sum(e5)), t5.reshape(b3.shape);
    } }), n3 || r3 ? !n3 && r3 ? Object.assign({ $a: function() {
      return i4.matMul(u4, false, false);
    }, $b: function() {
      return i4.matMul(s4, true, false);
    } }, c4) : n3 && !r3 ? Object.assign({ $a: function() {
      return u4.matMul(i4, false, true);
    }, $b: function() {
      return s4.matMul(i4, false, false);
    } }, c4) : Object.assign({ $a: function() {
      return u4.matMul(i4, true, true);
    }, $b: function() {
      return i4.matMul(s4, true, true);
    } }, c4) : Object.assign({ $a: function() {
      return i4.matMul(u4, false, true);
    }, $b: function() {
      return s4.matMul(i4, true, false);
    } }, c4);
  }).reshape(w3);
} });
var Ec = Object.freeze({ matMul: Cc });
var Rc = Object.freeze({ image: wc, linalg: dc, losses: cc, spectral: Hl, fused: Ec, signal: tc, op: ln, batchNormalization2d: qs, batchNormalization3d: Hs, batchNormalization4d: $s, batchNormalization: js, batchNorm: Ks, batchNorm2d: Xs, batchNorm3d: Ys, batchNorm4d: Qs, complex: cn, real: hn, imag: pn, concat: An, concat1d: Tn, concat2d: Dn, concat3d: _n, concat4d: On, split: Fn, conv1d: eu, conv2d: nu, conv3d: ru, conv2dDerFilter: ou, depthwiseConv2d: au, separableConv2d: iu, conv2dTranspose: su, matMul: uu, dot: lu, outerProduct: cu, reverse: hu, reverse1d: pu, reverse2d: fu, reverse3d: du, reverse4d: vu, maxPool: yu, avgPool: xu, pool: bu, slice: wu, slice1d: Cu, slice2d: Eu, slice3d: Ru, slice4d: Iu, abs: rs, acos: os, acosh: as, asin: is, asinh: ss, atan: us, atanh: ls, ceil: cs, clipByValue: hs, cos: ps, cosh: fs, erf: ds, exp: vs, expm1: ms, floor: gs, log: ys, log1p: xs, logSigmoid: bs, neg: ws, reciprocal: Cs, round: Es, rsqrt: Rs, sigmoid: Is, sign: Ss, isNaN: Ns, isInf: ks, isFinite: As, sin: Ts, sinh: Ds, softplus: _s, sqrt: Os, square: Fs, step: Ms, tan: Bs, tanh: Ps, all: Nu, any: ku, argMax: Au, argMin: Tu, logSumExp: Du, max: _u, mean: Ou, min: Fu, moments: Mu, sum: Bu, prod: Pu, equal: Lu, equalStrict: Wu, greater: Uu, greaterEqual: zu, greaterEqualStrict: Vu, greaterStrict: Gu, less: qu, lessEqual: Hu, lessEqualStrict: $u, lessStrict: ju, notEqual: Ku, notEqualStrict: Xu, add: Yu, addN: Qu, addStrict: Ju, atan2: Zu, div: tl, divStrict: el, floorDiv: nl, maximum: rl, maximumStrict: ol, minimum: al, minimumStrict: il, mod: sl, modStrict: ul, mul: ll, mulStrict: cl, pow: hl, powStrict: pl, squaredDifference: fl, squaredDifferenceStrict: dl, sub: vl, subStrict: ml, elu: El, leakyRelu: Rl, prelu: Il, relu: Sl, selu: Nl, logicalAnd: gl, logicalNot: yl, logicalOr: xl, logicalXor: bl, where: wl, whereAsync: Cl, buffer: $n, print: jn, batchToSpaceND: Kn, cast: Xn, clone: Yn, cumsum: Qn, depthToSpace: Jn, expandDims: Zn, eye: tr, multinomial: er, oneHot: nr, pad: rr, pad1d: or, pad2d: ar, pad3d: ir, pad4d: sr, rand: ur, randomNormal: lr, randomUniform: cr, reshape: hr, spaceToBatchND: pr, squeeze: fr, stack: dr, tile: vr, truncatedNormal: mr, unstack: gr, setdiff1dAsync: yr, fill: Rn, linspace: In, ones: Cn, range: Sn, scalar: vn, tensor: fn, tensor1d: mn, tensor2d: gn, tensor3d: yn, tensor4d: xn, tensor5d: bn, tensor6d: wn, zeros: En, onesLike: Nn, zerosLike: kn, transpose: kl, softmax: zr, logSoftmax: Vr, localResponseNormalization: Al, norm: Tl, gather: Ol, unsortedSegmentSum: Fl, basicLSTMCell: Ml, multiRNNCell: Bl, movingAverage: Pl, stridedSlice: Ll, topk: Wl, scatterND: Ul, fft: zl, ifft: Vl, rfft: Gl, irfft: ql, sparseToDense: $l, gatherND: jl, dropout: Kl, hannWindow: Ql, hammingWindow: Jl, frame: Zl });
var Ic = function() {
  function t3() {
    if (this.blockSize = 48, this.firstUse = true, s.get("IS_BROWSER")) {
      var t4 = function() {
        if ("undefined" != typeof OffscreenCanvas) return new OffscreenCanvas(300, 150);
        if ("undefined" != typeof document) return document.createElement("canvas");
        throw new Error("Cannot create a canvas in this context");
      }();
      this.fromPixels2DContext = t4.getContext("2d");
    }
    this.data = new Gr(this, At);
  }
  return t3.prototype.register = function(t4, e3, n3) {
    if (this.firstUse && (this.firstUse = false, s.get("IS_NODE") && je("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")), this.data.has(t4)) throw new Error("Data buffer is already registered");
    this.data.set(t4, { dtype: n3 });
  }, t3.prototype.write = function(t4, e3) {
    if (null == e3) throw new Error("MathBackendCPU.write(): values can not be null");
    this.data.get(t4).values = e3;
  }, t3.prototype.fromPixels = function(t4, e3) {
    if (null == t4) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
    var n3, r3;
    if (s.get("IS_NODE") && null == t4.getContext) throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");
    if (null != t4.getContext) n3 = t4.getContext("2d").getImageData(0, 0, t4.width, t4.height).data;
    else if (t4 instanceof ImageData || t4.data instanceof Uint8Array) n3 = t4.data;
    else {
      if (!(t4 instanceof HTMLImageElement || t4 instanceof HTMLVideoElement)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was " + t4.constructor.name);
      if (null == this.fromPixels2DContext) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
      this.fromPixels2DContext.canvas.width = t4.width, this.fromPixels2DContext.canvas.height = t4.height, this.fromPixels2DContext.drawImage(t4, 0, 0, t4.width, t4.height), n3 = this.fromPixels2DContext.getImageData(0, 0, t4.width, t4.height).data;
    }
    if (4 === e3) r3 = new Int32Array(n3);
    else {
      var o3 = t4.width * t4.height;
      r3 = new Int32Array(o3 * e3);
      for (var a3 = 0; a3 < o3; a3++) for (var i3 = 0; i3 < e3; ++i3) r3[a3 * e3 + i3] = n3[4 * a3 + i3];
    }
    return yn(r3, [t4.height, t4.width, e3], "int32");
  }, t3.prototype.read = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        return [2, this.readSync(t4)];
      });
    });
  }, t3.prototype.readSync = function(t4) {
    var e3 = this.data.get(t4), n3 = e3.dtype, r3 = e3.complexTensors;
    return "complex64" === n3 ? uo(this.readSync(r3.real.dataId), this.readSync(r3.imag.dataId)) : this.data.get(t4).values;
  }, t3.prototype.bufferSync = function(t4) {
    return $n(t4.shape, t4.dtype, this.readSync(t4.dataId));
  }, t3.prototype.disposeData = function(t4) {
    if (this.data.has(t4)) {
      var e3 = this.data.get(t4).complexTensors;
      null != e3 && (e3.real.dispose(), e3.imag.dispose()), this.data.delete(t4);
    }
  }, t3.prototype.time = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3;
      return o(this, function(n3) {
        return e3 = K(), t4(), [2, { kernelMs: K() - e3 }];
      });
    });
  }, t3.prototype.memory = function() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }, t3.prototype.complex = function(t4, e3) {
    var n3 = ht.make(t4.shape, {}, "complex64");
    return this.data.get(n3.dataId).complexTensors = { real: At.keep(t4.clone()), imag: At.keep(e3.clone()) }, n3;
  }, t3.prototype.real = function(t4) {
    return this.data.get(t4.dataId).complexTensors.real.clone();
  }, t3.prototype.imag = function(t4) {
    return this.data.get(t4.dataId).complexTensors.imag.clone();
  }, t3.prototype.assertNotComplex = function(t4, e3) {
    Array.isArray(t4) || (t4 = [t4]), t4.forEach(function(t5) {
      null != t5 && d("complex64" !== t5.dtype, function() {
        return e3 + " does not support complex64 tensors.";
      });
    });
  }, t3.prototype.slice = function(t4, e3, n3) {
    if (this.assertNotComplex(t4, "slice"), _r(t4.shape, e3, n3)) {
      var r3 = Or(e3, t4.strides), o3 = y(n3);
      return fn(this.readSync(t4.dataId).subarray(r3, r3 + o3), n3, t4.dtype);
    }
    for (var a3 = $n(n3, t4.dtype), i3 = this.bufferSync(t4), s3 = 0; s3 < a3.size; ++s3) {
      var u3 = a3.indexToLoc(s3).map(function(t5, n4) {
        return t5 + e3[n4];
      });
      a3.values[s3] = i3.get.apply(i3, u3);
    }
    return a3.toTensor();
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3, o3, a3, i3, s3, u3) {
    this.assertNotComplex(t4, "stridedSlice");
    var l3 = Ar(t4.shape, e3, n3, r3, o3, a3, i3, s3, u3), c3 = l3[0], h3 = l3[1], p3 = l3[2], f3 = h3.filter(function(t5, e4) {
      return -1 === p3.indexOf(e4);
    });
    if (f3.some(function(t5) {
      return 0 === t5;
    })) return fn([], f3);
    for (var d3 = $n(h3, t4.dtype), v2 = this.bufferSync(t4), m3 = 0; m3 < d3.size; m3++) {
      for (var g2 = d3.indexToLoc(m3), y3 = new Array(g2.length), x3 = 0; x3 < y3.length; x3++) y3[x3] = g2[x3] * r3[x3] + c3[x3];
      d3.set.apply(d3, [v2.get.apply(v2, y3)].concat(g2));
    }
    return d3.toTensor().reshape(f3);
  }, t3.prototype.unstack = function(t4, e3) {
    for (var n3 = t4.shape[e3], r3 = new Array(t4.rank - 1), o3 = 0, a3 = 0; a3 < t4.rank; a3++) a3 !== e3 && (r3[o3++] = t4.shape[a3]);
    var i3 = new Array(t4.rank).fill(0), s3 = t4.shape.slice();
    s3[e3] = 1;
    var u3 = new Array(n3);
    for (a3 = 0; a3 < u3.length; a3++) i3[e3] = a3, u3[a3] = this.slice(t4, i3, s3).reshape(r3);
    return u3;
  }, t3.prototype.reverse = function(t4, e3) {
    this.assertNotComplex(t4, "reverse");
    for (var n3 = $n(t4.shape, t4.dtype), r3 = this.bufferSync(t4), o3 = function(o4) {
      var a4 = n3.indexToLoc(o4), i3 = a4.slice();
      e3.forEach(function(e4) {
        return i3[e4] = t4.shape[e4] - 1 - i3[e4];
      }), n3.set.apply(n3, [r3.get.apply(r3, i3)].concat(a4));
    }, a3 = 0; a3 < n3.size; a3++) o3(a3);
    return n3.toTensor();
  }, t3.prototype.concat = function(t4, e3) {
    var n3 = this;
    this.assertNotComplex(t4, "concat");
    var r3 = t4.map(function(t5) {
      var n4 = y(t5.shape.slice(e3));
      return t5.as2D(-1, n4);
    }), o3 = un(r3.map(function(t5) {
      return t5.shape;
    }), 1), a3 = $n(o3, t4[0].dtype).values;
    if (1 === r3[0].shape[0]) {
      var i3 = 0;
      r3.forEach(function(t5) {
        a3.set(n3.readSync(t5.dataId), i3), i3 += t5.size;
      });
    } else {
      var s3 = 0;
      r3.forEach(function(t5) {
        for (var e4 = n3.readSync(t5.dataId), r4 = 0, i4 = 0; i4 < t5.shape[0]; ++i4) for (var u4 = i4 * o3[1] + s3, l3 = 0; l3 < t5.shape[1]; ++l3) a3[u4 + l3] = e4[r4++];
        s3 += t5.shape[1];
      });
    }
    var u3 = un(t4.map(function(t5) {
      return t5.shape;
    }), e3);
    return fn(a3, u3, t4[0].dtype);
  }, t3.prototype.neg = function(t4) {
    return this.assertNotComplex(t4, "neg"), this.multiply(vn(-1), t4);
  }, t3.prototype.add = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 + n3, imag: e4 + r3 };
    }) : this.broadcastedBinaryOp(t4, e3, bt(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 + e4;
    });
  }, t3.prototype.addN = function(t4) {
    var e3 = this;
    this.assertNotComplex(t4, "addN");
    for (var n3 = t4.map(function(t5) {
      return e3.readSync(t5.dataId);
    }), r3 = $n(t4[0].shape, t4[0].dtype), o3 = r3.values, a3 = 0; a3 < t4.length; a3++) for (var i3 = n3[a3], s3 = 0; s3 < o3.length; s3++) o3[s3] += i3[s3];
    return r3.toTensor();
  }, t3.prototype.subtract = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 - n3, imag: e4 - r3 };
    }) : this.broadcastedBinaryOp(t4, e3, bt(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 - e4;
    });
  }, t3.prototype.pow = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "pow"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.pow(t5, e4);
    });
  }, t3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    this.assertNotComplex([t4, e3], "matMul");
    for (var o3 = n3 ? t4.shape[1] : t4.shape[2], a3 = n3 ? t4.shape[2] : t4.shape[1], i3 = r3 ? e3.shape[1] : e3.shape[2], s3 = t4.shape[0], u3 = this.readSync(t4.dataId), l3 = this.readSync(e3.dataId), c3 = n3 ? [t4.strides[0], 1, t4.strides[1]] : [t4.strides[0], t4.strides[1], 1], h3 = c3[0], p3 = c3[1], f3 = c3[2], d3 = r3 ? [1, e3.strides[1], e3.strides[0]] : [e3.strides[1], 1, e3.strides[0]], v2 = d3[0], m3 = d3[1], g2 = d3[2], y3 = a3 * i3, x3 = $n([s3, a3, i3], t4.dtype), b3 = x3.values, w3 = this.blockSize, C3 = 0; C3 < s3; C3++) for (var E3 = 0; E3 < a3; E3 += w3) for (var R3 = 0; R3 < i3; R3 += w3) for (var I3 = 0; I3 < o3; I3 += w3) for (var S3 = Math.min(E3 + w3, a3), N3 = Math.min(R3 + w3, i3), k3 = Math.min(I3 + w3, o3), A3 = E3; A3 < S3; A3++) for (var T3 = R3; T3 < N3; T3++) {
      for (var D3 = 0, _3 = I3; _3 < k3; _3++) D3 += u3[C3 * h3 + A3 * p3 + _3 * f3] * l3[_3 * v2 + T3 * m3 + C3 * g2];
      b3[C3 * y3 + (A3 * i3 + T3)] += D3;
    }
    return x3.toTensor();
  }, t3.prototype.fusedBatchMatMul = function(t4, e3, n3, r3, o3, a3) {
    var i3 = this.batchMatMul(t4, e3, n3, r3);
    return o3 && (i3 = this.add(i3, o3)), a3 && (i3 = function(t5, e4, n4) {
      if ("linear" === e4) return t5.linear(n4);
      if ("relu" === e4) return t5.relu(n4);
      throw new Error("Activation " + e4 + " has not been implemented for the CPU backend.");
    }(this, a3, i3)), i3;
  }, t3.prototype.multiply = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 * n3 - e4 * r3, imag: t5 * r3 + e4 * n3 };
    }) : this.broadcastedBinaryOp(t4, e3, bt(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 * e4;
    });
  }, t3.prototype.realDivide = function(t4, e3) {
    this.assertNotComplex([t4, e3], "realDivide");
    return this.broadcastedBinaryOp(t4, e3, "float32", function(t5, e4) {
      return t5 / e4;
    });
  }, t3.prototype.floorDiv = function(t4, e3) {
    this.assertNotComplex([t4, e3], "floorDiv");
    return this.broadcastedBinaryOp(t4, e3, "int32", function(t5, e4) {
      return Math.floor(t5 / e4);
    });
  }, t3.prototype.sum = function(t4, e3) {
    this.assertNotComplex(t4, "sum"), nn("sum", e3, t4.rank);
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, bt(t4.dtype, "int32")), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = 0, p3 = 0; p3 < i3; ++p3) h3 += u3[c3 + p3];
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.prod = function(t4, e3) {
    this.assertNotComplex(t4, "sum");
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, bt(t4.dtype, "int32")), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = 1, p3 = 0; p3 < i3; ++p3) h3 *= u3[c3 + p3];
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    this.assertNotComplex(t4, "unsortedSegmentSum");
    for (var r3 = [], o3 = t4.rank - e3.rank, a3 = 0; a3 < o3; ++a3) e3 = e3.expandDims(a3 + 1);
    for (a3 = 0; a3 < n3; ++a3) {
      var i3 = vn(a3, "int32"), s3 = Lu(i3, e3).asType("float32").mul(t4).sum(0);
      r3.push(s3);
    }
    return dr(r3);
  }, t3.prototype.argMin = function(t4, e3) {
    this.assertNotComplex(t4, "argMin");
    var n3 = [e3];
    nn("argMin", n3, t4.rank);
    for (var r3 = tn(t4.shape, n3), o3 = r3[0], a3 = r3[1], i3 = En(o3, "int32"), s3 = y(a3), u3 = this.readSync(i3.dataId), l3 = this.readSync(t4.dataId), c3 = 0; c3 < u3.length; ++c3) {
      for (var h3 = c3 * s3, p3 = l3[h3], f3 = 0, d3 = 0; d3 < s3; ++d3) {
        var v2 = l3[h3 + d3];
        v2 < p3 && (p3 = v2, f3 = d3);
      }
      u3[c3] = f3;
    }
    return i3;
  }, t3.prototype.argMax = function(t4, e3) {
    this.assertNotComplex(t4, "argMax");
    var n3 = [e3];
    nn("argMax", n3, t4.rank);
    for (var r3 = tn(t4.shape, n3), o3 = r3[0], a3 = r3[1], i3 = En(o3, "int32"), s3 = y(a3), u3 = this.readSync(i3.dataId), l3 = this.readSync(t4.dataId), c3 = 0; c3 < u3.length; ++c3) {
      for (var h3 = c3 * s3, p3 = l3[h3], f3 = 0, d3 = 0; d3 < s3; ++d3) {
        var v2 = l3[h3 + d3];
        v2 > p3 && (p3 = v2, f3 = d3);
      }
      u3[c3] = f3;
    }
    return i3;
  }, t3.prototype.cumsum = function(t4, e3, n3, r3) {
    if (this.assertNotComplex(t4, "cumsum"), e3 !== t4.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (t4.rank - 1) + " but got axis=" + e3);
    for (var o3 = bt(t4.dtype, "int32"), a3 = En(t4.shape, o3), i3 = this.readSync(a3.dataId), s3 = this.readSync(t4.dataId), u3 = t4.shape[t4.rank - 1], l3 = r3 ? function(t5, e4) {
      return t5 + u3 - e4 - 1;
    } : function(t5, e4) {
      return t5 + e4;
    }, c3 = 0; c3 < s3.length; c3 += u3) for (var h3 = 0; h3 < u3; h3++) {
      var p3 = l3(c3, h3);
      if (0 === h3) i3[p3] = n3 ? 0 : s3[p3];
      else {
        var f3 = l3(c3, h3 - 1);
        i3[p3] = n3 ? s3[f3] + i3[f3] : s3[p3] + i3[f3];
      }
    }
    return a3;
  }, t3.prototype.equal = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "equal"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 === e4 ? 1 : 0;
    });
  }, t3.prototype.notEqual = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "notEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 !== e4 ? 1 : 0;
    });
  }, t3.prototype.less = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "less"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 < e4 ? 1 : 0;
    });
  }, t3.prototype.lessEqual = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "lessEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 <= e4 ? 1 : 0;
    });
  }, t3.prototype.greater = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "greater"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 > e4 ? 1 : 0;
    });
  }, t3.prototype.greaterEqual = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "greaterEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 >= e4 ? 1 : 0;
    });
  }, t3.prototype.logicalNot = function(t4) {
    this.assertNotComplex(t4, "logicalNot");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = e3[r3] ? 0 : 1;
    return ht.make(t4.shape, { values: n3 }, "bool");
  }, t3.prototype.logicalAnd = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "logicalAnd"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 && e4;
    });
  }, t3.prototype.logicalOr = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "logicalOr"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 || e4;
    });
  }, t3.prototype.select = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3, n3], "select");
    for (var r3 = this.readSync(t4.dataId), o3 = this.readSync(e3.dataId), a3 = this.readSync(n3.dataId), i3 = En(e3.shape, bt(e3.dtype, n3.dtype)), s3 = this.readSync(i3.dataId), u3 = 0, l3 = 0 === t4.rank || t4.rank > 1 || 1 === e3.rank ? 1 : e3.shape[1], c3 = 0; c3 < r3.length; c3++) for (var h3 = 0; h3 < l3; h3++) 1 === r3[c3] ? s3[u3++] = o3[c3] : s3[u3++] = a3[c3];
    return i3;
  }, t3.prototype.where = function(t4) {
    this.assertNotComplex([t4], "where");
    var e3 = this.readSync(t4.dataId);
    return yo(t4.shape, e3);
  }, t3.prototype.topk = function(t4, e3, n3) {
    return this.assertNotComplex(t4, "topk"), go(this.readSync(t4.dataId), t4.shape, t4.dtype, e3);
  }, t3.prototype.min = function(t4, e3) {
    this.assertNotComplex(t4, "min"), nn("min", e3, t4.rank);
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, t4.dtype), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = u3[c3], p3 = 0; p3 < i3; ++p3) {
        var f3 = u3[c3 + p3];
        f3 < h3 && (h3 = f3);
      }
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.minimum = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "minimum"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.min(t5, e4);
    });
  }, t3.prototype.mod = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "mod"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      var n3 = t5 % e4;
      return t5 < 0 && e4 < 0 || t5 >= 0 && e4 >= 0 ? n3 : (n3 + e4) % e4;
    });
  }, t3.prototype.max = function(t4, e3) {
    this.assertNotComplex(t4, "max"), nn("max", e3, t4.rank);
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, t4.dtype), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = u3[c3], p3 = 0; p3 < i3; ++p3) {
        var f3 = u3[c3 + p3];
        f3 > h3 && (h3 = f3);
      }
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.maximum = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "maximum"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.max(t5, e4);
    });
  }, t3.prototype.all = function(t4, e3) {
    this.assertNotComplex(t4, "all"), nn("all", e3, t4.rank);
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, t4.dtype), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = u3[c3], p3 = 0; p3 < i3; ++p3) {
        var f3 = u3[c3 + p3];
        h3 = h3 && f3;
      }
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.any = function(t4, e3) {
    this.assertNotComplex(t4, "any"), nn("any", e3, t4.rank);
    for (var n3 = tn(t4.shape, e3), r3 = n3[0], o3 = n3[1], a3 = En(r3, t4.dtype), i3 = y(o3), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), l3 = 0; l3 < s3.length; ++l3) {
      for (var c3 = l3 * i3, h3 = u3[c3], p3 = 0; p3 < i3; ++p3) {
        var f3 = u3[c3 + p3];
        h3 = h3 || f3;
      }
      s3[l3] = h3;
    }
    return a3;
  }, t3.prototype.squaredDifference = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "squaredDifference"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      var n3 = t5 - e4;
      return n3 * n3;
    });
  }, t3.prototype.ceil = function(t4) {
    this.assertNotComplex(t4, "ceil");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.ceil(e3[r3]);
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.floor = function(t4) {
    this.assertNotComplex(t4, "floor");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.floor(e3[r3]);
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.sign = function(t4) {
    this.assertNotComplex(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) e3[r3] < 0 ? n3[r3] = -1 : e3[r3] > 0 ? n3[r3] = 1 : n3[r3] = 0;
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.isNaN = function(t4) {
    this.assertNotComplex(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Number.isNaN(e3[r3]) && (n3[r3] = 1);
    return ht.make(t4.shape, { values: n3 }, "bool");
  }, t3.prototype.isInf = function(t4) {
    this.assertNotComplex(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Math.abs(e3[r3]) === 1 / 0 && (n3[r3] = 1);
    return ht.make(t4.shape, { values: n3 }, "bool");
  }, t3.prototype.isFinite = function(t4) {
    this.assertNotComplex(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Number.isFinite(e3[r3]) && (n3[r3] = 1);
    return ht.make(t4.shape, { values: n3 }, "bool");
  }, t3.prototype.round = function(t4) {
    this.assertNotComplex(t4, "round");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = Math.floor(e3[r3]);
      e3[r3] - o3 < 0.5 ? n3[r3] = Math.floor(e3[r3]) : e3[r3] - o3 > 0.5 ? n3[r3] = Math.ceil(e3[r3]) : n3[r3] = o3 % 2 == 0 ? o3 : o3 + 1;
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.exp = function(t4) {
    this.assertNotComplex(t4, "exp");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.exp(e3[r3]);
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.expm1 = function(t4) {
    this.assertNotComplex(t4, "expm1");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.expm1(e3[r3]);
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.log = function(t4) {
    this.assertNotComplex(t4, "log");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = e3[r3];
      n3[r3] = Math.log(o3);
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.log1p = function(t4) {
    this.assertNotComplex(t4, "log1p");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = e3[r3];
      n3[r3] = Math.log1p(o3);
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.sqrt = function(t4) {
    this.assertNotComplex(t4, "sqrt");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = e3[r3];
      n3[r3] = Math.sqrt(o3);
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.rsqrt = function(t4) {
    this.assertNotComplex(t4, "rsqrt");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = e3[r3];
      n3[r3] = 1 / Math.sqrt(o3);
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.square = function(t4) {
    this.assertNotComplex(t4, "square");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o3 = e3[r3];
      n3[r3] = o3 * o3;
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.reciprocal = function(t4) {
    this.assertNotComplex(t4, "reciprocal");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = 1 / e3[r3];
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.linear = function(t4) {
    return t4;
  }, t3.prototype.relu = function(t4) {
    this.assertNotComplex(t4, "relu");
    for (var e3 = En(t4.shape, t4.dtype), n3 = this.readSync(e3.dataId), r3 = this.readSync(t4.dataId), o3 = 0; o3 < r3.length; ++o3) n3[o3] = Math.max(0, r3[o3]);
    return e3;
  }, t3.prototype.prelu = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "prelu"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return t5 < 0 ? e4 * t5 : t5;
    });
  }, t3.prototype.elu = function(t4) {
    this.assertNotComplex(t4, "elu");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) {
      var o3 = n3[r3];
      e3[r3] = o3 >= 0 ? o3 : Math.exp(o3) - 1;
    }
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.eluDer = function(t4, e3) {
    this.assertNotComplex([t4, e3], "eluDer");
    for (var n3 = new Float32Array(e3.size), r3 = this.readSync(e3.dataId), o3 = this.readSync(t4.dataId), a3 = 0; a3 < r3.length; ++a3) {
      var i3 = r3[a3];
      n3[a3] = i3 >= 1 ? o3[a3] : o3[a3] * (i3 + 1);
    }
    return ht.make(e3.shape, { values: n3 });
  }, t3.prototype.selu = function(t4) {
    this.assertNotComplex(t4, "selu");
    for (var e3 = Pi, n3 = Li, r3 = new Float32Array(t4.size), o3 = this.readSync(t4.dataId), a3 = 0; a3 < o3.length; ++a3) {
      var i3 = o3[a3];
      r3[a3] = i3 >= 0 ? n3 * i3 : e3 * (Math.exp(i3) - 1);
    }
    return ht.make(t4.shape, { values: r3 });
  }, t3.prototype.clip = function(t4, e3, n3) {
    this.assertNotComplex(t4, "clip");
    for (var r3 = new Float32Array(t4.size), o3 = this.readSync(t4.dataId), a3 = 0; a3 < o3.length; ++a3) {
      var i3 = o3[a3];
      r3[a3] = i3 > n3 ? n3 : i3 < e3 ? e3 : i3;
    }
    return ht.make(t4.shape, { values: r3 });
  }, t3.prototype.abs = function(t4) {
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.abs(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.complexAbs = function(t4) {
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < t4.size; ++r3) {
      var o3 = n3[2 * r3], a3 = n3[2 * r3 + 1];
      e3[r3] = Math.hypot(o3, a3);
    }
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.int = function(t4) {
    this.assertNotComplex(t4, "int");
    for (var e3 = new Int32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = n3[r3];
    return ht.make(t4.shape, { values: e3 }, "int32");
  }, t3.prototype.sigmoid = function(t4) {
    this.assertNotComplex(t4, "sigmoid");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = 1 / (1 + Math.exp(-n3[r3]));
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.softplus = function(t4) {
    this.assertNotComplex(t4, "softplus");
    for (var e3 = Math.log(11920928955078125e-23) + 2, n3 = new Float32Array(t4.size), r3 = this.readSync(t4.dataId), o3 = 0; o3 < r3.length; ++o3) {
      var a3 = r3[o3] > -e3, i3 = r3[o3] < e3, s3 = Math.exp(r3[o3]), u3 = void 0;
      u3 = i3 ? s3 : a3 ? r3[o3] : Math.log(1 + s3), n3[o3] = u3;
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.sin = function(t4) {
    this.assertNotComplex(t4, "sin");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.sin(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.cos = function(t4) {
    this.assertNotComplex(t4, "cos");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.cos(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.tan = function(t4) {
    this.assertNotComplex(t4, "tan");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.tan(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.asin = function(t4) {
    this.assertNotComplex(t4, "asin");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.asin(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.acos = function(t4) {
    this.assertNotComplex(t4, "acos");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.acos(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.atan = function(t4) {
    this.assertNotComplex(t4, "atan");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.atan(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.atan2 = function(t4, e3) {
    return this.assertNotComplex([t4, e3], "atan2"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.atan2(t5, e4);
    });
  }, t3.prototype.sinh = function(t4) {
    this.assertNotComplex(t4, "sinh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.sinh(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.cosh = function(t4) {
    this.assertNotComplex(t4, "cosh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.cosh(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.tanh = function(t4) {
    this.assertNotComplex(t4, "tanh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = w(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.asinh = function(t4) {
    this.assertNotComplex(t4, "asinh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.asinh(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.acosh = function(t4) {
    this.assertNotComplex(t4, "acosh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.acosh(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.atanh = function(t4) {
    this.assertNotComplex(t4, "atanh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.atanh(n3[r3]);
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.erf = function(t4) {
    this.assertNotComplex(t4, "erf");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) {
      var o3 = n3[r3], a3 = 1 / (1 + 0.3275911 * o3);
      e3[r3] = 1 - ((((1.061405429 * a3 - 1.453152027) * a3 + 1.421413741) * a3 - 0.284496736) * a3 + 0.254829592) * a3 * Math.exp(-o3 * o3);
    }
    return ht.make(t4.shape, { values: e3 });
  }, t3.prototype.step = function(t4, e3) {
    void 0 === e3 && (e3 = 0), this.assertNotComplex(t4, "step");
    for (var n3 = new Float32Array(t4.size), r3 = this.readSync(t4.dataId), o3 = 0; o3 < r3.length; ++o3) {
      var a3 = r3[o3];
      isNaN(a3) ? n3[o3] = NaN : n3[o3] = a3 > 0 ? 1 : e3;
    }
    return ht.make(t4.shape, { values: n3 });
  }, t3.prototype.conv2d = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "conv2d");
    for (var r3 = n3.filterHeight, o3 = n3.filterWidth, a3 = n3.dilationHeight, i3 = n3.dilationWidth, s3 = n3.padInfo.left, u3 = n3.padInfo.top, l3 = $n(n3.outShape, t4.dtype), c3 = this.readSync(t4.dataId), h3 = this.readSync(e3.dataId), p3 = l3.values, f3 = 0; f3 < n3.batchSize; ++f3) for (var d3 = f3 * t4.strides[0], v2 = f3 * l3.strides[0], m3 = 0; m3 < n3.outHeight; ++m3) for (var g2 = v2 + m3 * l3.strides[1], y3 = m3 * n3.strideHeight - u3, x3 = 0; x3 < r3; x3++) {
      var b3 = y3 + x3 * a3;
      if (!(b3 < 0 || b3 >= n3.inHeight)) for (var w3 = x3 * e3.strides[0], C3 = d3 + b3 * t4.strides[1], E3 = 0; E3 < n3.outWidth; ++E3) for (var R3 = g2 + E3 * n3.outChannels, I3 = E3 * n3.strideWidth - s3, S3 = 0; S3 < o3; S3++) {
        var N3 = I3 + S3 * i3;
        if (!(N3 < 0 || N3 >= n3.inWidth)) for (var k3 = w3 + S3 * e3.strides[1], A3 = C3 + N3 * n3.inChannels, T3 = k3, D3 = 0; D3 < n3.inChannels; ++D3) {
          for (var _3 = c3[A3 + D3], O3 = 0; O3 < n3.outChannels; ++O3) p3[R3 + O3] += _3 * h3[T3 + O3];
          T3 += n3.outChannels;
        }
      }
    }
    return l3.toTensor();
  }, t3.prototype.conv3d = function(t4, e3, n3) {
    for (var r3 = n3.filterDepth, o3 = n3.filterHeight, a3 = n3.filterWidth, i3 = n3.dilationDepth, s3 = n3.dilationHeight, u3 = n3.dilationWidth, l3 = n3.padInfo.front, c3 = n3.padInfo.left, h3 = n3.padInfo.top, p3 = $n(n3.outShape, t4.dtype), f3 = this.readSync(t4.dataId), d3 = this.readSync(e3.dataId), v2 = p3.values, m3 = 0; m3 < n3.batchSize; ++m3) for (var g2 = m3 * t4.strides[0], y3 = m3 * p3.strides[0], x3 = 0; x3 < n3.outDepth; ++x3) for (var b3 = y3 + x3 * p3.strides[1], w3 = x3 * n3.strideDepth - l3, C3 = 0; C3 < r3; C3++) {
      var E3 = w3 + C3 * i3;
      if (!(E3 < 0 || E3 >= n3.inDepth)) for (var R3 = C3 * e3.strides[0], I3 = g2 + E3 * t4.strides[1], S3 = 0; S3 < n3.outHeight; ++S3) for (var N3 = b3 + S3 * p3.strides[2], k3 = S3 * n3.strideHeight - h3, A3 = 0; A3 < o3; A3++) {
        var T3 = k3 + A3 * s3;
        if (!(T3 < 0 || T3 >= n3.inHeight)) for (var D3 = R3 + A3 * e3.strides[1], _3 = I3 + T3 * t4.strides[2], O3 = 0; O3 < n3.outWidth; ++O3) for (var F3 = N3 + O3 * n3.outChannels, M3 = O3 * n3.strideWidth - c3, B3 = 0; B3 < a3; B3++) {
          var P3 = M3 + B3 * u3;
          if (!(P3 < 0 || P3 >= n3.inWidth)) for (var L3 = D3 + B3 * e3.strides[2], W3 = _3 + P3 * n3.inChannels, U3 = L3, z3 = 0; z3 < n3.inChannels; ++z3) {
            for (var V3 = f3[W3 + z3], G3 = 0; G3 < n3.outChannels; ++G3) v2[F3 + G3] += V3 * d3[U3 + G3];
            U3 += n3.outChannels;
          }
        }
      }
    }
    return p3.toTensor();
  }, t3.prototype.conv2dDerInput = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "conv2dDerInput");
    for (var r3 = $n(n3.inShape, "float32"), o3 = r3.values, a3 = r3.strides, i3 = a3[0], s3 = a3[1], u3 = a3[2], l3 = this.readSync(t4.dataId), c3 = t4.strides, h3 = c3[0], p3 = c3[1], f3 = c3[2], d3 = this.readSync(e3.dataId), v2 = e3.strides, m3 = v2[0], g2 = v2[1], y3 = v2[2], x3 = n3.batchSize, b3 = n3.filterHeight, w3 = n3.filterWidth, C3 = n3.inChannels, E3 = n3.inHeight, R3 = n3.inWidth, I3 = n3.outChannels, S3 = n3.outHeight, N3 = n3.outWidth, k3 = n3.strideHeight, A3 = n3.strideWidth, T3 = b3 - 1 - n3.padInfo.top, D3 = w3 - 1 - n3.padInfo.left, _3 = 0; _3 < x3; ++_3) for (var O3 = 0; O3 < C3; ++O3) for (var F3 = 0; F3 < E3; ++F3) for (var M3 = F3 - T3, B3 = Math.max(0, Math.ceil(M3 / k3)), P3 = Math.min(S3, (b3 + M3) / k3), L3 = 0; L3 < R3; ++L3) {
      for (var W3 = L3 - D3, U3 = Math.max(0, Math.ceil(W3 / A3)), z3 = Math.min(N3, (w3 + W3) / A3), V3 = 0, G3 = B3; G3 < P3; ++G3) for (var q3 = G3 * k3 - M3, H3 = U3; H3 < z3; ++H3) for (var $3 = h3 * _3 + p3 * G3 + f3 * H3, j3 = m3 * (b3 - 1 - q3) + g2 * (w3 - 1 - (H3 * A3 - W3)) + y3 * O3, K3 = 0; K3 < I3; ++K3) {
        V3 += l3[$3 + K3] * d3[j3 + K3];
      }
      o3[i3 * _3 + s3 * F3 + u3 * L3 + O3] = V3;
    }
    return r3.toTensor();
  }, t3.prototype.conv3dDerInput = function(t4, e3, n3) {
    for (var r3 = $n(n3.inShape, "float32"), o3 = r3.values, a3 = r3.strides, i3 = a3[0], s3 = a3[1], u3 = a3[2], l3 = a3[3], c3 = this.readSync(t4.dataId), h3 = t4.strides, p3 = h3[0], f3 = h3[1], d3 = h3[2], v2 = h3[3], m3 = this.readSync(e3.dataId), g2 = e3.strides, y3 = g2[0], x3 = g2[1], b3 = g2[2], w3 = g2[3], C3 = n3.batchSize, E3 = n3.filterDepth, R3 = n3.filterHeight, I3 = n3.filterWidth, S3 = n3.inChannels, N3 = n3.inDepth, k3 = n3.inHeight, A3 = n3.inWidth, T3 = n3.outChannels, D3 = n3.outDepth, _3 = n3.outHeight, O3 = n3.outWidth, F3 = n3.strideDepth, M3 = n3.strideHeight, B3 = n3.strideWidth, P3 = E3 - 1 - n3.padInfo.front, L3 = R3 - 1 - n3.padInfo.top, W3 = I3 - 1 - n3.padInfo.left, U3 = 0; U3 < C3; ++U3) for (var z3 = 0; z3 < S3; ++z3) for (var V3 = 0; V3 < N3; ++V3) for (var G3 = V3 - P3, q3 = Math.max(0, Math.ceil(G3 / F3)), H3 = Math.min(D3, (E3 + G3) / F3), $3 = 0; $3 < k3; ++$3) for (var j3 = $3 - L3, K3 = Math.max(0, Math.ceil(j3 / M3)), X3 = Math.min(_3, (R3 + j3) / M3), Y3 = 0; Y3 < A3; ++Y3) {
      for (var Q3 = Y3 - W3, J3 = Math.max(0, Math.ceil(Q3 / B3)), Z3 = Math.min(O3, (I3 + Q3) / B3), tt3 = 0, et3 = q3; et3 < H3; ++et3) for (var nt3 = et3 * F3 - G3, rt3 = K3; rt3 < X3; ++rt3) for (var ot3 = rt3 * M3 - j3, at3 = J3; at3 < Z3; ++at3) for (var it3 = p3 * U3 + f3 * et3 + d3 * rt3 + v2 * at3, st3 = y3 * (E3 - 1 - nt3) + x3 * (R3 - 1 - ot3) + b3 * (I3 - 1 - (at3 * B3 - Q3)) + w3 * z3, ut3 = 0; ut3 < T3; ++ut3) {
        tt3 += c3[it3 + ut3] * m3[st3 + ut3];
      }
      o3[i3 * U3 + s3 * V3 + u3 * $3 + l3 * Y3 + z3] = tt3;
    }
    return r3.toTensor();
  }, t3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "conv2dDerFilter");
    for (var r3 = n3.strideHeight, o3 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = $n(n3.filterShape, "float32"), u3 = n3.padInfo.left, l3 = n3.padInfo.top, c3 = this.bufferSync(t4), h3 = this.bufferSync(e3), p3 = 0; p3 < a3; ++p3) for (var f3 = Math.max(0, Math.ceil((l3 - p3) / r3)), d3 = Math.min(n3.outHeight, (n3.inHeight + l3 - p3) / r3), v2 = 0; v2 < i3; ++v2) for (var m3 = Math.max(0, Math.ceil((u3 - v2) / o3)), g2 = Math.min(n3.outWidth, (n3.inWidth + u3 - v2) / o3), y3 = 0; y3 < n3.inChannels; ++y3) for (var x3 = 0; x3 < n3.outChannels; ++x3) {
      for (var b3 = 0, w3 = 0; w3 < n3.batchSize; ++w3) for (var C3 = f3; C3 < d3; ++C3) for (var E3 = p3 + C3 * r3 - l3, R3 = m3; R3 < g2; ++R3) {
        var I3 = v2 + R3 * o3 - u3;
        b3 += c3.get(w3, E3, I3, y3) * h3.get(w3, C3, R3, x3);
      }
      s3.set(b3, p3, v2, y3, x3);
    }
    return s3.toTensor();
  }, t3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    for (var r3 = n3.strideDepth, o3 = n3.strideHeight, a3 = n3.strideWidth, i3 = n3.filterDepth, s3 = n3.filterHeight, u3 = n3.filterWidth, l3 = $n(n3.filterShape, "float32"), c3 = l3.values, h3 = l3.strides, p3 = h3[0], f3 = h3[1], d3 = h3[2], v2 = h3[3], m3 = this.readSync(e3.dataId), g2 = e3.strides, y3 = g2[0], x3 = g2[1], b3 = g2[2], w3 = g2[3], C3 = this.readSync(t4.dataId), E3 = t4.strides, R3 = E3[0], I3 = E3[1], S3 = E3[2], N3 = E3[3], k3 = n3.padInfo.front, A3 = n3.padInfo.left, T3 = n3.padInfo.top, D3 = 0; D3 < i3; ++D3) for (var _3 = Math.max(0, Math.ceil((k3 - D3) / r3)), O3 = Math.min(n3.outDepth, (n3.inDepth + k3 - D3) / r3), F3 = D3 * p3, M3 = 0; M3 < s3; ++M3) for (var B3 = Math.max(0, Math.ceil((T3 - M3) / o3)), P3 = Math.min(n3.outHeight, (n3.inHeight + T3 - M3) / o3), L3 = M3 * f3 + F3, W3 = 0; W3 < u3; ++W3) for (var U3 = Math.max(0, Math.ceil((A3 - W3) / a3)), z3 = Math.min(n3.outWidth, (n3.inWidth + A3 - W3) / a3), V3 = W3 * d3 + L3, G3 = 0; G3 < n3.inChannels; ++G3) for (var q3 = G3 * v2 + V3, H3 = 0; H3 < n3.outChannels; ++H3) {
      for (var $3 = 0, j3 = 0; j3 < n3.batchSize; ++j3) for (var K3 = j3 * R3, X3 = j3 * y3, Y3 = _3; Y3 < O3; ++Y3) for (var Q3 = (D3 + Y3 * r3 - k3) * I3 + K3, J3 = Y3 * x3 + X3, Z3 = B3; Z3 < P3; ++Z3) for (var tt3 = (M3 + Z3 * o3 - T3) * S3 + Q3, et3 = Z3 * b3 + J3, nt3 = U3; nt3 < z3; ++nt3) {
        var rt3 = nt3 * w3 + et3;
        $3 += C3[(W3 + nt3 * a3 - A3) * N3 + tt3 + G3] * m3[rt3 + H3];
      }
      c3[q3 + H3] = $3;
    }
    return l3.toTensor();
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "depthwiseConv2D");
    for (var r3 = n3.filterHeight, o3 = n3.filterWidth, a3 = n3.dilationHeight, i3 = n3.dilationWidth, s3 = n3.padInfo.left, u3 = n3.padInfo.top, l3 = n3.outChannels / n3.inChannels, c3 = $n(n3.outShape, t4.dtype), h3 = this.readSync(t4.dataId), p3 = this.readSync(e3.dataId), f3 = c3.values, d3 = 0; d3 < n3.batchSize; ++d3) for (var v2 = d3 * t4.strides[0], m3 = d3 * c3.strides[0], g2 = 0; g2 < n3.outHeight; ++g2) for (var y3 = m3 + g2 * c3.strides[1], x3 = g2 * n3.strideHeight - s3, b3 = 0; b3 < r3; ++b3) {
      var w3 = x3 + b3 * a3;
      if (!(w3 < 0 || w3 >= n3.inHeight)) for (var C3 = b3 * e3.strides[0], E3 = v2 + w3 * t4.strides[1], R3 = 0; R3 < n3.outWidth; ++R3) for (var I3 = y3 + R3 * c3.strides[2], S3 = R3 * n3.strideWidth - u3, N3 = 0; N3 < o3; ++N3) {
        var k3 = S3 + N3 * i3;
        if (!(k3 < 0 || k3 >= n3.inWidth)) for (var A3 = C3 + N3 * e3.strides[1], T3 = E3 + k3 * n3.inChannels, D3 = I3, _3 = A3, O3 = 0; O3 < n3.inChannels; ++O3) {
          for (var F3 = h3[T3 + O3], M3 = 0; M3 < l3; ++M3) f3[D3 + M3] += F3 * p3[_3 + M3];
          D3 += l3, _3 += l3;
        }
      }
    }
    return c3.toTensor();
  }, t3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "depthwiseConv2DDerInput");
    for (var r3 = $n(n3.inShape, "float32"), o3 = r3.values, a3 = r3.strides, i3 = a3[0], s3 = a3[1], u3 = a3[2], l3 = this.readSync(t4.dataId), c3 = t4.strides, h3 = c3[0], p3 = c3[1], f3 = c3[2], d3 = this.readSync(e3.dataId), v2 = e3.strides, m3 = v2[0], g2 = v2[1], y3 = v2[2], x3 = n3.batchSize, b3 = n3.filterHeight, w3 = n3.filterWidth, C3 = n3.inChannels, E3 = n3.inHeight, R3 = n3.inWidth, I3 = n3.outChannels, S3 = n3.outHeight, N3 = n3.outWidth, k3 = n3.strideHeight, A3 = n3.strideWidth, T3 = b3 - 1 - n3.padInfo.top, D3 = w3 - 1 - n3.padInfo.left, _3 = I3 / C3, O3 = 0; O3 < x3; ++O3) for (var F3 = 0; F3 < C3; ++F3) for (var M3 = 0; M3 < E3; ++M3) for (var B3 = M3 - T3, P3 = Math.max(0, Math.ceil(B3 / k3)), L3 = Math.min(S3, (b3 + B3) / k3), W3 = 0; W3 < R3; ++W3) {
      for (var U3 = W3 - D3, z3 = Math.max(0, Math.ceil(U3 / A3)), V3 = Math.min(N3, (w3 + U3) / A3), G3 = 0, q3 = P3; q3 < L3; ++q3) for (var H3 = q3 * k3 - B3, $3 = z3; $3 < V3; ++$3) for (var j3 = h3 * O3 + p3 * q3 + f3 * $3, K3 = m3 * (b3 - 1 - H3) + g2 * (w3 - 1 - ($3 * A3 - U3)) + y3 * F3, X3 = 0; X3 < _3; ++X3) {
        G3 += l3[j3 + (F3 * _3 + X3)] * d3[K3 + X3];
      }
      o3[i3 * O3 + s3 * M3 + u3 * W3 + F3] = G3;
    }
    return r3.toTensor();
  }, t3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "depthwiseConv2DDerFilter");
    for (var r3 = n3.strideHeight, o3 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = $n(n3.filterShape, "float32"), u3 = n3.padInfo.left, l3 = n3.padInfo.top, c3 = n3.outChannels / n3.inChannels, h3 = this.bufferSync(t4), p3 = this.bufferSync(e3), f3 = 0; f3 < a3; ++f3) for (var d3 = Math.max(0, Math.ceil((l3 - f3) / r3)), v2 = Math.min(n3.outHeight, (n3.inHeight + l3 - f3) / r3), m3 = 0; m3 < i3; ++m3) for (var g2 = Math.max(0, Math.ceil((u3 - m3) / o3)), y3 = Math.min(n3.outWidth, (n3.inWidth + u3 - m3) / o3), x3 = 0; x3 < n3.outChannels; ++x3) {
      for (var b3 = Math.trunc(x3 / c3), w3 = x3 % c3, C3 = 0, E3 = 0; E3 < n3.batchSize; ++E3) for (var R3 = d3; R3 < v2; ++R3) for (var I3 = f3 + R3 * r3 - l3, S3 = g2; S3 < y3; ++S3) {
        var N3 = m3 + S3 * o3 - u3;
        C3 += h3.get(E3, I3, N3, b3) * p3.get(E3, R3, S3, x3);
      }
      s3.set(C3, f3, m3, b3, w3);
    }
    return s3.toTensor();
  }, t3.prototype.tile = function(t4, e3) {
    return this.assertNotComplex(t4, "tile"), mo(this.bufferSync(t4), e3);
  }, t3.prototype.pad = function(t4, e3, n3) {
    this.assertNotComplex(t4, "pad");
    var r3 = e3.map(function(e4, n4) {
      return e4[0] + t4.shape[n4] + e4[1];
    }), o3 = e3.map(function(t5) {
      return t5[0];
    }), a3 = this.bufferSync(t4), i3 = $n(r3, t4.dtype);
    0 !== n3 && i3.values.fill(n3);
    for (var s3 = 0; s3 < t4.size; s3++) {
      var u3 = a3.indexToLoc(s3), l3 = u3.map(function(t5, e4) {
        return t5 + o3[e4];
      });
      i3.set.apply(i3, [a3.get.apply(a3, u3)].concat(l3));
    }
    return i3.toTensor();
  }, t3.prototype.transpose = function(t4, e3) {
    this.assertNotComplex(t4, "transpose");
    for (var n3 = new Array(t4.rank), r3 = 0; r3 < n3.length; r3++) n3[r3] = t4.shape[e3[r3]];
    var o3 = this.readSync(t4.dataId), a3 = $n(n3, t4.dtype), i3 = this.bufferSync(t4);
    for (r3 = 0; r3 < t4.size; ++r3) {
      for (var s3 = i3.indexToLoc(r3), u3 = new Array(s3.length), l3 = 0; l3 < u3.length; l3++) u3[l3] = s3[e3[l3]];
      var c3 = a3.locToIndex(u3);
      a3.values[c3] = o3[r3];
    }
    return a3.toTensor();
  }, t3.prototype.gather = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "gather");
    var r3 = t4.shape.slice(), o3 = this.readSync(e3.dataId);
    r3[n3] = o3.length;
    for (var a3 = $n(r3, t4.dtype), i3 = this.bufferSync(t4), s3 = 0; s3 < a3.size; ++s3) {
      var u3 = a3.indexToLoc(s3), l3 = u3.slice();
      l3[n3] = o3[u3[n3]];
      var c3 = i3.locToIndex(l3);
      a3.values[s3] = i3.values[c3];
    }
    return a3.toTensor();
  }, t3.prototype.batchToSpaceND = function(t4, e3, n3) {
    this.assertNotComplex([t4], "batchToSpaceND");
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o3 = xr(t4.shape, e3, r3), a3 = br(o3.length, e3.length), i3 = wr(t4.shape, e3, r3), s3 = Cr(n3, e3.length), u3 = Er(i3, n3, e3.length);
    return t4.reshape(o3).transpose(a3).reshape(i3).slice(s3, u3);
  }, t3.prototype.spaceToBatchND = function(t4, e3, n3) {
    this.assertNotComplex([t4], "spaceToBatchND");
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o3 = [[0, 0]];
    o3.push.apply(o3, n3);
    for (var a3 = 1 + e3.length; a3 < t4.shape.length; ++a3) o3.push([0, 0]);
    var i3 = t4.pad(o3), s3 = xr(i3.shape, e3, r3, false), u3 = br(s3.length, e3.length, false), l3 = wr(i3.shape, e3, r3, false);
    return i3.reshape(s3).transpose(u3).reshape(l3);
  }, t3.prototype.pool = function(t4, e3, n3) {
    this.assertNotComplex(t4, "pool");
    for (var r3 = e3.strideHeight, o3 = e3.strideWidth, a3 = e3.dilationHeight, i3 = e3.dilationWidth, s3 = e3.effectiveFilterHeight, u3 = e3.effectiveFilterWidth, l3 = e3.padInfo.top, c3 = e3.padInfo.left, h3 = "max" === n3 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, p3 = this.readSync(t4.dataId), f3 = $n(e3.outShape, t4.dtype), d3 = f3.values, v2 = e3.outShape[1] * e3.outShape[2] * e3.outShape[3], m3 = e3.outShape[2] * e3.outShape[3], g2 = e3.outShape[3], y3 = 0; y3 < e3.batchSize; ++y3) for (var x3 = y3 * v2, b3 = y3 * t4.strides[0], w3 = 0; w3 < e3.inChannels; ++w3) for (var C3 = 0; C3 < e3.outHeight; ++C3) for (var E3 = C3 * r3 - l3, R3 = Math.max(0, E3), I3 = Math.min(e3.inHeight, s3 + E3), S3 = x3 + C3 * m3, N3 = 0; N3 < e3.outWidth; ++N3) {
      for (var k3 = N3 * o3 - c3, A3 = Math.max(0, k3), T3 = Math.min(e3.inWidth, u3 + k3), D3 = h3, _3 = 0, O3 = 0, F3 = R3; F3 < I3; F3 += a3) {
        for (var M3 = b3 + F3 * t4.strides[1], B3 = A3; B3 < T3; B3 += i3) {
          var P3 = p3[M3 + B3 * t4.strides[2] + w3];
          "max" === n3 && P3 > D3 ? D3 = P3 : "avg" === n3 && (_3 += P3, O3++);
        }
        if (isNaN(D3)) break;
      }
      d3[S3 + N3 * g2 + w3] = "avg" === n3 ? _3 / O3 : D3;
    }
    return f3.toTensor();
  }, t3.prototype.maxPool = function(t4, e3) {
    return this.pool(t4, e3, "max");
  }, t3.prototype.maxPoolPositions = function(t4, e3) {
    for (var n3 = $n(e3.outShape, "int32"), r3 = e3.strideHeight, o3 = e3.strideWidth, a3 = e3.dilationHeight, i3 = e3.dilationWidth, s3 = e3.effectiveFilterHeight, u3 = e3.effectiveFilterWidth, l3 = e3.padInfo.top, c3 = e3.padInfo.left, h3 = this.bufferSync(t4), p3 = 0; p3 < e3.batchSize; ++p3) for (var f3 = 0; f3 < e3.inChannels; ++f3) for (var d3 = 0; d3 < e3.outHeight; ++d3) {
      for (var v2 = d3 * r3 - l3, m3 = v2; m3 < 0; ) m3 += a3;
      for (var g2 = Math.min(e3.inHeight, s3 + v2), y3 = 0; y3 < e3.outWidth; ++y3) {
        for (var x3 = y3 * o3 - c3, b3 = x3; b3 < 0; ) b3 += i3;
        for (var w3 = Math.min(e3.inWidth, u3 + x3), C3 = Number.NEGATIVE_INFINITY, E3 = -1, R3 = m3; R3 < g2; R3 += a3) for (var I3 = R3 - v2, S3 = b3; S3 < w3; S3 += i3) {
          var N3 = S3 - x3, k3 = h3.get(p3, R3, S3, f3);
          k3 > C3 && (C3 = k3, E3 = I3 * u3 + N3);
        }
        n3.set(E3, p3, d3, y3, f3);
      }
    }
    return n3.toTensor();
  }, t3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    this.assertNotComplex([e3, n3], "maxPoolBackprop");
    for (var o3 = this.maxPoolPositions(e3, r3), a3 = r3.strideHeight, i3 = r3.strideWidth, s3 = r3.dilationHeight, u3 = r3.dilationWidth, l3 = r3.effectiveFilterHeight, c3 = r3.effectiveFilterWidth, h3 = c3 - 1 - r3.padInfo.left, p3 = l3 - 1 - r3.padInfo.top, f3 = $n(e3.shape, "float32"), d3 = this.bufferSync(o3), v2 = this.bufferSync(t4), m3 = 0; m3 < r3.batchSize; ++m3) for (var g2 = 0; g2 < r3.inChannels; ++g2) for (var y3 = 0; y3 < r3.inHeight; ++y3) for (var x3 = 0; x3 < r3.inWidth; ++x3) {
      for (var b3 = y3 - p3, w3 = x3 - h3, C3 = 0, E3 = 0; E3 < l3; E3 += s3) {
        var R3 = (b3 + E3) / a3;
        if (!(R3 < 0 || R3 >= r3.outHeight || Math.floor(R3) !== R3)) for (var I3 = 0; I3 < c3; I3 += u3) {
          var S3 = (w3 + I3) / i3;
          if (!(S3 < 0 || S3 >= r3.outWidth || Math.floor(S3) !== S3)) {
            var N3 = l3 * c3 - 1 - d3.get(m3, R3, S3, g2) === E3 * c3 + I3 ? 1 : 0;
            if (0 !== N3) C3 += v2.get(m3, R3, S3, g2) * N3;
          }
        }
      }
      f3.set(C3, m3, y3, x3, g2);
    }
    return f3.toTensor();
  }, t3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "avgPoolBackprop");
    for (var r3 = n3.strideHeight, o3 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = n3.dilationHeight, u3 = n3.dilationWidth, l3 = n3.effectiveFilterHeight, c3 = n3.effectiveFilterWidth, h3 = c3 - 1 - n3.padInfo.left, p3 = l3 - 1 - n3.padInfo.top, f3 = $n(e3.shape, "float32"), d3 = 1 / (a3 * i3), v2 = this.bufferSync(t4), m3 = 0; m3 < n3.batchSize; ++m3) for (var g2 = 0; g2 < n3.inChannels; ++g2) for (var y3 = 0; y3 < n3.inHeight; ++y3) for (var x3 = 0; x3 < n3.inWidth; ++x3) {
      for (var b3 = y3 - p3, w3 = x3 - h3, C3 = 0, E3 = 0; E3 < l3; E3 += s3) {
        var R3 = (b3 + E3) / r3;
        if (!(R3 < 0 || R3 >= n3.outHeight || Math.floor(R3) !== R3)) for (var I3 = 0; I3 < c3; I3 += u3) {
          var S3 = (w3 + I3) / o3;
          if (!(S3 < 0 || S3 >= n3.outWidth || Math.floor(S3) !== S3)) C3 += v2.get(m3, R3, S3, g2);
        }
      }
      f3.set(C3 * d3, m3, y3, x3, g2);
    }
    return f3.toTensor();
  }, t3.prototype.cast = function(t4, e3) {
    return oo(t4, e3, this);
  }, t3.prototype.reshape = function(t4, e3) {
    return ao(t4, e3);
  }, t3.prototype.avgPool = function(t4, e3) {
    return this.assertNotComplex(t4, "avgPool"), this.pool(t4, e3, "avg").toFloat();
  }, t3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    this.assertNotComplex(t4, "resizeBilinear");
    for (var o3 = t4.shape, a3 = o3[0], i3 = o3[1], s3 = o3[2], u3 = o3[3], l3 = this.readSync(t4.dataId), c3 = new Float32Array(y([a3, e3, n3, u3])), h3 = [r3 && e3 > 1 ? i3 - 1 : i3, r3 && n3 > 1 ? s3 - 1 : s3], p3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], f3 = 0, d3 = h3[0] / p3[0], v2 = h3[1] / p3[1], m3 = 0; m3 < a3; m3++) for (var g2 = 0; g2 < e3; g2++) for (var x3 = d3 * g2, b3 = Math.floor(x3), w3 = x3 - b3, C3 = Math.min(i3 - 1, Math.ceil(x3)), E3 = m3 * t4.strides[0] + b3 * t4.strides[1], R3 = m3 * t4.strides[0] + C3 * t4.strides[1], I3 = 0; I3 < n3; I3++) for (var S3 = v2 * I3, N3 = Math.floor(S3), k3 = S3 - N3, A3 = Math.min(s3 - 1, Math.ceil(S3)), T3 = E3 + N3 * t4.strides[2], D3 = R3 + N3 * t4.strides[2], _3 = E3 + +A3 * t4.strides[2], O3 = R3 + A3 * t4.strides[2], F3 = 0; F3 < u3; F3++) {
      var M3 = l3[T3 + F3], B3 = l3[D3 + F3], P3 = M3 + (l3[_3 + F3] - M3) * k3, L3 = P3 + (B3 + (l3[O3 + F3] - B3) * k3 - P3) * w3;
      c3[f3++] = L3;
    }
    return fn(c3, [a3, e3, n3, u3]);
  }, t3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "resizeBilinearBackprop");
    for (var r3 = e3.shape, o3 = r3[0], a3 = r3[1], i3 = r3[2], s3 = r3[3], u3 = t4.shape, l3 = u3[1], c3 = u3[2], h3 = new Float32Array(o3 * a3 * i3 * s3), p3 = [n3 && l3 > 1 ? a3 - 1 : a3, n3 && c3 > 1 ? i3 - 1 : i3], f3 = [n3 && l3 > 1 ? l3 - 1 : l3, n3 && c3 > 1 ? c3 - 1 : c3], d3 = p3[0] / f3[0], v2 = p3[1] / f3[1], m3 = this.readSync(t4.dataId), g2 = 0, y3 = 0; y3 < o3; y3++) for (var x3 = y3 * e3.strides[0], b3 = 0; b3 < l3; b3++) for (var w3 = b3 * d3, C3 = Math.floor(w3), E3 = Math.min(Math.ceil(w3), a3 - 1), R3 = x3 + C3 * e3.strides[1], I3 = x3 + E3 * e3.strides[1], S3 = w3 - C3, N3 = 1 - S3, k3 = 0; k3 < c3; k3++) for (var A3 = k3 * v2, T3 = Math.floor(A3), D3 = Math.min(Math.ceil(A3), i3 - 1), _3 = A3 - T3, O3 = 1 - _3, F3 = R3 + T3 * e3.strides[2], M3 = R3 + D3 * e3.strides[2], B3 = I3 + T3 * e3.strides[2], P3 = I3 + D3 * e3.strides[2], L3 = N3 * O3, W3 = N3 * _3, U3 = S3 * O3, z3 = S3 * _3, V3 = 0; V3 < s3; V3++) {
      var G3 = m3[g2++];
      h3[F3 + V3] += G3 * L3, h3[M3 + V3] += G3 * W3, h3[B3 + V3] += G3 * U3, h3[P3 + V3] += G3 * z3;
    }
    return xn(h3, [o3, i3, a3, s3], e3.dtype);
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    this.assertNotComplex(t4, "resizeNearestNeighbor");
    for (var o3 = t4.shape, a3 = o3[0], i3 = o3[1], s3 = o3[2], u3 = o3[3], l3 = this.readSync(t4.dataId), c3 = new Float32Array(a3 * e3 * n3 * u3), h3 = [r3 && e3 > 1 ? i3 - 1 : i3, r3 && n3 > 1 ? s3 - 1 : s3], p3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], f3 = h3[0] / p3[0], d3 = h3[1] / p3[1], v2 = 0, m3 = 0; m3 < a3; m3++) for (var g2 = m3 * t4.strides[0], y3 = 0; y3 < e3; y3++) for (var x3 = f3 * y3, b3 = g2 + Math.min(i3 - 1, r3 ? Math.round(x3) : Math.floor(x3)) * t4.strides[1], w3 = 0; w3 < n3; w3++) for (var C3 = d3 * w3, E3 = b3 + Math.min(s3 - 1, r3 ? Math.round(C3) : Math.floor(C3)) * t4.strides[2], R3 = 0; R3 < u3; R3++) {
      var I3 = l3[E3 + R3];
      c3[v2++] = I3;
    }
    return fn(c3, [a3, e3, n3, u3], t4.dtype);
  }, t3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    this.assertNotComplex([t4, e3], "resizeNearestNeighborBackprop");
    for (var r3 = e3.shape, o3 = r3[0], a3 = r3[1], i3 = r3[2], s3 = r3[3], u3 = t4.shape, l3 = u3[1], c3 = u3[2], h3 = new Float32Array(o3 * a3 * i3 * s3), p3 = this.readSync(t4.dataId), f3 = [n3 && l3 > 1 ? a3 - 1 : a3, n3 && c3 > 1 ? i3 - 1 : i3], d3 = [n3 && l3 > 1 ? l3 - 1 : l3, n3 && c3 > 1 ? c3 - 1 : c3], v2 = f3[0] / d3[0], m3 = f3[1] / d3[1], g2 = 1 / v2, y3 = 1 / m3, x3 = 2 * Math.ceil(g2) + 2, b3 = 2 * Math.ceil(y3) + 2, w3 = 0; w3 < o3; w3++) for (var C3 = w3 * e3.strides[0], E3 = 0; E3 < a3; E3++) for (var R3 = C3 + E3 * e3.strides[1], I3 = Math.floor(E3 * g2), S3 = Math.floor(I3 - x3 / 2), N3 = 0; N3 < i3; N3++) for (var k3 = R3 + N3 * e3.strides[2], A3 = Math.floor(N3 * y3), T3 = Math.floor(A3 - b3 / 2), D3 = 0; D3 < s3; D3++) {
      for (var _3 = 0, O3 = 0; O3 < x3; O3++) {
        var F3 = O3 + S3;
        if (!(F3 < 0 || F3 >= l3)) {
          var M3 = C3 + F3 * t4.strides[1], B3 = F3 * v2;
          if (E3 === Math.min(a3 - 1, n3 ? Math.round(B3) : Math.floor(B3))) for (var P3 = 0; P3 < b3; P3++) {
            var L3 = P3 + T3;
            if (!(L3 < 0 || L3 >= c3)) {
              var W3 = M3 + L3 * t4.strides[2], U3 = L3 * m3;
              N3 === Math.min(i3 - 1, n3 ? Math.round(U3) : Math.floor(U3)) && (_3 += p3[W3 + D3]);
            }
          }
        }
      }
      h3[k3 + D3] = _3;
    }
    return xn(h3, e3.shape, e3.dtype);
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3, a3) {
    this.assertNotComplex([t4, e3, n3, o3, a3], "batchNorm");
    for (var i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = this.readSync(n3.dataId), l3 = o3 ? this.readSync(o3.dataId) : new Float32Array([1]), c3 = a3 ? this.readSync(a3.dataId) : new Float32Array([0]), h3 = new Float32Array(i3.length), p3 = c3.length, f3 = l3.length, d3 = u3.length, v2 = s3.length, m3 = 0, g2 = 0, y3 = 0, x3 = 0, b3 = 0; b3 < i3.length; ++b3) h3[b3] = c3[m3++] + (i3[b3] - s3[g2++]) * l3[y3++] / Math.sqrt(u3[x3++] + r3), m3 >= p3 && (m3 = 0), g2 >= v2 && (g2 = 0), y3 >= f3 && (y3 = 0), x3 >= d3 && (x3 = 0);
    return xn(h3, t4.shape);
  }, t3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o3) {
    this.assertNotComplex(t4, "localResponseNormalization4D");
    var a3 = t4.shape[3], i3 = a3 - 1, s3 = this.readSync(t4.dataId), u3 = t4.size, l3 = new Float32Array(u3);
    function c3(t5) {
      for (var n4 = t5 % a3, r4 = t5 - n4 + Math.max(0, n4 - e3), o4 = t5 - n4 + Math.min(n4 + e3, i3), u4 = 0; r4 <= o4; r4++) {
        var l4 = s3[r4];
        u4 += l4 * l4;
      }
      return u4;
    }
    for (var h3 = 0; h3 < u3; h3++) {
      var p3 = c3(h3), f3 = s3[h3] * Math.pow(n3 + r3 * p3, -o3);
      l3[h3] = f3;
    }
    return xn(l3, t4.shape);
  }, t3.prototype.LRNGrad = function(t4, e3, n3, r3, o3, a3, i3) {
    this.assertNotComplex(t4, "LRNGrad");
    for (var s3 = t4.shape[3], u3 = this.readSync(t4.dataId), l3 = this.readSync(e3.dataId), c3 = this.readSync(n3.dataId), h3 = new Float32Array(t4.size), p3 = t4.size, f3 = 0; f3 < p3; f3++) {
      for (var d3 = f3 % s3, v2 = f3 - d3 + Math.max(0, d3 - r3), m3 = f3 - d3 + Math.min(s3, d3 + r3 + 1), g2 = 0, y3 = v2; y3 < m3; y3++) g2 += Math.pow(l3[y3], 2);
      g2 = a3 * g2 + o3;
      for (y3 = v2; y3 < m3; y3++) {
        var x3 = -2 * a3 * i3 * l3[y3] * c3[f3] / g2;
        f3 === y3 && (x3 += Math.pow(g2, -i3)), x3 *= u3[f3], h3[y3] += x3;
      }
    }
    return xn(h3, t4.shape);
  }, t3.prototype.multinomial = function(t4, e3, n3, r3) {
    this.assertNotComplex(t4, "multinomial");
    for (var o3 = e3 ? t4 : zr(t4), a3 = o3.shape[0], i3 = o3.shape[1], s3 = En([a3, n3], "int32"), u3 = this.readSync(s3.dataId), l3 = this.readSync(o3.dataId), c3 = 0; c3 < a3; ++c3) {
      var h3 = c3 * i3, p3 = new Float32Array(i3 - 1);
      p3[0] = l3[h3];
      for (var f3 = 1; f3 < p3.length; ++f3) p3[f3] = p3[f3 - 1] + l3[h3 + f3];
      for (var d3 = Gn(r3.toString()), v2 = c3 * n3, m3 = 0; m3 < n3; ++m3) {
        var g2 = d3();
        u3[v2 + m3] = p3.length;
        for (var y3 = 0; y3 < p3.length; y3++) if (g2 < p3[y3]) {
          u3[v2 + m3] = y3;
          break;
        }
      }
    }
    return s3;
  }, t3.prototype.oneHot = function(t4, e3, n3, r3) {
    this.assertNotComplex(t4, "oneHot");
    var o3 = new Float32Array(t4.size * e3);
    o3.fill(r3);
    for (var a3 = this.readSync(t4.dataId), i3 = 0; i3 < t4.size; ++i3) a3[i3] >= 0 && a3[i3] < e3 && (o3[i3 * e3 + a3[i3]] = n3);
    return gn(o3, [t4.size, e3], "int32");
  }, t3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o3) {
    return this.assertNotComplex(t4, "nonMaxSuppression"), po(this.readSync(t4.dataId), this.readSync(e3.dataId), n3, r3, o3);
  }, t3.prototype.fft = function(t4) {
    return this.fftBatch(t4, false);
  }, t3.prototype.ifft = function(t4) {
    return this.fftBatch(t4, true);
  }, t3.prototype.fftBatch = function(t4, e3) {
    for (var n3 = t4.shape[0], r3 = t4.shape[1], o3 = $n(t4.shape, "float32"), a3 = $n(t4.shape, "float32"), i3 = hn(t4).as2D(n3, r3), s3 = pn(t4).as2D(n3, r3), u3 = 0; u3 < n3; u3++) for (var l3 = i3.slice([u3, 0], [1, r3]), c3 = s3.slice([u3, 0], [1, r3]), h3 = cn(l3, c3), p3 = this.readSync(this.fftImpl(h3, e3).dataId), f3 = 0; f3 < r3; f3++) {
      var d3 = lo(p3, f3);
      o3.values[u3 * r3 + f3] = d3.real, a3.values[u3 * r3 + f3] = d3.imag;
    }
    return cn(o3.toTensor(), a3.toTensor()).as2D(n3, r3);
  }, t3.prototype.fftImpl = function(t4, e3) {
    var n3 = t4.as1D(), r3 = n3.size;
    if (this.isExponentOf2(r3)) {
      var o3 = this.fftRadix2(n3, r3, e3).as2D(t4.shape[0], t4.shape[1]);
      return e3 && (o3 = cn(hn(o3).div(vn(r3)), pn(o3).div(vn(r3)))), o3;
    }
    var a3 = this.readSync(t4.dataId), i3 = function(t5) {
      for (var e4 = new Float32Array(t5.length / 2), n4 = new Float32Array(t5.length / 2), r4 = 0; r4 < t5.length; r4 += 2) e4[r4 / 2] = t5[r4], n4[r4 / 2] = t5[r4 + 1];
      return { real: e4, imag: n4 };
    }(this.fourierTransformByMatmul(a3, r3, e3));
    return cn(i3.real, i3.imag).as2D(t4.shape[0], t4.shape[1]);
  }, t3.prototype.isExponentOf2 = function(t4) {
    return 0 == (t4 & t4 - 1);
  }, t3.prototype.fftRadix2 = function(t4, e3, n3) {
    if (1 === e3) return t4;
    var r3 = this.readSync(t4.dataId), o3 = e3 / 2, a3 = function(t5) {
      for (var e4 = Math.ceil(t5.length / 4), n4 = new Float32Array(e4), r4 = new Float32Array(e4), o4 = 0; o4 < t5.length; o4 += 4) n4[Math.floor(o4 / 4)] = t5[o4], r4[Math.floor(o4 / 4)] = t5[o4 + 1];
      return { real: n4, imag: r4 };
    }(r3), i3 = cn(a3.real, a3.imag).as1D(), s3 = function(t5) {
      for (var e4 = Math.floor(t5.length / 4), n4 = new Float32Array(e4), r4 = new Float32Array(e4), o4 = 2; o4 < t5.length; o4 += 4) n4[Math.floor(o4 / 4)] = t5[o4], r4[Math.floor(o4 / 4)] = t5[o4 + 1];
      return { real: n4, imag: r4 };
    }(r3), u3 = cn(s3.real, s3.imag).as1D();
    i3 = this.fftRadix2(i3, o3, n3), u3 = this.fftRadix2(u3, o3, n3);
    var l3 = function(t5, e4) {
      for (var n4 = new Float32Array(t5 / 2), r4 = new Float32Array(t5 / 2), o4 = 0; o4 < Math.ceil(t5 / 2); o4++) {
        var a4 = (e4 ? 2 : -2) * Math.PI * (o4 / t5);
        n4[o4] = Math.cos(a4), r4[o4] = Math.sin(a4);
      }
      return { real: n4, imag: r4 };
    }(e3, n3), c3 = cn(l3.real, l3.imag).mul(u3), h3 = i3.add(c3), p3 = i3.sub(c3), f3 = hn(h3).concat(hn(p3)), d3 = pn(h3).concat(pn(p3));
    return cn(f3, d3).as1D();
  }, t3.prototype.fourierTransformByMatmul = function(t4, e3, n3) {
    for (var r3 = new Float32Array(2 * e3), o3 = 0; o3 < e3; o3++) {
      for (var a3 = 0, i3 = 0, s3 = 0; s3 < e3; s3++) {
        var u3 = ho(o3 * s3, e3, n3), l3 = lo(t4, s3);
        a3 += l3.real * u3.real - l3.imag * u3.imag, i3 += l3.real * u3.imag + l3.imag * u3.real;
      }
      n3 && (a3 /= e3, i3 /= e3), co(r3, a3, i3, o3);
    }
    return r3;
  }, t3.prototype.depthToSpace = function(t4, e3, n3) {
    d("NHWC" === n3, function() {
      return "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n3;
    }), d(e3 > 1, function() {
      return "blockSize should be > 1 for depthToSpace, but was: " + e3;
    });
    for (var r3 = t4.shape[0], o3 = t4.shape[1], a3 = t4.shape[2], i3 = t4.shape[3], s3 = o3 * e3, u3 = a3 * e3, l3 = i3 / (e3 * e3), c3 = this.readSync(t4.dataId), h3 = new Float32Array(r3 * s3 * u3 * l3), p3 = 0, f3 = 0; f3 < r3; ++f3) for (var v2 = 0; v2 < s3; ++v2) for (var m3 = Math.floor(v2 / e3), g2 = v2 % e3, y3 = 0; y3 < u3; ++y3) for (var x3 = Math.floor(y3 / e3), b3 = (g2 * e3 + y3 % e3) * l3, w3 = 0; w3 < l3; ++w3) {
      var C3 = w3 + b3 + i3 * (x3 + a3 * (m3 + o3 * f3));
      h3[p3++] = c3[C3];
    }
    return xn(h3, [r3, s3, u3, l3]);
  }, t3.prototype.broadcastedBinaryOp = function(t4, e3, n3, r3) {
    var o3 = jr(t4.shape, e3.shape), a3 = $n(o3, n3), i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = Hr(t4.shape, o3), l3 = Hr(e3.shape, o3), c3 = a3.values;
    if (u3.length + l3.length === 0) for (var h3 = 0; h3 < c3.length; ++h3) c3[h3] = r3(i3[h3 % i3.length], s3[h3 % s3.length]);
    else {
      var p3 = this.bufferSync(t4), f3 = this.bufferSync(e3), d3 = function(n4) {
        var o4 = a3.indexToLoc(n4), h4 = o4.slice(-t4.rank);
        u3.forEach(function(t5) {
          return h4[t5] = 0;
        });
        var d4 = p3.locToIndex(h4), v2 = o4.slice(-e3.rank);
        l3.forEach(function(t5) {
          return v2[t5] = 0;
        });
        var m3 = f3.locToIndex(v2);
        c3[n4] = r3(i3[d4], s3[m3]);
      };
      for (h3 = 0; h3 < c3.length; ++h3) d3(h3);
    }
    return a3.toTensor();
  }, t3.prototype.broadcastedBinaryComplexOp = function(t4, e3, n3) {
    var r3 = jr(t4.shape, e3.shape), o3 = $n(r3, "float32"), a3 = $n(r3, "float32"), i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = Hr(t4.shape, r3), l3 = Hr(e3.shape, r3), c3 = o3.values, h3 = a3.values;
    if (u3.length + l3.length === 0) for (var p3 = 0; p3 < c3.length; p3++) {
      var f3 = p3 % i3.length, d3 = p3 % s3.length, v2 = n3(i3[2 * f3], i3[2 * f3 + 1], s3[2 * d3], s3[2 * d3 + 1]);
      c3[p3] = v2.real, h3[p3] = v2.imag;
    }
    else {
      var m3 = this.bufferSync(this.data.get(t4.dataId).complexTensors.real), g2 = this.bufferSync(this.data.get(e3.dataId).complexTensors.real), y3 = function(r4) {
        var a4 = o3.indexToLoc(r4), p4 = a4.slice(-t4.rank);
        u3.forEach(function(t5) {
          return p4[t5] = 0;
        });
        var f4 = m3.locToIndex(p4), d4 = a4.slice(-e3.rank);
        l3.forEach(function(t5) {
          return d4[t5] = 0;
        });
        var v3 = g2.locToIndex(d4), y4 = n3(i3[2 * f4], i3[2 * f4 + 1], s3[2 * v3], s3[2 * v3 + 1]);
        c3[r4] = y4.real, h3[r4] = y4.imag;
      };
      for (p3 = 0; p3 < c3.length; p3++) y3(p3);
    }
    return this.complex(o3.toTensor(), a3.toTensor());
  }, t3.prototype.split = function(t4, e3, n3) {
    return vo(t4, e3, n3);
  }, t3.prototype.dispose = function() {
  }, t3.prototype.floatPrecision = function() {
    return 32;
  }, t3.prototype.epsilon = function() {
    return 1e-7;
  }, t3.prototype.cropAndResize = function(t4, e3, n3, r3, o3, a3) {
    for (var i3 = t4.shape, s3 = i3[0], u3 = i3[1], l3 = i3[2], c3 = i3[3], h3 = e3.shape[0], p3 = r3[0], f3 = r3[1], d3 = $n([h3, p3, f3, c3], t4.dtype), v2 = this.readSync(e3.dataId), m3 = this.readSync(n3.dataId), g2 = this.readSync(t4.dataId), y3 = t4.strides, x3 = d3.strides, b3 = 0; b3 < h3; b3++) {
      var w3 = 4 * b3, C3 = v2[w3], E3 = v2[w3 + 1], R3 = v2[w3 + 2], I3 = v2[w3 + 3], S3 = m3[b3];
      if (!(S3 >= s3)) for (var N3 = p3 > 1 ? (R3 - C3) * (u3 - 1) / (p3 - 1) : 0, k3 = f3 > 1 ? (I3 - E3) * (l3 - 1) / (f3 - 1) : 0, A3 = 0; A3 < p3; A3++) {
        var T3 = p3 > 1 ? C3 * (u3 - 1) + A3 * N3 : 0.5 * (C3 + R3) * (u3 - 1);
        if (T3 < 0 || T3 > u3 - 1) for (var D3 = 0; D3 < f3; D3++) for (var _3 = 0; _3 < c3; _3++) {
          var O3 = _3 + D3 * x3[2] + A3 * x3[1] + b3 * x3[0];
          d3.values[O3] = a3;
        }
        else if ("bilinear" === o3) {
          var F3 = Math.floor(T3), M3 = Math.ceil(T3), B3 = T3 - F3;
          for (D3 = 0; D3 < f3; D3++) {
            if ((H3 = f3 > 1 ? E3 * (l3 - 1) + D3 * k3 : 0.5 * (E3 + I3) * (l3 - 1)) < 0 || H3 > l3 - 1) for (_3 = 0; _3 < c3; _3++) {
              O3 = _3 + D3 * x3[2] + A3 * x3[1] + b3 * x3[0];
              d3.values[O3] = a3;
            }
            else {
              var P3 = Math.floor(H3), L3 = Math.ceil(H3), W3 = H3 - P3;
              for (_3 = 0; _3 < c3; _3++) {
                var U3 = g2[O3 = _3 + P3 * y3[2] + F3 * y3[1] + S3 * y3[0]], z3 = g2[O3 = _3 + L3 * y3[2] + F3 * y3[1] + S3 * y3[0]], V3 = g2[O3 = _3 + P3 * y3[2] + M3 * y3[1] + S3 * y3[0]], G3 = U3 + (z3 - U3) * W3, q3 = V3 + (g2[O3 = _3 + L3 * y3[2] + M3 * y3[1] + S3 * y3[0]] - V3) * W3;
                O3 = _3 + D3 * x3[2] + A3 * x3[1] + b3 * x3[0], d3.values[O3] = G3 + (q3 - G3) * B3;
              }
            }
          }
        } else for (D3 = 0; D3 < f3; ++D3) {
          var H3;
          if ((H3 = f3 > 1 ? E3 * (l3 - 1) + D3 * k3 : 0.5 * (E3 + I3) * (l3 - 1)) < 0 || H3 > l3 - 1) for (_3 = 0; _3 < c3; _3++) {
            O3 = _3 + D3 * x3[2] + A3 * x3[1] + b3 * x3[0];
            d3.values[O3] = a3;
          }
          else {
            var $3 = Math.round(H3), j3 = Math.round(T3);
            for (_3 = 0; _3 < c3; _3++) {
              var K3 = _3 + $3 * y3[2] + j3 * y3[1] + S3 * y3[0], X3 = _3 + D3 * x3[2] + A3 * x3[1] + b3 * x3[0];
              d3.values[X3] = g2[K3];
            }
          }
        }
      }
    }
    return d3.toTensor();
  }, t3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    var o3 = kr(0, t4, n3), a3 = o3.sliceRank, i3 = o3.numUpdates, s3 = o3.sliceSize, u3 = o3.strides, l3 = o3.outputSize;
    return this.scatter(t4, e3, n3, l3, s3, i3, a3, u3, r3, false);
  }, t3.prototype.gatherND = function(t4, e3) {
    var n3 = e3.shape, r3 = n3[n3.length - 1], o3 = Rr(t4, e3), a3 = o3[0], i3 = o3[1], s3 = o3[2], u3 = o3[3];
    if (0 === i3) return fn([], a3, t4.dtype);
    for (var l3 = new st([i3, s3], t4.dtype), c3 = this.readSync(e3.dataId), h3 = this.readSync(t4.dataId), p3 = 0; p3 < i3; p3++) {
      for (var f3 = [], d3 = 0, v2 = 0; v2 < r3; v2++) {
        var m3 = c3[p3 * r3 + v2];
        d3 += m3 * u3[v2], f3.push(m3);
      }
      if (d3 < 0 || d3 >= t4.size / s3) throw new Error("Invalid indices: " + f3 + " does not index into " + t4.shape);
      for (var g2 = 0; g2 < s3; g2++) l3.values[p3 * s3 + g2] = h3[d3 * s3 + g2];
    }
    return l3.toTensor().reshape(a3);
  }, t3.prototype.scatterND = function(t4, e3, n3) {
    var r3 = kr(0, t4, n3), o3 = r3.sliceRank, a3 = r3.numUpdates, i3 = r3.sliceSize, s3 = r3.strides, u3 = r3.outputSize, l3 = vn(0);
    return this.scatter(t4, e3, n3, u3, i3, a3, o3, s3, l3, true);
  }, t3.prototype.fill = function(t4, e3, n3) {
    var r3 = A(n3 = n3 || U(e3), y(t4));
    return r3.fill(e3), ht.make(t4, { values: r3 }, n3);
  }, t3.prototype.onesLike = function(t4) {
    if ("string" === t4.dtype) throw new Error("onesLike is not supported for string tensors");
    return this.fill(t4.shape, 1, t4.dtype);
  }, t3.prototype.zerosLike = function(t4) {
    var e3 = A(t4.dtype, y(t4.shape));
    return ht.make(t4.shape, { values: e3 }, t4.dtype);
  }, t3.prototype.linspace = function(t4, e3, n3) {
    return io(t4, e3, n3);
  }, t3.prototype.scatter = function(t4, e3, n3, r3, o3, a3, i3, s3, u3, l3) {
    var c3 = [r3 / o3, o3], h3 = this.readSync(t4.dataId), p3 = this.readSync(e3.dataId);
    if (0 === r3) return fn([], n3, e3.dtype);
    var f3 = new st(c3, e3.dtype);
    f3.values.fill(this.readSync(u3.dataId)[0]);
    for (var d3 = 0; d3 < a3; d3++) {
      for (var v2 = [], m3 = 0, g2 = 0; g2 < i3; g2++) {
        var y3 = h3[d3 * i3 + g2];
        v2.push(y3), m3 += y3 * s3[g2];
      }
      if (m3 < 0 || m3 >= r3 / o3) throw new Error("Invalid indices: " + v2 + " does not index into " + n3);
      for (var x3 = 0; x3 < o3; x3++) l3 ? f3.values[m3 * o3 + x3] += p3[d3 * o3 + x3] : f3.values[m3 * o3 + x3] = 0 === e3.rank ? p3[0] : p3[d3 * o3 + x3];
    }
    return f3.toTensor().reshape(n3);
  }, t3;
}();
At.registerBackend("cpu", function() {
  return new Ic();
}, 1);
var Sc = function() {
  function t3() {
    this.textEncoder = new TextEncoder(), this.textDecoder = new TextDecoder();
  }
  return t3.prototype.encodeUTF8 = function(t4) {
    return this.textEncoder.encode(t4);
  }, t3.prototype.decodeUTF8 = function(t4) {
    return this.textDecoder.decode(t4);
  }, t3.prototype.fetch = function(t4, e3) {
    return fetch(t4, e3);
  }, t3;
}();
s.get("IS_BROWSER") && s.setPlatform("browser", new Sc());
var Nc;
var kc = function() {
  return require_node_fetch();
};
var Ac = function() {
  function t3() {
    var t4 = require_util();
    this.textEncoder = new t4.TextEncoder(), this.textDecoder = new t4.TextDecoder();
  }
  return t3.prototype.encodeUTF8 = function(t4) {
    return this.textEncoder.encode(t4);
  }, t3.prototype.decodeUTF8 = function(t4) {
    return 0 === t4.length ? "" : this.textDecoder.decode(t4);
  }, t3.prototype.fetch = function(t4, e3) {
    return null != s.global.fetch ? s.global.fetch(t4, e3) : (null == Nc && (Nc = kc()), Nc(t4, e3));
  }, t3;
}();
s.get("IS_NODE") && s.setPlatform("node", new Ac());
var Tc = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 };
var Dc = "\0";
function _c(t3, e3) {
  for (var n3 = {}, r3 = 0, o3 = function(e4) {
    var o4 = e4.name, a4 = e4.dtype, i4 = e4.shape, u3 = y(i4), l3 = void 0;
    if ("quantization" in e4) {
      var c3 = e4.quantization;
      if ("uint8" !== c3.dtype && "uint16" !== c3.dtype) throw new Error("Weight " + e4.name + " has unknown quantization dtype " + c3.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
      var h3 = Tc[c3.dtype], p3 = t3.slice(r3, r3 + u3 * h3), f3 = "uint8" === c3.dtype ? new Uint8Array(p3) : new Uint16Array(p3);
      if ("float32" === a4) l3 = Float32Array.from(f3, function(t4) {
        return t4 * c3.scale + c3.min;
      });
      else {
        if ("int32" !== a4) throw new Error("Unsupported dtype in weight '" + o4 + "': " + a4);
        l3 = Int32Array.from(f3, function(t4) {
          return Math.round(t4 * c3.scale + c3.min);
        });
      }
      r3 += u3 * h3;
    } else if ("string" === a4) {
      var d3 = e4, v2 = new Uint8Array(t3.slice(r3, r3 + d3.byteLength));
      l3 = s.platform.decodeUTF8(v2).split(d3.delimiter), r3 += d3.byteLength;
    } else {
      var m3 = Tc[a4];
      p3 = t3.slice(r3, r3 + u3 * m3);
      if ("float32" === a4) l3 = new Float32Array(p3);
      else if ("int32" === a4) l3 = new Int32Array(p3);
      else {
        if ("bool" !== a4) throw new Error("Unsupported dtype in weight '" + o4 + "': " + a4);
        l3 = new Uint8Array(p3);
      }
      r3 += u3 * m3;
    }
    n3[o4] = fn(l3, i4, a4);
  }, a3 = 0, i3 = e3; a3 < i3.length; a3++) {
    o3(i3[a3]);
  }
  return n3;
}
function Oc(t3) {
  if (null === t3) throw new Error("Invalid input value: " + JSON.stringify(t3));
  var e3 = 0, n3 = [];
  t3.forEach(function(t4) {
    if (e3 += t4.byteLength, n3.push(t4.byteLength === t4.buffer.byteLength ? t4 : new t4.constructor(t4)), !(t4 instanceof Float32Array || t4 instanceof Int32Array || t4 instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + t4.constructor.name);
  });
  var r3 = new Uint8Array(e3), o3 = 0;
  return n3.forEach(function(t4) {
    r3.set(new Uint8Array(t4.buffer), o3), o3 += t4.byteLength;
  }), r3.buffer;
}
var Fc = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
function Mc(t3) {
  return Fc ? Buffer.byteLength(t3) : new Blob([t3]).size;
}
function Bc(t3) {
  var e3 = 0;
  t3.forEach(function(t4) {
    e3 += t4.byteLength;
  });
  var n3 = new Uint8Array(e3), r3 = 0;
  return t3.forEach(function(t4) {
    n3.set(new Uint8Array(t4), r3), r3 += t4.byteLength;
  }), n3.buffer;
}
function Pc(t3) {
  for (t3 = t3.trim(); t3.endsWith("/"); ) t3 = t3.slice(0, t3.length - 1);
  var e3 = t3.split("/");
  return e3[e3.length - 1];
}
function Lc(t3) {
  if (t3.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: null == t3.modelTopology ? 0 : Mc(JSON.stringify(t3.modelTopology)), weightSpecsBytes: null == t3.weightSpecs ? 0 : Mc(JSON.stringify(t3.weightSpecs)), weightDataBytes: null == t3.weightData ? 0 : t3.weightData.byteLength };
}
var Wc = function() {
  function t3() {
    this.saveRouters = [], this.loadRouters = [];
  }
  return t3.getInstance = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.registerSaveRouter = function(e3) {
    t3.getInstance().saveRouters.push(e3);
  }, t3.registerLoadRouter = function(e3) {
    t3.getInstance().loadRouters.push(e3);
  }, t3.getSaveHandlers = function(e3) {
    return t3.getHandlers(e3, "save");
  }, t3.getLoadHandlers = function(e3, n3) {
    return t3.getHandlers(e3, "load", n3);
  }, t3.getHandlers = function(e3, n3, r3) {
    var o3 = [];
    return ("load" === n3 ? t3.getInstance().loadRouters : t3.getInstance().saveRouters).forEach(function(t4) {
      var n4 = t4(e3, r3);
      null !== n4 && o3.push(n4);
    }), o3;
  }, t3;
}();
var Uc = "://";
var zc = function() {
  function t3() {
    this.managers = {};
  }
  return t3.getInstance = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.registerManager = function(e3, n3) {
    d(null != e3, function() {
      return "scheme must not be undefined or null.";
    }), e3.endsWith(Uc) && (e3 = e3.slice(0, e3.indexOf(Uc))), d(e3.length > 0, function() {
      return "scheme must not be an empty string.";
    });
    var r3 = t3.getInstance();
    d(null == r3.managers[e3], function() {
      return "A model store manager is already registered for scheme '" + e3 + "'.";
    }), r3.managers[e3] = n3;
  }, t3.getManager = function(t4) {
    var e3 = this.getInstance().managers[t4];
    if (null == e3) throw new Error("Cannot find model manager for scheme '" + t4 + "'");
    return e3;
  }, t3.getSchemes = function() {
    return Object.keys(this.getInstance().managers);
  }, t3;
}();
function Vc(t3) {
  if (-1 === t3.indexOf(Uc)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + zc.getSchemes().join(","));
  return { scheme: t3.split(Uc)[0], path: t3.split(Uc)[1] };
}
function Gc(t3, e3, n3) {
  return void 0 === n3 && (n3 = false), r(this, void 0, void 0, function() {
    var r3, a3, i3, s3, u3, l3, c3, h3, p3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          return d(t3 !== e3, function() {
            return "Old path and new path are the same: '" + t3 + "'";
          }), d((r3 = Wc.getLoadHandlers(t3)).length > 0, function() {
            return "Copying failed because no load handler is found for source URL " + t3 + ".";
          }), d(r3.length < 2, function() {
            return "Copying failed because more than one (" + r3.length + ") load handlers for source URL " + t3 + ".";
          }), a3 = r3[0], d((i3 = Wc.getSaveHandlers(e3)).length > 0, function() {
            return "Copying failed because no save handler is found for destination URL " + e3 + ".";
          }), d(i3.length < 2, function() {
            return "Copying failed because more than one (" + r3.length + ") save handlers for destination URL " + e3 + ".";
          }), s3 = i3[0], u3 = Vc(t3).scheme, l3 = Vc(t3).path, c3 = u3 === Vc(t3).scheme, [4, a3.load()];
        case 1:
          return h3 = o3.sent(), n3 && c3 ? [4, zc.getManager(u3).removeModel(l3)] : [3, 3];
        case 2:
          o3.sent(), o3.label = 3;
        case 3:
          return [4, s3.save(h3)];
        case 4:
          return p3 = o3.sent(), !n3 || c3 ? [3, 6] : [4, zc.getManager(u3).removeModel(l3)];
        case 5:
          o3.sent(), o3.label = 6;
        case 6:
          return [2, p3.modelArtifactsInfo];
      }
    });
  });
}
var qc = "models_store";
var Hc = "model_info_store";
function $c() {
  if (!s.getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  var t3 = window, e3 = t3.indexedDB || t3.mozIndexedDB || t3.webkitIndexedDB || t3.msIndexedDB || t3.shimIndexedDB;
  if (null == e3) throw new Error("The current browser does not appear to support IndexedDB.");
  return e3;
}
function jc(t3) {
  var e3 = t3.result;
  e3.createObjectStore(qc, { keyPath: "modelPath" }), e3.createObjectStore(Hc, { keyPath: "modelPath" });
}
var Kc = function() {
  function t3(t4) {
    if (this.indexedDB = $c(), null == t4 || !t4) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t4;
  }
  return t3.prototype.save = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        return [2, this.databaseAction(this.modelPath, t4)];
      });
    });
  }, t3.prototype.load = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        return [2, this.databaseAction(this.modelPath)];
      });
    });
  }, t3.prototype.databaseAction = function(t4, e3) {
    var n3 = this;
    return new Promise(function(t5, r3) {
      var o3 = n3.indexedDB.open("tensorflowjs", 1);
      o3.onupgradeneeded = function() {
        return jc(o3);
      }, o3.onsuccess = function() {
        var a3 = o3.result;
        if (null == e3) {
          var i3 = a3.transaction(qc, "readonly"), s3 = i3.objectStore(qc).get(n3.modelPath);
          s3.onsuccess = function() {
            if (null == s3.result) return a3.close(), r3(new Error("Cannot find model with path '" + n3.modelPath + "' in IndexedDB."));
            t5(s3.result.modelArtifacts);
          }, s3.onerror = function(t6) {
            return a3.close(), r3(s3.error);
          }, i3.oncomplete = function() {
            return a3.close();
          };
        } else {
          var u3, l3 = Lc(e3), c3 = a3.transaction(Hc, "readwrite"), h3 = c3.objectStore(Hc), p3 = h3.put({ modelPath: n3.modelPath, modelArtifactsInfo: l3 });
          p3.onsuccess = function() {
            var o4 = (u3 = a3.transaction(qc, "readwrite")).objectStore(qc).put({ modelPath: n3.modelPath, modelArtifacts: e3, modelArtifactsInfo: l3 });
            o4.onsuccess = function() {
              return t5({ modelArtifactsInfo: l3 });
            }, o4.onerror = function(t6) {
              var e4 = (h3 = c3.objectStore(Hc)).delete(n3.modelPath);
              e4.onsuccess = function() {
                return a3.close(), r3(o4.error);
              }, e4.onerror = function(t7) {
                return a3.close(), r3(o4.error);
              };
            };
          }, p3.onerror = function(t6) {
            return a3.close(), r3(p3.error);
          }, c3.oncomplete = function() {
            null == u3 ? a3.close() : u3.oncomplete = function() {
              return a3.close();
            };
          };
        }
      }, o3.onerror = function(t6) {
        return r3(o3.error);
      };
    });
  }, t3.URL_SCHEME = "indexeddb://", t3;
}();
var Xc = function(t3) {
  return s.getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(Kc.URL_SCHEME) ? (e3 = t3.slice(Kc.URL_SCHEME.length), new Kc(e3)) : null;
  var e3;
};
Wc.registerSaveRouter(Xc), Wc.registerLoadRouter(Xc);
var Yc = function() {
  function t3() {
    this.indexedDB = $c();
  }
  return t3.prototype.listModels = function() {
    return r(this, void 0, void 0, function() {
      var t4 = this;
      return o(this, function(e3) {
        return [2, new Promise(function(e4, n3) {
          var r3 = t4.indexedDB.open("tensorflowjs", 1);
          r3.onupgradeneeded = function() {
            return jc(r3);
          }, r3.onsuccess = function() {
            var t5 = r3.result, o3 = t5.transaction(Hc, "readonly"), a3 = o3.objectStore(Hc).getAll();
            a3.onsuccess = function() {
              for (var t6 = {}, n4 = 0, r4 = a3.result; n4 < r4.length; n4++) {
                var o4 = r4[n4];
                t6[o4.modelPath] = o4.modelArtifactsInfo;
              }
              e4(t6);
            }, a3.onerror = function(e5) {
              return t5.close(), n3(a3.error);
            }, o3.oncomplete = function() {
              return t5.close();
            };
          }, r3.onerror = function(t5) {
            return n3(r3.error);
          };
        })];
      });
    });
  }, t3.prototype.removeModel = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3 = this;
      return o(this, function(n3) {
        var r3;
        return t4 = (r3 = t4).startsWith(Kc.URL_SCHEME) ? r3.slice(Kc.URL_SCHEME.length) : r3, [2, new Promise(function(n4, r4) {
          var o3 = e3.indexedDB.open("tensorflowjs", 1);
          o3.onupgradeneeded = function() {
            return jc(o3);
          }, o3.onsuccess = function() {
            var e4, a3 = o3.result, i3 = a3.transaction(Hc, "readwrite"), s3 = i3.objectStore(Hc), u3 = s3.get(t4);
            u3.onsuccess = function() {
              if (null == u3.result) return a3.close(), r4(new Error("Cannot find model with path '" + t4 + "' in IndexedDB."));
              var o4 = s3.delete(t4), i4 = function() {
                var o5 = (e4 = a3.transaction(qc, "readwrite")).objectStore(qc).delete(t4);
                o5.onsuccess = function() {
                  return n4(u3.result.modelArtifactsInfo);
                }, o5.onerror = function(t5) {
                  return r4(u3.error);
                };
              };
              o4.onsuccess = i4, o4.onerror = function(t5) {
                return i4(), a3.close(), r4(u3.error);
              };
            }, u3.onerror = function(t5) {
              return a3.close(), r4(u3.error);
            }, i3.oncomplete = function() {
              null == e4 ? a3.close() : e4.oncomplete = function() {
                return a3.close();
              };
            };
          }, o3.onerror = function(t5) {
            return r4(o3.error);
          };
        })];
      });
    });
  }, t3;
}();
if (s.getBool("IS_BROWSER")) try {
  zc.registerManager(Kc.URL_SCHEME, new Yc());
} catch (t3) {
}
var Qc = "/";
var Jc = "tensorflowjs_models";
var Zc = "info";
var th = "model_topology";
var eh = "weight_specs";
var nh = "weight_data";
var rh = "model_metadata";
function oh(t3) {
  return { info: [Jc, t3, Zc].join(Qc), topology: [Jc, t3, th].join(Qc), weightSpecs: [Jc, t3, eh].join(Qc), weightData: [Jc, t3, nh].join(Qc), modelMetadata: [Jc, t3, rh].join(Qc) };
}
function ah(t3) {
  var e3 = t3.split(Qc);
  if (e3.length < 3) throw new Error("Invalid key format: " + t3);
  return e3.slice(1, e3.length - 1).join(Qc);
}
var ih = function() {
  function t3(t4) {
    if (!s.getBool("IS_BROWSER") || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, null == t4 || !t4) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t4, this.keys = oh(this.modelPath);
  }
  return t3.prototype.save = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3;
      return o(this, function(o3) {
        if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        e3 = JSON.stringify(t4.modelTopology), n3 = JSON.stringify(t4.weightSpecs), r3 = Lc(t4);
        try {
          return this.LS.setItem(this.keys.info, JSON.stringify(r3)), this.LS.setItem(this.keys.topology, e3), this.LS.setItem(this.keys.weightSpecs, n3), this.LS.setItem(this.keys.weightData, (a3 = t4.weightData, Fc ? Buffer.from(a3).toString("base64") : btoa(String.fromCharCode.apply(null, new Uint8Array(a3))))), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({ format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy })), [2, { modelArtifactsInfo: r3 }];
        } catch (t5) {
          throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + r3.modelTopologyBytes + ", weightSpecsBytes=" + r3.weightSpecsBytes + ", weightDataBytes=" + r3.weightDataBytes + ".");
        }
        var a3;
        return [2];
      });
    });
  }, t3.prototype.load = function() {
    return r(this, void 0, void 0, function() {
      var t4, e3, n3, r3, a3, i3, s3;
      return o(this, function(o3) {
        if (null == (t4 = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
        if ("JSON" !== t4.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
        if (e3 = {}, null == (n3 = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
        if (e3.modelTopology = n3, null == (r3 = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
        if (e3.weightSpecs = r3, null != (a3 = this.LS.getItem(this.keys.modelMetadata)) && (i3 = JSON.parse(a3), e3.format = i3.format, e3.generatedBy = i3.generatedBy, e3.convertedBy = i3.convertedBy), null == (s3 = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
        return e3.weightData = function(t5) {
          if (Fc) {
            var e4 = Buffer.from(t5, "base64");
            return e4.buffer.slice(e4.byteOffset, e4.byteOffset + e4.byteLength);
          }
          for (var n4 = atob(t5), r4 = new Uint8Array(n4.length), o4 = 0; o4 < n4.length; ++o4) r4.set([n4.charCodeAt(o4)], o4);
          return r4.buffer;
        }(s3), [2, e3];
      });
    });
  }, t3.URL_SCHEME = "localstorage://", t3;
}();
var sh = function(t3) {
  return s.getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(ih.URL_SCHEME) ? (e3 = t3.slice(ih.URL_SCHEME.length), new ih(e3)) : null;
  var e3;
};
Wc.registerSaveRouter(sh), Wc.registerLoadRouter(sh);
var uh = function() {
  function t3() {
    d(s.getBool("IS_BROWSER"), function() {
      return "Current environment is not a web browser";
    }), d(void 0 !== window.localStorage, function() {
      return "Current browser does not appear to support localStorage";
    }), this.LS = window.localStorage;
  }
  return t3.prototype.listModels = function() {
    return r(this, void 0, void 0, function() {
      var t4, e3, n3, r3, a3, i3;
      return o(this, function(o3) {
        for (t4 = {}, e3 = Jc + Qc, n3 = Qc + Zc, r3 = 0; r3 < this.LS.length; ++r3) (a3 = this.LS.key(r3)).startsWith(e3) && a3.endsWith(n3) && (i3 = ah(a3), t4[i3] = JSON.parse(this.LS.getItem(a3)));
        return [2, t4];
      });
    });
  }, t3.prototype.removeModel = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3;
      return o(this, function(r3) {
        var o3;
        if (t4 = (o3 = t4).startsWith(ih.URL_SCHEME) ? o3.slice(ih.URL_SCHEME.length) : o3, e3 = oh(t4), null == this.LS.getItem(e3.info)) throw new Error("Cannot find model at path '" + t4 + "'");
        return n3 = JSON.parse(this.LS.getItem(e3.info)), this.LS.removeItem(e3.info), this.LS.removeItem(e3.topology), this.LS.removeItem(e3.weightSpecs), this.LS.removeItem(e3.weightData), [2, n3];
      });
    });
  }, t3;
}();
if (s.getBool("IS_BROWSER")) try {
  zc.registerManager(ih.URL_SCHEME, new uh());
} catch (t3) {
}
var lh = "model";
var ch = ".json";
var hh = ".weights.bin";
function ph(t3) {
  return new Promise(function(t4) {
    return setTimeout(t4);
  }).then(t3);
}
var fh = function() {
  function t3(e3) {
    if (!s.getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e3.startsWith(t3.URL_SCHEME) && (e3 = e3.slice(t3.URL_SCHEME.length)), null != e3 && 0 !== e3.length || (e3 = lh), this.modelTopologyFileName = e3 + ch, this.weightDataFileName = e3 + hh;
  }
  return t3.prototype.save = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3, a3, i3, s3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            if ("undefined" == typeof document) throw new Error("Browser downloads are not supported in this environment since `document` is not present");
            if (e3 = window.URL.createObjectURL(new Blob([t4.weightData], { type: "application/octet-stream" })), !(t4.modelTopology instanceof ArrayBuffer)) return [3, 1];
            throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
          case 1:
            return n3 = [{ paths: ["./" + this.weightDataFileName], weights: t4.weightSpecs }], r3 = { modelTopology: t4.modelTopology, format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy, weightsManifest: n3 }, a3 = window.URL.createObjectURL(new Blob([JSON.stringify(r3)], { type: "application/json" })), (i3 = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, i3.href = a3, [4, ph(function() {
              return i3.dispatchEvent(new MouseEvent("click"));
            })];
          case 2:
            return o3.sent(), null == t4.weightData ? [3, 4] : ((s3 = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, s3.href = e3, [4, ph(function() {
              return s3.dispatchEvent(new MouseEvent("click"));
            })]);
          case 3:
            o3.sent(), o3.label = 4;
          case 4:
            return [2, { modelArtifactsInfo: Lc(t4) }];
        }
      });
    });
  }, t3.URL_SCHEME = "downloads://", t3;
}();
var dh = function() {
  function t3(t4) {
    if (null == t4 || t4.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + t4);
    this.files = t4;
  }
  return t3.prototype.load = function() {
    return r(this, void 0, void 0, function() {
      var t4, e3, n3 = this;
      return o(this, function(r3) {
        return t4 = this.files[0], e3 = this.files.slice(1), [2, new Promise(function(r4, o3) {
          var a3 = new FileReader();
          a3.onload = function(a4) {
            var i3 = JSON.parse(a4.target.result), s3 = i3.modelTopology;
            if (null != s3) {
              0 === e3.length && r4({ modelTopology: s3 });
              var u3 = i3.weightsManifest;
              if (null != u3) {
                var l3;
                try {
                  l3 = n3.checkManifestAndWeightFiles(u3, e3);
                } catch (t5) {
                  return void o3(t5);
                }
                var c3 = [], h3 = [], p3 = [];
                u3.forEach(function(t5) {
                  t5.paths.forEach(function(t6) {
                    h3.push(t6), p3.push(null);
                  }), c3.push.apply(c3, t5.weights);
                }), u3.forEach(function(t5) {
                  t5.paths.forEach(function(t6) {
                    var e4 = new FileReader();
                    e4.onload = function(e5) {
                      var n4 = e5.target.result, o4 = h3.indexOf(t6);
                      p3[o4] = n4, -1 === p3.indexOf(null) && r4({ modelTopology: s3, weightSpecs: c3, weightData: Bc(p3) });
                    }, e4.onerror = function(e5) {
                      return o3("Failed to weights data from file of path '" + t6 + "'.");
                    }, e4.readAsArrayBuffer(l3[t6]);
                  });
                });
              } else o3(new Error("weightManifest field is missing from file " + t4.name));
            } else o3(new Error("modelTopology field is missing from file " + t4.name));
          }, a3.onerror = function(e4) {
            return o3("Failed to read model topology and weights manifest JSON from file '" + t4.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
          }, a3.readAsText(t4);
        })];
      });
    });
  }, t3.prototype.checkManifestAndWeightFiles = function(t4, e3) {
    for (var n3 = [], r3 = e3.map(function(t5) {
      return Pc(t5.name);
    }), o3 = {}, a3 = 0, i3 = t4; a3 < i3.length; a3++) {
      i3[a3].paths.forEach(function(t5) {
        var a4 = Pc(t5);
        if (-1 !== n3.indexOf(a4)) throw new Error("Duplicate file basename found in weights manifest: '" + a4 + "'");
        if (n3.push(a4), -1 === r3.indexOf(a4)) throw new Error("Weight file with basename '" + a4 + "' is not provided.");
        o3[t5] = e3[r3.indexOf(a4)];
      });
    }
    if (n3.length !== e3.length) throw new Error("Mismatch in the number of files in weights manifest (" + n3.length + ") and the number of weight files provided (" + e3.length + ").");
    return o3;
  }, t3;
}();
function vh(t3, e3, n3, r3) {
  !function(t4) {
    d(null != t4 && Array.isArray(t4) && t4.length > 0, function() {
      return "promises must be a none empty array";
    });
  }(t3), function(t4, e4) {
    d(t4 >= 0 && t4 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got startFraction " + t4;
    }), d(e4 >= 0 && e4 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got endFraction " + e4;
    }), d(e4 >= t4, function() {
      return "startFraction must be no more than endFraction, but got startFraction " + t4 + " and endFraction " + e4;
    });
  }(n3 = null == n3 ? 0 : n3, r3 = null == r3 ? 1 : r3);
  var o3 = 0;
  return Promise.all(t3.map(function(a3) {
    return a3.then(function(a4) {
      var i3 = n3 + ++o3 / t3.length * (r3 - n3);
      return e3(i3), a4;
    }), a3;
  }));
}
function mh(t3, e3) {
  return r(this, void 0, void 0, function() {
    var n3, r3, a3, i3, s3, u3, l3, c3, h3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          return null == e3 && (e3 = {}), n3 = null == e3.fetchFunc ? Y : e3.fetchFunc, r3 = t3.map(function(t4) {
            return n3(t4, e3.requestInit);
          }), a3 = 0, i3 = 0.5, null != e3.onProgress ? [3, 2] : [4, Promise.all(r3)];
        case 1:
          return s3 = o3.sent(), [3, 4];
        case 2:
          return [4, vh(r3, e3.onProgress, a3, i3)];
        case 3:
          s3 = o3.sent(), o3.label = 4;
        case 4:
          return u3 = s3.map(function(t4) {
            return t4.arrayBuffer();
          }), l3 = 0.5, c3 = 1, null != e3.onProgress ? [3, 6] : [4, Promise.all(u3)];
        case 5:
          return h3 = o3.sent(), [3, 8];
        case 6:
          return [4, vh(u3, e3.onProgress, l3, c3)];
        case 7:
          h3 = o3.sent(), o3.label = 8;
        case 8:
          return [2, h3];
      }
    });
  });
}
function gh(t3) {
  var e3 = this;
  return function(n3, a3, i3) {
    return void 0 === a3 && (a3 = ""), r(e3, void 0, void 0, function() {
      var e4, r3, s3, u3, l3, c3, h3, p3, f3, d3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            if (e4 = n3.map(function() {
              return false;
            }), r3 = {}, s3 = null != i3 ? i3.map(function() {
              return false;
            }) : [], u3 = [], n3.forEach(function(t4, n4) {
              var o4 = 0;
              t4.weights.forEach(function(t5) {
                var a4 = "quantization" in t5 ? t5.quantization.dtype : t5.dtype, l4 = Tc[a4] * y(t5.shape), c4 = function() {
                  e4[n4] = true, null == r3[n4] && (r3[n4] = []), r3[n4].push({ manifestEntry: t5, groupOffset: o4, sizeBytes: l4 });
                };
                null != i3 ? i3.forEach(function(e5, n5) {
                  e5 === t5.name && (c4(), s3[n5] = true);
                }) : c4(), u3.push(t5.name), o4 += l4;
              });
            }), !s3.every(function(t4) {
              return t4;
            })) throw l3 = i3.filter(function(t4, e5) {
              return !s3[e5];
            }), new Error("Could not find weights in manifest with names: " + l3.join(", ") + ". \nManifest JSON has weights with names: " + u3.join(", ") + ".");
            return c3 = e4.reduce(function(t4, e5, n4) {
              return e5 && t4.push(n4), t4;
            }, []), h3 = [], c3.forEach(function(t4) {
              n3[t4].paths.forEach(function(t5) {
                var e5 = a3 + (a3.endsWith("/") ? "" : "/") + t5;
                h3.push(e5);
              });
            }), [4, t3(h3)];
          case 1:
            return p3 = o3.sent(), f3 = {}, d3 = 0, c3.forEach(function(t4) {
              for (var e5 = n3[t4].paths.length, o4 = 0, a4 = 0; a4 < e5; a4++) o4 += p3[d3 + a4].byteLength;
              for (var i4 = new ArrayBuffer(o4), s4 = new Uint8Array(i4), u4 = 0, l4 = 0; l4 < e5; l4++) {
                var c4 = new Uint8Array(p3[d3 + l4]);
                s4.set(c4, u4), u4 += c4.byteLength;
              }
              r3[t4].forEach(function(t5) {
                var e6 = _c(i4.slice(t5.groupOffset, t5.groupOffset + t5.sizeBytes), [t5.manifestEntry]);
                for (var n4 in e6) f3[n4] = e6[n4];
              }), d3 += e5;
            }), [2, f3];
        }
      });
    });
  };
}
Wc.registerSaveRouter(function(t3) {
  return s.getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(fh.URL_SCHEME) ? (e3 = t3.slice(fh.URL_SCHEME.length), void 0 === e3 && (e3 = "model"), new fh(e3)) : null;
  var e3;
});
var yh = function() {
  function t3(t4, e3) {
    if (this.DEFAULT_METHOD = "POST", null == e3 && (e3 = {}), this.weightPathPrefix = e3.weightPathPrefix, this.onProgress = e3.onProgress, null != e3.fetchFunc ? (d("function" == typeof e3.fetchFunc, function() {
      return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
    }), this.fetch = e3.fetchFunc) : this.fetch = Y, d(null != t4 && t4.length > 0, function() {
      return "URL path for http must not be null, undefined or empty.";
    }), Array.isArray(t4) && d(2 === t4.length, function() {
      return "URL paths for http must have a length of 2, (actual length is " + t4.length + ").";
    }), this.path = t4, null != e3.requestInit && null != e3.requestInit.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e3.requestInit || {};
  }
  return t3.prototype.save = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3, a3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
            return (e3 = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit)).body = new FormData(), n3 = [{ paths: ["./model.weights.bin"], weights: t4.weightSpecs }], r3 = { modelTopology: t4.modelTopology, format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy, weightsManifest: n3 }, e3.body.append("model.json", new Blob([JSON.stringify(r3)], { type: "application/json" }), "model.json"), null != t4.weightData && e3.body.append("model.weights.bin", new Blob([t4.weightData], { type: "application/octet-stream" }), "model.weights.bin"), [4, this.fetch(this.path, e3)];
          case 1:
            if ((a3 = o3.sent()).ok) return [2, { modelArtifactsInfo: Lc(t4), responses: [a3] }];
            throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a3.status + ".");
        }
      });
    });
  }, t3.prototype.load = function() {
    return r(this, void 0, void 0, function() {
      var t4, e3, n3, r3, a3, i3, s3, u3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            return [4, this.fetch(this.path, this.requestInit)];
          case 1:
            if (!(t4 = o3.sent()).ok) throw new Error("Request to " + this.path + " failed with status code " + t4.status + ". Please verify this URL points to the model JSON of the model to load.");
            o3.label = 2;
          case 2:
            return o3.trys.push([2, 4, , 5]), [4, t4.json()];
          case 3:
            return e3 = o3.sent(), [3, 5];
          case 4:
            throw o3.sent(), n3 = "Failed to parse model JSON of response from " + this.path + ".", this.path.endsWith(".pb") ? n3 += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : n3 += " Please make sure the server is serving valid JSON for this request.", new Error(n3);
          case 5:
            if (r3 = e3.modelTopology, a3 = e3.weightsManifest, null == r3 && null == a3) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
            return null == a3 ? [3, 7] : [4, this.loadWeights(a3)];
          case 6:
            u3 = o3.sent(), i3 = u3[0], s3 = u3[1], o3.label = 7;
          case 7:
            return [2, { modelTopology: r3, weightSpecs: i3, weightData: s3 }];
        }
      });
    });
  }, t3.prototype.loadWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n3, r3, a3, i3, s3, u3, l3, c3, h3, p3;
      return o(this, function(o3) {
        switch (o3.label) {
          case 0:
            for (e3 = Array.isArray(this.path) ? this.path[1] : this.path, n3 = function(t5) {
              var e4 = t5.lastIndexOf("/"), n4 = t5.lastIndexOf("?"), r4 = t5.substring(0, e4), o4 = n4 > e4 ? t5.substring(n4) : "";
              return [r4 + "/", o4];
            }(e3), r3 = n3[0], a3 = n3[1], i3 = this.weightPathPrefix || r3, s3 = [], u3 = 0, l3 = t4; u3 < l3.length; u3++) c3 = l3[u3], s3.push.apply(s3, c3.weights);
            return h3 = [], t4.forEach(function(t5) {
              t5.paths.forEach(function(t6) {
                h3.push(i3 + t6 + a3);
              });
            }), [4, mh(h3, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress })];
          case 1:
            return p3 = o3.sent(), [2, [s3, Bc(p3)]];
        }
      });
    });
  }, t3.URL_SCHEME_REGEX = /^https?:\/\//, t3;
}();
function xh(t3) {
  return null != t3.match(yh.URL_SCHEME_REGEX);
}
var bh = function(t3, e3) {
  return (Array.isArray(t3) ? t3.every(function(t4) {
    return xh(t4);
  }) : xh(t3)) ? wh(t3, { onProgress: e3 }) : null;
};
function wh(t3, e3) {
  return new yh(t3, e3);
}
Wc.registerSaveRouter(bh), Wc.registerLoadRouter(bh);
var Ch = function() {
  function t3(t4, e3, n3, r3) {
    this.modelTopology = t4, this.weightSpecs = e3, this.weightData = n3, this.trainingConfig = r3;
  }
  return t3.prototype.load = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        return t4 = {}, null != this.modelTopology && (t4 = n({ modelTopology: this.modelTopology }, t4)), null != this.weightSpecs && this.weightSpecs.length > 0 && (t4 = n({ weightSpecs: this.weightSpecs }, t4)), null != this.weightData && this.weightData.byteLength > 0 && (t4 = n({ weightData: this.weightData }, t4)), null != this.trainingConfig && (t4 = n({ trainingConfig: this.trainingConfig }, t4)), [2, t4];
      });
    });
  }, t3;
}();
var Eh = function() {
  function t3(t4) {
    this.saveHandler = t4;
  }
  return t3.prototype.save = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        return [2, this.saveHandler(t4)];
      });
    });
  }, t3;
}();
var Rh = Object.freeze({ browserFiles: function(t3) {
  return new dh(t3);
}, browserHTTPRequest: function(t3, e3) {
  return wh(t3, e3);
}, concatenateArrayBuffers: Bc, decodeWeights: _c, encodeWeights: function(t3, e3) {
  return r(this, void 0, void 0, function() {
    var n3, a3, i3, u3, l3, c3 = this;
    return o(this, function(h3) {
      switch (h3.label) {
        case 0:
          for (n3 = [], a3 = [], i3 = Array.isArray(t3) ? t3.map(function(t4) {
            return t4.name;
          }) : Object.keys(t3), u3 = function(u4) {
            var l4 = i3[u4], h4 = Array.isArray(t3) ? t3[u4].tensor : t3[l4];
            if ("float32" !== h4.dtype && "int32" !== h4.dtype && "bool" !== h4.dtype && "string" !== h4.dtype) throw new Error("Unsupported dtype in weight '" + l4 + "': " + h4.dtype);
            var p3 = { name: l4, shape: h4.shape, dtype: h4.dtype };
            if ("string" === h4.dtype) {
              var f3 = new Promise(function(t4) {
                return r(c3, void 0, void 0, function() {
                  var e4, n4, r3;
                  return o(this, function(o3) {
                    switch (o3.label) {
                      case 0:
                        return e4 = p3, [4, h4.data()];
                      case 1:
                        return n4 = o3.sent(), r3 = s.platform.encodeUTF8(n4.join(Dc)), e4.byteLength = r3.length, e4.delimiter = Dc, t4(r3), [2];
                    }
                  });
                });
              });
              a3.push(f3);
            } else a3.push(h4.data());
            null != e3 && (p3.group = e3), n3.push(p3);
          }, l3 = 0; l3 < i3.length; ++l3) u3(l3);
          return [4, Promise.all(a3)];
        case 1:
          return [2, { data: Oc(h3.sent()), specs: n3 }];
      }
    });
  });
}, fromMemory: function(t3, e3, n3, r3) {
  return new Ch(t3, e3, n3, r3);
}, getLoadHandlers: function(t3, e3) {
  return Wc.getLoadHandlers(t3, e3);
}, getModelArtifactsInfoForJSON: Lc, getSaveHandlers: function(t3) {
  return Wc.getSaveHandlers(t3);
}, http: wh, isHTTPScheme: xh, loadWeights: function(t3, e3, n3, a3) {
  return void 0 === e3 && (e3 = ""), r(this, void 0, void 0, function() {
    return o(this, function(r3) {
      return [2, gh(function(t4) {
        return mh(t4, { requestInit: a3 });
      })(t3, e3, n3)];
    });
  });
}, registerLoadRouter: function(t3) {
  return Wc.registerLoadRouter(t3);
}, registerSaveRouter: function(t3) {
  return Wc.registerSaveRouter(t3);
}, weightsLoaderFactory: gh, withSaveHandler: function(t3) {
  return new Eh(t3);
}, copyModel: function(t3, e3) {
  return r(this, void 0, void 0, function() {
    return o(this, function(n3) {
      return [2, Gc(t3, e3, false)];
    });
  });
}, listModels: function() {
  return r(this, void 0, void 0, function() {
    var t3, e3, n3, r3, a3, i3, s3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          t3 = zc.getSchemes(), e3 = {}, n3 = 0, r3 = t3, o3.label = 1;
        case 1:
          return n3 < r3.length ? (a3 = r3[n3], [4, zc.getManager(a3).listModels()]) : [3, 4];
        case 2:
          for (s3 in i3 = o3.sent()) e3[a3 + Uc + s3] = i3[s3];
          o3.label = 3;
        case 3:
          return n3++, [3, 1];
        case 4:
          return [2, e3];
      }
    });
  });
}, moveModel: function(t3, e3) {
  return r(this, void 0, void 0, function() {
    return o(this, function(n3) {
      return [2, Gc(t3, e3, true)];
    });
  });
}, removeModel: function(t3) {
  return r(this, void 0, void 0, function() {
    var e3;
    return o(this, function(n3) {
      return e3 = Vc(t3), [2, zc.getManager(e3.scheme).removeModel(e3.path)];
    });
  });
} });
var Ih = ln({ confusionMatrix_: function(t3, e3, n3) {
  var r3 = Ye(t3, "labels", "confusionMatrix"), o3 = Ye(e3, "predictions", "confusionMatrix");
  d(null == n3 || n3 > 0 && Number.isInteger(n3), function() {
    return "If provided, numClasses must be a positive integer, but got " + n3;
  }), d(1 === r3.rank, function() {
    return "Expected the rank of labels to be 1, but got " + r3.rank;
  }), d(1 === o3.rank, function() {
    return "Expected the rank of predictions to be 1, but got " + o3.rank;
  }), d(r3.shape[0] === o3.shape[0], function() {
    return "Mismatch in the number of examples: " + r3.shape[0] + " vs. " + o3.shape[0] + ". Labels and predictions should have the same number of elements.";
  }), d(n3 > 0 && Number.isInteger(n3), function() {
    return "numClasses is required to be a positive integer, but got " + n3;
  });
  var a3 = nr(r3.asType("int32"), n3), i3 = nr(o3.asType("int32"), n3);
  return a3.transpose().matMul(i3).asType("int32");
} });
var Sh = Object.freeze({ confusionMatrix: Ih });
var Nh = ln({ fromPixels_: function(t3, e3) {
  if (void 0 === e3 && (e3 = 3), e3 > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  return At.fromPixels(t3, e3);
} });
var kh = Object.freeze({ toPixels: function(t3, e3) {
  return r(this, void 0, void 0, function() {
    var n3, r3, a3, i3, s3, u3, l3, c3, h3, p3, f3, d3, v2, m3, g2, y3, x3, b3, w3, C3, E3, R3, I3;
    return o(this, function(o3) {
      switch (o3.label) {
        case 0:
          if (n3 = Ye(t3, "img", "toPixels"), t3 instanceof ht || (n3 = n3.toInt()), 2 !== n3.rank && 3 !== n3.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n3.rank + ".");
          if (r3 = n3.shape.slice(0, 2), a3 = r3[0], i3 = r3[1], (s3 = 2 === n3.rank ? 1 : n3.shape[2]) > 4 || 2 === s3) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + s3);
          return [4, n3.data()];
        case 1:
          return u3 = o3.sent(), l3 = n3.min(), c3 = n3.max(), [4, Promise.all([l3.data(), c3.data()])];
        case 2:
          if (h3 = o3.sent(), p3 = h3[0], f3 = h3[1], d3 = p3[0], v2 = f3[0], l3.dispose(), c3.dispose(), "float32" === n3.dtype) {
            if (d3 < 0 || v2 > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + d3 + " - " + v2 + "].");
          } else {
            if ("int32" !== n3.dtype) throw new Error("Unsupported type for toPixels: " + n3.dtype + ". Please use float32 or int32 tensors.");
            if (d3 < 0 || v2 > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + d3 + " - " + v2 + "].");
          }
          for (m3 = "float32" === n3.dtype ? 255 : 1, g2 = new Uint8ClampedArray(i3 * a3 * 4), y3 = 0; y3 < a3 * i3; ++y3) x3 = void 0, b3 = void 0, w3 = void 0, C3 = void 0, 1 === s3 ? (x3 = u3[y3] * m3, b3 = u3[y3] * m3, w3 = u3[y3] * m3, C3 = 255) : 3 === s3 ? (x3 = u3[3 * y3] * m3, b3 = u3[3 * y3 + 1] * m3, w3 = u3[3 * y3 + 2] * m3, C3 = 255) : 4 === s3 && (x3 = u3[4 * y3] * m3, b3 = u3[4 * y3 + 1] * m3, w3 = u3[4 * y3 + 2] * m3, C3 = u3[4 * y3 + 3] * m3), g2[0 + (E3 = 4 * y3)] = Math.round(x3), g2[E3 + 1] = Math.round(b3), g2[E3 + 2] = Math.round(w3), g2[E3 + 3] = Math.round(C3);
          return null != e3 && (e3.width = i3, e3.height = a3, R3 = e3.getContext("2d"), I3 = new ImageData(g2, i3, a3), R3.putImageData(I3, 0, 0)), n3 !== t3 && n3.dispose(), [2, g2];
      }
    });
  });
}, fromPixels: Nh });
var Ah = function() {
  function t3() {
  }
  return t3.prototype.getClassName = function() {
    return this.constructor.className;
  }, t3.fromConfig = function(t4, e3) {
    return new t4(e3);
  }, t3;
}();
var Th = function() {
  function t3() {
    this.classNameMap = {};
  }
  return t3.getMap = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.register = function(e3) {
    t3.getMap().classNameMap[e3.className] = [e3, e3.fromConfig];
  }, t3;
}();
function Dh(t3) {
  d(null != t3.className, function() {
    return "Class being registered does not have the static className property defined.";
  }), d("string" == typeof t3.className, function() {
    return "className is required to be a string, but got type " + typeof t3.className;
  }), d(t3.className.length > 0, function() {
    return "Class being registered has an empty-string as its className, which is disallowed.";
  }), Th.register(t3);
}
var _h = Object.freeze({ Serializable: Ah, SerializationMap: Th, registerClass: Dh });
var Oh = 1e-3;
var Fh = 0.1;
function Mh() {
  return 32 === At.backend.floatPrecision() ? Oh : Fh;
}
function Bh(t3, e3, n3) {
  var r3 = true;
  if ((F(t3) || F(e3)) && (r3 = false), F(t3) && F(e3) && (r3 = true), r3) {
    var o3 = t3.constructor.name, a3 = e3.constructor.name;
    if (o3 !== a3) throw new Error("Arrays are of different type. Actual: " + o3 + ". Expected: " + a3);
  }
  if (Array.isArray(t3) && Array.isArray(e3)) {
    var i3 = Ke(t3), s3 = Ke(e3);
    if (!x(i3, s3)) throw new Error("Arrays have different shapes. Actual: [" + i3 + "]. Expected: [" + s3 + "]");
  }
  var u3 = F(t3) ? t3 : g(t3), l3 = F(e3) ? e3 : g(e3);
  if (u3.length !== l3.length) throw new Error("Arrays have different lengths actual: " + u3.length + " vs expected: " + l3.length + ".\nActual:   " + u3 + ".\nExpected: " + l3 + ".");
  for (var c3 = 0; c3 < l3.length; ++c3) {
    var h3 = u3[c3], p3 = l3[c3];
    if (!n3(h3, p3)) throw new Error("Arrays differ: actual[" + c3 + "] = " + h3 + ", expected[" + c3 + "] = " + p3 + ".\nActual:   " + u3 + ".\nExpected: " + l3 + ".");
  }
}
function Ph(t3, e3, n3) {
  return !isFinite(t3) && !isFinite(e3) || !(isNaN(t3) || isNaN(e3) || Math.abs(t3 - e3) > n3);
}
var Lh = Object.freeze({ TEST_EPSILON_FLOAT16: Fh, expectArraysClose: function(t3, e3, n3) {
  return null == n3 && (n3 = Mh()), Bh(t3, e3, function(t4, e4) {
    return Ph(t4, e4, n3);
  });
}, testEpsilon: Mh, expectPromiseToFail: function(t3, e3) {
  t3().then(function() {
    return e3.fail();
  }, function() {
    return e3();
  });
}, expectArraysEqual: function(t3, e3) {
  var n3 = "string" == typeof e3 || "number" == typeof e3 || "boolean" == typeof e3 ? [e3] : e3;
  return P(t3) || P(t3[0]) || P(e3) || P(e3[0]) ? Bh(t3, n3, function(t4, e4) {
    return t4 == e4;
  }) : Bh(t3, e3, function(t4, e4) {
    return Ph(t4, e4, 0);
  });
}, expectNumbersClose: function(t3, e3, n3) {
  if (null == n3 && (n3 = Mh()), !Ph(t3, e3, n3)) throw new Error("Numbers differ: actual === " + t3 + ", expected === " + e3);
}, expectValuesInRange: function(t3, e3, n3) {
  for (var r3 = 0; r3 < t3.length; r3++) if (t3[r3] < e3 || t3[r3] > n3) throw new Error("Value out of range:" + t3[r3] + " low: " + e3 + ", high: " + n3);
}, expectArrayBuffersEqual: function(t3, e3) {
  expect(new Float32Array(t3)).toEqual(new Float32Array(e3));
} });
var Wh = "1.2.2";
var Uh = Object.freeze({ gpgpu_util: ti, webgl_util: Se, MathBackendWebGL: ns, setWebGLContext: Ot, GPGPUContext: ei });
var zh = function(t3) {
  function n3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return e(n3, t3), n3.prototype.minimize = function(t4, e3, n4) {
    void 0 === e3 && (e3 = false);
    var r3 = this.computeGradients(t4, n4), o3 = r3.value, a3 = r3.grads;
    if (null != n4) {
      var i3 = n4.map(function(t5) {
        return { name: t5.name, tensor: a3[t5.name] };
      });
      this.applyGradients(i3);
    } else this.applyGradients(a3);
    return Me(a3), e3 ? o3 : (o3.dispose(), null);
  }, Object.defineProperty(n3.prototype, "iterations", { get: function() {
    return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;
  }, enumerable: true, configurable: true }), n3.prototype.incrementIterations = function() {
    this.iterations_ = this.iterations + 1;
  }, n3.prototype.computeGradients = function(t4, e3) {
    return Lr(t4, e3);
  }, n3.prototype.dispose = function() {
    null != this.iterations_ && Me(this.iterations_);
  }, n3.prototype.saveIterations = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        return null == this.iterations_ && (this.iterations_ = 0), [2, { name: "iter", tensor: vn(this.iterations_, "int32") }];
      });
    });
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        throw new Error("getWeights() is not implemented for this optimizer yet.");
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(t5) {
        throw new Error("setWeights() is not implemented for this optimizer class " + this.getClassName());
      });
    });
  }, n3.prototype.extractIterations = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3;
      return o(this, function(n4) {
        switch (n4.label) {
          case 0:
            return e3 = this, [4, t4[0].tensor.data()];
          case 1:
            return e3.iterations_ = n4.sent()[0], [2, t4.slice(1)];
        }
      });
    });
  }, n3;
}(Ah);
Object.defineProperty(zh, Symbol.hasInstance, { value: function(t3) {
  return null != t3.minimize && null != t3.computeGradients && null != t3.applyGradients;
} });
var Vh = function(t3) {
  function n3(e3, n4, r3) {
    void 0 === r3 && (r3 = null);
    var o3 = t3.call(this) || this;
    return o3.learningRate = e3, o3.rho = n4, o3.epsilon = r3, o3.accumulatedGrads = [], o3.accumulatedUpdates = [], null == r3 && (o3.epsilon = At.backend.epsilon()), o3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n4, r3) {
      var o3 = At.registeredVariables[n4];
      null == e3.accumulatedGrads[r3] && (e3.accumulatedGrads[r3] = { originalName: n4 + "/accum_grad", variable: Fe(function() {
        return kn(o3).variable(false);
      }) }), null == e3.accumulatedUpdates[r3] && (e3.accumulatedUpdates[r3] = { originalName: n4 + "/accum_var", variable: Fe(function() {
        return kn(o3).variable(false);
      }) });
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n4];
      if (null != a3) {
        var i3 = e3.accumulatedGrads[r3].variable, s3 = e3.accumulatedUpdates[r3].variable;
        Fe(function() {
          var t5 = i3.mul(e3.rho).add(a3.square().mul(1 - e3.rho)), n5 = s3.add(e3.epsilon).sqrt().div(i3.add(e3.epsilon).sqrt()).mul(a3), r4 = s3.mul(e3.rho).add(n5.square().mul(1 - e3.rho));
          i3.assign(t5), s3.assign(r4);
          var u3 = n5.mul(-e3.learningRate).add(o3);
          o3.assign(u3);
        });
      }
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    null != this.accumulatedUpdates && (Me(this.accumulatedGrads.map(function(t4) {
      return t4.variable;
    })), Me(this.accumulatedUpdates.map(function(t4) {
      return t4.variable;
    })));
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedGrads.concat(this.accumulatedUpdates), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3;
      return o(this, function(n4) {
        switch (n4.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = n4.sent(), e3 = t4.length / 2, false, this.accumulatedGrads = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedUpdates = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.rho, e3.epsilon);
  }, n3.className = "AdadeltaOptimizer", n3;
}(zh);
Dh(Vh);
var Gh = function(t3) {
  function n3(e3, n4) {
    void 0 === n4 && (n4 = 0.1);
    var r3 = t3.call(this) || this;
    return r3.learningRate = e3, r3.initialAccumulatorValue = n4, r3.accumulatedGrads = [], r3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n4, r3) {
      var o3 = At.registeredVariables[n4];
      if (null == e3.accumulatedGrads[r3]) {
        e3.accumulatedGrads[r3] = { originalName: n4 + "/accumulator", variable: Fe(function() {
          return Rn(o3.shape, e3.initialAccumulatorValue).variable(false);
        }) };
      }
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n4];
      if (null != a3) {
        var i3 = e3.accumulatedGrads[r3].variable;
        Fe(function() {
          var t5 = i3.add(a3.square());
          i3.assign(t5);
          var n5 = a3.div(t5.add(At.backend.epsilon()).sqrt()).mul(-e3.learningRate).add(o3);
          o3.assign(n5);
        });
      }
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    null != this.accumulatedGrads && Me(this.accumulatedGrads.map(function(t4) {
      return t4.variable;
    }));
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()].concat(this.accumulatedGrads.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = e3.sent(), false, this.accumulatedGrads = t4.map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.initialAccumulatorValue);
  }, n3.className = "Adagrad", n3;
}(zh);
Dh(Gh);
var qh = function(t3) {
  function n3(e3, n4, r3, o3) {
    void 0 === o3 && (o3 = null);
    var a3 = t3.call(this) || this;
    return a3.learningRate = e3, a3.beta1 = n4, a3.beta2 = r3, a3.epsilon = o3, a3.accumulatedFirstMoment = [], a3.accumulatedSecondMoment = [], Fe(function() {
      a3.accBeta1 = vn(n4).variable(), a3.accBeta2 = vn(r3).variable();
    }), null == o3 && (a3.epsilon = At.backend.epsilon()), a3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this, n4 = Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4);
    Fe(function() {
      var r3 = vl(1, e3.accBeta1), o3 = vl(1, e3.accBeta2);
      n4.forEach(function(n5, a3) {
        var i3 = At.registeredVariables[n5];
        null == e3.accumulatedFirstMoment[a3] && (e3.accumulatedFirstMoment[a3] = { originalName: n5 + "/m", variable: Fe(function() {
          return kn(i3).variable(false);
        }) }), null == e3.accumulatedSecondMoment[a3] && (e3.accumulatedSecondMoment[a3] = { originalName: n5 + "/v", variable: Fe(function() {
          return kn(i3).variable(false);
        }) });
        var s3 = Array.isArray(t4) ? t4[a3].tensor : t4[n5];
        if (null != s3) {
          var u3 = e3.accumulatedFirstMoment[a3].variable, l3 = e3.accumulatedSecondMoment[a3].variable, c3 = u3.mul(e3.beta1).add(s3.mul(1 - e3.beta1)), h3 = l3.mul(e3.beta2).add(s3.square().mul(1 - e3.beta2)), p3 = c3.div(r3), f3 = h3.div(o3);
          u3.assign(c3), l3.assign(h3);
          var d3 = p3.div(f3.sqrt().add(e3.epsilon)).mul(-e3.learningRate).add(i3);
          i3.assign(d3);
        }
      }), e3.accBeta1.assign(e3.accBeta1.mul(e3.beta1)), e3.accBeta2.assign(e3.accBeta2.mul(e3.beta2));
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && Me(this.accumulatedFirstMoment.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedSecondMoment && Me(this.accumulatedSecondMoment.map(function(t4) {
      return t4.variable;
    }));
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3, n4 = this;
      return o(this, function(r3) {
        switch (r3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = r3.sent(), Fe(function() {
              n4.accBeta1.assign(hl(n4.beta1, n4.iterations_ + 1)), n4.accBeta2.assign(hl(n4.beta2, n4.iterations_ + 1));
            }), e3 = t4.length / 2, false, this.accumulatedFirstMoment = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedSecondMoment = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.beta1, e3.beta2, e3.epsilon);
  }, n3.className = "Adam", n3;
}(zh);
Dh(qh);
var Hh = function(t3) {
  function n3(e3, n4, r3, o3, a3) {
    void 0 === o3 && (o3 = null), void 0 === a3 && (a3 = 0);
    var i3 = t3.call(this) || this;
    return i3.learningRate = e3, i3.beta1 = n4, i3.beta2 = r3, i3.epsilon = o3, i3.decay = a3, i3.accumulatedFirstMoment = [], i3.accumulatedWeightedInfNorm = [], Fe(function() {
      i3.iteration = vn(0).variable(), i3.accBeta1 = vn(n4).variable();
    }), null == o3 && (i3.epsilon = At.backend.epsilon()), i3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this, n4 = Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4);
    Fe(function() {
      var r3 = vl(1, e3.accBeta1), o3 = tl(-e3.learningRate, e3.iteration.mul(e3.decay).add(1));
      n4.forEach(function(n5, a3) {
        var i3 = At.registeredVariables[n5];
        null == e3.accumulatedFirstMoment[a3] && (e3.accumulatedFirstMoment[a3] = { originalName: n5 + "/m", variable: kn(i3).variable(false) }), null == e3.accumulatedWeightedInfNorm[a3] && (e3.accumulatedWeightedInfNorm[a3] = { originalName: n5 + "/v", variable: kn(i3).variable(false) });
        var s3 = Array.isArray(t4) ? t4[a3].tensor : t4[n5];
        if (null != s3) {
          var u3 = e3.accumulatedFirstMoment[a3].variable, l3 = e3.accumulatedWeightedInfNorm[a3].variable, c3 = u3.mul(e3.beta1).add(s3.mul(1 - e3.beta1)), h3 = l3.mul(e3.beta2), p3 = s3.abs(), f3 = h3.maximum(p3);
          u3.assign(c3), l3.assign(f3);
          var d3 = o3.div(r3).mul(c3.div(f3.add(e3.epsilon))).add(i3);
          i3.assign(d3);
        }
      }), e3.iteration.assign(e3.iteration.add(1)), e3.accBeta1.assign(e3.accBeta1.mul(e3.beta1));
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && Me(this.accumulatedFirstMoment.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedWeightedInfNorm && Me(this.accumulatedWeightedInfNorm.map(function(t4) {
      return t4.variable;
    }));
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        throw new Error("getWeights() is not implemented for Adamax yet.");
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(t5) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.beta1, e3.beta2, e3.epsilon, e3.decay);
  }, n3.className = "Adamax", n3;
}(zh);
Dh(Hh);
var $h = function(t3) {
  function n3(e3) {
    var n4 = t3.call(this) || this;
    return n4.learningRate = e3, n4.setLearningRate(e3), n4;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n4, r3) {
      var o3 = Array.isArray(t4) ? t4[r3].tensor : t4[n4];
      if (null != o3) {
        var a3 = At.registeredVariables[n4];
        Fe(function() {
          var t5 = e3.c.mul(o3).add(a3);
          a3.assign(t5);
        });
      }
    }), this.incrementIterations();
  }, n3.prototype.setLearningRate = function(t4) {
    this.learningRate = t4, null != this.c && this.c.dispose(), this.c = Be(vn(-t4));
  }, n3.prototype.dispose = function() {
    this.c.dispose();
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()]];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            if (0 !== (t4 = e3.sent()).length) throw new Error("SGD optimizer does not have settable weights.");
            return [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate);
  }, n3.className = "SGD", n3;
}(zh);
Dh($h);
var jh = function(t3) {
  function n3(e3, n4, r3) {
    void 0 === r3 && (r3 = false);
    var o3 = t3.call(this, e3) || this;
    return o3.learningRate = e3, o3.momentum = n4, o3.useNesterov = r3, o3.accumulations = [], o3.m = vn(o3.momentum), o3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n4, r3) {
      var o3 = At.registeredVariables[n4];
      if (null == e3.accumulations[r3]) {
        e3.accumulations[r3] = { originalName: n4 + "/momentum", variable: Fe(function() {
          return kn(o3).variable(false);
        }) };
      }
      var a3 = e3.accumulations[r3].variable, i3 = Array.isArray(t4) ? t4[r3].tensor : t4[n4];
      null != i3 && Fe(function() {
        var t5, n5 = e3.m.mul(a3).add(i3);
        t5 = e3.useNesterov ? e3.c.mul(i3.add(n5.mul(e3.m))).add(o3) : e3.c.mul(n5).add(o3), a3.assign(n5), o3.assign(t5);
      });
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    this.m.dispose(), null != this.accumulations && Me(this.accumulations.map(function(t4) {
      return t4.variable;
    }));
  }, n3.prototype.setMomentum = function(t4) {
    this.momentum = t4;
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      return o(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()].concat(this.accumulations.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = e3.sent(), false, this.accumulations = t4.map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.momentum, e3.useNesterov);
  }, n3.className = "MomentumOptimizer", n3;
}($h);
Dh(jh);
var Kh = function(t3) {
  function n3(e3, n4, r3, o3, a3) {
    void 0 === n4 && (n4 = 0.9), void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = null), void 0 === a3 && (a3 = false);
    var i3 = t3.call(this) || this;
    return i3.learningRate = e3, i3.decay = n4, i3.momentum = r3, i3.epsilon = o3, i3.accumulatedMeanSquares = [], i3.accumulatedMoments = [], i3.accumulatedMeanGrads = [], i3.centered = a3, null == o3 && (i3.epsilon = At.backend.epsilon()), i3;
  }
  return e(n3, t3), n3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n4, r3) {
      var o3 = At.registeredVariables[n4];
      null == e3.accumulatedMeanSquares[r3] && (e3.accumulatedMeanSquares[r3] = { originalName: n4 + "/rms", variable: Fe(function() {
        return kn(o3).variable(false);
      }) }), null == e3.accumulatedMoments[r3] && (e3.accumulatedMoments[r3] = { originalName: n4 + "/momentum", variable: Fe(function() {
        return kn(o3).variable(false);
      }) }), null == e3.accumulatedMeanGrads[r3] && e3.centered && (e3.accumulatedMeanGrads[r3] = { originalName: n4 + "/mg", variable: Fe(function() {
        return kn(o3).variable(false);
      }) });
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n4];
      if (null != a3) {
        var i3 = e3.accumulatedMeanSquares[r3].variable, s3 = e3.accumulatedMoments[r3].variable;
        Fe(function() {
          var t5 = i3.mul(e3.decay).add(a3.square().mul(1 - e3.decay));
          if (e3.centered) {
            var n5 = e3.accumulatedMeanGrads[r3].variable, u3 = n5.mul(e3.decay).add(a3.mul(1 - e3.decay)), l3 = s3.mul(e3.momentum).add(a3.mul(e3.learningRate).div(t5.sub(u3.square().add(e3.epsilon)).sqrt()));
            i3.assign(t5), n5.assign(u3), s3.assign(l3);
            var c3 = o3.sub(l3);
            o3.assign(c3);
          } else {
            var h3 = i3.mul(e3.decay).add(a3.square().mul(1 - e3.decay));
            l3 = s3.mul(e3.momentum).add(a3.mul(e3.learningRate).div(h3.add(e3.epsilon).sqrt()));
            i3.assign(h3), s3.assign(l3);
            c3 = o3.sub(l3);
            o3.assign(c3);
          }
        });
      }
    }), this.incrementIterations();
  }, n3.prototype.dispose = function() {
    null != this.accumulatedMeanSquares && Me(this.accumulatedMeanSquares.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedMeanGrads && this.centered && Me(this.accumulatedMeanGrads.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedMoments && Me(this.accumulatedMoments.map(function(t4) {
      return t4.variable;
    }));
  }, n3.prototype.getWeights = function() {
    return r(this, void 0, void 0, function() {
      var t4;
      return o(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t4.push.apply(t4, this.accumulatedMeanGrads), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, n3.prototype.setWeights = function(t4) {
    return r(this, void 0, void 0, function() {
      var e3;
      return o(this, function(n4) {
        switch (n4.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = n4.sent(), e3 = this.centered ? t4.length / 3 : t4.length / 2, false, this.accumulatedMeanSquares = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedMoments = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.centered && (this.accumulatedMeanGrads = t4.slice(2 * e3, 3 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            })), [2];
        }
      });
    });
  }, n3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }, n3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.decay, e3.momentum, e3.epsilon, e3.centered);
  }, n3.className = "RMSProp", n3;
}(zh);
Dh(Kh);
var Xh = function() {
  function t3() {
  }
  return t3.sgd = function(t4) {
    return new $h(t4);
  }, t3.momentum = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = false), new jh(t4, e3, n3);
  }, t3.rmsprop = function(t4, e3, n3, r3, o3) {
    return void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0), void 0 === r3 && (r3 = null), void 0 === o3 && (o3 = false), new Kh(t4, e3, n3, r3, o3);
  }, t3.adam = function(t4, e3, n3, r3) {
    return void 0 === t4 && (t4 = 1e-3), void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0.999), void 0 === r3 && (r3 = null), new qh(t4, e3, n3, r3);
  }, t3.adadelta = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = 1e-3), void 0 === e3 && (e3 = 0.95), void 0 === n3 && (n3 = null), new Vh(t4, e3, n3);
  }, t3.adamax = function(t4, e3, n3, r3, o3) {
    return void 0 === t4 && (t4 = 2e-3), void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0.999), void 0 === r3 && (r3 = null), void 0 === o3 && (o3 = 0), new Hh(t4, e3, n3, r3, o3);
  }, t3.adagrad = function(t4, e3) {
    return void 0 === e3 && (e3 = 0.1), new Gh(t4, e3);
  }, t3;
}();
var Yh = { sgd: Xh.sgd, momentum: Xh.momentum, adadelta: Xh.adadelta, adagrad: Xh.adagrad, rmsprop: Xh.rmsprop, adamax: Xh.adamax, adam: Xh.adam };
var Qh = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : "undefined" != typeof setImmediate ? setImmediate : function(t3) {
  return t3();
};
function Jh() {
  return new Promise(function(t3) {
    return Qh(function() {
      return t3();
    });
  });
}
lt = Rc;

// node_modules/tfjs-image-recognition-base/build/es6/draw/index.js
var draw_exports = {};
__export(draw_exports, {
  AnchorPosition: () => AnchorPosition,
  DrawBox: () => DrawBox,
  DrawBoxOptions: () => DrawBoxOptions,
  DrawTextField: () => DrawTextField,
  DrawTextFieldOptions: () => DrawTextFieldOptions
});

// node_modules/tfjs-image-recognition-base/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js
var t2 = function(e3, n3) {
  return (t2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e4) {
    t3.__proto__ = e4;
  } || function(t3, e4) {
    for (var n4 in e4) e4.hasOwnProperty(n4) && (t3[n4] = e4[n4]);
  })(e3, n3);
};
function e2(e3, n3) {
  function r3() {
    this.constructor = e3;
  }
  t2(e3, n3), e3.prototype = null === n3 ? Object.create(n3) : (r3.prototype = n3.prototype, new r3());
}
function n2(t3, e3, n3, r3) {
  return new (n3 || (n3 = Promise))(function(o3, a3) {
    function i3(t4) {
      try {
        u3(r3.next(t4));
      } catch (t5) {
        a3(t5);
      }
    }
    function s3(t4) {
      try {
        u3(r3.throw(t4));
      } catch (t5) {
        a3(t5);
      }
    }
    function u3(t4) {
      t4.done ? o3(t4.value) : new n3(function(e4) {
        e4(t4.value);
      }).then(i3, s3);
    }
    u3((r3 = r3.apply(t3, e3 || [])).next());
  });
}
function r2(t3, e3) {
  var n3, r3, o3, a3, i3 = { label: 0, sent: function() {
    if (1 & o3[0]) throw o3[1];
    return o3[1];
  }, trys: [], ops: [] };
  return a3 = { next: s3(0), throw: s3(1), return: s3(2) }, "function" == typeof Symbol && (a3[Symbol.iterator] = function() {
    return this;
  }), a3;
  function s3(a4) {
    return function(s4) {
      return function(a5) {
        if (n3) throw new TypeError("Generator is already executing.");
        for (; i3; ) try {
          if (n3 = 1, r3 && (o3 = 2 & a5[0] ? r3.return : a5[0] ? r3.throw || ((o3 = r3.return) && o3.call(r3), 0) : r3.next) && !(o3 = o3.call(r3, a5[1])).done) return o3;
          switch (r3 = 0, o3 && (a5 = [2 & a5[0], o3.value]), a5[0]) {
            case 0:
            case 1:
              o3 = a5;
              break;
            case 4:
              return i3.label++, { value: a5[1], done: false };
            case 5:
              i3.label++, r3 = a5[1], a5 = [0];
              continue;
            case 7:
              a5 = i3.ops.pop(), i3.trys.pop();
              continue;
            default:
              if (!(o3 = (o3 = i3.trys).length > 0 && o3[o3.length - 1]) && (6 === a5[0] || 2 === a5[0])) {
                i3 = 0;
                continue;
              }
              if (3 === a5[0] && (!o3 || a5[1] > o3[0] && a5[1] < o3[3])) {
                i3.label = a5[1];
                break;
              }
              if (6 === a5[0] && i3.label < o3[1]) {
                i3.label = o3[1], o3 = a5;
                break;
              }
              if (o3 && i3.label < o3[2]) {
                i3.label = o3[2], i3.ops.push(a5);
                break;
              }
              o3[2] && i3.ops.pop(), i3.trys.pop();
              continue;
          }
          a5 = e3.call(t3, i3);
        } catch (t4) {
          a5 = [6, t4], r3 = 0;
        } finally {
          n3 = o3 = 0;
        }
        if (5 & a5[0]) throw a5[1];
        return { value: a5[0] ? a5[1] : void 0, done: true };
      }([a4, s4]);
    };
  }
}
var o2 = function() {
  function t3(t4) {
    this.global = t4, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  return t3.prototype.setPlatform = function(t4, e3) {
    null != this.platform && console.warn("Platform " + this.platformName + " has already been set. Overwriting the platform with " + e3 + "."), this.platformName = t4, this.platform = e3;
  }, t3.prototype.registerFlag = function(t4, e3, n3) {
    if (this.flagRegistry[t4] = { evaluationFn: e3, setHook: n3 }, null != this.urlFlags[t4]) {
      var r3 = this.urlFlags[t4];
      console.warn("Setting feature override from URL " + t4 + ": " + r3 + "."), this.set(t4, r3);
    }
  }, t3.prototype.get = function(t4) {
    return t4 in this.flags ? this.flags[t4] : (this.flags[t4] = this.evaluateFlag(t4), this.flags[t4]);
  }, t3.prototype.getNumber = function(t4) {
    return this.get(t4);
  }, t3.prototype.getBool = function(t4) {
    return this.get(t4);
  }, t3.prototype.getFlags = function() {
    return this.flags;
  }, Object.defineProperty(t3.prototype, "features", { get: function() {
    return this.flags;
  }, enumerable: true, configurable: true }), t3.prototype.set = function(t4, e3) {
    if (null == this.flagRegistry[t4]) throw new Error("Cannot set flag " + t4 + " as it has not been registered.");
    this.flags[t4] = e3, null != this.flagRegistry[t4].setHook && this.flagRegistry[t4].setHook(e3);
  }, t3.prototype.evaluateFlag = function(t4) {
    if (null == this.flagRegistry[t4]) throw new Error("Cannot evaluate flag '" + t4 + "': no evaluation function found.");
    return this.flagRegistry[t4].evaluationFn();
  }, t3.prototype.setFlags = function(t4) {
    this.flags = Object.assign({}, t4);
  }, t3.prototype.reset = function() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }, t3.prototype.populateURLFlags = function() {
    var t4 = this;
    if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {
      var e3, n3, r3 = (e3 = this.global.location.search, n3 = {}, e3.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t5) {
        for (var e4 = [], r4 = 1; r4 < arguments.length; r4++) e4[r4 - 1] = arguments[r4];
        return a2(n3, e4[0], e4[1]), e4.join("=");
      }), n3);
      if ("tfjsflags" in r3) r3.tfjsflags.split(",").forEach(function(e4) {
        var n4 = e4.split(":"), r4 = n4[0], o3 = n4[1];
        t4.urlFlags[r4] = function(t5, e5) {
          if ("true" === (e5 = e5.toLowerCase()) || "false" === e5) return "true" === e5;
          if ("" + +e5 === e5) return +e5;
          throw new Error("Could not parse value flag value " + e5 + " for flag " + t5 + ".");
        }(r4, o3);
      });
    }
  }, t3;
}();
function a2(t3, e3, n3) {
  t3[decodeURIComponent(e3)] = decodeURIComponent(n3 || "");
}
function i2() {
  return s2;
}
var s2 = null;
var u2 = /* @__PURE__ */ new Map();
var c2 = /* @__PURE__ */ new Map();
function l2(t3, e3) {
  var n3 = m2(t3, e3);
  return u2.get(n3);
}
function h2(t3) {
  return c2.get(t3);
}
function f2(t3) {
  for (var e3 = u2.entries(), n3 = []; ; ) {
    var r3 = e3.next(), o3 = r3.done, a3 = r3.value;
    if (o3) break;
    var i3 = a3[0], s3 = a3[1];
    i3.split("_")[0] === t3 && n3.push(s3);
  }
  return n3;
}
function d2(t3) {
  var e3 = t3.kernelName, n3 = t3.backendName, r3 = m2(e3, n3);
  if (u2.has(r3)) throw new Error("The kernel '" + e3 + "' for backend '" + n3 + "' is already registered");
  u2.set(r3, t3);
}
function p2(t3) {
  var e3 = t3.kernelName;
  c2.has(e3) && console.warn("Overriding the gradient for '" + e3 + "'"), c2.set(e3, t3);
}
function m2(t3, e3) {
  return e3 + "_" + t3;
}
function y2(t3) {
  for (var e3 = t3.length, n3 = 0, r3 = 0; e3 > 0; ) r3 = Math.random() * e3 | 0, n3 = t3[--e3], t3[e3] = t3[r3], t3[r3] = n3;
}
function x2(t3, e3, n3) {
  return Math.max(t3, Math.min(e3, n3));
}
function b2(t3) {
  return t3 % 2 == 0 ? t3 : t3 + 1;
}
function w2(t3) {
  for (var e3 = 0, n3 = 0; n3 < t3.length; n3++) e3 += t3[n3];
  return e3;
}
function C2(t3, e3) {
  if (!t3) throw new Error("string" == typeof e3 ? e3 : e3());
}
function E2(t3, e3, n3) {
  void 0 === n3 && (n3 = ""), C2(S2(t3, e3), function() {
    return n3 + " Shapes " + t3 + " and " + e3 + " must match";
  });
}
function R2(t3) {
  C2(null != t3, function() {
    return "The input to the tensor constructor must be a non-null value.";
  });
}
function I2(t3, e3, n3) {
  if (void 0 === e3 && (e3 = []), void 0 === n3 && (n3 = false), null == e3 && (e3 = []), Array.isArray(t3) || V2(t3) && !n3) for (var r3 = 0; r3 < t3.length; ++r3) I2(t3[r3], e3, n3);
  else e3.push(t3);
  return e3;
}
function k2(t3) {
  if (0 === t3.length) return 1;
  for (var e3 = t3[0], n3 = 1; n3 < t3.length; n3++) e3 *= t3[n3];
  return e3;
}
function S2(t3, e3) {
  if (t3 === e3) return true;
  if (null == t3 || null == e3) return false;
  if (t3.length !== e3.length) return false;
  for (var n3 = 0; n3 < t3.length; n3++) if (t3[n3] !== e3[n3]) return false;
  return true;
}
function A2(t3) {
  return t3 % 1 == 0;
}
function T2(t3) {
  if (null != Math.tanh) return Math.tanh(t3);
  if (t3 === 1 / 0) return 1;
  if (t3 === -1 / 0) return -1;
  var e3 = Math.exp(2 * t3);
  return (e3 - 1) / (e3 + 1);
}
function D2(t3) {
  var e3 = Math.ceil(Math.sqrt(t3));
  return [e3, Math.ceil(t3 / e3)];
}
function N2(t3, e3) {
  return e3 <= t3.length ? t3 : t3 + " ".repeat(e3 - t3.length);
}
function F2(t3, e3, n3) {
  return void 0 === e3 && (e3 = function(t4) {
    return 0;
  }), new Promise(function(r3, o3) {
    var a3 = 0, i3 = function() {
      if (t3()) r3();
      else {
        a3++;
        var s3 = e3(a3);
        null != n3 && a3 >= n3 ? o3() : setTimeout(i3, s3);
      }
    };
    i3();
  });
}
function _2(t3, e3) {
  for (var n3 = 1, r3 = -1, o3 = 0; o3 < t3.length; ++o3) if (t3[o3] >= 0) n3 *= t3[o3];
  else if (-1 === t3[o3]) {
    if (-1 !== r3) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r3 + " and dim " + o3);
    r3 = o3;
  } else if (t3[o3] < 0) throw Error("Shapes can not be < 0. Found " + t3[o3] + " at dim " + o3);
  if (-1 === r3) {
    if (e3 > 0 && e3 !== n3) throw Error("Size(" + e3 + ") must match the product of shape " + t3);
    return t3;
  }
  if (0 === n3) throw Error("Cannot infer the missing size in [" + t3 + "] when there are 0 elements");
  if (e3 % n3 != 0) throw Error("The implicit shape can't be a fractional number. Got " + e3 + " / " + n3);
  var a3 = t3.slice();
  return a3[r3] = e3 / n3, a3;
}
function O2(t3, e3) {
  var n3 = e3.length;
  return C2((t3 = null == t3 ? e3.map(function(t4, e4) {
    return e4;
  }) : [].concat(t3)).every(function(t4) {
    return t4 >= -n3 && t4 < n3;
  }), function() {
    return "All values in axis param must be in range [-" + n3 + ", " + n3 + ") but got axis " + t3;
  }), C2(t3.every(function(t4) {
    return A2(t4);
  }), function() {
    return "All values in axis param must be integers but got axis " + t3;
  }), t3.map(function(t4) {
    return t4 < 0 ? n3 + t4 : t4;
  });
}
function M2(t3, e3) {
  for (var n3 = [], r3 = [], o3 = null != e3 && Array.isArray(e3) && 0 === e3.length, a3 = null == e3 || o3 ? null : O2(e3, t3).sort(), i3 = 0, s3 = 0; s3 < t3.length; ++s3) {
    if (null != a3) {
      if (a3[i3] === s3 && 1 !== t3[s3]) throw new Error("Can't squeeze axis " + s3 + " since its dim '" + t3[s3] + "' is not 1");
      (null == a3[i3] || a3[i3] > s3) && 1 === t3[s3] && (n3.push(t3[s3]), r3.push(s3)), a3[i3] <= s3 && i3++;
    }
    1 !== t3[s3] && (n3.push(t3[s3]), r3.push(s3));
  }
  return { newShape: n3, keptDims: r3 };
}
function B2(t3, e3) {
  var n3 = null;
  if (null == t3 || "float32" === t3) n3 = new Float32Array(e3);
  else if ("int32" === t3) n3 = new Int32Array(e3);
  else {
    if ("bool" !== t3) throw new Error("Unknown data type " + t3);
    n3 = new Uint8Array(e3);
  }
  return n3;
}
function P2(t3, e3) {
  var n3 = null;
  if (null == t3 || "float32" === t3) n3 = new Float32Array(e3);
  else if ("int32" === t3) n3 = new Int32Array(e3);
  else if ("bool" === t3) n3 = new Uint8Array(e3);
  else {
    if ("string" !== t3) throw new Error("Unknown data type " + t3);
    n3 = new Array(e3);
  }
  return n3;
}
function L2(t3, e3) {
  for (var n3 = 0; n3 < t3.length; n3++) {
    var r3 = t3[n3];
    if (isNaN(r3) || !isFinite(r3)) throw Error("A tensor of type " + e3 + " being uploaded contains " + r3 + ".");
  }
}
function W2(t3) {
  return "bool" === t3 || "complex64" === t3 || "float32" === t3 || "int32" === t3 || "string" === t3;
}
function U2(t3, e3) {
  return "complex64" !== e3 && (("float32" !== e3 || "complex64" === t3) && (("int32" !== e3 || "float32" === t3 || "complex64" === t3) && ("bool" !== e3 || "bool" !== t3)));
}
function V2(t3) {
  return t3 instanceof Float32Array || t3 instanceof Int32Array || t3 instanceof Uint8Array;
}
function z2(t3) {
  if ("float32" === t3 || "int32" === t3) return 4;
  if ("complex64" === t3) return 8;
  if ("bool" === t3) return 1;
  throw new Error("Unknown dtype " + t3);
}
function G2(t3) {
  if (null == t3) return 0;
  var e3 = 0;
  return t3.forEach(function(t4) {
    return e3 += t4.length;
  }), e3;
}
function H2(t3) {
  return "string" == typeof t3 || t3 instanceof String;
}
function q2(t3) {
  return "boolean" == typeof t3;
}
function K2(t3) {
  return "number" == typeof t3;
}
function j2(t3) {
  return Array.isArray(t3) ? j2(t3[0]) : t3 instanceof Float32Array ? "float32" : t3 instanceof Int32Array || t3 instanceof Uint8Array ? "int32" : K2(t3) ? "float32" : H2(t3) ? "string" : q2(t3) ? "bool" : "float32";
}
function X2(t3) {
  return !!(t3 && t3.constructor && t3.call && t3.apply);
}
function Y2(t3, e3) {
  for (var n3 = e3; n3 < t3; ++n3) if (t3 % n3 == 0) return n3;
  return t3;
}
function $2(t3) {
  var e3 = t3.length;
  if (e3 < 2) return [];
  var n3 = new Array(e3 - 1);
  n3[e3 - 2] = t3[e3 - 1];
  for (var r3 = e3 - 3; r3 >= 0; --r3) n3[r3] = n3[r3 + 1] * t3[r3 + 1];
  return n3;
}
function Q2(t3, e3, n3) {
  if ("string" === e3) throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(t3) && (t3 = I2(t3)), n3 && L2(t3, e3), function(t4, e4) {
    return t4 instanceof Float32Array && "float32" === e4 || t4 instanceof Int32Array && "int32" === e4 || t4 instanceof Uint8Array && "bool" === e4;
  }(t3, e3)) return t3;
  if (null == e3 || "float32" === e3 || "complex64" === e3) return new Float32Array(t3);
  if ("int32" === e3) return new Int32Array(t3);
  if ("bool" === e3) {
    for (var r3 = new Uint8Array(t3.length), o3 = 0; o3 < r3.length; ++o3) 0 !== Math.round(t3[o3]) && (r3[o3] = 1);
    return r3;
  }
  throw new Error("Unknown data type " + e3);
}
function J2(t3, e3) {
  if (0 === t3.length) return e3[0];
  var n3 = t3.reduce(function(t4, e4) {
    return t4 * e4;
  });
  if (0 === n3) return [];
  if (n3 !== e3.length) throw new Error("[" + t3 + "] does not match the input size.");
  return function t4(e4, n4, r3) {
    var o3 = new Array();
    if (1 === n4.length) for (var a3 = n4[0], i3 = 0; i3 < a3; i3++) o3[i3] = r3[e4 + i3];
    else {
      a3 = n4[0];
      var s3 = n4.slice(1), u3 = s3.reduce(function(t5, e5) {
        return t5 * e5;
      });
      for (i3 = 0; i3 < a3; i3++) o3[i3] = t4(e4 + i3 * u3, s3, r3);
    }
    return o3;
  }(0, t3, e3);
}
function Z2(t3, e3) {
  for (var n3 = tt2(t3, e3), r3 = 0; r3 < n3.length; r3++) n3[r3] = 1;
  return n3;
}
function tt2(t3, e3) {
  if (null == e3 || "float32" === e3 || "complex64" === e3) return new Float32Array(t3);
  if ("int32" === e3) return new Int32Array(t3);
  if ("bool" === e3) return new Uint8Array(t3);
  throw new Error("Unknown data type " + e3);
}
function et2() {
  return i2().platform.now();
}
function nt2(t3) {
  t3.forEach(function(e3) {
    C2(Number.isInteger(e3) && e3 >= 0, function() {
      return "Tensor must have a shape comprised of positive integers but got shape [" + t3 + "].";
    });
  });
}
function rt2(t3, e3) {
  return void 0 === e3 && (e3 = "utf-8"), e3 = e3 || "utf-8", i2().platform.encode(t3, e3);
}
function ot2(t3, e3) {
  return void 0 === e3 && (e3 = "utf-8"), e3 = e3 || "utf-8", i2().platform.decode(t3, e3);
}
function at2(t3, e3, n3) {
  if (0 === e3) return 0;
  if (1 === e3) return t3[0];
  for (var r3 = t3[t3.length - 1], o3 = 0; o3 < t3.length - 1; ++o3) r3 += n3[o3] * t3[o3];
  return r3;
}
function it2(t3, e3, n3) {
  if (0 === e3) return [];
  if (1 === e3) return [t3];
  for (var r3 = new Array(e3), o3 = 0; o3 < r3.length - 1; ++o3) r3[o3] = Math.floor(t3 / n3[o3]), t3 -= r3[o3] * n3[o3];
  return r3[r3.length - 1] = t3, r3;
}
var st2 = Object.freeze({ shuffle: y2, clamp: x2, nearestLargerEven: b2, sum: w2, randUniform: function(t3, e3) {
  var n3 = Math.random();
  return e3 * n3 + (1 - n3) * t3;
}, distSquared: function(t3, e3) {
  for (var n3 = 0, r3 = 0; r3 < t3.length; r3++) {
    var o3 = Number(t3[r3]) - Number(e3[r3]);
    n3 += o3 * o3;
  }
  return n3;
}, assert: C2, assertShapesMatch: E2, assertNonNull: R2, flatten: I2, sizeFromShape: k2, isScalarShape: function(t3) {
  return 0 === t3.length;
}, arraysEqual: S2, isInt: A2, tanh: T2, sizeToSquarishShape: D2, createShuffledIndices: function(t3) {
  for (var e3 = new Uint32Array(t3), n3 = 0; n3 < t3; ++n3) e3[n3] = n3;
  return y2(e3), e3;
}, rightPad: N2, repeatedTry: F2, inferFromImplicitShape: _2, parseAxisParam: O2, squeezeShape: M2, getTypedArrayFromDType: B2, getArrayFromDType: P2, checkConversionForErrors: L2, isValidDtype: W2, hasEncodingLoss: U2, isTypedArray: V2, bytesPerElement: z2, bytesFromStringArray: G2, isString: H2, isBoolean: q2, isNumber: K2, inferDtype: j2, isFunction: X2, nearestDivisor: Y2, computeStrides: $2, toTypedArray: Q2, toNestedArray: J2, makeOnesTypedArray: Z2, makeZerosTypedArray: tt2, now: et2, assertNonNegativeIntegerDimensions: nt2, fetch: function(t3, e3) {
  return i2().platform.fetch(t3, e3);
}, encodeString: rt2, decodeString: ot2, locToIndex: at2, indexToLoc: it2 });
var ut2 = function() {
  function t3(t4, e3) {
    this.backendTimer = t4, this.logger = e3, null == e3 && (this.logger = new ct2());
  }
  return t3.prototype.profileKernel = function(t4, e3, n3) {
    var r3, o3 = this, a3 = this.backendTimer.time(function() {
      r3 = n3();
    });
    return r3.forEach(function(n4) {
      n4.data().then(function(r4) {
        !function(t5, e4, n5) {
          if ("float32" !== e4) return false;
          for (var r5 = 0; r5 < t5.length; r5++) {
            var o4 = t5[r5];
            if (isNaN(o4) || !isFinite(o4)) return console.warn("Found " + o4 + " in the result of '" + n5 + "'"), true;
          }
        }(r4, n4.dtype, t4), a3.then(function(a4) {
          var i3 = "";
          null != a4.getExtraProfileInfo && (i3 = a4.getExtraProfileInfo()), o3.logger.logKernelProfile(t4, n4, r4, a4.kernelMs, e3, i3);
        });
      });
    }), r3;
  }, t3;
}();
var ct2 = function() {
  function t3() {
  }
  return t3.prototype.logKernelProfile = function(t4, e3, n3, r3, o3, a3) {
    var i3 = "number" == typeof r3 ? N2(r3 + "ms", 9) : r3.error, s3 = N2(t4, 25), u3 = e3.rank, c3 = e3.size, l3 = N2(e3.shape.toString(), 14), h3 = "";
    for (var f3 in o3) {
      var d3 = o3[f3].shape || e3.shape, p3 = d3.length;
      h3 += f3 + ": " + p3 + "D " + (p3 > 0 ? d3 : "") + " ";
    }
    console.log("%c" + s3 + "	%c" + i3 + "	%c" + u3 + "D " + l3 + "	%c" + c3 + "	%c" + h3 + "	%c" + a3, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }, t3;
}();
var lt2 = 20;
var ht2 = 3;
var ft2 = 7;
function dt2(t3, e3, n3, r3) {
  var o3 = $2(e3), a3 = function(t4, e4, n4, r4) {
    var o4 = k2(e4), a4 = r4[r4.length - 1], i4 = new Array(a4).fill(0), s4 = e4.length, u4 = "complex64" === n4 ? gt2(t4) : t4;
    if (s4 > 1) for (var c3 = 0; c3 < o4 / a4; c3++) for (var l3 = c3 * a4, h3 = 0; h3 < a4; h3++) i4[h3] = Math.max(i4[h3], pt2(u4[l3 + h3], 0, n4).length);
    return i4;
  }(t3, e3, n3, o3), i3 = e3.length, s3 = function t4(e4, n4, r4, o4, a4, i4) {
    void 0 === i4 && (i4 = true);
    var s4 = "complex64" === r4 ? 2 : 1, u4 = n4[0], c3 = n4.length;
    if (0 === c3) {
      return "complex64" === r4 ? [pt2(gt2(e4)[0], 0, r4)] : "bool" === r4 ? [vt2(e4[0])] : [e4[0].toString()];
    }
    if (1 === c3) {
      if (u4 > lt2) {
        var l3 = ht2 * s4, h3 = Array.from(e4.slice(0, l3)), f3 = Array.from(e4.slice((u4 - ht2) * s4, u4 * s4));
        return "complex64" === r4 && (h3 = gt2(h3), f3 = gt2(f3)), ["[" + h3.map(function(t5, e5) {
          return pt2(t5, a4[e5], r4);
        }).join(", ") + ", ..., " + f3.map(function(t5, e5) {
          return pt2(t5, a4[u4 - ht2 + e5], r4);
        }).join(", ") + "]"];
      }
      return ["[" + ("complex64" === r4 ? gt2(e4) : Array.from(e4)).map(function(t5, e5) {
        return pt2(t5, a4[e5], r4);
      }).join(", ") + "]"];
    }
    var d3 = n4.slice(1), p3 = o4.slice(1), v2 = o4[0] * s4, g2 = [];
    if (u4 > lt2) {
      for (var m3 = 0; m3 < ht2; m3++) {
        var y3 = (x3 = m3 * v2) + v2;
        g2.push.apply(g2, t4(e4.slice(x3, y3), d3, r4, p3, a4, false));
      }
      g2.push("...");
      for (m3 = u4 - ht2; m3 < u4; m3++) {
        y3 = (x3 = m3 * v2) + v2;
        g2.push.apply(g2, t4(e4.slice(x3, y3), d3, r4, p3, a4, m3 === u4 - 1));
      }
    } else for (m3 = 0; m3 < u4; m3++) {
      var x3;
      y3 = (x3 = m3 * v2) + v2;
      g2.push.apply(g2, t4(e4.slice(x3, y3), d3, r4, p3, a4, m3 === u4 - 1));
    }
    var b3 = 2 === c3 ? "," : "";
    g2[0] = "[" + g2[0] + b3;
    for (m3 = 1; m3 < g2.length - 1; m3++) g2[m3] = " " + g2[m3] + b3;
    var w3 = ",\n";
    for (m3 = 2; m3 < c3; m3++) w3 += "\n";
    return g2[g2.length - 1] = " " + g2[g2.length - 1] + "]" + (i4 ? "" : w3), g2;
  }(t3, e3, n3, o3, a3), u3 = ["Tensor"];
  return r3 && (u3.push("  dtype: " + n3), u3.push("  rank: " + i3), u3.push("  shape: [" + e3 + "]"), u3.push("  values:")), u3.push(s3.map(function(t4) {
    return "    " + t4;
  }).join("\n")), u3.join("\n");
}
function pt2(t3, e3, n3) {
  return N2(Array.isArray(t3) ? parseFloat(t3[0].toFixed(ft2)) + " + " + parseFloat(t3[1].toFixed(ft2)) + "j" : H2(t3) ? "'" + t3 + "'" : "bool" === n3 ? vt2(t3) : parseFloat(t3.toFixed(ft2)).toString(), e3);
}
function vt2(t3) {
  return 0 === t3 ? "false" : "true";
}
function gt2(t3) {
  for (var e3 = [], n3 = 0; n3 < t3.length; n3 += 2) e3.push([t3[n3], t3[n3 + 1]]);
  return e3;
}
var mt2 = function() {
  function t3(t4, e3, n3) {
    var r3 = this;
    if (this.dtype = e3, this.shape = t4.slice(), this.size = k2(t4), null != n3) {
      var o3 = n3.length;
      C2(o3 === this.size, function() {
        return "Length of values '" + o3 + "' does not match the size inferred by the shape '" + r3.size + "'.";
      });
    }
    if ("complex64" === e3) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = n3 || P2(e3, this.size), this.strides = $2(t4);
  }
  return t3.prototype.set = function(t4) {
    for (var e3 = this, n3 = [], r3 = 1; r3 < arguments.length; r3++) n3[r3 - 1] = arguments[r3];
    0 === n3.length && (n3 = [0]), C2(n3.length === this.rank, function() {
      return "The number of provided coordinates (" + n3.length + ") must match the rank (" + e3.rank + ")";
    });
    var o3 = this.locToIndex(n3);
    this.values[o3] = t4;
  }, t3.prototype.get = function() {
    for (var t4 = [], e3 = 0; e3 < arguments.length; e3++) t4[e3] = arguments[e3];
    0 === t4.length && (t4 = [0]);
    for (var n3 = 0, r3 = 0, o3 = t4; r3 < o3.length; r3++) {
      var a3 = o3[r3];
      if (a3 < 0 || a3 >= this.shape[n3]) {
        var i3 = "Requested out of range element at " + t4 + ".   Buffer shape=" + this.shape;
        throw new Error(i3);
      }
      n3++;
    }
    for (var s3 = t4[t4.length - 1], u3 = 0; u3 < t4.length - 1; ++u3) s3 += this.strides[u3] * t4[u3];
    return this.values[s3];
  }, t3.prototype.locToIndex = function(t4) {
    if (0 === this.rank) return 0;
    if (1 === this.rank) return t4[0];
    for (var e3 = t4[t4.length - 1], n3 = 0; n3 < t4.length - 1; ++n3) e3 += this.strides[n3] * t4[n3];
    return e3;
  }, t3.prototype.indexToLoc = function(t4) {
    if (0 === this.rank) return [];
    if (1 === this.rank) return [t4];
    for (var e3 = new Array(this.shape.length), n3 = 0; n3 < e3.length - 1; ++n3) e3[n3] = Math.floor(t4 / this.strides[n3]), t4 -= e3[n3] * this.strides[n3];
    return e3[e3.length - 1] = t4, e3;
  }, Object.defineProperty(t3.prototype, "rank", { get: function() {
    return this.shape.length;
  }, enumerable: true, configurable: true }), t3.prototype.toTensor = function() {
    return yt2().makeTensor(this.values, this.shape, this.dtype);
  }, t3;
}();
var yt2 = null;
var xt2 = null;
var bt2 = null;
var wt2 = function() {
  function t3(t4, e3, n3, r3) {
    this.kept = false, this.isDisposedInternal = false, this.shape = t4.slice(), this.dtype = e3 || "float32", this.size = k2(t4), this.strides = $2(t4), this.dataId = n3, this.id = r3, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  return t3.prototype.flatten = function() {
    return this.throwIfDisposed(), this.as1D();
  }, t3.prototype.asScalar = function() {
    return this.throwIfDisposed(), C2(1 === this.size, function() {
      return "The array must have only 1 element.";
    }), this.reshape([]);
  }, t3.prototype.as1D = function() {
    return this.throwIfDisposed(), this.reshape([this.size]);
  }, t3.prototype.as2D = function(t4, e3) {
    return this.throwIfDisposed(), this.reshape([t4, e3]);
  }, t3.prototype.as3D = function(t4, e3, n3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3]);
  }, t3.prototype.as4D = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3, r3]);
  }, t3.prototype.as5D = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), this.reshape([t4, e3, n3, r3, o3]);
  }, t3.prototype.asType = function(t4) {
    return this.throwIfDisposed(), xt2.cast(this, t4);
  }, Object.defineProperty(t3.prototype, "rank", { get: function() {
    return this.shape.length;
  }, enumerable: true, configurable: true }), t3.prototype.buffer = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.data()];
          case 1:
            return t4 = e3.sent(), [2, xt2.buffer(this.shape, this.dtype, t4)];
        }
      });
    });
  }, t3.prototype.bufferSync = function() {
    return xt2.buffer(this.shape, this.dtype, this.dataSync());
  }, t3.prototype.array = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.data()];
          case 1:
            return t4 = e3.sent(), [2, J2(this.shape, t4)];
        }
      });
    });
  }, t3.prototype.arraySync = function() {
    return J2(this.shape, this.dataSync());
  }, t3.prototype.data = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3;
      return r2(this, function(n3) {
        switch (n3.label) {
          case 0:
            return this.throwIfDisposed(), t4 = yt2().read(this.dataId), "string" !== this.dtype ? [3, 2] : [4, t4];
          case 1:
            e3 = n3.sent();
            try {
              return [2, e3.map(function(t5) {
                return ot2(t5);
              })];
            } catch (t5) {
              throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
            }
            n3.label = 2;
          case 2:
            return [2, t4];
        }
      });
    });
  }, t3.prototype.dataSync = function() {
    this.throwIfDisposed();
    var t4 = yt2().readSync(this.dataId);
    if ("string" === this.dtype) try {
      return t4.map(function(t5) {
        return ot2(t5);
      });
    } catch (t5) {
      throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
    }
    return t4;
  }, t3.prototype.bytes = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return this.throwIfDisposed(), [4, yt2().read(this.dataId)];
          case 1:
            return t4 = e3.sent(), "string" === this.dtype ? [2, t4] : [2, new Uint8Array(t4.buffer)];
        }
      });
    });
  }, t3.prototype.dispose = function() {
    this.isDisposed || (yt2().disposeTensor(this), this.isDisposedInternal = true);
  }, Object.defineProperty(t3.prototype, "isDisposed", { get: function() {
    return this.isDisposedInternal;
  }, enumerable: true, configurable: true }), t3.prototype.throwIfDisposed = function() {
    if (this.isDisposed) throw new Error("Tensor is disposed.");
  }, t3.prototype.toFloat = function() {
    return this.asType("float32");
  }, t3.prototype.toInt = function() {
    return this.asType("int32");
  }, t3.prototype.toBool = function() {
    return this.asType("bool");
  }, t3.prototype.print = function(t4) {
    return void 0 === t4 && (t4 = false), xt2.print(this, t4);
  }, t3.prototype.reshape = function(t4) {
    return this.throwIfDisposed(), xt2.reshape(this, t4);
  }, t3.prototype.reshapeAs = function(t4) {
    return this.throwIfDisposed(), this.reshape(t4.shape);
  }, t3.prototype.expandDims = function(t4) {
    return void 0 === t4 && (t4 = 0), xt2.expandDims(this, t4);
  }, t3.prototype.cumsum = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = 0), void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = false), xt2.cumsum(this, t4, e3, n3);
  }, t3.prototype.squeeze = function(t4) {
    return this.throwIfDisposed(), xt2.squeeze(this, t4);
  }, t3.prototype.clone = function() {
    return this.throwIfDisposed(), xt2.clone(this);
  }, t3.prototype.toString = function(t4) {
    return void 0 === t4 && (t4 = false), dt2(this.dataSync(), this.shape, this.dtype, t4);
  }, t3.prototype.gather = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), this.throwIfDisposed(), xt2.gather(this, t4, e3);
  }, t3.prototype.matMul = function(t4, e3, n3) {
    return void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = false), this.throwIfDisposed(), xt2.matMul(this, t4, e3, n3);
  }, t3.prototype.dot = function(t4) {
    return this.throwIfDisposed(), xt2.dot(this, t4);
  }, t3.prototype.norm = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = "euclidean"), void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false), this.throwIfDisposed(), xt2.norm(this, t4, e3, n3);
  }, t3.prototype.slice = function(t4, e3) {
    return this.throwIfDisposed(), xt2.slice(this, t4, e3);
  }, t3.prototype.reverse = function(t4) {
    return this.throwIfDisposed(), xt2.reverse(this, t4);
  }, t3.prototype.concat = function(e3, n3) {
    return void 0 === n3 && (n3 = 0), this.throwIfDisposed(), e3 instanceof t3 && (e3 = [e3]), xt2.concat([this].concat(e3), n3);
  }, t3.prototype.split = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), this.throwIfDisposed(), xt2.split(this, t4, e3);
  }, t3.prototype.stack = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), xt2.stack([this, t4], e3);
  }, t3.prototype.unstack = function(t4) {
    return void 0 === t4 && (t4 = 0), xt2.unstack(this, t4);
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3) {
    return void 0 === n3 && (n3 = 1e-3), bt2("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(t4, e3, o3, r3, n3);
  }, t3.prototype.all = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.all(this, t4, e3);
  }, t3.prototype.any = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.any(this, t4, e3);
  }, t3.prototype.logSumExp = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.logSumExp(this, t4, e3);
  }, t3.prototype.sum = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.sum(this, t4, e3);
  }, t3.prototype.prod = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.prod(this, t4, e3);
  }, t3.prototype.mean = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.mean(this, t4, e3);
  }, t3.prototype.min = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.min(this, t4, e3);
  }, t3.prototype.max = function(t4, e3) {
    return void 0 === t4 && (t4 = null), void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.max(this, t4, e3);
  }, t3.prototype.argMin = function(t4) {
    return void 0 === t4 && (t4 = null), this.throwIfDisposed(), xt2.argMin(this, t4);
  }, t3.prototype.argMax = function(t4) {
    return void 0 === t4 && (t4 = null), this.throwIfDisposed(), xt2.argMax(this, t4);
  }, t3.prototype.cast = function(t4) {
    return this.throwIfDisposed(), xt2.cast(this, t4);
  }, t3.prototype.addStrict = function(t4) {
    return this.throwIfDisposed(), xt2.addStrict(this, t4);
  }, t3.prototype.atan2 = function(t4) {
    return this.throwIfDisposed(), xt2.atan2(this, t4);
  }, t3.prototype.sub = function(t4) {
    return this.throwIfDisposed(), xt2.sub(this, t4);
  }, t3.prototype.subStrict = function(t4) {
    return this.throwIfDisposed(), xt2.subStrict(this, t4);
  }, t3.prototype.pow = function(t4) {
    return this.throwIfDisposed(), xt2.pow(this, t4);
  }, t3.prototype.powStrict = function(t4) {
    return this.throwIfDisposed(), xt2.powStrict(this, t4);
  }, t3.prototype.mul = function(t4) {
    return this.throwIfDisposed(), xt2.mul(this, t4);
  }, t3.prototype.mulStrict = function(t4) {
    return this.throwIfDisposed(), xt2.mulStrict(this, t4);
  }, t3.prototype.floorDiv = function(t4) {
    return this.throwIfDisposed(), xt2.floorDiv(this, t4);
  }, t3.prototype.divStrict = function(t4) {
    return this.throwIfDisposed(), xt2.divStrict(this, t4);
  }, t3.prototype.minimum = function(t4) {
    return this.throwIfDisposed(), xt2.minimum(this, t4);
  }, t3.prototype.minimumStrict = function(t4) {
    return this.throwIfDisposed(), xt2.minimumStrict(this, t4);
  }, t3.prototype.maximum = function(t4) {
    return this.throwIfDisposed(), xt2.maximum(this, t4);
  }, t3.prototype.maximumStrict = function(t4) {
    return this.throwIfDisposed(), xt2.maximumStrict(this, t4);
  }, t3.prototype.mod = function(t4) {
    return this.throwIfDisposed(), xt2.mod(this, t4);
  }, t3.prototype.modStrict = function(t4) {
    return this.throwIfDisposed(), xt2.modStrict(this, t4);
  }, t3.prototype.squaredDifferenceStrict = function(t4) {
    return this.throwIfDisposed(), xt2.squaredDifferenceStrict(this, t4);
  }, t3.prototype.notEqual = function(t4) {
    return this.throwIfDisposed(), xt2.notEqual(this, t4);
  }, t3.prototype.notEqualStrict = function(t4) {
    return this.throwIfDisposed(), xt2.notEqualStrict(this, t4);
  }, t3.prototype.less = function(t4) {
    return this.throwIfDisposed(), xt2.less(this, t4);
  }, t3.prototype.lessStrict = function(t4) {
    return this.throwIfDisposed(), xt2.lessStrict(this, t4);
  }, t3.prototype.equal = function(t4) {
    return this.throwIfDisposed(), xt2.equal(this, t4);
  }, t3.prototype.equalStrict = function(t4) {
    return this.throwIfDisposed(), xt2.equalStrict(this, t4);
  }, t3.prototype.lessEqual = function(t4) {
    return this.throwIfDisposed(), xt2.lessEqual(this, t4);
  }, t3.prototype.lessEqualStrict = function(t4) {
    return this.throwIfDisposed(), xt2.lessEqualStrict(this, t4);
  }, t3.prototype.greater = function(t4) {
    return this.throwIfDisposed(), xt2.greater(this, t4);
  }, t3.prototype.greaterStrict = function(t4) {
    return this.throwIfDisposed(), xt2.greaterStrict(this, t4);
  }, t3.prototype.greaterEqual = function(t4) {
    return this.throwIfDisposed(), xt2.greaterEqual(this, t4);
  }, t3.prototype.greaterEqualStrict = function(t4) {
    return this.throwIfDisposed(), xt2.greaterEqualStrict(this, t4);
  }, t3.prototype.logicalAnd = function(t4) {
    return this.throwIfDisposed(), xt2.logicalAnd(this, t4);
  }, t3.prototype.logicalOr = function(t4) {
    return this.throwIfDisposed(), xt2.logicalOr(this, t4);
  }, t3.prototype.logicalNot = function() {
    return this.throwIfDisposed(), xt2.logicalNot(this);
  }, t3.prototype.logicalXor = function(t4) {
    return this.throwIfDisposed(), xt2.logicalXor(this, t4);
  }, t3.prototype.where = function(t4, e3) {
    return this.throwIfDisposed(), xt2.where(t4, this, e3);
  }, t3.prototype.neg = function() {
    return this.throwIfDisposed(), xt2.neg(this);
  }, t3.prototype.ceil = function() {
    return this.throwIfDisposed(), xt2.ceil(this);
  }, t3.prototype.floor = function() {
    return this.throwIfDisposed(), xt2.floor(this);
  }, t3.prototype.sign = function() {
    return this.throwIfDisposed(), xt2.sign(this);
  }, t3.prototype.isNaN = function() {
    return this.throwIfDisposed(), xt2.isNaN(this);
  }, t3.prototype.isInf = function() {
    return this.throwIfDisposed(), xt2.isInf(this);
  }, t3.prototype.isFinite = function() {
    return this.throwIfDisposed(), xt2.isFinite(this);
  }, t3.prototype.exp = function() {
    return this.throwIfDisposed(), xt2.exp(this);
  }, t3.prototype.expm1 = function() {
    return this.throwIfDisposed(), xt2.expm1(this);
  }, t3.prototype.log = function() {
    return this.throwIfDisposed(), xt2.log(this);
  }, t3.prototype.log1p = function() {
    return this.throwIfDisposed(), xt2.log1p(this);
  }, t3.prototype.sqrt = function() {
    return this.throwIfDisposed(), xt2.sqrt(this);
  }, t3.prototype.rsqrt = function() {
    return this.throwIfDisposed(), xt2.rsqrt(this);
  }, t3.prototype.square = function() {
    return this.throwIfDisposed(), xt2.square(this);
  }, t3.prototype.reciprocal = function() {
    return this.throwIfDisposed(), xt2.reciprocal(this);
  }, t3.prototype.abs = function() {
    return this.throwIfDisposed(), xt2.abs(this);
  }, t3.prototype.clipByValue = function(t4, e3) {
    return this.throwIfDisposed(), xt2.clipByValue(this, t4, e3);
  }, t3.prototype.relu = function() {
    return this.throwIfDisposed(), xt2.relu(this);
  }, t3.prototype.relu6 = function() {
    return this.throwIfDisposed(), xt2.relu6(this);
  }, t3.prototype.elu = function() {
    return this.throwIfDisposed(), xt2.elu(this);
  }, t3.prototype.selu = function() {
    return this.throwIfDisposed(), xt2.selu(this);
  }, t3.prototype.leakyRelu = function(t4) {
    return void 0 === t4 && (t4 = 0.2), this.throwIfDisposed(), xt2.leakyRelu(this, t4);
  }, t3.prototype.prelu = function(t4) {
    return this.throwIfDisposed(), xt2.prelu(this, t4);
  }, t3.prototype.sigmoid = function() {
    return this.throwIfDisposed(), xt2.sigmoid(this);
  }, t3.prototype.logSigmoid = function() {
    return this.throwIfDisposed(), xt2.logSigmoid(this);
  }, t3.prototype.softplus = function() {
    return this.throwIfDisposed(), xt2.softplus(this);
  }, t3.prototype.zerosLike = function() {
    return this.throwIfDisposed(), xt2.zerosLike(this);
  }, t3.prototype.onesLike = function() {
    return this.throwIfDisposed(), xt2.onesLike(this);
  }, t3.prototype.sin = function() {
    return this.throwIfDisposed(), xt2.sin(this);
  }, t3.prototype.cos = function() {
    return this.throwIfDisposed(), xt2.cos(this);
  }, t3.prototype.tan = function() {
    return this.throwIfDisposed(), xt2.tan(this);
  }, t3.prototype.asin = function() {
    return this.throwIfDisposed(), xt2.asin(this);
  }, t3.prototype.acos = function() {
    return this.throwIfDisposed(), xt2.acos(this);
  }, t3.prototype.atan = function() {
    return this.throwIfDisposed(), xt2.atan(this);
  }, t3.prototype.sinh = function() {
    return this.throwIfDisposed(), xt2.sinh(this);
  }, t3.prototype.cosh = function() {
    return this.throwIfDisposed(), xt2.cosh(this);
  }, t3.prototype.tanh = function() {
    return this.throwIfDisposed(), xt2.tanh(this);
  }, t3.prototype.asinh = function() {
    return this.throwIfDisposed(), xt2.asinh(this);
  }, t3.prototype.acosh = function() {
    return this.throwIfDisposed(), xt2.acosh(this);
  }, t3.prototype.atanh = function() {
    return this.throwIfDisposed(), xt2.atanh(this);
  }, t3.prototype.erf = function() {
    return this.throwIfDisposed(), xt2.erf(this);
  }, t3.prototype.round = function() {
    return this.throwIfDisposed(), xt2.round(this);
  }, t3.prototype.step = function(t4) {
    return void 0 === t4 && (t4 = 0), this.throwIfDisposed(), xt2.step(this, t4);
  }, t3.prototype.softmax = function(t4) {
    return void 0 === t4 && (t4 = -1), this.throwIfDisposed(), xt2.softmax(this, t4);
  }, t3.prototype.logSoftmax = function(t4) {
    return void 0 === t4 && (t4 = -1), this.throwIfDisposed(), xt2.logSoftmax(this, t4);
  }, t3.prototype.resizeBilinear = function(t4, e3) {
    return void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.image.resizeBilinear(this, t4, e3);
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3) {
    return void 0 === e3 && (e3 = false), this.throwIfDisposed(), xt2.image.resizeNearestNeighbor(this, t4, e3);
  }, t3.prototype.conv1d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NWC"), void 0 === o3 && (o3 = 1), this.throwIfDisposed(), xt2.conv1d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.conv2d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NHWC"), void 0 === o3 && (o3 = [1, 1]), this.throwIfDisposed(), xt2.conv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.conv2dTranspose = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), xt2.conv2dTranspose(this, t4, e3, n3, r3, o3);
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === r3 && (r3 = "NHWC"), void 0 === o3 && (o3 = [1, 1]), this.throwIfDisposed(), xt2.depthwiseConv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.separableConv2d = function(t4, e3, n3, r3, o3, a3) {
    return void 0 === o3 && (o3 = [1, 1]), void 0 === a3 && (a3 = "NHWC"), this.throwIfDisposed(), xt2.separableConv2d(this, t4, e3, n3, r3, o3, a3);
  }, t3.prototype.avgPool = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), xt2.avgPool(this, t4, e3, n3, r3);
  }, t3.prototype.maxPool = function(t4, e3, n3, r3) {
    return this.throwIfDisposed(), xt2.maxPool(this, t4, e3, n3, r3);
  }, t3.prototype.localResponseNormalization = function(t4, e3, n3, r3) {
    return void 0 === t4 && (t4 = 5), void 0 === e3 && (e3 = 1), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 0.5), xt2.localResponseNormalization(this, t4, e3, n3, r3);
  }, t3.prototype.pool = function(t4, e3, n3, r3, o3) {
    return this.throwIfDisposed(), xt2.pool(this, t4, e3, n3, r3, o3);
  }, t3.prototype.variable = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = true), this.throwIfDisposed(), yt2().makeVariable(this, t4, e3, n3);
  }, t3.prototype.unsortedSegmentSum = function(t4, e3) {
    return this.throwIfDisposed(), xt2.unsortedSegmentSum(this, t4, e3);
  }, t3.prototype.batchToSpaceND = function(t4, e3) {
    return this.throwIfDisposed(), xt2.batchToSpaceND(this, t4, e3);
  }, t3.prototype.spaceToBatchND = function(t4, e3) {
    return this.throwIfDisposed(), xt2.spaceToBatchND(this, t4, e3);
  }, t3.prototype.topk = function(t4, e3) {
    return void 0 === t4 && (t4 = 1), void 0 === e3 && (e3 = true), this.throwIfDisposed(), xt2.topk(this, t4, e3);
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3, o3, a3, i3, s3) {
    return void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = 0), void 0 === a3 && (a3 = 0), void 0 === i3 && (i3 = 0), void 0 === s3 && (s3 = 0), this.throwIfDisposed(), xt2.stridedSlice(this, t4, e3, n3, r3, o3, a3, i3, s3);
  }, t3.prototype.depthToSpace = function(t4, e3) {
    return this.throwIfDisposed(), xt2.depthToSpace(this, t4, e3);
  }, t3.prototype.fft = function() {
    return this.throwIfDisposed(), xt2.spectral.fft(this);
  }, t3.prototype.ifft = function() {
    return this.throwIfDisposed(), xt2.spectral.ifft(this);
  }, t3.prototype.rfft = function() {
    return this.throwIfDisposed(), xt2.spectral.rfft(this);
  }, t3.prototype.irfft = function() {
    return this.throwIfDisposed(), xt2.spectral.irfft(this);
  }, t3;
}();
Object.defineProperty(wt2, Symbol.hasInstance, { value: function(t3) {
  return !!t3 && null != t3.dataId && null != t3.shape && null != t3.dtype;
} });
var Ct2;
var Et2;
var Rt2;
var It2;
var kt2;
var St2 = function(t3) {
  function n3(e3, n4, r3, o3) {
    var a3 = t3.call(this, e3.shape, e3.dtype, e3.dataId, o3) || this;
    return a3.trainable = n4, a3.name = r3, a3;
  }
  return e2(n3, t3), n3.prototype.assign = function(t4) {
    if (t4.dtype !== this.dtype) throw new Error("dtype of the new value (" + t4.dtype + ") and previous value (" + this.dtype + ") must match");
    if (!S2(t4.shape, this.shape)) throw new Error("shape of the new value (" + t4.shape + ") and previous value (" + this.shape + ") must match");
    yt2().disposeTensor(this), this.dataId = t4.dataId, yt2().incRef(this, null);
  }, n3.prototype.dispose = function() {
    yt2().disposeVariable(this), this.isDisposedInternal = true;
  }, n3;
}(wt2);
Object.defineProperty(St2, Symbol.hasInstance, { value: function(t3) {
  return t3 instanceof wt2 && null != t3.assign && t3.assign instanceof Function;
} }), function(t3) {
  t3.R0 = "R0", t3.R1 = "R1", t3.R2 = "R2", t3.R3 = "R3", t3.R4 = "R4", t3.R5 = "R5", t3.R6 = "R6";
}(Ct2 || (Ct2 = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "int32", t3.bool = "int32", t3.complex64 = "complex64";
}(Et2 || (Et2 = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "int32", t3.bool = "bool", t3.complex64 = "complex64";
}(Rt2 || (Rt2 = {})), function(t3) {
  t3.float32 = "float32", t3.int32 = "float32", t3.bool = "float32", t3.complex64 = "complex64";
}(It2 || (It2 = {})), function(t3) {
  t3.float32 = "complex64", t3.int32 = "complex64", t3.bool = "complex64", t3.complex64 = "complex64";
}(kt2 || (kt2 = {}));
var At2 = { float32: It2, int32: Et2, bool: Rt2, complex64: kt2 };
function Tt2(t3, e3) {
  if ("string" === t3 || "string" === e3) {
    if ("string" === t3 && "string" === e3) return "string";
    throw new Error("Can not upcast " + t3 + " with " + e3);
  }
  return At2[t3][e3];
}
function Dt2(t3) {
  return Tt2(t3, "int32");
}
function Nt2(t3, e3) {
  if (t3.dtype === e3.dtype) return [t3, e3];
  var n3 = Tt2(t3.dtype, e3.dtype);
  return [t3.cast(n3), e3.cast(n3)];
}
function Ft2(t3, e3) {
  C2(t3.dtype === e3.dtype, function() {
    return "The dtypes of the first(" + t3.dtype + ") and second(" + e3.dtype + ") input must match";
  });
}
function _t2(t3) {
  var e3 = [];
  return function t4(e4, n3, r3) {
    if (null == e4) return;
    if (e4 instanceof wt2) return void n3.push(e4);
    if (o3 = e4, !Array.isArray(o3) && "object" != typeof o3) return;
    var o3;
    var a3 = e4;
    for (var i3 in a3) {
      var s3 = a3[i3];
      r3.has(s3) || (r3.add(s3), t4(s3, n3, r3));
    }
  }(t3, e3, /* @__PURE__ */ new Set()), e3;
}
var Ot2;
var Mt2 = Object.freeze({ makeTypesMatch: Nt2, assertTypesMatch: Ft2, isTensorInList: function(t3, e3) {
  return e3.some(function(e4) {
    return e4.id === t3.id;
  });
}, getTensorsInContainer: _t2 });
var Bt2 = function() {
  function t3() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };
  }
  return t3.prototype.dispose = function() {
    for (var t4 in this.registeredVariables) this.registeredVariables[t4].dispose();
  }, t3;
}();
var Pt2 = function() {
  function t3(t4) {
    this.ENV = t4, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Bt2();
  }
  return t3.prototype.ready = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3, n3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (null != this.pendingBackendInit) return [2, this.pendingBackendInit.then(function() {
            })];
            if (null != this.backendInstance) return [2];
            t4 = this.getSortedBackends(), e3 = 0, r3.label = 1;
          case 1:
            return e3 < t4.length ? (n3 = t4[e3], [4, this.initializeBackend(n3).success]) : [3, 5];
          case 2:
            return r3.sent() ? [4, this.setBackend(n3)] : [3, 4];
          case 3:
            return r3.sent(), [2];
          case 4:
            return e3++, [3, 1];
          case 5:
            throw new Error("Could not initialize any backends, all backend initializations failed.");
        }
      });
    });
  }, Object.defineProperty(t3.prototype, "backend", { get: function() {
    if (null != this.pendingBackendInit) throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");
    if (null == this.backendInstance) {
      var t4 = this.initializeBackendsAndReturnBest(), e3 = t4.name;
      if (t4.asyncInit) throw new Error("The highest priority backend '" + e3 + "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");
      this.setBackend(e3);
    }
    return this.backendInstance;
  }, enumerable: true, configurable: true }), t3.prototype.backendNames = function() {
    return Object.keys(this.registryFactory);
  }, t3.prototype.findBackend = function(t4) {
    if (!(t4 in this.registry)) {
      if (!(t4 in this.registryFactory)) return null;
      if (this.initializeBackend(t4).asyncInit) return null;
    }
    return this.registry[t4];
  }, t3.prototype.findBackendFactory = function(t4) {
    return t4 in this.registryFactory ? this.registryFactory[t4].factory : null;
  }, t3.prototype.registerBackend = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = 1), t4 in this.registryFactory ? (console.warn(t4 + " backend was already registered. Reusing existing backend factory."), false) : (this.registryFactory[t4] = { factory: e3, priority: n3 }, true);
  }, t3.prototype.setBackend = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (null == this.registryFactory[t4]) throw new Error("Backend name '" + t4 + "' not found in registry");
            return this.backendName = t4, null != this.registry[t4] ? [3, 4] : (this.backendInstance = null, e3 = this.initializeBackend(t4), n3 = e3.success, e3.asyncInit ? [4, n3] : [3, 2]);
          case 1:
            return o3 = r3.sent(), [3, 3];
          case 2:
            o3 = n3, r3.label = 3;
          case 3:
            if (!o3) return [2, false];
            r3.label = 4;
          case 4:
            return this.backendInstance = this.registry[t4], this.setupRegisteredKernels(), this.profiler = new ut2(this.backendInstance), [2, true];
        }
      });
    });
  }, t3.prototype.setupRegisteredKernels = function() {
    var t4 = this;
    f2(this.backendName).forEach(function(e3) {
      null != e3.setupFunc && e3.setupFunc(t4.backendInstance);
    });
  }, t3.prototype.disposeRegisteredKernels = function(t4) {
    var e3 = this;
    f2(t4).forEach(function(n3) {
      null != n3.disposeFunc && n3.disposeFunc(e3.registry[t4]);
    });
  }, t3.prototype.initializeBackend = function(t4) {
    var e3 = this, n3 = this.registryFactory[t4];
    if (null == n3) throw new Error("Cannot initialize backend " + t4 + ", no registration found.");
    try {
      var r3 = n3.factory();
      if (Promise.resolve(r3) === r3) {
        var o3 = ++this.pendingBackendInitId, a3 = r3.then(function(n4) {
          return !(o3 < e3.pendingBackendInitId) && (e3.registry[t4] = n4, e3.pendingBackendInit = null, true);
        }).catch(function(n4) {
          return !(o3 < e3.pendingBackendInitId) && (e3.pendingBackendInit = null, console.warn("Initialization of backend " + t4 + " failed"), console.warn(n4.stack || n4.message), false);
        });
        return this.pendingBackendInit = a3, { success: a3, asyncInit: true };
      }
      return this.registry[t4] = r3, { success: true, asyncInit: false };
    } catch (e4) {
      return console.warn("Initialization of backend " + t4 + " failed"), console.warn(e4.stack || e4.message), { success: false, asyncInit: false };
    }
  }, t3.prototype.removeBackend = function(t4) {
    if (!(t4 in this.registryFactory)) throw new Error(t4 + " backend not found in registry");
    this.backendName === t4 && null != this.pendingBackendInit && this.pendingBackendInitId++, t4 in this.registry && (this.disposeRegisteredKernels(t4), this.registry[t4].dispose(), delete this.registry[t4]), delete this.registryFactory[t4], this.backendName === t4 && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }, t3.prototype.getSortedBackends = function() {
    var t4 = this;
    if (0 === Object.keys(this.registryFactory).length) throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort(function(e3, n3) {
      return t4.registryFactory[n3].priority - t4.registryFactory[e3].priority;
    });
  }, t3.prototype.initializeBackendsAndReturnBest = function() {
    for (var t4 = this.getSortedBackends(), e3 = 0; e3 < t4.length; e3++) {
      var n3 = t4[e3], r3 = this.initializeBackend(n3), o3 = r3.success, a3 = r3.asyncInit;
      if (a3 || o3) return { name: n3, asyncInit: a3 };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }, t3.prototype.moveData = function(t4, e3) {
    var n3 = this.state.tensorInfo.get(e3), r3 = n3.backend, o3 = this.readSync(e3);
    r3.disposeData(e3), n3.backend = t4, t4.move(e3, o3, n3.shape, n3.dtype), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }, t3.prototype.tidy = function(t4, e3) {
    var n3, r3 = this, o3 = null;
    if (null == e3) {
      if ("function" != typeof t4) throw new Error("Please provide a function to tidy()");
      e3 = t4;
    } else {
      if ("string" != typeof t4 && !(t4 instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if ("function" != typeof e3) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      o3 = t4;
    }
    return this.scopedRun(function() {
      return r3.startScope(o3);
    }, function() {
      return r3.endScope(n3);
    }, function() {
      return (n3 = e3()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n3;
    });
  }, t3.prototype.scopedRun = function(t4, e3, n3) {
    t4();
    try {
      var r3 = n3();
      return e3(), r3;
    } catch (t5) {
      throw e3(), t5;
    }
  }, t3.prototype.nextTensorId = function() {
    return t3.nextTensorId++;
  }, t3.prototype.nextVariableId = function() {
    return t3.nextVariableId++;
  }, t3.prototype.clone = function(t4) {
    var e3 = this.makeTensorFromDataId(t4.dataId, t4.shape, t4.dtype), n3 = { x: t4 };
    return this.addTapeNode(this.state.activeScope.name, n3, [e3], function(t5) {
      return { x: function() {
        return t5.toFloat();
      } };
    }, [], {}), e3;
  }, t3.prototype.runKernel = function(t4, e3, n3, r3, o3) {
    return this.runKernelFunc(null, e3, null, t4, n3, r3, o3);
  }, t3.prototype.shouldCheckForMemLeaks = function() {
    return this.ENV.getBool("IS_TEST");
  }, t3.prototype.checkKernelForMemLeak = function(t4, e3, n3) {
    var r3 = this.backend.numDataIds(), o3 = 0;
    n3.forEach(function(t5) {
      o3 += "complex64" === t5.dtype ? 3 : 1;
    });
    var a3 = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i3 = r3 - e3 - o3 - a3;
    if (i3 > 0) throw new Error("Backend '" + this.backendName + "' has an internal memory leak (" + i3 + " data ids) after running '" + t4 + "'");
  }, t3.prototype.runKernelFunc = function(t4, e3, n3, r3, o3, a3, i3) {
    var s3, u3 = this, c3 = [], h3 = this.isTapeOn();
    null == r3 && (r3 = null != this.state.activeScope ? this.state.activeScope.name : "");
    var f3, d3 = this.state.numBytes, p3 = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    var v2, g2 = l2(r3, this.backendName);
    if (null != g2) f3 = function() {
      var t5 = u3.backend.numDataIds();
      v2 = g2.kernelFunc({ inputs: e3, attrs: o3, backend: u3.backend });
      var n4 = Array.isArray(v2) ? v2 : [v2];
      u3.shouldCheckForMemLeaks() && u3.checkKernelForMemLeak(r3, t5, n4);
      var s4 = n4.map(function(t6) {
        var e4 = t6.dataId, n5 = t6.shape, r4 = t6.dtype;
        return u3.makeTensorFromDataId(e4, n5, r4);
      });
      if (h3) {
        var l3 = u3.getTensorsForGradient(r3, e3, s4);
        if (null == l3) {
          null == i3 && (i3 = []);
          var f4 = s4.filter(function(t6, e4) {
            return i3[e4];
          });
          l3 = (a3 || []).slice().concat(f4);
        }
        c3 = u3.saveTensorsForBackwardMode(l3);
      }
      return s4;
    };
    else {
      var m3 = function(t5) {
        h3 && (c3 = t5.map(function(t6) {
          return u3.keep(u3.clone(t6));
        }));
      };
      f3 = function() {
        var e4 = u3.backend.numDataIds();
        v2 = u3.tidy(function() {
          return t4(u3.backend, m3);
        });
        var n4 = Array.isArray(v2) ? v2 : [v2];
        return u3.shouldCheckForMemLeaks() && u3.checkKernelForMemLeak(r3, e4, n4), n4;
      };
    }
    return this.scopedRun(function() {
      return u3.state.kernelDepth++;
    }, function() {
      return u3.state.kernelDepth--;
    }, function() {
      s3 = u3.ENV.getBool("DEBUG") ? u3.profiler.profileKernel(r3, e3, function() {
        return f3();
      }) : f3();
    }), h3 && this.addTapeNode(r3, e3, s3, n3, c3, o3), this.state.profiling && this.state.activeProfile.kernels.push({ name: r3, bytesAdded: this.state.numBytes - d3, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - p3, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(e3).map(function(t5) {
      return e3[t5].shape;
    }), outputShapes: s3.map(function(t5) {
      return t5.shape;
    }) }), Array.isArray(v2) ? s3 : s3[0];
  }, t3.prototype.saveTensorsForBackwardMode = function(t4) {
    var e3 = this;
    return t4.map(function(t5) {
      return e3.keep(e3.clone(t5));
    });
  }, t3.prototype.getTensorsForGradient = function(t4, e3, n3) {
    var r3 = h2(t4);
    if (null != r3) {
      var o3 = r3.inputsToSave || [], a3 = r3.outputsToSave || [], i3 = void 0;
      r3.saveAllInputs ? (C2(Array.isArray(e3), function() {
        return "saveAllInputs is true, expected inputs to be an array.";
      }), i3 = Object.keys(e3).map(function(t5) {
        return e3[t5];
      })) : i3 = o3.map(function(t5) {
        return e3[t5];
      });
      var s3 = n3.filter(function(t5, e4) {
        return a3[e4];
      });
      return i3.concat(s3);
    }
    return null;
  }, t3.prototype.makeTensor = function(t4, e3, n3, r3) {
    if (null == t4) throw new Error("Values passed to engine.makeTensor() are null");
    n3 = n3 || "float32", r3 = r3 || this.backend;
    var o3 = t4;
    "string" === n3 && H2(t4[0]) && (o3 = t4.map(function(t5) {
      return rt2(t5);
    }));
    var a3 = r3.write(o3, e3, n3), i3 = new wt2(e3, n3, a3, this.nextTensorId());
    if (this.incRef(i3, r3), "string" === n3) {
      var s3 = this.state.tensorInfo.get(a3), u3 = G2(o3);
      this.state.numBytes += u3 - s3.bytes, s3.bytes = u3;
    }
    return i3;
  }, t3.prototype.makeTensorFromDataId = function(t4, e3, n3, r3) {
    var o3 = new wt2(e3, n3 = n3 || "float32", t4, this.nextTensorId());
    return this.incRef(o3, r3), o3;
  }, t3.prototype.makeVariable = function(t4, e3, n3, r3) {
    void 0 === e3 && (e3 = true), n3 = n3 || this.nextVariableId().toString(), null != r3 && r3 !== t4.dtype && (t4 = t4.asType(r3));
    var o3 = new St2(t4, e3, n3, this.nextTensorId());
    if (null != this.state.registeredVariables[o3.name]) throw new Error("Variable with name " + o3.name + " was already registered");
    return this.state.registeredVariables[o3.name] = o3, this.incRef(o3, this.backend), o3;
  }, t3.prototype.incRef = function(t4, e3) {
    var n3 = this.state.tensorInfo.has(t4.dataId) ? this.state.tensorInfo.get(t4.dataId).refCount : 0;
    if (this.state.numTensors++, "string" === t4.dtype && this.state.numStringTensors++, 0 === n3) {
      this.state.numDataBuffers++;
      var r3 = 0;
      "complex64" !== t4.dtype && "string" !== t4.dtype && (r3 = t4.size * z2(t4.dtype)), this.state.tensorInfo.set(t4.dataId, { backend: e3 || this.backend, dtype: t4.dtype, shape: t4.shape, bytes: r3, refCount: 0 }), this.state.numBytes += r3;
    }
    this.state.tensorInfo.get(t4.dataId).refCount++, t4 instanceof St2 || this.track(t4);
  }, t3.prototype.disposeTensor = function(t4) {
    if (this.state.tensorInfo.has(t4.dataId)) {
      this.state.numTensors--, "string" === t4.dtype && this.state.numStringTensors--;
      var e3 = this.state.tensorInfo.get(t4.dataId);
      e3.refCount <= 1 ? ("complex64" !== t4.dtype && (this.state.numBytes -= e3.bytes), this.state.numDataBuffers--, e3.backend.disposeData(t4.dataId), this.state.tensorInfo.delete(t4.dataId)) : this.state.tensorInfo.get(t4.dataId).refCount--;
    }
  }, t3.prototype.disposeVariables = function() {
    for (var t4 in this.state.registeredVariables) {
      var e3 = this.state.registeredVariables[t4];
      this.disposeVariable(e3);
    }
  }, t3.prototype.disposeVariable = function(t4) {
    this.disposeTensor(t4), null != this.state.registeredVariables[t4.name] && delete this.state.registeredVariables[t4.name];
  }, t3.prototype.memory = function() {
    var t4 = this.backend.memory();
    return t4.numTensors = this.state.numTensors, t4.numDataBuffers = this.state.numDataBuffers, t4.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t4.unreliable = true, null == t4.reasons && (t4.reasons = []), t4.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t4;
  }, t3.prototype.profile = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3;
      return r2(this, function(r3) {
        return this.state.profiling = true, e3 = this.state.numBytes, n3 = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t4(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t5) {
          return t5.totalBytesSnapshot;
        })), this.state.activeProfile.newBytes = this.state.numBytes - e3, this.state.activeProfile.newTensors = this.state.numTensors - n3, [2, this.state.activeProfile];
      });
    });
  }, t3.prototype.isTapeOn = function() {
    return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
  }, t3.prototype.addTapeNode = function(t4, e3, n3, r3, o3, a3) {
    var i3 = this, s3 = { id: this.state.nextTapeNodeId++, kernelName: t4, inputs: e3, outputs: n3, saved: o3 }, u3 = h2(t4);
    null != u3 && (r3 = u3.gradFunc), null != r3 && (s3.gradient = function(t5) {
      return t5 = t5.map(function(t6, e4) {
        if (null == t6) {
          var r4 = n3[e4], o4 = tt2(r4.size, r4.dtype);
          return i3.makeTensor(o4, r4.shape, r4.dtype);
        }
        return t6;
      }), r3(t5.length > 1 ? t5 : t5[0], o3, a3);
    }), this.state.activeTape.push(s3);
  }, t3.prototype.keep = function(t4) {
    return t4.kept = true, t4;
  }, t3.prototype.startTape = function() {
    0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;
  }, t3.prototype.endTape = function() {
    this.state.gradientDepth--;
  }, t3.prototype.startScope = function(t4) {
    var e3 = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    t4 && (e3.name = t4), this.state.scopeStack.push(e3), this.state.activeScope = e3;
  }, t3.prototype.endScope = function(t4) {
    for (var e3 = this, n3 = _t2(t4), r3 = new Set(n3.map(function(t5) {
      return t5.id;
    })), o3 = 0; o3 < this.state.activeScope.track.length; o3++) {
      var a3 = this.state.activeScope.track[o3];
      a3.kept || r3.has(a3.id) || a3.dispose();
    }
    var i3 = this.state.scopeStack.pop();
    this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n3.forEach(function(t5) {
      t5.kept || t5.scopeId !== i3.id || e3.track(t5);
    });
  }, t3.prototype.gradients = function(t4, e3, n3, r3) {
    var o3 = this;
    if (void 0 === r3 && (r3 = false), C2(e3.length > 0, function() {
      return "gradients() received an empty list of xs.";
    }), null != n3 && "float32" !== n3.dtype) throw new Error("dy must have 'float32' dtype, but has '" + n3.dtype + "'");
    var a3 = this.scopedRun(function() {
      return o3.startTape();
    }, function() {
      return o3.endTape();
    }, function() {
      return o3.tidy("forward", t4);
    });
    C2(a3 instanceof wt2, function() {
      return "The result y returned by f() must be a tensor.";
    });
    var i3 = function(t5, e4, n4) {
      for (var r4 = {}, o4 = {}, a4 = 0; a4 < e4.length; a4++) r4[e4[a4].id] = true;
      for (a4 = 0; a4 < t5.length; a4++) {
        var i4 = (p3 = t5[a4]).inputs;
        for (var s3 in i4) {
          for (var u3 = i4[s3], c3 = false, l3 = 0; l3 < e4.length; l3++) if (r4[u3.id]) {
            p3.outputs.forEach(function(t6) {
              return r4[t6.id] = true;
            }), c3 = true, o4[p3.id] = true;
            break;
          }
          if (c3) break;
        }
      }
      var h3 = {};
      h3[n4.id] = true;
      var f3 = {};
      for (a4 = t5.length - 1; a4 >= 0; a4--) for (i4 = (p3 = t5[a4]).inputs, l3 = 0; l3 < p3.outputs.length; l3++) if (h3[p3.outputs[l3].id]) {
        for (var s3 in i4) h3[i4[s3].id] = true, f3[p3.id] = true;
        break;
      }
      var d3 = [];
      for (a4 = 0; a4 < t5.length; a4++) {
        var p3;
        if (o4[(p3 = t5[a4]).id] && f3[p3.id]) {
          var v2 = {};
          for (var s3 in p3.inputs) {
            var g2 = p3.inputs[s3];
            r4[g2.id] && (v2[s3] = g2);
          }
          var m3 = Object.assign({}, p3);
          m3.inputs = v2, m3.outputs = p3.outputs, d3.push(m3);
        }
      }
      return d3;
    }(this.state.activeTape, e3, a3);
    if (!r3 && 0 === i3.length && e3.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", function() {
      var t5, r4, s3 = {};
      s3[a3.id] = null == n3 ? (t5 = a3.shape, r4 = Z2(k2(t5), "float32"), Lt2.makeTensor(r4, t5, "float32")) : n3, function(t6, e4, n4) {
        for (var r5 = function(r6) {
          var o5 = e4[r6], a4 = [];
          if (o5.outputs.forEach(function(e5) {
            var n5 = t6[e5.id];
            null != n5 ? a4.push(n5) : a4.push(null);
          }), null == o5.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + o5.kernelName + ".");
          var i4 = o5.gradient(a4), s4 = function(e5) {
            if (!(e5 in i4)) throw new Error("Cannot backprop through input " + e5 + ". Available gradients found: " + Object.keys(i4) + ".");
            var r7 = n4(function() {
              return i4[e5]();
            });
            if ("float32" !== r7.dtype) throw new Error("Error in gradient for op " + o5.kernelName + ". The gradient of input " + e5 + " must have 'float32' dtype, but has '" + r7.dtype + "'");
            var a5 = o5.inputs[e5];
            if (!S2(r7.shape, a5.shape)) throw new Error("Error in gradient for op " + o5.kernelName + ". The gradient of input '" + e5 + "' has shape '" + r7.shape + "', which does not match the shape of the input '" + a5.shape + "'");
            if (null == t6[a5.id]) t6[a5.id] = r7;
            else {
              var s5 = t6[a5.id];
              t6[a5.id] = s5.add(r7), s5.dispose();
            }
          };
          for (var u4 in o5.inputs) s4(u4);
        }, o4 = e4.length - 1; o4 >= 0; o4--) r5(o4);
      }(s3, i3, function(t6) {
        return o3.tidy(t6);
      });
      var u3 = e3.map(function(t6) {
        return s3[t6.id];
      });
      return 0 === o3.state.gradientDepth && (o3.state.activeTape.forEach(function(t6) {
        for (var e4 = 0, n4 = t6.saved; e4 < n4.length; e4++) {
          n4[e4].dispose();
        }
      }), o3.state.activeTape = null), { value: a3, grads: u3 };
    });
  }, t3.prototype.customGrad = function(t4) {
    var e3 = this;
    return C2(X2(t4), function() {
      return "The f passed in customGrad(f) must be a function.";
    }), function() {
      for (var n3, r3 = [], o3 = 0; o3 < arguments.length; o3++) r3[o3] = arguments[o3];
      C2(r3.every(function(t5) {
        return t5 instanceof wt2;
      }), function() {
        return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
      });
      var a3 = {};
      return r3.forEach(function(t5, e4) {
        a3[e4] = t5;
      }), e3.runKernelFunc(function(e4, o4) {
        return C2((n3 = t4.apply(void 0, r3.concat([o4]))).value instanceof wt2, function() {
          return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
        }), C2(X2(n3.gradFunc), function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
        }), n3.value;
      }, a3, function(t5, e4) {
        var o4 = n3.gradFunc(t5, e4), a4 = Array.isArray(o4) ? o4 : [o4];
        C2(a4.length === r3.length, function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
        }), C2(a4.every(function(t6) {
          return t6 instanceof wt2;
        }), function() {
          return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
        });
        var i3 = {};
        return a4.forEach(function(t6, e5) {
          i3[e5] = function() {
            return t6;
          };
        }), i3;
      });
    };
  }, t3.prototype.readSync = function(t4) {
    return this.state.tensorInfo.get(t4).backend.readSync(t4);
  }, t3.prototype.read = function(t4) {
    return this.state.tensorInfo.get(t4).backend.read(t4);
  }, t3.prototype.time = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            return e3 = et2(), [4, this.backend.time(t4)];
          case 1:
            return (n3 = r3.sent()).wallMs = et2() - e3, [2, n3];
        }
      });
    });
  }, t3.prototype.track = function(t4) {
    return null != this.state.activeScope && (t4.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t4)), t4;
  }, Object.defineProperty(t3.prototype, "registeredVariables", { get: function() {
    return this.state.registeredVariables;
  }, enumerable: true, configurable: true }), t3.prototype.reset = function() {
    for (var t4 in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Bt2(), this.registry) this.disposeRegisteredKernels(t4), this.registry[t4].dispose(), delete this.registry[t4];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }, t3.nextTensorId = 0, t3.nextVariableId = 0, t3;
}();
var Lt2 = function() {
  var t3 = function() {
    if (null == Ot2) {
      var t4 = void 0;
      if ("undefined" != typeof window) t4 = window;
      else if ("undefined" != typeof global) t4 = global;
      else if ("undefined" != typeof process) t4 = process;
      else {
        if ("undefined" == typeof self) throw new Error("Could not find a global object");
        t4 = self;
      }
      Ot2 = t4;
    }
    return Ot2;
  }();
  if (null == t3._tfengine) {
    var e3 = new o2(t3);
    t3._tfengine = new Pt2(e3);
  }
  return function(t4) {
    s2 = t4;
  }(t3._tfengine.ENV), yt2 = function() {
    return t3._tfengine;
  }, t3._tfengine;
}();
function Wt2() {
  return "undefined" != typeof window && null != window.document || "undefined" != typeof WorkerGlobalScope;
}
var Ut2 = i2();
Ut2.registerFlag("DEBUG", function() {
  return false;
}, function(t3) {
  t3 && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
}), Ut2.registerFlag("IS_BROWSER", function() {
  return Wt2();
}), Ut2.registerFlag("IS_NODE", function() {
  return "undefined" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;
}), Ut2.registerFlag("IS_CHROME", function() {
  return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
}), Ut2.registerFlag("PROD", function() {
  return false;
}), Ut2.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function() {
  return Ut2.getBool("DEBUG");
}), Ut2.registerFlag("DEPRECATION_WARNINGS_ENABLED", function() {
  return true;
}), Ut2.registerFlag("IS_TEST", function() {
  return false;
});
var Vt2;
var zt2;
var Gt2;
var Ht2 = {};
var qt2 = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function Kt2(t3, e3) {
  Ht2[t3] = e3;
}
function jt2(t3) {
  t3 in Ht2 || (Ht2[t3] = function(t4) {
    if (1 !== t4 && 2 !== t4) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    var e4 = function(t5) {
      if ("undefined" != typeof OffscreenCanvas && 2 === t5) return new OffscreenCanvas(300, 150);
      if ("undefined" != typeof document) return document.createElement("canvas");
      throw new Error("Cannot create a canvas in this context");
    }(t4);
    if (e4.addEventListener("webglcontextlost", function(e5) {
      e5.preventDefault(), delete Ht2[t4];
    }, false), 1 === t4) return e4.getContext("webgl", qt2) || e4.getContext("experimental-webgl", qt2);
    return e4.getContext("webgl2", qt2);
  }(t3));
  var e3 = Ht2[t3];
  return e3.isContextLost() ? (delete Ht2[t3], jt2(t3)) : (e3.disable(e3.DEPTH_TEST), e3.disable(e3.STENCIL_TEST), e3.disable(e3.BLEND), e3.disable(e3.DITHER), e3.disable(e3.POLYGON_OFFSET_FILL), e3.disable(e3.SAMPLE_COVERAGE), e3.enable(e3.SCISSOR_TEST), e3.enable(e3.CULL_FACE), e3.cullFace(e3.BACK), Ht2[t3]);
}
function Xt2(t3, e3) {
  return [e3, t3];
}
function Yt2(t3) {
  var e3 = k2(t3);
  return D2(Math.ceil(e3 / 4));
}
function $t2(t3, e3) {
  return [Math.max(1, Math.ceil(e3 / 2)), Math.max(1, Math.ceil(t3 / 2))];
}
function Qt2(t3, e3) {
  var n3, r3, o3, a3, s3, u3, c3, l3, h3, f3 = t3;
  return 2 === i2().getNumber("WEBGL_VERSION") ? (n3 = f3.R32F, r3 = f3.R16F, o3 = f3.RGBA16F, a3 = f3.RGBA32F, s3 = f3.RED, u3 = 4, c3 = 1, l3 = f3.HALF_FLOAT, h3 = f3.FLOAT) : (n3 = t3.RGBA, r3 = t3.RGBA, o3 = t3.RGBA, a3 = f3.RGBA, s3 = t3.RGBA, u3 = 4, c3 = 4, l3 = null != e3 ? e3.HALF_FLOAT_OES : null, h3 = t3.FLOAT), { internalFormatFloat: n3, internalFormatHalfFloat: r3, internalFormatPackedHalfFloat: o3, internalFormatPackedFloat: a3, textureFormatFloat: s3, downloadTextureFormat: t3.RGBA, downloadUnpackNumChannels: u3, defaultNumChannels: c3, textureTypeHalfFloat: l3, textureTypeFloat: h3 };
}
function Jt2(t3, e3, n3) {
  var r3 = n3();
  return e3 && function(t4) {
    var e4 = t4.getError();
    if (e4 !== t4.NO_ERROR) throw new Error("WebGL Error: " + ne2(t4, e4));
  }(t3), r3;
}
!function(t3) {
  t3[t3.DENSE = 0] = "DENSE", t3[t3.SHARED_BATCH = 1] = "SHARED_BATCH";
}(Vt2 || (Vt2 = {})), function(t3) {
  t3[t3.RENDER = 0] = "RENDER", t3[t3.UPLOAD = 1] = "UPLOAD", t3[t3.PIXELS = 2] = "PIXELS", t3[t3.DOWNLOAD = 3] = "DOWNLOAD";
}(zt2 || (zt2 = {})), function(t3) {
  t3[t3.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", t3[t3.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", t3[t3.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", t3[t3.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", t3[t3.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
}(Gt2 || (Gt2 = {}));
var Zt2 = 596e-10;
var te2 = 65504;
function ee2(t3) {
  return !!(i2().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === t3 || Zt2 < Math.abs(t3) && Math.abs(t3) < te2);
}
function ne2(t3, e3) {
  switch (e3) {
    case t3.NO_ERROR:
      return "NO_ERROR";
    case t3.INVALID_ENUM:
      return "INVALID_ENUM";
    case t3.INVALID_VALUE:
      return "INVALID_VALUE";
    case t3.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case t3.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case t3.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case t3.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return "Unknown error code " + e3;
  }
}
function re2(t3, e3, n3) {
  return ke2(t3, e3, function() {
    return t3.getExtension(n3);
  }, 'Extension "' + n3 + '" not supported on this browser.');
}
function oe2(t3, e3, n3) {
  var r3 = ke2(t3, e3, function() {
    return t3.createShader(t3.VERTEX_SHADER);
  }, "Unable to create vertex WebGLShader.");
  if (Jt2(t3, e3, function() {
    return t3.shaderSource(r3, n3);
  }), Jt2(t3, e3, function() {
    return t3.compileShader(r3);
  }), false === t3.getShaderParameter(r3, t3.COMPILE_STATUS)) throw console.log(t3.getShaderInfoLog(r3)), new Error("Failed to compile vertex shader.");
  return r3;
}
function ae2(t3, e3, n3) {
  var r3 = ke2(t3, e3, function() {
    return t3.createShader(t3.FRAGMENT_SHADER);
  }, "Unable to create fragment WebGLShader.");
  if (Jt2(t3, e3, function() {
    return t3.shaderSource(r3, n3);
  }), Jt2(t3, e3, function() {
    return t3.compileShader(r3);
  }), false === t3.getShaderParameter(r3, t3.COMPILE_STATUS)) throw function(t4, e4) {
    var n4 = ue2.exec(e4);
    if (null == n4) return console.log("Couldn't parse line number in error: " + e4), void console.log(t4);
    for (var r4 = +n4[1], o3 = t4.split("\n"), a3 = o3.length.toString().length + 2, i3 = o3.map(function(t5, e5) {
      return N2((e5 + 1).toString(), a3) + t5;
    }), s3 = 0, u3 = 0; u3 < i3.length; u3++) s3 = Math.max(i3[u3].length, s3);
    var c3 = i3.slice(0, r4 - 1), l3 = i3.slice(r4 - 1, r4), h3 = i3.slice(r4);
    console.log(c3.join("\n")), console.log(e4.split("\n")[0]), console.log("%c " + N2(l3[0], s3), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(h3.join("\n"));
  }(n3, t3.getShaderInfoLog(r3)), new Error("Failed to compile fragment shader.");
  return r3;
}
var ie2;
var se2;
var ue2 = /ERROR: [0-9]+:([0-9]+):/g;
function ce2(t3, e3) {
  return ke2(t3, e3, function() {
    return t3.createProgram();
  }, "Unable to create WebGLProgram.");
}
function le2(t3, e3, n3) {
  if (Jt2(t3, e3, function() {
    return t3.linkProgram(n3);
  }), false === t3.getProgramParameter(n3, t3.LINK_STATUS)) throw console.log(t3.getProgramInfoLog(n3)), new Error("Failed to link vertex and fragment shaders.");
}
function he2(t3, e3, n3) {
  if (Jt2(t3, e3, function() {
    return t3.validateProgram(n3);
  }), false === t3.getProgramParameter(n3, t3.VALIDATE_STATUS)) throw console.log(t3.getProgramInfoLog(n3)), new Error("Shader program validation failed.");
}
function fe2(t3, e3, n3) {
  var r3 = ke2(t3, e3, function() {
    return t3.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, r3);
  }), Jt2(t3, e3, function() {
    return t3.bufferData(t3.ARRAY_BUFFER, n3, t3.STATIC_DRAW);
  }), r3;
}
function de2(t3, e3, n3) {
  var r3 = ke2(t3, e3, function() {
    return t3.createBuffer();
  }, "Unable to create WebGLBuffer");
  return Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.ELEMENT_ARRAY_BUFFER, r3);
  }), Jt2(t3, e3, function() {
    return t3.bufferData(t3.ELEMENT_ARRAY_BUFFER, n3, t3.STATIC_DRAW);
  }), r3;
}
function pe2(t3, e3) {
  return ke2(t3, e3, function() {
    return t3.createTexture();
  }, "Unable to create WebGLTexture.");
}
function ve2(t3, e3) {
  var n3 = i2().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (t3 <= 0 || e3 <= 0) {
    var r3 = "[" + t3 + "x" + e3 + "]";
    throw new Error("Requested texture size " + r3 + " is invalid.");
  }
  if (t3 > n3 || e3 > n3) {
    r3 = "[" + t3 + "x" + e3 + "]";
    throw new Error("Requested texture size " + r3 + " greater than WebGL maximum on this browser / GPU " + ("[" + n3 + "x" + n3 + "]") + ".");
  }
}
function ge2(t3, e3) {
  return ke2(t3, e3, function() {
    return t3.createFramebuffer();
  }, "Unable to create WebGLFramebuffer.");
}
function me2(t3, e3, n3, r3, o3, a3, i3, s3) {
  var u3 = t3.getAttribLocation(n3, r3);
  return -1 !== u3 && (Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, o3);
  }), Jt2(t3, e3, function() {
    return t3.vertexAttribPointer(u3, a3, t3.FLOAT, false, i3, s3);
  }), Jt2(t3, e3, function() {
    return t3.enableVertexAttribArray(u3);
  }), true);
}
function ye2(t3, e3, n3, r3) {
  Se2(t3, r3), Jt2(t3, e3, function() {
    return t3.activeTexture(t3.TEXTURE0 + r3);
  }), Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  });
}
function xe2(t3, e3, n3, r3) {
  return ke2(t3, e3, function() {
    return t3.getUniformLocation(n3, r3);
  }, 'uniform "' + r3 + '" not present in program.');
}
function be2(t3, e3, n3) {
  return t3.getUniformLocation(e3, n3);
}
function we2(t3, e3, n3, r3, o3, a3) {
  Jt2(t3, e3, function() {
    return ye2(t3, e3, r3, a3);
  }), Jt2(t3, e3, function() {
    return t3.uniform1i(o3, a3);
  });
}
function Ce2(t3, e3, n3, r3) {
  Jt2(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, r3);
  }), Jt2(t3, e3, function() {
    return t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, n3, 0);
  });
}
function Ee2(t3, e3, n3) {
  Jt2(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, n3);
  }), Jt2(t3, e3, function() {
    return t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, null, 0);
  });
}
function Re2(t3) {
  var e3 = t3.checkFramebufferStatus(t3.FRAMEBUFFER);
  if (e3 !== t3.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + Ie2(t3, e3));
}
function Ie2(t3, e3) {
  switch (e3) {
    case t3.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case t3.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case t3.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case t3.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return "unknown error " + e3;
  }
}
function ke2(t3, e3, n3, r3) {
  var o3 = Jt2(t3, e3, function() {
    return n3();
  });
  if (null == o3) throw new Error(r3);
  return o3;
}
function Se2(t3, e3) {
  var n3 = t3.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r3 = e3 + t3.TEXTURE0;
  if (r3 < t3.TEXTURE0 || r3 > n3) throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n3 + "]") + ".");
}
function Ae2(t3, e3) {
  return void 0 === e3 && (e3 = 2), k2(t3.slice(0, t3.length - e3));
}
function Te2(t3) {
  if (0 === t3.length) throw Error("Cannot get rows and columns of an empty shape array.");
  return [t3.length > 1 ? t3[t3.length - 2] : 1, t3[t3.length - 1]];
}
function De2(t3) {
  var e3 = [1, 1, 1];
  return 0 === t3.length || 1 === t3.length && 1 === t3[0] || (e3 = [Ae2(t3)].concat(Te2(t3))), e3;
}
function Ne2(t3, e3) {
  var n3;
  void 0 === e3 && (e3 = false);
  var r3 = i2().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (e3 && (r3 *= 2, 1 === (t3 = t3.map(function(e4, n4) {
    return n4 >= t3.length - 2 ? b2(t3[n4]) : t3[n4];
  })).length && (t3 = [2, t3[0]])), 2 !== t3.length) {
    var o3 = M2(t3);
    t3 = o3.newShape;
  }
  var a3 = k2(t3);
  if (t3.length <= 1 && a3 <= r3) return [1, a3];
  if (2 === t3.length && t3[0] <= r3 && t3[1] <= r3) return t3;
  if (3 === t3.length && t3[0] * t3[1] <= r3 && t3[2] <= r3) return [t3[0] * t3[1], t3[2]];
  if (3 === t3.length && t3[0] <= r3 && t3[1] * t3[2] <= r3) return [t3[0], t3[1] * t3[2]];
  if (4 === t3.length && t3[0] * t3[1] * t3[2] <= r3 && t3[3] <= r3) return [t3[0] * t3[1] * t3[2], t3[3]];
  if (4 === t3.length && t3[0] <= r3 && t3[1] * t3[2] * t3[3] <= r3) return [t3[0], t3[1] * t3[2] * t3[3]];
  if (e3) {
    var s3 = Ae2(t3), u3 = 2, c3 = 2;
    return t3.length && (u3 = (n3 = Te2(t3))[0], c3 = n3[1]), D2(a3 = s3 * (u3 / 2) * (c3 / 2)).map(function(t4) {
      return 2 * t4;
    });
  }
  return D2(a3);
}
function Fe2(t3) {
  return t3 % 2 == 0;
}
function _e2(t3, e3) {
  if (S2(t3 = t3.slice(-2), e3 = e3.slice(-2))) return true;
  if (!t3.length || !e3.length) return true;
  if (0 === t3[0] || 0 === t3[1] || 0 === e3[0] || 0 === e3[1]) return true;
  if (t3.length !== e3.length) {
    var n3 = t3.slice(-1)[0], r3 = e3.slice(-1)[0];
    if (n3 === r3) return true;
    if (Fe2(n3) && Fe2(r3) && (1 === t3[0] || 1 === e3[0])) return true;
  }
  return t3[1] === e3[1] && Fe2(t3[0]) && Fe2(e3[0]);
}
function Oe2(t3) {
  if (null == ie2) {
    var e3 = jt2(t3);
    ie2 = e3.getParameter(e3.MAX_TEXTURE_SIZE);
  }
  return ie2;
}
function Me2(t3) {
  if (null == se2) {
    var e3 = jt2(t3);
    se2 = e3.getParameter(e3.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, se2);
}
function Be2(t3) {
  if (0 === t3) return 0;
  var e3 = jt2(t3);
  return Pe2(e3, "EXT_disjoint_timer_query_webgl2") && 2 === t3 ? 2 : Pe2(e3, "EXT_disjoint_timer_query") ? 1 : 0;
}
function Pe2(t3, e3) {
  return null != t3.getExtension(e3);
}
function Le2(t3) {
  try {
    if (null != jt2(t3)) return true;
  } catch (t4) {
    return false;
  }
  return false;
}
function We2(t3) {
  if (0 === t3) return false;
  var e3 = jt2(t3);
  if (1 === t3) {
    if (!Pe2(e3, "OES_texture_float")) return false;
  } else if (!Pe2(e3, "EXT_color_buffer_float")) return false;
  return Ve2(e3);
}
function Ue2(t3) {
  if (0 === t3) return false;
  var e3 = jt2(t3);
  if (1 !== t3) {
    if (Pe2(e3, "EXT_color_buffer_float")) return Ve2(e3);
    if (Pe2(e3, "EXT_color_buffer_half_float")) {
      var n3 = e3.getExtension("EXT_color_buffer_half_float");
      return function(t4, e4) {
        var n4 = Qt2(t4, e4), r3 = t4.createTexture();
        t4.bindTexture(t4.TEXTURE_2D, r3);
        t4.texImage2D(t4.TEXTURE_2D, 0, n4.internalFormatHalfFloat, 1, 1, 0, n4.textureFormatFloat, n4.textureTypeHalfFloat, null);
        var o3 = t4.createFramebuffer();
        t4.bindFramebuffer(t4.FRAMEBUFFER, o3), t4.framebufferTexture2D(t4.FRAMEBUFFER, t4.COLOR_ATTACHMENT0, t4.TEXTURE_2D, r3, 0);
        var a3 = t4.checkFramebufferStatus(t4.FRAMEBUFFER) === t4.FRAMEBUFFER_COMPLETE;
        return t4.bindTexture(t4.TEXTURE_2D, null), t4.bindFramebuffer(t4.FRAMEBUFFER, null), t4.deleteTexture(r3), t4.deleteFramebuffer(o3), a3;
      }(e3, n3);
    }
    return false;
  }
  return !!Pe2(e3, "OES_texture_float") && (!!Pe2(e3, "WEBGL_color_buffer_float") && Ve2(e3));
}
function Ve2(t3) {
  var e3 = Qt2(t3), n3 = t3.createTexture();
  t3.bindTexture(t3.TEXTURE_2D, n3);
  t3.texImage2D(t3.TEXTURE_2D, 0, e3.internalFormatFloat, 1, 1, 0, e3.textureFormatFloat, e3.textureTypeFloat, null);
  var r3 = t3.createFramebuffer();
  t3.bindFramebuffer(t3.FRAMEBUFFER, r3), t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, n3, 0);
  var o3 = t3.checkFramebufferStatus(t3.FRAMEBUFFER) === t3.FRAMEBUFFER_COMPLETE;
  return t3.bindTexture(t3.TEXTURE_2D, null), t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteTexture(n3), t3.deleteFramebuffer(r3), o3;
}
function ze2(t3) {
  return 2 === t3 && null != jt2(t3).fenceSync;
}
var Ge2 = Object.freeze({ callAndCheck: Jt2, canBeRepresented: ee2, getWebGLErrorMessage: ne2, getExtensionOrThrow: re2, createVertexShader: oe2, createFragmentShader: ae2, createProgram: ce2, linkProgram: le2, validateProgram: he2, createStaticVertexBuffer: fe2, createStaticIndexBuffer: de2, getNumChannels: function() {
  return 2 === i2().getNumber("WEBGL_VERSION") ? 1 : 4;
}, createTexture: pe2, validateTextureSize: ve2, createFramebuffer: ge2, bindVertexBufferToProgramAttribute: me2, bindTextureUnit: ye2, unbindTextureUnit: function(t3, e3, n3) {
  Se2(t3, n3), Jt2(t3, e3, function() {
    return t3.activeTexture(t3.TEXTURE0 + n3);
  }), Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}, getProgramUniformLocationOrThrow: xe2, getProgramUniformLocation: be2, bindTextureToProgramUniformSampler: we2, bindCanvasToFramebuffer: function(t3, e3) {
  Jt2(t3, e3, function() {
    return t3.bindFramebuffer(t3.FRAMEBUFFER, null);
  }), Jt2(t3, e3, function() {
    return t3.viewport(0, 0, t3.canvas.width, t3.canvas.height);
  }), Jt2(t3, e3, function() {
    return t3.scissor(0, 0, t3.canvas.width, t3.canvas.height);
  });
}, bindColorTextureToFramebuffer: Ce2, unbindColorTextureFromFramebuffer: Ee2, validateFramebuffer: Re2, getFramebufferErrorMessage: Ie2, getBatchDim: Ae2, getRowsCols: Te2, getShapeAs3D: De2, getTextureShapeFromLogicalShape: Ne2, isReshapeFree: _e2, getWebGLMaxTextureSize: Oe2, resetMaxTextureSize: function() {
  ie2 = null;
}, resetMaxTexturesInShader: function() {
  se2 = null;
}, getMaxTexturesInShader: Me2, getWebGLDisjointQueryTimerVersion: Be2, hasExtension: Pe2, isWebGLVersionEnabled: Le2, isCapableOfRenderingToFloatTexture: We2, isDownloadFloatTextureEnabled: Ue2, isWebGLFenceEnabled: ze2 });
var He2 = i2();
function Xe2(t3) {
  i2().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t3 + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function Ze2(t3, e3) {
  return Lt2.tidy(t3, e3);
}
function tn2(t3) {
  _t2(t3).forEach(function(t4) {
    return t4.dispose();
  });
}
function en2(t3) {
  return Lt2.keep(t3);
}
function dn2() {
  for (var t3 = [], e3 = 0; e3 < arguments.length; e3++) t3[e3] = arguments[e3];
  i2().getBool("IS_TEST") || console.warn.apply(console, t3);
}
function pn2(t3, e3) {
  var n3 = t3;
  if (V2(t3)) return "string" === e3 ? [] : [t3.length];
  if (!Array.isArray(t3)) return [];
  for (var r3 = []; Array.isArray(n3) || V2(n3) && "string" !== e3; ) r3.push(n3.length), n3 = n3[0];
  return Array.isArray(t3) && i2().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && function t4(e4, n4, r4) {
    if (r4 = r4 || [], !Array.isArray(e4) && !V2(e4)) return void C2(0 === n4.length, function() {
      return "Element arr[" + r4.join("][") + "] is a primitive, but should be an array/TypedArray of " + n4[0] + " elements";
    });
    C2(n4.length > 0, function() {
      return "Element arr[" + r4.join("][") + "] should be a primitive, but is an array of " + e4.length + " elements";
    }), C2(e4.length === n4[0], function() {
      return "Element arr[" + r4.join("][") + "] should have " + n4[0] + " elements, but has " + e4.length + " elements";
    });
    for (var o3 = n4.slice(1), a3 = 0; a3 < e4.length; ++a3) t4(e4[a3], o3, r4.concat(a3));
  }(t3, r3, []), r3;
}
function vn2(t3, e3, n3, r3) {
  if (null != t3 && ("numeric" !== t3 && t3 !== e3 || "numeric" === t3 && "string" === e3)) throw new Error("Argument '" + n3 + "' passed to '" + r3 + "' must be " + t3 + " tensor, but got " + e3 + " tensor");
}
function gn2(t3, e3, n3, r3) {
  if (void 0 === r3 && (r3 = "numeric"), t3 instanceof wt2) return vn2(r3, t3.dtype, e3, n3), t3;
  var o3 = j2(t3);
  if ("string" !== o3 && ["bool", "int32", "float32"].indexOf(r3) >= 0 && (o3 = r3), vn2(r3, o3, e3, n3), null == t3 || !V2(t3) && !Array.isArray(t3) && "number" != typeof t3 && "boolean" != typeof t3 && "string" != typeof t3) {
    var a3 = null == t3 ? "null" : t3.constructor.name;
    throw new Error("Argument '" + e3 + "' passed to '" + n3 + "' must be a Tensor or TensorLike, but got '" + a3 + "'");
  }
  var s3 = pn2(t3, o3);
  V2(t3) || Array.isArray(t3) || (t3 = [t3]);
  var u3 = "string" !== o3 ? Q2(t3, o3, i2().getBool("DEBUG")) : I2(t3, [], true);
  return Lt2.makeTensor(u3, s3, o3);
}
function mn2(t3, e3, n3, r3) {
  if (void 0 === r3 && (r3 = "numeric"), !Array.isArray(t3)) throw new Error("Argument " + e3 + " passed to " + n3 + " must be a `Tensor[]` or `TensorLike[]`");
  return t3.map(function(t4, r4) {
    return gn2(t4, e3 + "[" + r4 + "]", n3);
  }, r3);
}
function yn2(t3, e3) {
  for (var n3 = 0; n3 < t3.length; ++n3) if (t3[t3.length - n3 - 1] !== e3 - 1 - n3) return false;
  return true;
}
function xn2(t3, e3, n3) {
  for (var r3 = t3.length + e3.length, o3 = [], a3 = 0, i3 = 0, s3 = 0; s3 < r3; s3++) -1 === n3.indexOf(s3) ? o3.push(t3[a3++]) : o3.push(e3[i3++]);
  return o3;
}
function bn2(t3, e3) {
  for (var n3 = [], r3 = t3.length, o3 = 0; o3 < r3; o3++) -1 === e3.indexOf(o3) && n3.push(t3[o3]);
  return [n3, e3.map(function(e4) {
    return t3[e4];
  })];
}
function wn2(t3, e3) {
  return xn2(t3, e3.map(function(t4) {
    return 1;
  }), e3);
}
function Cn2(t3, e3, n3) {
  C2(yn2(e3, n3), function() {
    return t3 + " supports only inner-most axes for now. Got axes " + e3 + " and rank-" + n3 + " input.";
  });
}
function En2(t3, e3) {
  if (yn2(t3, e3)) return null;
  for (var n3 = [], r3 = 0; r3 < e3; ++r3) -1 === t3.indexOf(r3) && n3.push(r3);
  return t3.forEach(function(t4) {
    return n3.push(t4);
  }), n3;
}
function Rn2(t3) {
  return t3.map(function(t4, e3) {
    return [e3, t4];
  }).sort(function(t4, e3) {
    return t4[1] - e3[1];
  }).map(function(t4) {
    return t4[0];
  });
}
function In2(t3, e3) {
  for (var n3 = [], r3 = e3 - t3; r3 < e3; ++r3) n3.push(r3);
  return n3;
}
function kn2(t3, e3) {
  var n3 = t3[0].length;
  t3.forEach(function(t4, e4) {
    C2(t4.length === n3, function() {
      return "Error in concat" + n3 + "D: rank of tensors[" + e4 + "] must be the same as the rank of the rest (" + n3 + ")";
    });
  }), C2(e3 >= 0 && e3 < n3, function() {
    return "Error in concat" + n3 + "D: axis must be between 0 and " + (n3 - 1) + ".";
  });
  var r3 = t3[0];
  t3.forEach(function(t4, o3) {
    for (var a3 = 0; a3 < n3; a3++) C2(a3 === e3 || t4[a3] === r3[a3], function() {
      return "Error in concat" + n3 + "D: Shape of tensors[" + o3 + "] (" + t4 + ") does not match the shape of the rest (" + r3 + ") along the non-concatenated axis " + o3 + ".";
    });
  });
}
function Sn2(t3, e3) {
  for (var n3 = t3[0].slice(), r3 = 1; r3 < t3.length; r3++) n3[e3] += t3[r3][e3];
  return n3;
}
function An2(t3) {
  var e3 = Object.keys(t3);
  if (1 !== e3.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + e3.length + " keys.");
  var n3 = e3[0], r3 = t3[n3];
  n3.endsWith("_") && (n3 = n3.substring(0, n3.length - 1));
  var o3 = function() {
    for (var t4 = [], e4 = 0; e4 < arguments.length; e4++) t4[e4] = arguments[e4];
    Lt2.startScope(n3);
    try {
      var o4 = r3.apply(void 0, t4);
      return o4 instanceof Promise && console.error("Cannot return a Promise inside of tidy."), Lt2.endScope(o4), o4;
    } catch (t5) {
      throw Lt2.endScope(null), t5;
    }
  };
  return Object.defineProperty(o3, "name", { value: n3, configurable: true }), o3;
}
He2.registerFlag("HAS_WEBGL", function() {
  return He2.getNumber("WEBGL_VERSION") > 0;
}), He2.registerFlag("WEBGL_VERSION", function() {
  return Le2(2) ? 2 : Le2(1) ? 1 : 0;
}), He2.registerFlag("WEBGL_BUFFER_SUPPORTED", function() {
  return 2 === He2.get("WEBGL_VERSION");
}), He2.registerFlag("WEBGL_CPU_FORWARD", function() {
  return true;
}), He2.registerFlag("WEBGL_FORCE_F16_TEXTURES", function() {
  return false;
}), He2.registerFlag("WEBGL_PACK", function() {
  return He2.getBool("HAS_WEBGL");
}), He2.registerFlag("WEBGL_PACK_NORMALIZATION", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_CLIP", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_DEPTHWISECONV", function() {
  return false;
}), He2.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_PACK_REDUCE", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_LAZILY_UNPACK", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_CONV_IM2COL", function() {
  return He2.getBool("WEBGL_PACK");
}), He2.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function() {
  return Oe2(He2.getNumber("WEBGL_VERSION"));
}), He2.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function() {
  return Me2(He2.getNumber("WEBGL_VERSION"));
}), He2.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", function() {
  var t3 = He2.getNumber("WEBGL_VERSION");
  return 0 === t3 ? 0 : Be2(t3);
}), He2.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", function() {
  return He2.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && (t3 = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t3) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t3.substr(0, 4))));
  var t3;
}), He2.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", function() {
  return We2(He2.getNumber("WEBGL_VERSION"));
}), He2.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function() {
  return !He2.getBool("WEBGL_FORCE_F16_TEXTURES") && He2.getBool("WEBGL_RENDER_FLOAT32_CAPABLE");
}), He2.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function() {
  return Ue2(He2.getNumber("WEBGL_VERSION"));
}), He2.registerFlag("WEBGL_FENCE_API_ENABLED", function() {
  return ze2(He2.getNumber("WEBGL_VERSION"));
}), He2.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function() {
  return He2.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
}), bt2 = Xe2;
var Tn2 = An2({ complex_: function(t3, e3) {
  var n3 = gn2(t3, "real", "complex"), r3 = gn2(e3, "imag", "complex");
  return E2(n3.shape, r3.shape, "real and imag shapes, " + n3.shape + " and " + r3.shape + ", must match in call to tf.complex()."), Lt2.runKernelFunc(function(t4) {
    return t4.complex(n3, r3);
  }, { $real: n3, $imag: r3 });
} });
var Dn2 = An2({ real_: function(t3) {
  var e3 = gn2(t3, "input", "real");
  return Lt2.runKernelFunc(function(t4) {
    return t4.real(e3);
  }, { $input: e3 });
} });
var Nn2 = An2({ imag_: function(t3) {
  var e3 = gn2(t3, "input", "imag");
  return Lt2.runKernelFunc(function(t4) {
    return t4.imag(e3);
  }, { $input: e3 });
} });
function Fn2(t3, e3, n3) {
  return _n2(t3, e3, pn2(t3, n3), n3);
}
function _n2(t3, e3, n3, r3) {
  if (null == r3 && (r3 = j2(t3)), "complex64" === r3) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!V2(t3) && !Array.isArray(t3) && "number" != typeof t3 && "boolean" != typeof t3 && "string" != typeof t3) throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (null != e3) {
    nt2(e3);
    var o3 = k2(e3), a3 = k2(n3);
    C2(o3 === a3, function() {
      return "Based on the provided shape, [" + e3 + "], the tensor should have " + o3 + " values but has " + a3;
    });
    for (var s3 = 0; s3 < n3.length; ++s3) {
      var u3 = n3[s3], c3 = s3 !== n3.length - 1 || u3 !== k2(e3.slice(s3));
      C2(n3[s3] === e3[s3] || !c3, function() {
        return "Error creating a new Tensor. Inferred shape (" + n3 + ") does not match the provided shape (" + e3 + "). ";
      });
    }
  }
  return V2(t3) || Array.isArray(t3) || (t3 = [t3]), e3 = e3 || n3, t3 = "string" !== r3 ? Q2(t3, r3, i2().getBool("DEBUG")) : I2(t3, [], true), Lt2.makeTensor(t3, e3, r3);
}
function On2(t3, e3) {
  if ((V2(t3) && "string" !== e3 || Array.isArray(t3)) && "complex64" !== e3) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if ("string" === e3 && V2(t3) && !(t3 instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return _n2(t3, [], [], e3);
}
function Mn2(t3, e3) {
  R2(t3);
  var n3 = pn2(t3, e3);
  if (1 !== n3.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return _n2(t3, null, n3, e3);
}
function Bn2(t3, e3, n3) {
  if (R2(t3), null != e3 && 2 !== e3.length) throw new Error("tensor2d() requires shape to have two numbers");
  var r3 = pn2(t3, n3);
  if (2 !== r3.length && 1 !== r3.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return _n2(t3, e3, r3, n3);
}
function Pn2(t3, e3, n3) {
  if (R2(t3), null != e3 && 3 !== e3.length) throw new Error("tensor3d() requires shape to have three numbers");
  var r3 = pn2(t3, n3);
  if (3 !== r3.length && 1 !== r3.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return _n2(t3, e3, r3, n3);
}
function Ln2(t3, e3, n3) {
  if (R2(t3), null != e3 && 4 !== e3.length) throw new Error("tensor4d() requires shape to have four numbers");
  var r3 = pn2(t3, n3);
  if (4 !== r3.length && 1 !== r3.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return _n2(t3, e3, r3, n3);
}
function Wn2(t3, e3, n3) {
  if (R2(t3), null != e3 && 5 !== e3.length) throw new Error("tensor5d() requires shape to have five numbers");
  var r3 = pn2(t3, n3);
  if (5 !== r3.length && 1 !== r3.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return _n2(t3, e3, r3, n3);
}
function Un2(t3, e3, n3) {
  if (R2(t3), null != e3 && 6 !== e3.length) throw new Error("tensor6d() requires shape to have six numbers");
  var r3 = pn2(t3, n3);
  if (6 !== r3.length && 1 !== r3.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (1 === r3.length && null == e3) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return _n2(t3, e3 = e3 || r3, r3, n3);
}
function Vn2(t3, e3, n3, r3) {
  return void 0 === e3 && (e3 = true), Lt2.makeVariable(t3, e3, n3, r3);
}
function zn2(t3, e3) {
  if (void 0 === e3 && (e3 = "float32"), "complex64" === e3) {
    var n3 = zn2(t3, "float32"), r3 = Gn2(t3, "float32");
    return Tn2(n3, r3);
  }
  var o3 = Z2(k2(t3), e3);
  return Lt2.makeTensor(o3, t3, e3);
}
function Gn2(t3, e3) {
  if (void 0 === e3 && (e3 = "float32"), "complex64" === e3) {
    var n3 = Gn2(t3, "float32"), r3 = Gn2(t3, "float32");
    return Tn2(n3, r3);
  }
  var o3 = tt2(k2(t3), e3);
  return Lt2.makeTensor(o3, t3, e3);
}
function Hn2(t3, e3, n3) {
  return Lt2.runKernelFunc(function(r3) {
    return r3.fill(t3, e3, n3);
  }, {});
}
function qn2(t3, e3, n3) {
  if (n3 <= 0) throw new Error("The number of values should be positive.");
  return Lt2.runKernelFunc(function(r3) {
    return r3.linspace(t3, e3, n3);
  }, {});
}
function Kn2(t3, e3, n3, r3) {
  if (void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = "float32"), 0 === n3) throw new Error("Cannot have a step of zero");
  if (t3 === e3 || t3 < e3 && n3 < 0 || e3 < t3 && n3 > 1) return Gn2([0], r3);
  var o3 = tt2(Math.abs(Math.ceil((e3 - t3) / n3)), r3);
  e3 < t3 && 1 === n3 && (n3 = -1), o3[0] = t3;
  for (var a3 = 1; a3 < o3.length; a3++) o3[a3] = o3[a3 - 1] + n3;
  return Mn2(o3, r3);
}
var jn2 = An2({ onesLike_: function(t3) {
  var e3 = gn2(t3, "x", "onesLike");
  if ("complex64" === e3.dtype) {
    var n3 = jn2(Dn2(e3)), r3 = Xn2(Nn2(e3));
    return Tn2(n3, r3);
  }
  return Lt2.runKernelFunc(function(t4) {
    return t4.onesLike(e3);
  }, { x: e3 }, function(t4, e4) {
    return { x: function() {
      return Xn2(t4);
    } };
  }, "OnesLike");
} });
var Xn2 = An2({ zerosLike_: function(t3) {
  var e3 = gn2(t3, "x", "zerosLike");
  return Lt2.runKernelFunc(function(t4) {
    return t4.zerosLike(e3);
  }, { x: e3 }, function(t4, e4) {
    return { x: function() {
      return Xn2(t4);
    } };
  }, "ZerosLike");
} });
var Yn2 = An2({ concat_: function(t3, e3) {
  void 0 === e3 && (e3 = 0), C2(t3.length >= 1, function() {
    return "Pass at least one tensor to concat";
  });
  var n3 = mn2(t3, "tensors", "concat");
  "complex64" === n3[0].dtype && n3.forEach(function(t4) {
    if ("complex64" !== t4.dtype) throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype " + t4.dtype + ". ");
  }), e3 = O2(e3, n3[0].shape)[0];
  var r3 = Sn2(n3.map(function(t4) {
    return t4.shape;
  }), e3);
  if (0 === k2(r3)) return Fn2([], r3);
  if (1 === (n3 = n3.filter(function(t4) {
    return t4.size > 0;
  })).length) return n3[0];
  var o3 = n3.map(function(t4) {
    return t4.shape;
  });
  kn2(o3, e3);
  var a3 = n3, i3 = { axis: e3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.concat(n3, e3);
  }, a3, function(t4) {
    var n4 = o3.map(function(t5) {
      return t5[e3];
    });
    return tr2(t4, n4, e3).map(function(t5) {
      return function() {
        return t5;
      };
    });
  }, "Concat", i3);
} });
var $n2 = An2({ concat1d_: function(t3) {
  return Yn2(t3, 0);
} });
var Qn2 = An2({ concat2d_: function(t3, e3) {
  return Yn2(t3, e3);
} });
var Jn2 = An2({ concat3d_: function(t3, e3) {
  return Yn2(t3, e3);
} });
var Zn2 = An2({ concat4d_: function(t3, e3) {
  return Yn2(t3, e3);
} });
var tr2 = An2({ split_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3, o3 = gn2(t3, "x", "split");
  return n3 = O2(n3, o3.shape)[0], "number" == typeof e3 ? (C2(o3.shape[n3] % e3 == 0, function() {
    return "Number of splits must evenly divide the axis.";
  }), r3 = new Array(e3).fill(o3.shape[n3] / e3)) : (C2(o3.shape[n3] === e3.reduce(function(t4, e4) {
    return t4 + e4;
  }), function() {
    return "The sum of sizes must match the size of the axis dimension.";
  }), r3 = e3), Lt2.runKernelFunc(function(t4) {
    return t4.split(o3, r3, n3);
  }, { $x: o3 }, function(t4) {
    return { $x: function() {
      return Yn2(t4, n3);
    } };
  });
} });
function er2(t3, e3, n3) {
  return void 0 === e3 && (e3 = "float32"), e3 = e3 || "float32", nt2(t3), new mt2(t3, e3, n3);
}
function nr2(t3, e3) {
  void 0 === e3 && (e3 = false), console.log(t3.toString(e3));
}
var rr2 = An2({ batchToSpaceND_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "batchToSpaceND"), o3 = e3.reduce(function(t4, e4) {
    return t4 * e4;
  });
  return C2(r3.rank >= 1 + e3.length, function() {
    return "input rank is " + r3.rank + " but should be > than blockShape.length " + e3.length;
  }), C2(n3.length === e3.length, function() {
    return "crops.length is " + n3.length + " but should be equal to blockShape.length  " + e3.length;
  }), C2(r3.shape[0] % o3 == 0, function() {
    return "input tensor batch is " + r3.shape[0] + " but is not divisible by the product of the elements of blockShape " + e3.join(" * ") + " === " + o3;
  }), Lt2.runKernelFunc(function(t4) {
    return t4.batchToSpaceND(r3, e3, n3);
  }, { $x: r3 }, function(t4) {
    return { $x: function() {
      return t4.spaceToBatchND(e3, n3);
    } };
  });
} });
var or2 = An2({ cast_: function(t3, e3) {
  var n3 = gn2(t3, "x", "cast");
  if (!W2(e3)) throw new Error("Failed to cast to unknown dtype " + e3);
  if ("string" === e3 && "string" !== n3.dtype || "string" !== e3 && "string" === n3.dtype) throw new Error("Only strings can be casted to strings");
  var r3 = { dtype: e3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.cast(n3, e3);
  }, { x: n3 }, function(t4) {
    return { x: function() {
      return t4.clone();
    } };
  }, "Cast", r3);
} });
var ar2 = An2({ cumsum_: function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false);
  var o3 = gn2(t3, "x", "cumsum"), a3 = En2([e3 |= 0], o3.rank), i3 = o3;
  null != a3 && (i3 = o3.transpose(a3));
  var s3 = In2(1, o3.rank)[0], u3 = Lt2.runKernelFunc(function(t4) {
    return t4.cumsum(i3, s3, n3, r3);
  }, { permutedX: i3 }, function(t4) {
    return { permutedX: function() {
      return t4.cumsum(e3, n3, !r3);
    } };
  });
  return null != a3 && (u3 = u3.transpose(a3)), u3;
} });
var ir2 = An2({ depthToSpace_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = "NHWC");
  var r3 = gn2(t3, "x", "depthToSpace"), o3 = "NHWC" === n3 ? r3.shape[1] : r3.shape[2], a3 = "NHWC" === n3 ? r3.shape[2] : r3.shape[3], i3 = "NHWC" === n3 ? r3.shape[3] : r3.shape[1];
  return C2(o3 * e3 >= 0, function() {
    return "Negative dimension size caused by overflow when multiplying\n      " + o3 + " and " + e3 + "  for depthToSpace with input shape\n      " + r3.shape;
  }), C2(a3 * e3 >= 0, function() {
    return "Negative dimension size caused by overflow when multiplying\n      " + a3 + " and " + e3 + " for depthToSpace with input shape\n          " + r3.shape;
  }), C2(i3 % (e3 * e3) == 0, function() {
    return "Dimension size must be evenly divisible by " + e3 * e3 + " but is " + i3 + " for depthToSpace with input shape " + r3.shape;
  }), Lt2.runKernelFunc(function(t4) {
    return t4.depthToSpace(r3, e3, n3);
  }, { $x: r3 });
} });
var sr2 = An2({ expandDims_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = gn2(t3, "x", "expandDims", null);
  C2(e3 <= n3.rank, function() {
    return "Axis must be <= rank of the tensor";
  });
  var r3 = n3.shape.slice();
  return e3 < 0 && (C2(-(n3.rank + 1) <= e3, function() {
    return "Axis must be in the interval [" + -(n3.rank + 1) + ", " + n3.rank + "]";
  }), e3 = n3.rank + e3 + 1), r3.splice(e3, 0, 1), ur2(n3, r3);
} });
var ur2 = An2({ reshape_: function(t3, e3) {
  var n3 = gn2(t3, "x", "reshape", null);
  e3 = _2(e3, n3.size), C2(n3.size === k2(e3), function() {
    return "new shape and old shape must have the same number of elements.";
  });
  var r3 = { shape: e3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.reshape(n3, e3);
  }, { x: n3 }, function(t4) {
    return { x: function() {
      return t4.reshape(n3.shape);
    } };
  }, "Reshape", r3);
} });
var cr2 = An2({ spaceToBatchND_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "spaceToBatchND");
  return C2(r3.rank >= 1 + e3.length, function() {
    return "input rank " + r3.rank + " should be > than [blockShape] " + e3.length;
  }), C2(n3.length === e3.length, function() {
    return "paddings.shape[0] " + n3.length + " must be equal to [blockShape] " + e3.length;
  }), C2(r3.shape.reduce(function(t4, r4, o3) {
    return o3 > 0 && o3 <= e3.length ? t4 && (r4 + n3[o3 - 1][0] + n3[o3 - 1][1]) % e3[o3 - 1] == 0 : t4;
  }, true), function() {
    return "input spatial dimensions " + r3.shape.slice(1) + " with paddings " + n3.toString() + " must be divisible by blockShapes " + e3.toString();
  }), Lt2.runKernelFunc(function(t4) {
    return t4.spaceToBatchND(r3, e3, n3);
  }, { $x: r3 }, function(t4) {
    return { $x: function() {
      return t4.batchToSpaceND(e3, n3);
    } };
  });
} });
var lr2 = An2({ squeeze_: function(t3, e3) {
  var n3 = gn2(t3, "x", "squeeze");
  return ur2(n3, M2(n3.shape, e3).newShape);
} });
var hr2 = An2({ stack_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = mn2(t3, "tensors", "stack");
  if (C2(n3.length >= 1, function() {
    return "Pass at least one tensor to tf.stack";
  }), 1 === n3.length) return n3[0].expandDims(e3);
  var r3 = n3[0].rank, o3 = n3[0].shape, a3 = n3[0].dtype;
  C2(e3 <= r3, function() {
    return "Axis must be <= rank of the tensor";
  }), n3.forEach(function(t4) {
    E2(o3, t4.shape, "All tensors passed to stack must have matching shapes");
  }), n3.forEach(function(t4) {
    C2(a3 === t4.dtype, function() {
      return "All tensors passed to stack must have matching dtypes";
    });
  });
  var i3 = n3.map(function(t4) {
    return t4.expandDims(e3);
  });
  return Yn2(i3, e3);
} });
var fr2 = An2({ unstack_: function(t3, e3) {
  void 0 === e3 && (e3 = 0), e3 = e3 || 0;
  var n3 = gn2(t3, "x", "unstack");
  C2(e3 >= -n3.shape.length && e3 < n3.shape.length, function() {
    return "Axis = " + e3 + " is not in [-" + n3.shape.length + ", " + n3.shape.length + ")";
  }), e3 < 0 && (e3 += n3.shape.length);
  var r3 = { axis: e3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.unstack(n3, e3);
  }, { x: n3 }, function(t4) {
    return { x: function() {
      return hr2(t4, e3);
    } };
  }, "Unpack", r3);
} });
var dr2 = function(t3, e3) {
  return n2(this, void 0, void 0, function() {
    var n3, o3, a3, i3, s3, u3, c3, l3, h3, f3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return n3 = gn2(t3, "x", "setdiff1d"), o3 = gn2(e3, "y", "setdiff1d"), C2(n3.dtype === o3.dtype, function() {
            return "x and y should have the same dtype, but got x (" + n3.dtype + ") and y (" + o3.dtype + ").";
          }), C2(1 === n3.rank, function() {
            return "x should be 1D tensor, but got x (" + n3.shape + ").";
          }), C2(1 === o3.rank, function() {
            return "y should be 1D tensor, but got y (" + o3.shape + ").";
          }), [4, n3.data()];
        case 1:
          return a3 = r3.sent(), [4, o3.data()];
        case 2:
          for (i3 = r3.sent(), s3 = new Set(i3), u3 = 0, h3 = 0; h3 < a3.length; h3++) s3.has(a3[h3]) || u3++;
          for (c3 = new mt2([u3], n3.dtype), l3 = new mt2([u3], "int32"), h3 = 0, f3 = 0; h3 < a3.length; h3++) s3.has(a3[h3]) || (c3.values[f3] = a3[h3], l3.values[f3] = h3, f3++);
          return [2, [c3.toTensor(), l3.toTensor()]];
      }
    });
  });
};
function pr2(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = true);
  var o3 = [];
  if (r3) (o3 = o3.concat(e3.slice(0))).push(t3[0] / n3), o3 = o3.concat(t3.slice(1));
  else {
    o3 = o3.concat(t3[0]);
    for (var a3 = e3.length, i3 = 0; i3 < a3; ++i3) o3 = o3.concat([t3[i3 + 1] / e3[i3], e3[i3]]);
    o3 = o3.concat(t3.slice(a3 + 1));
  }
  return o3;
}
function vr2(t3, e3, n3) {
  void 0 === n3 && (n3 = true);
  var r3 = [];
  if (n3) {
    r3.push(e3);
    for (var o3 = e3 + 1; o3 < t3; ++o3) o3 <= 2 * e3 ? (r3.push(o3), r3.push(o3 - (e3 + 1))) : r3.push(o3);
  } else {
    var a3 = [], i3 = [];
    for (o3 = 1; o3 < t3; ++o3) o3 >= 2 * e3 + 1 || o3 % 2 == 1 ? i3.push(o3) : a3.push(o3);
    r3.push.apply(r3, a3), r3.push(0), r3.push.apply(r3, i3);
  }
  return r3;
}
function gr2(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = true);
  var o3 = [];
  r3 ? o3.push(t3[0] / n3) : o3.push(t3[0] * n3);
  for (var a3 = 1; a3 < t3.length; ++a3) a3 <= e3.length ? r3 ? o3.push(e3[a3 - 1] * t3[a3]) : o3.push(t3[a3] / e3[a3 - 1]) : o3.push(t3[a3]);
  return o3;
}
function mr2(t3, e3) {
  for (var n3 = [0], r3 = 0; r3 < e3; ++r3) n3.push(t3[r3][0]);
  return n3;
}
function yr2(t3, e3, n3) {
  for (var r3 = t3.slice(0, 1), o3 = 0; o3 < n3; ++o3) r3.push(t3[o3 + 1] - e3[o3][0] - e3[o3][1]);
  return r3;
}
var xr2 = "Add";
var wr2 = "Div";
var Er2 = "SquaredDifference";
var Sr2 = "BroadcastTo";
var Ar2 = "OneHot";
var Tr2 = "Identity";
var Dr2 = "Tile";
var Nr2 = "PadV2";
var Or2 = An2({ add_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "add"), o3 = gn2(e3, "b", "add");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = { a: r3, b: o3 };
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.add(r3, o3);
    return e4([r3, o3]), n4;
  }, a3, null, xr2);
} });
function Mr2(t3, e3) {
  for (var n3 = t3.length, r3 = [], o3 = 0; o3 < n3; o3++) {
    var a3 = n3 - 1 - o3, i3 = t3[a3] || 1;
    (e3[e3.length - 1 - o3] || 1) > 1 && 1 === i3 && r3.unshift(a3);
  }
  return r3;
}
function Br2(t3, e3) {
  for (var n3 = [], r3 = 0; r3 < e3.length; r3++) {
    var o3 = t3[t3.length - r3 - 1], a3 = e3.length - r3 - 1, i3 = e3[a3];
    (null == o3 || 1 === o3 && i3 > 1) && n3.unshift(a3);
  }
  return n3;
}
function Pr2(t3, e3) {
  for (var n3 = [], r3 = Math.max(t3.length, e3.length), o3 = 0; o3 < r3; o3++) {
    var a3 = t3[t3.length - o3 - 1];
    null == a3 && (a3 = 1);
    var i3 = e3[e3.length - o3 - 1];
    if (null == i3 && (i3 = 1), 1 === a3) n3.unshift(i3);
    else if (1 === i3) n3.unshift(a3);
    else {
      if (a3 !== i3) throw Error("Operands could not be broadcast together with shapes " + t3 + " and " + e3 + ".");
      n3.unshift(a3);
    }
  }
  return n3;
}
var Lr2 = An2({ abs_: function(t3) {
  var e3 = gn2(t3, "x", "abs");
  return "complex64" === e3.dtype ? Lt2.runKernelFunc(function(t4) {
    return t4.complexAbs(e3);
  }, { $x: e3 }) : Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.abs(e3);
    return n3([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { x: function() {
      return t4.mul(n3.toFloat().step(-1));
    } };
  }, "Abs");
} });
var Wr2 = An2({ acos_: function(t3) {
  var e3 = gn2(t3, "x", "acos");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.acos(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(On2(1).sub(n3.toFloat().square()).sqrt()).neg();
    } };
  });
} });
var Ur2 = An2({ acosh_: function(t3) {
  var e3 = gn2(t3, "x", "acosh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.acosh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(n3.toFloat().square().sub(1).sqrt());
    } };
  });
} });
var Vr2 = An2({ asin_: function(t3) {
  var e3 = gn2(t3, "x", "asin");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.asin(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(On2(1).sub(n3.toFloat().square()).sqrt());
    } };
  });
} });
var zr2 = An2({ asinh_: function(t3) {
  var e3 = gn2(t3, "x", "asinh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.asinh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.divStrict(On2(1).add(n3.toFloat().square()).sqrt());
    } };
  });
} });
var Gr2 = An2({ atan_: function(t3) {
  var e3 = gn2(t3, "x", "atan");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.atan(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.toFloat().square().add(1));
    } };
  });
} });
var Hr2 = An2({ atanh_: function(t3) {
  var e3 = gn2(t3, "x", "atanh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.atanh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(On2(1).sub(n3.toFloat().square()));
    } };
  });
} });
var qr2 = An2({ ceil_: function(t3) {
  var e3 = gn2(t3, "x", "ceil");
  return Lt2.runKernelFunc(function(t4) {
    return t4.ceil(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var Kr2 = An2({ clipByValue_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "clipByValue");
  C2(e3 <= n3, function() {
    return "Error in clip: min (" + e3 + ") must be less than or equal to max (" + n3 + ").";
  });
  var o3 = [r3], a3 = { min: e3, max: n3 };
  return Lt2.runKernelFunc(function(t4, o4) {
    var a4 = t4.clip(r3, e3, n3);
    return o4([r3]), a4;
  }, { x: r3 }, function(t4, r4) {
    var o4 = r4[0];
    return { x: function() {
      return t4.where(o4.greaterEqual(e3).logicalAnd(o4.lessEqual(n3)), Xn2(t4));
    } };
  }, "ClipByValue", a3, o3);
} });
var jr2 = An2({ cos_: function(t3) {
  var e3 = gn2(t3, "x", "cos"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4, n4) {
    var r3 = t4.cos(e3);
    return n4([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n4 = e4[0];
    return { x: function() {
      return n4.toFloat().sin().neg().mul(t4);
    } };
  }, "Cos", {}, n3);
} });
var Xr2 = An2({ cosh_: function(t3) {
  var e3 = gn2(t3, "x", "cosh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.cosh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().sinh().mulStrict(t4);
    } };
  });
} });
var Yr2 = An2({ erf_: function(t3) {
  var e3 = gn2(t3, "x", "erf");
  return C2("int32" === e3.dtype || "float32" === e3.dtype, function() {
    return "Input dtype must be `int32` or `float32`.";
  }), "int32" === e3.dtype && (e3 = e3.toFloat()), Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.erf(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
    } };
  });
} });
var $r2 = An2({ exp_: function(t3) {
  var e3 = gn2(t3, "x", "exp");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.exp(e3);
    return n3([r3]), r3;
  }, { x: e3 }, function(t4, e4) {
    return { x: function() {
      return t4.mulStrict(e4[0]);
    } };
  }, "Exp", {}, [], [true]);
} });
var Qr2 = An2({ expm1_: function(t3) {
  var e3 = gn2(t3, "x", "expm1");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.expm1(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.exp());
    } };
  });
} });
var Jr2 = An2({ floor_: function(t3) {
  var e3 = gn2(t3, "x", "floor");
  return Lt2.runKernelFunc(function(t4) {
    return t4.floor(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var Zr2 = An2({ log_: function(t3) {
  var e3 = gn2(t3, "x", "log"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4, n4) {
    var r3 = t4.log(e3);
    return n4([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n4 = e4[0];
    return { x: function() {
      return t4.div(n4.toFloat());
    } };
  }, "Log", {}, n3);
} });
var to2 = An2({ log1p_: function(t3) {
  var e3 = gn2(t3, "x", "log1p");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.log1p(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.add(1));
    } };
  });
} });
var eo2 = An2({ logSigmoid_: function(t3) {
  var e3 = gn2(t3, "x", "logSigmoid");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.softplus(e3.neg()).neg();
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.neg().sigmoid());
    } };
  });
} });
var no2 = An2({ neg_: function(t3) {
  var e3 = gn2(t3, "x", "neg"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4) {
    return t4.neg(e3);
  }, { x: e3 }, function(t4) {
    return { x: function() {
      return t4.neg();
    } };
  }, "Neg", {}, n3);
} });
var ro2 = An2({ reciprocal_: function(t3) {
  var e3 = gn2(t3, "x", "reciprocal");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.reciprocal(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.square().neg());
    } };
  });
} });
var oo2 = An2({ round_: function(t3) {
  var e3 = gn2(t3, "x", "round");
  return Lt2.runKernelFunc(function(t4) {
    return t4.round(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var ao2 = An2({ rsqrt_: function(t3) {
  var e3 = gn2(t3, "x", "rsqrt"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4, n4) {
    var r3 = t4.rsqrt(e3);
    return n4([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n4 = e4[0];
    return { x: function() {
      return t4.div(n4.pow(1.5).mul(2)).neg();
    } };
  }, "Rsqrt", {}, n3);
} });
var io2 = An2({ sigmoid_: function(t3) {
  var e3 = gn2(t3, "x", "sigmoid");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.sigmoid(e3);
    return n3([r3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { x: function() {
      return t4.mul(n3.mul(On2(1).sub(n3)));
    } };
  }, "Sigmoid");
} });
var so2 = An2({ sign_: function(t3) {
  var e3 = gn2(t3, "x", "sign");
  return Lt2.runKernelFunc(function(t4) {
    return t4.sign(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var uo2 = An2({ isNaN_: function(t3) {
  var e3 = gn2(t3, "x", "isNaN");
  return Lt2.runKernelFunc(function(t4) {
    return t4.isNaN(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var co2 = An2({ isInf_: function(t3) {
  var e3 = gn2(t3, "x", "isInf");
  return Lt2.runKernelFunc(function(t4) {
    return t4.isInf(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var lo2 = An2({ isFinite_: function(t3) {
  var e3 = gn2(t3, "x", "isFinite");
  return Lt2.runKernelFunc(function(t4) {
    return t4.isFinite(e3);
  }, { $x: e3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var ho2 = An2({ sin_: function(t3) {
  var e3 = gn2(t3, "x", "sin"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4, n4) {
    var r3 = t4.sin(e3);
    return n4([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n4 = e4[0];
    return { x: function() {
      return n4.toFloat().cos().mul(t4);
    } };
  }, "Sin", {}, n3);
} });
var fo2 = An2({ sinh_: function(t3) {
  var e3 = gn2(t3, "x", "sinh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.sinh(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return n3.toFloat().cosh().mulStrict(t4);
    } };
  });
} });
var po2 = An2({ softplus_: function(t3) {
  var e3 = gn2(t3, "x", "softplus");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.softplus(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.mul(n3.sigmoid());
    } };
  });
} });
var vo2 = An2({ sqrt_: function(t3) {
  var e3 = gn2(t3, "x", "sqrt");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.sqrt(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.toFloat().sqrt().mul(2));
    } };
  });
} });
var go2 = An2({ step_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = gn2(t3, "x", "step");
  return Lt2.runKernelFunc(function(t4) {
    return t4.step(n3, e3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return Xn2(t4);
    } };
  });
} });
var mo2 = An2({ tan_: function(t3) {
  var e3 = gn2(t3, "x", "tan");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.tan(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return t4.div(n3.cos().square());
    } };
  });
} });
var yo2 = An2({ tanh_: function(t3) {
  var e3 = gn2(t3, "x", "tanh");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.tanh(e3);
    return n3([r3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { x: function() {
      return On2(1).sub(n3.square()).mulStrict(t4);
    } };
  }, "Tanh", {}, null, [true]);
} });
var xo2 = An2({ addStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "addStrict"), r3 = gn2(e3, "b", "addStrict");
  return E2(n3.shape, r3.shape, "Error in addStrict: "), n3.add(r3);
} });
var bo2 = An2({ atan2_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "atan2"), o3 = gn2(e3, "b", "atan2");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape);
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.atan2(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = Or2(n4.square(), r4.square()), o4 = t4.mul(r4.div(e5)), i3 = Br2(n4.shape, a3);
      return i3.length > 0 && (o4 = o4.sum(i3)), o4.reshape(n4.shape);
    }, $b: function() {
      var e5 = Or2(n4.square(), r4.square()), o4 = no2(t4.mul(n4.div(e5))), i3 = Br2(r4.shape, a3);
      return i3.length > 0 && (o4 = o4.sum(i3)), o4.reshape(r4.shape);
    } };
  });
} });
var wo2 = An2({ divStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "div"), r3 = gn2(e3, "b", "div");
  return E2(n3.shape, r3.shape, "Error in divideStrict: "), n3.div(r3);
} });
var Co2 = An2({ floorDiv_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "floorDiv"), o3 = gn2(e3, "b", "floorDiv");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape);
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.floorDiv(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { a: function() {
      var e5 = t4.div(r4.toFloat()), o4 = Br2(n4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(n4.shape) : e5;
    }, b: function() {
      var e5 = t4.mul(n4.toFloat()), o4 = Br2(r4.shape, a3);
      o4.length > 0 && (e5 = e5.sum(o4).reshape(r4.shape));
      var i3 = r4.square();
      return e5.div(i3.toFloat()).neg();
    } };
  }, "FloorDiv");
} });
var Eo2 = An2({ maximum_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "maximum"), o3 = gn2(e3, "b", "maximum");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], "bool" === r3.dtype && (r3 = r3.toInt(), o3 = o3.toInt()), Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.maximum(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { a: function() {
      return t4.mul(n4.greaterEqual(r4).toFloat());
    }, b: function() {
      return t4.mul(n4.less(r4).toFloat());
    } };
  }, "Maximum");
} });
var Ro2 = An2({ maximumStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "maximumStrict"), r3 = gn2(e3, "b", "maximumStrict");
  return E2(n3.shape, r3.shape, "Error in maximumStrict: "), n3.maximum(r3);
} });
var Io2 = An2({ minimum_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "minimum"), o3 = gn2(e3, "b", "minimum");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], "bool" === r3.dtype && (r3 = r3.toInt(), o3 = o3.toInt()), Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.minimum(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { a: function() {
      return t4.mul(n4.lessEqual(r4).toFloat());
    }, b: function() {
      return t4.mul(n4.greater(r4).toFloat());
    } };
  }, "Minimum");
} });
var ko2 = An2({ minimumStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "minimumStrict"), r3 = gn2(e3, "b", "minimumStrict");
  return E2(n3.shape, r3.shape, "Error in minimumStrict: "), n3.minimum(r3);
} });
var So2 = An2({ mod_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "mod"), o3 = gn2(e3, "b", "mod");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape);
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.mod(r3, o3);
    return e4([r3, o3]), n4;
  }, { $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { $a: function() {
      var e5 = Br2(n4.shape, a3);
      return e5.length > 0 ? t4.sum(e5).reshape(n4.shape) : t4;
    }, $b: function() {
      var e5 = t4.mul(n4.div(r4).floor().neg()), o4 = Br2(r4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(r4.shape) : e5;
    } };
  });
} });
var Ao2 = An2({ modStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "modStrict"), r3 = gn2(e3, "b", "modStrict");
  return E2(n3.shape, r3.shape, "Error in modStrict: "), n3.mod(r3);
} });
var To2 = An2({ mul_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "mul"), o3 = gn2(e3, "b", "mul");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape);
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.multiply(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { a: function() {
      var e5 = t4.mul(r4.toFloat()), o4 = Br2(n4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(n4.shape) : e5;
    }, b: function() {
      var e5 = t4.mul(n4.toFloat()), o4 = Br2(r4.shape, a3);
      return o4.length > 0 ? e5.sum(o4).reshape(r4.shape) : e5;
    } };
  }, "Mul");
} });
var Do2 = An2({ mulStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "mul"), r3 = gn2(e3, "b", "mul");
  return E2(n3.shape, r3.shape, "Error in multiplyStrict: "), n3.mul(r3);
} });
var No2 = An2({ pow_: function(t3, e3) {
  var n3, r3 = gn2(t3, "base", "pow"), o3 = gn2(e3, "exp", "pow");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape), i3 = [r3, o3];
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.pow(r3, o3);
    return e4([r3, o3, n4]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o4 = e4[2];
    return { a: function() {
      var e5 = r4.toFloat(), o5 = t4.mul(e5.mul(n4.pow(e5.sub(On2(1))))), i4 = Br2(n4.shape, a3);
      return i4.length > 0 && (o5 = o5.sum(i4)), o5.reshape(n4.shape);
    }, b: function() {
      var e5 = n4.greater(0), i4 = n4.log().where(e5, Xn2(n4)), s3 = t4.mul(o4.mul(i4)), u3 = Br2(r4.shape, a3);
      return u3.length > 0 && (s3 = s3.sum(u3)), s3.reshape(r4.shape);
    } };
  }, "Pow", {}, i3, [true]);
} });
var Fo2 = An2({ powStrict_: function(t3, e3) {
  return E2(t3.shape, e3.shape, "Error in powStrict: "), t3.pow(e3);
} });
var _o2 = An2({ squaredDifferenceStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "squaredDifferenceStrict"), r3 = gn2(e3, "b", "squaredDifferenceStrict");
  return E2(n3.shape, r3.shape, "Error in squaredDifferenceStrict: "), n3.squaredDifference(r3);
} });
var Oo2 = An2({ sub_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "sub"), o3 = gn2(e3, "b", "sub");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1];
  var a3 = Pr2(r3.shape, o3.shape);
  return Lt2.runKernelFunc(function(t4) {
    return t4.subtract(r3, o3);
  }, { a: r3, b: o3 }, function(t4) {
    return { a: function() {
      var e4 = t4, n4 = Br2(r3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.reshape(r3.shape);
    }, b: function() {
      var e4 = t4, n4 = Br2(o3.shape, a3);
      return n4.length > 0 && (e4 = e4.sum(n4)), e4.neg().reshape(o3.shape);
    } };
  }, "Sub");
} });
var Mo2 = An2({ subStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "subStrict"), r3 = gn2(e3, "b", "subStrict");
  return E2(n3.shape, r3.shape, "Error in subStrict: "), n3.sub(r3);
} });
var Bo2 = An2({ div_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "div"), o3 = gn2(e3, "b", "div");
  if (n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], "int32" === r3.dtype && "int32" === o3.dtype) return Co2(r3, o3);
  var a3 = { a: r3, b: o3 };
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.realDivide(r3, o3);
    return e4([r3, o3]), n4;
  }, a3, null, wr2, {});
} });
function Po2(t3, e3) {
  if (t3.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + t3.rank + ".");
  if (e3.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + e3.rank + ".");
  if ("int32" !== e3.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + e3.dtype + ".");
  if (e3.shape[e3.rank - 1] > t3.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + e3.shape[e3.rank - 1] + " vs. " + t3.rank);
  if (0 === t3.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + t3.shape + ".");
  for (var n3 = e3.shape, r3 = n3[n3.length - 1], o3 = 1, a3 = 0; a3 < n3.length - 1; ++a3) o3 *= n3[a3];
  var i3 = t3.shape, s3 = n3.slice();
  s3.pop();
  var u3 = 1;
  for (a3 = r3; a3 < t3.rank; ++a3) u3 *= i3[a3], s3.push(i3[a3]);
  var c3 = $2(t3.shape).map(function(t4) {
    return t4 / u3;
  }).concat([1]).slice(0, r3);
  return [s3, o3, u3, c3];
}
var Lo2 = Object.freeze({ prepareAndValidate: Po2 });
var Wo2 = 30;
function Uo2(t3) {
  return t3 <= Wo2 ? t3 : Y2(t3, Math.floor(Math.sqrt(t3)));
}
function Vo2(t3, e3, n3) {
  var r3 = e3.rank > 1 ? e3.shape[e3.rank - 1] : 1, o3 = e3.rank > 1 ? e3.rank - 1 : 1, a3 = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n3.shape + ", indices.shape: " + e3.shape + ", shape: " + t3 + ", sliceDim: " + r3 + ", and batchDim: " + o3 + ".";
  if (n3.rank < o3) throw new Error(a3 + " update.rank < " + o3 + ". ");
  if (t3.length < r3 + (n3.rank - o3)) throw new Error(a3 + " Output shape length < " + (r3 + (n3.rank - o3)));
  if (n3.rank !== o3 + t3.length - r3) throw new Error(a3 + " update.rank != " + (o3 + t3.length - r3));
  for (var i3 = 0; i3 < o3; ++i3) if (n3.shape[i3] !== e3.shape[i3]) throw new Error(a3 + " updates.shape[" + i3 + "] (" + n3.shape[i3] + ") != indices.shape[" + i3 + "] (" + e3.shape[i3] + ").");
  for (i3 = 0; i3 < n3.rank - o3; ++i3) if (n3.shape[i3 + o3] !== t3[i3 + r3]) throw new Error(a3 + " updates.shape[" + (i3 + o3) + "] (" + n3.shape[i3 + o3] + ") != shape[" + (i3 + o3) + "] (" + t3[i3 + o3] + ")");
}
function zo2(t3, e3, n3) {
  if (e3.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + e3.rank + ".");
  if (t3.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + t3.rank + ".");
  if ("int32" !== e3.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + e3.dtype);
  if (n3.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + n3);
  if (0 === n3.length) {
    if (0 === e3.size) throw new Error("Indices specified for empty output. indices shape: " + e3.shape);
    if (0 === t3.size) throw new Error("Updates specified for empty output. updates shape: " + t3.shape);
  }
  Vo2(n3, e3, t3);
}
function Go2(t3, e3, n3) {
  for (var r3 = e3.shape.length, o3 = r3 > 1 ? e3.shape[r3 - 1] : 1, a3 = n3.length, i3 = 1, s3 = o3; s3 < a3; ++s3) i3 *= n3[s3];
  var u3 = o3 < 1 ? 1 : o3;
  return { sliceRank: o3, numUpdates: k2(e3.shape) / u3, sliceSize: i3, strides: $2(n3.slice(0, o3)).concat([1]), outputSize: k2(n3) };
}
var Ho2 = Object.freeze({ validateUpdateShape: Vo2, validateInput: zo2, calculateShapes: Go2 });
function qo2(t3, e3, n3) {
  C2(t3.rank === e3.length, function() {
    return "Error in slice" + t3.rank + "D: Length of begin " + e3 + " must match the rank of the array (" + t3.rank + ").";
  }), C2(t3.rank === n3.length, function() {
    return "Error in slice" + t3.rank + "D: Length of size " + n3 + " must match the rank of the array (" + t3.rank + ").";
  });
  for (var r3 = function(r4) {
    C2(e3[r4] + n3[r4] <= t3.shape[r4], function() {
      return "Error in slice" + t3.rank + "D: begin[" + r4 + "] + size[" + r4 + "] (" + (e3[r4] + n3[r4]) + ") would overflow input.shape[" + r4 + "] (" + t3.shape[r4] + ")";
    });
  }, o3 = 0; o3 < t3.rank; ++o3) r3(o3);
}
function Ko2(t3) {
  for (var e3 = [], n3 = 0; t3 > 0; ) 1 & t3 && e3.push(n3), t3 /= 2, n3++;
  return e3;
}
function jo2(t3, e3, n3) {
  for (var r3 = [], o3 = 0; o3 < t3.length; o3++) r3[o3] = Math.ceil((e3[o3] - t3[o3]) / n3[o3]);
  return r3;
}
function Xo2(t3, e3, n3, r3, o3) {
  var a3 = e3[o3], i3 = n3[o3] || 1;
  (t3 & 1 << o3 || null == a3) && (a3 = i3 > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
  var s3 = r3[o3];
  return a3 < 0 && (a3 += s3), a3 = x2(0, a3, s3 - 1);
}
function Yo2(t3, e3, n3, r3, o3) {
  var a3 = e3[o3], i3 = n3[o3] || 1;
  (t3 & 1 << o3 || null == a3) && (a3 = i3 > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
  var s3 = r3[o3];
  return a3 < 0 && (a3 += s3), a3 = i3 > 0 ? x2(0, a3, s3) : x2(-1, a3, s3 - 1);
}
function $o2(t3, e3, n3) {
  for (var r3 = n3.length, o3 = 0; o3 < n3.length; o3++) if (n3[o3] > 1) {
    r3 = o3;
    break;
  }
  for (o3 = r3 + 1; o3 < n3.length; o3++) if (e3[o3] > 0 || n3[o3] !== t3[o3]) return false;
  return true;
}
function Qo2(t3, e3) {
  for (var n3 = t3.length > 0 ? t3[t3.length - 1] : 1, r3 = 0; r3 < t3.length - 1; r3++) n3 += t3[r3] * e3[r3];
  return n3;
}
var Jo2 = Object.freeze({ assertParamsValid: qo2, maskToAxes: Ko2, computeOutShape: jo2, startForAxis: Xo2, stopForAxis: Yo2, isSliceContinous: $o2, computeFlatOffset: Qo2 });
function ra2(t3, e3) {
  C2(X2(t3), function() {
    return "The f passed in variableGrads(f) must be a function";
  }), C2(null == e3 || Array.isArray(e3) && e3.every(function(t4) {
    return t4 instanceof St2;
  }), function() {
    return "The varList passed in variableGrads(f, varList) must be an array of variables";
  });
  var n3 = null != e3;
  if (!n3) for (var r3 in e3 = [], Lt2.registeredVariables) e3.push(Lt2.registeredVariables[r3]);
  var o3 = n3 ? e3.filter(function(t4) {
    return !t4.trainable;
  }) : null, a3 = e3.length;
  C2((e3 = e3.filter(function(t4) {
    return t4.trainable;
  })).length > 0, function() {
    return "variableGrads() expects at least one of the input variables to be trainable, but none of the " + a3 + " variables is trainable.";
  });
  var i3 = Lt2.gradients(t3, e3, null, true), s3 = i3.value, u3 = i3.grads;
  C2(u3.some(function(t4) {
    return null != t4;
  }), function() {
    return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
  }), C2(0 === s3.rank, function() {
    return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + s3.rank + " tensor";
  });
  var c3 = {};
  return e3.forEach(function(t4, e4) {
    null != u3[e4] && (c3[t4.name] = u3[e4]);
  }), null != o3 && o3.forEach(function(t4) {
    return c3[t4.name] = null;
  }), { value: s3, grads: c3 };
}
function oa2(t3) {
  return Lt2.customGrad(t3);
}
var ia2 = An2({ softmax_: function(t3, e3) {
  void 0 === e3 && (e3 = -1);
  var n3 = gn2(t3, "logits", "softmax", "float32");
  if (-1 === e3 && (e3 = n3.rank - 1), e3 !== n3.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n3.rank + " and dim was " + e3);
  return Lt2.runKernelFunc(function(t4, r3) {
    var o3 = t4.softmax(n3, e3);
    return r3([o3]), o3;
  }, { logits: n3 }, function(t4, n4) {
    var r3 = n4[0], o3 = t4.mul(r3);
    return { logits: function() {
      return o3.sub(o3.sum([e3], true).mul(r3));
    } };
  }, "Softmax", { dim: e3 }, [], [true]);
} });
var sa2 = An2({ logSoftmax_: function(t3, e3) {
  void 0 === e3 && (e3 = -1);
  var n3 = gn2(t3, "logits", "logSoftmax");
  if (-1 === e3 && (e3 = n3.rank - 1), e3 !== n3.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n3.rank + " and axis was " + e3);
  return oa2(function(t4, n4) {
    var r3 = t4.max(e3, true), o3 = t4.sub(r3), a3 = o3.toFloat().sub(o3.exp().sum(e3, true).log());
    n4([a3]);
    return { value: a3, gradFunc: function(t5, n5) {
      var r4 = n5[0].exp();
      return t5.sub(t5.sum(e3, true).mul(r4));
    } };
  })(n3);
} });
var ua2 = An2({ transpose_: function(t3, e3) {
  var n3 = gn2(t3, "x", "transpose");
  if (null == e3 && (e3 = n3.shape.map(function(t4, e4) {
    return e4;
  }).reverse()), C2(n3.rank === e3.length, function() {
    return "Error in transpose: rank of input " + n3.rank + " must match length of perm " + e3 + ".";
  }), e3.forEach(function(t4) {
    C2(t4 >= 0 && t4 < n3.rank, function() {
      return "All entries in 'perm' must be between 0 and " + (n3.rank - 1) + " but got " + e3;
    });
  }), n3.rank <= 1) return n3.clone();
  var r3 = { perm: e3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.transpose(n3, e3);
  }, { x: n3 }, null, "Transpose", r3);
} });
var ca2 = function() {
  function t3(t4, e3) {
    this.backend = t4, this.dataMover = e3, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  return t3.prototype.get = function(t4) {
    return this.data.has(t4) || this.dataMover.moveData(this.backend, t4), this.data.get(t4);
  }, t3.prototype.set = function(t4, e3) {
    this.dataIdsCount++, this.data.set(t4, e3);
  }, t3.prototype.has = function(t4) {
    return this.data.has(t4);
  }, t3.prototype.delete = function(t4) {
    return this.dataIdsCount--, this.data.delete(t4);
  }, t3.prototype.numDataIds = function() {
    return this.dataIdsCount;
  }, t3;
}();
var la2 = function() {
  function t3() {
  }
  return t3.prototype.time = function(t4) {
    return ha2("time");
  }, t3.prototype.read = function(t4) {
    return ha2("read");
  }, t3.prototype.readSync = function(t4) {
    return ha2("readSync");
  }, t3.prototype.numDataIds = function() {
    return ha2("numDataIds");
  }, t3.prototype.disposeData = function(t4) {
    return ha2("disposeData");
  }, t3.prototype.write = function(t4, e3, n3) {
    return ha2("write");
  }, t3.prototype.move = function(t4, e3, n3, r3) {
    return ha2("move");
  }, t3.prototype.memory = function() {
    return ha2("memory");
  }, t3.prototype.floatPrecision = function() {
    return ha2("floatPrecision");
  }, t3.prototype.epsilon = function() {
    return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
  }, t3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    return ha2("batchMatMul");
  }, t3.prototype.fusedBatchMatMul = function(t4) {
    t4.a, t4.b, t4.transposeA, t4.transposeB, t4.bias, t4.activation, t4.preluActivationWeights;
    return ha2("fusedBatchMatMul");
  }, t3.prototype.slice = function(t4, e3, n3) {
    return ha2("slice");
  }, t3.prototype.stridedSlice = function(t4, e3, n3, r3) {
    return ha2("stridedSlice");
  }, t3.prototype.unstack = function(t4, e3) {
    return ha2("unstack");
  }, t3.prototype.reverse = function(t4, e3) {
    return ha2("reverse");
  }, t3.prototype.concat = function(t4, e3) {
    return ha2("concat");
  }, t3.prototype.neg = function(t4) {
    return ha2("neg");
  }, t3.prototype.add = function(t4, e3) {
    return ha2("add");
  }, t3.prototype.addN = function(t4) {
    return ha2("addN");
  }, t3.prototype.subtract = function(t4, e3) {
    return ha2("subtract");
  }, t3.prototype.multiply = function(t4, e3) {
    return ha2("multiply");
  }, t3.prototype.realDivide = function(t4, e3) {
    return ha2("realDivide");
  }, t3.prototype.floorDiv = function(t4, e3) {
    return ha2("floorDiv");
  }, t3.prototype.sum = function(t4, e3) {
    return ha2("sum");
  }, t3.prototype.prod = function(t4, e3) {
    return ha2("prod");
  }, t3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    return ha2("unsortedSegmentSum");
  }, t3.prototype.argMin = function(t4, e3) {
    return ha2("argMin");
  }, t3.prototype.argMax = function(t4, e3) {
    return ha2("argMax");
  }, t3.prototype.equal = function(t4, e3) {
    return ha2("equal");
  }, t3.prototype.notEqual = function(t4, e3) {
    return ha2("notEqual");
  }, t3.prototype.less = function(t4, e3) {
    return ha2("less");
  }, t3.prototype.lessEqual = function(t4, e3) {
    return ha2("lessEqual");
  }, t3.prototype.greater = function(t4, e3) {
    return ha2("greater");
  }, t3.prototype.greaterEqual = function(t4, e3) {
    return ha2("greaterEqual");
  }, t3.prototype.logicalNot = function(t4) {
    return ha2("logicalNot");
  }, t3.prototype.logicalAnd = function(t4, e3) {
    return ha2("logicalAnd");
  }, t3.prototype.logicalOr = function(t4, e3) {
    return ha2("logicalOr");
  }, t3.prototype.where = function(t4) {
    return ha2("where");
  }, t3.prototype.select = function(t4, e3, n3) {
    return ha2("select");
  }, t3.prototype.topk = function(t4, e3, n3) {
    return ha2("topk");
  }, t3.prototype.min = function(t4, e3) {
    return ha2("min");
  }, t3.prototype.minimum = function(t4, e3) {
    return ha2("minimum");
  }, t3.prototype.mod = function(t4, e3) {
    return ha2("mod");
  }, t3.prototype.max = function(t4, e3) {
    return ha2("max");
  }, t3.prototype.maximum = function(t4, e3) {
    return ha2("maximum");
  }, t3.prototype.all = function(t4, e3) {
    return ha2("all");
  }, t3.prototype.any = function(t4, e3) {
    return ha2("any");
  }, t3.prototype.squaredDifference = function(t4, e3) {
    return ha2("squaredDifference");
  }, t3.prototype.ceil = function(t4) {
    return ha2("ceil");
  }, t3.prototype.floor = function(t4) {
    return ha2("floor");
  }, t3.prototype.round = function(t4) {
    return ha2("round");
  }, t3.prototype.sign = function(t4) {
    return ha2("sign");
  }, t3.prototype.isNaN = function(t4) {
    return ha2("isNaN");
  }, t3.prototype.isInf = function(t4) {
    return ha2("isInf");
  }, t3.prototype.isFinite = function(t4) {
    return ha2("isFinite");
  }, t3.prototype.pow = function(t4, e3) {
    return ha2("pow");
  }, t3.prototype.exp = function(t4) {
    return ha2("exp");
  }, t3.prototype.expm1 = function(t4) {
    return ha2("expm1");
  }, t3.prototype.softmax = function(t4, e3) {
    return ha2("softmax");
  }, t3.prototype.log = function(t4) {
    return ha2("log");
  }, t3.prototype.log1p = function(t4) {
    return ha2("log1p");
  }, t3.prototype.sqrt = function(t4) {
    return ha2("sqrt");
  }, t3.prototype.rsqrt = function(t4) {
    return ha2("rsqrt");
  }, t3.prototype.square = function(t4) {
    return ha2("square");
  }, t3.prototype.reciprocal = function(t4) {
    return ha2("reciprocal");
  }, t3.prototype.relu = function(t4) {
    return ha2("relu");
  }, t3.prototype.relu6 = function(t4) {
    return ha2("relu6");
  }, t3.prototype.prelu = function(t4, e3) {
    return ha2("prelu");
  }, t3.prototype.elu = function(t4) {
    return ha2("elu");
  }, t3.prototype.eluDer = function(t4, e3) {
    return ha2("eluDer");
  }, t3.prototype.selu = function(t4) {
    return ha2("selu");
  }, t3.prototype.int = function(t4) {
    return ha2("int");
  }, t3.prototype.clip = function(t4, e3, n3) {
    return ha2("clip");
  }, t3.prototype.abs = function(t4) {
    return ha2("abs");
  }, t3.prototype.complexAbs = function(t4) {
    return ha2("complexAbs");
  }, t3.prototype.sigmoid = function(t4) {
    return ha2("sigmoid");
  }, t3.prototype.softplus = function(t4) {
    return ha2("softplus");
  }, t3.prototype.sin = function(t4) {
    return ha2("sin");
  }, t3.prototype.cos = function(t4) {
    return ha2("cos");
  }, t3.prototype.tan = function(t4) {
    return ha2("tan");
  }, t3.prototype.asin = function(t4) {
    return ha2("asin");
  }, t3.prototype.acos = function(t4) {
    return ha2("acos");
  }, t3.prototype.atan = function(t4) {
    return ha2("atan");
  }, t3.prototype.atan2 = function(t4, e3) {
    return ha2("atan2");
  }, t3.prototype.sinh = function(t4) {
    return ha2("sinh");
  }, t3.prototype.cosh = function(t4) {
    return ha2("cosh");
  }, t3.prototype.tanh = function(t4) {
    return ha2("tanh");
  }, t3.prototype.asinh = function(t4) {
    return ha2("asinh");
  }, t3.prototype.acosh = function(t4) {
    return ha2("acosh");
  }, t3.prototype.atanh = function(t4) {
    return ha2("atanh");
  }, t3.prototype.erf = function(t4) {
    return ha2("erf");
  }, t3.prototype.step = function(t4, e3) {
    return ha2("step");
  }, t3.prototype.fusedConv2d = function(t4) {
    t4.input, t4.filter, t4.convInfo, t4.bias, t4.activation, t4.preluActivationWeights;
    return ha2("fusedConv2d");
  }, t3.prototype.conv2d = function(t4, e3, n3) {
    return ha2("conv2d");
  }, t3.prototype.conv2dDerInput = function(t4, e3, n3) {
    return ha2("conv2dDerInput");
  }, t3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    return ha2("conv2dDerFilter");
  }, t3.prototype.fusedDepthwiseConv2D = function(t4) {
    t4.input, t4.filter, t4.convInfo, t4.bias, t4.activation, t4.preluActivationWeights;
    return ha2("fusedDepthwiseConv2D");
  }, t3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    return ha2("depthwiseConv2D");
  }, t3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    return ha2("depthwiseConv2DDerInput");
  }, t3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    return ha2("depthwiseConv2DDerFilter");
  }, t3.prototype.conv3d = function(t4, e3, n3) {
    return ha2("conv3d");
  }, t3.prototype.conv3dDerInput = function(t4, e3, n3) {
    return ha2("conv3dDerInput");
  }, t3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    return ha2("conv3dDerFilter");
  }, t3.prototype.maxPool = function(t4, e3) {
    return ha2("maxPool");
  }, t3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    return ha2("maxPoolBackprop");
  }, t3.prototype.avgPool = function(t4, e3) {
    return ha2("avgPool");
  }, t3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    return ha2("avgPoolBackprop");
  }, t3.prototype.avgPool3d = function(t4, e3) {
    return ha2("avgPool3d");
  }, t3.prototype.avgPool3dBackprop = function(t4, e3, n3) {
    return ha2("avgPool3dBackprop");
  }, t3.prototype.maxPool3d = function(t4, e3) {
    return ha2("maxPool3d");
  }, t3.prototype.maxPool3dBackprop = function(t4, e3, n3, r3) {
    return ha2("maxPool3dBackprop");
  }, t3.prototype.reshape = function(t4, e3) {
    return ha2("reshape");
  }, t3.prototype.cast = function(t4, e3) {
    return ha2("cast");
  }, t3.prototype.tile = function(t4, e3) {
    return ha2("tile");
  }, t3.prototype.pad = function(t4, e3, n3) {
    return ha2("pad");
  }, t3.prototype.transpose = function(t4, e3) {
    return ha2("transpose");
  }, t3.prototype.gather = function(t4, e3, n3) {
    return ha2("gather");
  }, t3.prototype.gatherND = function(t4, e3) {
    return ha2("gatherND");
  }, t3.prototype.scatterND = function(t4, e3, n3) {
    return ha2("scatterND");
  }, t3.prototype.batchToSpaceND = function(t4, e3, n3) {
    return ha2("batchToSpaceND");
  }, t3.prototype.spaceToBatchND = function(t4, e3, n3) {
    return ha2("spaceToBatchND");
  }, t3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    return ha2("resizeBilinear");
  }, t3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    return ha2("resizeBilinearBackprop");
  }, t3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    return ha2("resizeNearestNeighbor");
  }, t3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    return ha2("resizeNearestNeighborBackprop");
  }, t3.prototype.batchNormalization = function(t4, e3, n3, r3, o3, a3) {
    return ha2("batchNormalization");
  }, t3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o3) {
    return ha2("localResponseNormalization4D");
  }, t3.prototype.LRNGrad = function(t4, e3, n3, r3, o3, a3, i3) {
    return ha2("LRNGrad");
  }, t3.prototype.multinomial = function(t4, e3, n3, r3) {
    return ha2("multinomial");
  }, t3.prototype.oneHot = function(t4, e3, n3, r3) {
    return ha2("oneHot");
  }, t3.prototype.cumsum = function(t4, e3, n3, r3) {
    return ha2("cumsum");
  }, t3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o3) {
    return ha2("nonMaxSuppression");
  }, t3.prototype.fft = function(t4) {
    return ha2("fft");
  }, t3.prototype.ifft = function(t4) {
    return ha2("ifft");
  }, t3.prototype.complex = function(t4, e3) {
    return ha2("complex");
  }, t3.prototype.real = function(t4) {
    return ha2("real");
  }, t3.prototype.imag = function(t4) {
    return ha2("imag");
  }, t3.prototype.cropAndResize = function(t4, e3, n3, r3, o3, a3) {
    return ha2("cropAndResize");
  }, t3.prototype.depthToSpace = function(t4, e3, n3) {
    return ha2("depthToSpace");
  }, t3.prototype.split = function(t4, e3, n3) {
    return ha2("split");
  }, t3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    return ha2("sparseToDense");
  }, t3.prototype.diag = function(t4) {
    return ha2("diag");
  }, t3.prototype.fill = function(t4, e3, n3) {
    return ha2("fill");
  }, t3.prototype.onesLike = function(t4) {
    return ha2("onesLike");
  }, t3.prototype.zerosLike = function(t4) {
    return ha2("zerosLike");
  }, t3.prototype.linspace = function(t4, e3, n3) {
    return ha2("linspace");
  }, t3.prototype.dispose = function() {
    return ha2("dispose");
  }, t3;
}();
function ha2(t3) {
  throw new Error("'" + t3 + "' not yet implemented or not found in the registry. Did you forget to import the kernel?");
}
function fa2(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === i3 && (i3 = "channelsLast");
  var s3, u3 = ma2(e3), c3 = u3[0], l3 = u3[1];
  if ("channelsLast" === i3) s3 = [c3, l3, t3[3], t3[3]];
  else {
    if ("channelsFirst" !== i3) throw new Error("Unknown dataFormat " + i3);
    s3 = [c3, l3, t3[1], t3[1]];
  }
  return pa2(t3, s3, n3, r3, o3, a3, false, i3);
}
function da2(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === i3 && (i3 = "NDHWC");
  var s3, u3, c3 = ya2(e3), l3 = c3[0], h3 = c3[1], f3 = c3[2];
  if ("NDHWC" === i3) u3 = "channelsLast", s3 = [l3, h3, f3, t3[4], t3[4]];
  else {
    if ("NCDHW" !== i3) throw new Error("Unknown dataFormat " + i3);
    u3 = "channelsFirst", s3 = [l3, h3, f3, t3[1], t3[1]];
  }
  return va2(t3, s3, n3, r3, o3, false, u3, a3);
}
function pa2(t3, e3, n3, r3, o3, a3, i3, s3) {
  void 0 === i3 && (i3 = false), void 0 === s3 && (s3 = "channelsLast");
  var u3 = [-1, -1, -1, -1], c3 = u3[0], l3 = u3[1], h3 = u3[2], f3 = u3[3];
  if ("channelsLast" === s3) c3 = t3[0], l3 = t3[1], h3 = t3[2], f3 = t3[3];
  else {
    if ("channelsFirst" !== s3) throw new Error("Unknown dataFormat " + s3);
    c3 = t3[0], f3 = t3[1], l3 = t3[2], h3 = t3[3];
  }
  var d3, p3 = e3[0], v2 = e3[1], g2 = e3[3], m3 = ma2(n3), y3 = m3[0], x3 = m3[1], b3 = ma2(r3), w3 = b3[0], E3 = b3[1], R3 = xa2(p3, w3), I3 = xa2(v2, E3), k3 = function(t4, e4, n4, r4, o4, a4, i4, s4) {
    var u4, c4, l4;
    if ("number" == typeof t4) {
      u4 = { top: t4, bottom: t4, left: t4, right: t4, type: 0 === t4 ? "VALID" : "NUMBER" };
      var h4 = function(t5, e5, n5, r5, o5) {
        null == r5 && (r5 = ga2(t5, e5, n5));
        var a5 = t5[0], i5 = t5[1], s5 = ba2((a5 - e5 + 2 * r5) / n5 + 1, o5);
        C2(A2(s5), function() {
          return "The output # of rows (" + s5 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var u5 = ba2((i5 - e5 + 2 * r5) / n5 + 1, o5);
        return C2(A2(u5), function() {
          return "The output # of columns (" + u5 + ") must be an integer. Change the stride and/or zero pad parameters";
        }), [s5, u5];
      }([e4, n4], a4, r4, t4, s4);
      c4 = h4[0], l4 = h4[1];
    } else if ("same" === t4) {
      c4 = Math.ceil(e4 / r4), l4 = Math.ceil(n4 / o4);
      var f4 = Math.max(0, (c4 - 1) * r4 + a4 - e4), d4 = Math.max(0, (l4 - 1) * o4 + i4 - n4), p4 = Math.floor(f4 / 2), v3 = f4 - p4, g3 = Math.floor(d4 / 2);
      u4 = { top: p4, bottom: v3, left: g3, right: d4 - g3, type: "SAME" };
    } else {
      if ("valid" !== t4) throw Error("Unknown padding parameter: " + t4);
      u4 = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c4 = Math.ceil((e4 - a4 + 1) / r4), l4 = Math.ceil((n4 - i4 + 1) / o4);
    }
    return { padInfo: u4, outHeight: c4, outWidth: l4 };
  }(o3, l3, h3, y3, x3, R3, I3, a3), S3 = k3.padInfo, T3 = k3.outHeight, D3 = k3.outWidth, N3 = i3 ? g2 * f3 : g2;
  return "channelsFirst" === s3 ? d3 = [c3, N3, T3, D3] : "channelsLast" === s3 && (d3 = [c3, T3, D3, N3]), { batchSize: c3, dataFormat: s3, inHeight: l3, inWidth: h3, inChannels: f3, outHeight: T3, outWidth: D3, outChannels: N3, padInfo: S3, strideHeight: y3, strideWidth: x3, filterHeight: p3, filterWidth: v2, effectiveFilterHeight: R3, effectiveFilterWidth: I3, dilationHeight: w3, dilationWidth: E3, inShape: t3, outShape: d3, filterShape: e3 };
}
function va2(t3, e3, n3, r3, o3, a3, i3, s3) {
  void 0 === a3 && (a3 = false), void 0 === i3 && (i3 = "channelsLast");
  var u3 = [-1, -1, -1, -1, -1], c3 = u3[0], l3 = u3[1], h3 = u3[2], f3 = u3[3], d3 = u3[4];
  if ("channelsLast" === i3) c3 = t3[0], l3 = t3[1], h3 = t3[2], f3 = t3[3], d3 = t3[4];
  else {
    if ("channelsFirst" !== i3) throw new Error("Unknown dataFormat " + i3);
    c3 = t3[0], d3 = t3[1], l3 = t3[2], h3 = t3[3], f3 = t3[4];
  }
  var p3, v2 = e3[0], g2 = e3[1], m3 = e3[2], y3 = e3[4], x3 = ya2(n3), b3 = x3[0], w3 = x3[1], E3 = x3[2], R3 = ya2(r3), I3 = R3[0], k3 = R3[1], S3 = R3[2], T3 = xa2(v2, I3), D3 = xa2(g2, k3), N3 = xa2(m3, S3), F3 = function(t4, e4, n4, r4, o4, a4, i4, s4, u4, c4, l4) {
    var h4, f4, d4, p4;
    if ("number" == typeof t4) {
      h4 = { top: t4, bottom: t4, left: t4, right: t4, front: t4, back: t4, type: 0 === t4 ? "VALID" : "NUMBER" };
      var v3 = function(t5, e5, n5, r5, o5, a5) {
        null == o5 && (o5 = ga2(t5, e5, r5));
        var i5 = t5[0], s5 = t5[1], u5 = t5[2], c5 = ba2((i5 - e5 + 2 * o5) / r5 + 1, a5);
        C2(A2(c5), function() {
          return "The output # of depths (" + c5 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var l5 = ba2((s5 - e5 + 2 * o5) / r5 + 1, a5);
        C2(A2(l5), function() {
          return "The output # of rows (" + l5 + ") must be an integer. Change the stride and/or zero pad parameters";
        });
        var h5 = ba2((u5 - e5 + 2 * o5) / r5 + 1, a5);
        return C2(A2(h5), function() {
          return "The output # of columns (" + h5 + ") must be an integer. Change the stride and/or zero pad parameters";
        }), [c5, l5, h5, n5];
      }([e4, n4, r4, 1], s4, 1, o4, t4, l4);
      f4 = v3[0], d4 = v3[1], p4 = v3[2];
    } else if ("same" === t4) {
      f4 = Math.ceil(e4 / o4), d4 = Math.ceil(n4 / a4), p4 = Math.ceil(r4 / i4);
      var g3 = (f4 - 1) * o4 + s4 - e4, m4 = (d4 - 1) * a4 + u4 - n4, y4 = (p4 - 1) * i4 + c4 - r4, x4 = Math.floor(g3 / 2), b4 = g3 - x4, w4 = Math.floor(m4 / 2), E4 = m4 - w4, R4 = Math.floor(y4 / 2);
      h4 = { top: w4, bottom: E4, left: R4, right: y4 - R4, front: x4, back: b4, type: "SAME" };
    } else {
      if ("valid" !== t4) throw Error("Unknown padding parameter: " + t4);
      h4 = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, f4 = Math.ceil((e4 - s4 + 1) / o4), d4 = Math.ceil((n4 - u4 + 1) / a4), p4 = Math.ceil((r4 - c4 + 1) / i4);
    }
    return { padInfo: h4, outDepth: f4, outHeight: d4, outWidth: p4 };
  }(o3, l3, h3, f3, b3, w3, E3, T3, D3, N3, s3), _3 = F3.padInfo, O3 = F3.outDepth, M3 = F3.outHeight, B3 = F3.outWidth, P3 = a3 ? y3 * d3 : y3;
  return "channelsFirst" === i3 ? p3 = [c3, P3, O3, M3, B3] : "channelsLast" === i3 && (p3 = [c3, O3, M3, B3, P3]), { batchSize: c3, dataFormat: i3, inDepth: l3, inHeight: h3, inWidth: f3, inChannels: d3, outDepth: O3, outHeight: M3, outWidth: B3, outChannels: P3, padInfo: _3, strideDepth: b3, strideHeight: w3, strideWidth: E3, filterDepth: v2, filterHeight: g2, filterWidth: m3, effectiveFilterDepth: T3, effectiveFilterHeight: D3, effectiveFilterWidth: N3, dilationDepth: I3, dilationHeight: k3, dilationWidth: S3, inShape: t3, outShape: p3, filterShape: e3 };
}
function ga2(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = 1);
  var o3 = xa2(e3, r3);
  return Math.floor((t3[0] * (n3 - 1) - n3 + o3) / 2);
}
function ma2(t3) {
  return "number" == typeof t3 ? [t3, t3, t3] : 2 === t3.length ? [t3[0], t3[1], 1] : t3;
}
function ya2(t3) {
  return "number" == typeof t3 ? [t3, t3, t3] : t3;
}
function xa2(t3, e3) {
  return e3 <= 1 ? t3 : t3 + (t3 - 1) * (e3 - 1);
}
function ba2(t3, e3) {
  if (!e3) return t3;
  switch (e3) {
    case "round":
      return Math.round(t3);
    case "ceil":
      return Math.ceil(t3);
    case "floor":
      return Math.floor(t3);
    default:
      throw new Error("Unknown roundingMode " + e3);
  }
}
function wa2(t3) {
  var e3 = ma2(t3), n3 = e3[0], r3 = e3[1], o3 = e3[2];
  return 1 === n3 && 1 === r3 && 1 === o3;
}
function Ca2(t3, e3) {
  return wa2(t3) || wa2(e3);
}
function Ea2(t3) {
  if ("NHWC" === t3) return "channelsLast";
  if ("NCHW" === t3) return "channelsFirst";
  throw new Error("Unknown dataFormat " + t3);
}
function Ra2(t3, e3, n3) {
  if ("complex64" === e3) {
    if ("complex64" === t3.dtype) return t3.clone();
    var r3 = Gn2(t3.shape), o3 = t3.toFloat(), a3 = n3.complex(o3, r3);
    return r3.dispose(), o3.dispose(), a3;
  }
  if (!U2(t3.dtype, e3)) return Lt2.makeTensorFromDataId(t3.dataId, t3.shape, e3);
  if ("complex64" === t3.dtype) {
    var i3 = n3.real(t3);
    a3 = i3.cast(e3);
    return i3.dispose(), a3;
  }
  if ("int32" === e3) return n3.int(t3);
  if ("bool" === e3) {
    var s3 = On2(0, t3.dtype);
    a3 = n3.notEqual(t3, s3);
    return s3.dispose(), a3;
  }
  throw new Error("Error in Cast: failed to cast " + t3.dtype + " to " + e3);
}
function Ia2(t3, e3) {
  return Lt2.makeTensorFromDataId(t3.dataId, e3, t3.dtype);
}
function ka2(t3, e3, n3) {
  var r3 = (e3 - t3) / (n3 - 1), o3 = tt2(n3, "float32");
  o3[0] = t3;
  for (var a3 = 1; a3 < o3.length; a3++) o3[a3] = o3[a3 - 1] + r3;
  return Mn2(o3, "float32");
}
var Sa2 = Object.freeze({ castTensor: Ra2, reshapeTensor: Ia2, linspaceImpl: ka2, upcastType: Tt2, axesAreInnerMostDims: yn2, combineLocations: xn2, computeOutAndReduceShapes: bn2, expandShapeToKeepDim: wn2, assertAxesAreInnerMostDims: Cn2, getAxesPermutation: En2, getUndoAxesPermutation: Rn2, getInnerMostAxes: In2, getBroadcastDims: Mr2, getReductionAxes: Br2, assertAndGetBroadcastShape: Pr2, assertParamsConsistent: kn2, computeOutShape: Sn2, computePool2DInfo: fa2, computePool3DInfo: da2, computeConv2DInfo: pa2, computeConv3DInfo: va2, computeDefaultPad: ga2, tupleValuesAreOne: wa2, eitherStridesOrDilationsAreOne: Ca2, convertConv2DDataFormat: Ea2, PARALLELIZE_THRESHOLD: Wo2, computeOptimalWindowSize: Uo2 });
function Aa2(t3, e3) {
  if (t3.length !== e3.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + t3.length + ", imag: " + e3.length + ".");
  for (var n3 = new Float32Array(2 * t3.length), r3 = 0; r3 < n3.length; r3 += 2) n3[r3] = t3[r3 / 2], n3[r3 + 1] = e3[r3 / 2];
  return n3;
}
function Ta2(t3, e3) {
  return { real: t3[2 * e3], imag: t3[2 * e3 + 1] };
}
function Da2(t3, e3, n3, r3) {
  t3[2 * r3] = e3, t3[2 * r3 + 1] = n3;
}
function Na2(t3, e3, n3) {
  var r3 = (n3 ? 2 : -2) * Math.PI * (t3 / e3);
  return { real: Math.cos(r3), imag: Math.sin(r3) };
}
function Fa2(t3, e3, n3) {
  var r3 = function(t4, e4, n4) {
    return function(t5, e5, n5) {
      var r4 = 0, o4 = t5.length, a3 = 0, i3 = false;
      for (; r4 < o4; ) {
        var s3 = n5(e5, t5[a3 = r4 + (o4 - r4 >>> 1)]);
        s3 > 0 ? r4 = a3 + 1 : (o4 = a3, i3 = !s3);
      }
      return i3 ? r4 : -r4 - 1;
    }(t4, e4, n4 || _a2);
  }(t3, e3, n3), o3 = r3 < 0 ? -(r3 + 1) : r3;
  t3.splice(o3, 0, e3);
}
function _a2(t3, e3) {
  return t3 > e3 ? 1 : t3 < e3 ? -1 : 0;
}
function Oa2(t3, e3, n3, r3, o3) {
  return Ba2(t3, e3, n3, r3, o3, 0).selectedIndices;
}
function Ma2(t3, e3, n3, r3, o3, a3) {
  var i3 = Ba2(t3, e3, n3, r3, o3, a3, true);
  return i3.numValidOutputs.dispose(), { selectedIndices: i3.selectedIndices, selectedScores: i3.selectedScores };
}
function Ba2(t3, e3, n3, r3, o3, a3, i3, s3) {
  void 0 === i3 && (i3 = false), void 0 === s3 && (s3 = false);
  for (var u3 = Array.from(e3).map(function(t4, e4) {
    return { score: t4, boxIndex: e4, suppressBeginIndex: 0 };
  }).filter(function(t4) {
    return t4.score > o3;
  }).sort(Wa2), c3 = a3 > 0 ? -0.5 / a3 : 0, l3 = [], h3 = []; l3.length < n3 && u3.length > 0; ) {
    var f3 = u3.pop(), d3 = f3.score, p3 = f3.boxIndex, v2 = f3.suppressBeginIndex;
    if (d3 < o3) break;
    for (var g2 = false, m3 = l3.length - 1; m3 >= v2; --m3) {
      var y3 = Pa2(t3, p3, l3[m3]);
      if (y3 >= r3) {
        g2 = true;
        break;
      }
      if (f3.score = f3.score * La2(r3, c3, y3), f3.score <= o3) break;
    }
    f3.suppressBeginIndex = l3.length, g2 || (f3.score === d3 ? (l3.push(p3), h3.push(f3.score)) : f3.score > o3 && Fa2(u3, f3, Wa2));
  }
  var x3 = l3.length;
  return s3 && (l3.fill(0, x3), h3.fill(0, x3)), { selectedIndices: Mn2(l3, "int32"), selectedScores: Mn2(h3, "float32"), numValidOutputs: On2(x3, "int32") };
}
function Pa2(t3, e3, n3) {
  var r3 = t3.subarray(4 * e3, 4 * e3 + 4), o3 = t3.subarray(4 * n3, 4 * n3 + 4), a3 = Math.min(r3[0], r3[2]), i3 = Math.min(r3[1], r3[3]), s3 = Math.max(r3[0], r3[2]), u3 = Math.max(r3[1], r3[3]), c3 = Math.min(o3[0], o3[2]), l3 = Math.min(o3[1], o3[3]), h3 = Math.max(o3[0], o3[2]), f3 = Math.max(o3[1], o3[3]), d3 = (s3 - a3) * (u3 - i3), p3 = (h3 - c3) * (f3 - l3);
  if (d3 <= 0 || p3 <= 0) return 0;
  var v2 = Math.max(a3, c3), g2 = Math.max(i3, l3), m3 = Math.min(s3, h3), y3 = Math.min(u3, f3), x3 = Math.max(m3 - v2, 0) * Math.max(y3 - g2, 0);
  return x3 / (d3 + p3 - x3);
}
function La2(t3, e3, n3) {
  var r3 = Math.exp(e3 * n3 * n3);
  return n3 <= t3 ? r3 : 0;
}
function Wa2(t3, e3) {
  return t3.score - e3.score || t3.score === e3.score && e3.boxIndex - t3.boxIndex;
}
function Ua2(t3, e3, n3) {
  var r3 = new Array(t3.rank).fill(0), o3 = t3.shape.slice();
  return e3.map(function(e4) {
    o3[n3] = e4;
    var a3 = t3.slice(r3, o3);
    return r3[n3] += e4, a3;
  });
}
function Va2(t3, e3) {
  for (var n3 = new Array(t3.rank), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3.shape[r3] * e3[r3];
  var o3 = er2(n3, t3.dtype);
  for (r3 = 0; r3 < o3.values.length; ++r3) {
    for (var a3 = o3.indexToLoc(r3), i3 = new Array(t3.rank), s3 = 0; s3 < i3.length; s3++) i3[s3] = a3[s3] % t3.shape[s3];
    var u3 = t3.locToIndex(i3);
    o3.values[r3] = t3.values[u3];
  }
  return o3.toTensor();
}
function za2(t3, e3, n3, r3, o3) {
  for (var a3 = e3[e3.length - 1], i3 = [t3.length / a3, a3], s3 = i3[0], u3 = i3[1], c3 = B2(n3, s3 * r3), l3 = B2("int32", s3 * r3), h3 = 0; h3 < s3; h3++) {
    for (var f3 = h3 * u3, d3 = t3.subarray(f3, f3 + u3), p3 = [], v2 = 0; v2 < d3.length; v2++) p3.push({ value: d3[v2], index: v2 });
    p3.sort(function(t4, e4) {
      return e4.value - t4.value;
    });
    var g2 = h3 * r3, m3 = c3.subarray(g2, g2 + r3), y3 = l3.subarray(g2, g2 + r3);
    for (v2 = 0; v2 < r3; v2++) m3[v2] = p3[v2].value, y3[v2] = p3[v2].index;
  }
  var x3 = e3.slice();
  return x3[x3.length - 1] = r3, [Fn2(c3, x3, n3), Fn2(l3, x3, "int32")];
}
function Ga2(t3, e3) {
  for (var n3 = [], r3 = 0; r3 < e3.length; r3++) e3[r3] && n3.push(r3);
  var o3 = er2(t3, "int32"), a3 = er2([n3.length, t3.length], "int32");
  for (r3 = 0; r3 < n3.length; r3++) {
    var i3 = o3.indexToLoc(n3[r3]), s3 = r3 * t3.length;
    a3.values.set(i3, s3);
  }
  return a3.toTensor();
}
var Ha2 = function(t3, e3) {
  this.outputShape = [], this.outputShape = t3, this.variableNames = e3.map(function(t4, e4) {
    return "T" + e4;
  });
  var n3 = [];
  this.variableNames.forEach(function(t4) {
    n3.push("float v" + t4 + " = get" + t4 + "AtOutCoords();");
  });
  var r3 = this.variableNames.map(function(t4) {
    return "v" + t4;
  }).join(" + ");
  this.userCode = "\n      void main() {\n        " + n3.join("\n        ") + "\n\n        float result = " + r3 + ";\n        setOutput(result);\n      }\n    ";
};
var qa2 = function(t3, e3) {
  this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3, this.variableNames = e3.map(function(t4, e4) {
    return "T" + e4;
  });
  var n3 = [];
  this.variableNames.forEach(function(t4) {
    n3.push("vec4 v" + t4 + " = get" + t4 + "AtOutCoords();");
  });
  var r3 = this.variableNames.map(function(t4) {
    return "v" + t4;
  }).join(" + ");
  this.userCode = "\n      void main() {\n        " + n3.join("\n        ") + "\n\n        vec4 result = " + r3 + ";\n        setOutput(result);\n      }\n    ";
};
var Ka2 = function(t3, e3, n3) {
  this.variableNames = ["A"];
  var r3 = t3.windowSize, o3 = t3.batchSize, a3 = t3.inSize, i3 = Math.ceil(a3 / r3);
  n3 || this.variableNames.push("bestIndicesA"), this.outputShape = [o3, i3];
  var s3 = "max" === e3 ? ">" : "<", u3 = n3 ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
  this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r3 + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + r3 + "; i++) {\n          int inIdx = " + u3 + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s3 + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
};
function ja2(t3, e3) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e3).map(function(e4) {
    return t3 + "." + e4;
  });
}
function Xa2(t3, e3) {
  return 1 === e3 ? [t3] : ja2(t3, e3);
}
function Ya2() {
  var t3, e3, n3, r3, o3, a3, s3, u3, c3, l3;
  return 2 === i2().getNumber("WEBGL_VERSION") ? (t3 = "#version 300 es", e3 = "in", n3 = "out", r3 = "in", o3 = "texture", a3 = "outputColor", s3 = "out vec4 outputColor;", u3 = "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ", c3 = "", l3 = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (t3 = "", e3 = "attribute", n3 = "varying", r3 = "varying", o3 = "texture2D", a3 = "gl_FragColor", s3 = "", u3 = "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ", c3 = "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ", l3 = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), { version: t3, attribute: e3, varyingVs: n3, varyingFs: r3, texture2D: o3, output: a3, defineOutput: s3, defineSpecialNaN: u3, defineSpecialInf: c3, defineRound: l3 };
}
function $a2(t3, e3, n3) {
  void 0 === n3 && (n3 = "index");
  var r3 = $2(e3);
  return r3.map(function(e4, o3) {
    return "int " + t3[o3] + " = " + n3 + " / " + e4 + "; " + (o3 === r3.length - 1 ? "int " + t3[o3 + 1] + " = " + n3 + " - " + t3[o3] + " * " + e4 : "index -= " + t3[o3] + " * " + e4) + ";";
  }).join("");
}
function Qa2(t3) {
  var e3 = $2(t3).map(function(t4) {
    return t4.toString();
  });
  return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + e3[0] + " + coords.y * " + e3[1] + " + coords.z;\n  }\n";
}
var Ja2 = "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
function Za2(t3, e3, n3, r3) {
  var o3 = [];
  t3.forEach(function(t4) {
    var e4 = k2(t4.shapeInfo.logicalShape);
    t4.shapeInfo.isUniform ? o3.push("uniform float " + t4.name + (e4 > 1 ? "[" + e4 + "]" : "") + ";") : (o3.push("uniform sampler2D " + t4.name + ";"), o3.push("uniform int offset" + t4.name + ";"));
  });
  var a3, i3, s3 = o3.join("\n"), u3 = t3.map(function(t4) {
    return function(t5, e4, n4) {
      void 0 === n4 && (n4 = false);
      var r4 = "";
      r4 += n4 ? ei2(t5) : ti2(t5);
      var o4 = t5.shapeInfo.logicalShape, a4 = e4.logicalShape;
      o4.length <= a4.length && (r4 += n4 ? function(t6, e5) {
        var n5, r5 = t6.name, o5 = r5.charAt(0).toUpperCase() + r5.slice(1), a5 = "get" + o5 + "AtOutCoords", i4 = t6.shapeInfo.logicalShape.length, s4 = e5.logicalShape.length, u4 = Mr2(t6.shapeInfo.logicalShape, e5.logicalShape), c4 = ui2(s4), l4 = s4 - i4, h4 = ["x", "y", "z", "w", "u", "v"];
        n5 = 0 === i4 ? "" : s4 < 2 && u4.length >= 1 ? "coords = 0;" : u4.map(function(t7) {
          return "coords." + h4[t7 + l4] + " = 0;";
        }).join("\n");
        var f4 = "";
        f4 = s4 < 2 && i4 > 0 ? "coords" : t6.shapeInfo.logicalShape.map(function(t7, e6) {
          return "coords." + h4[e6 + l4];
        }).join(", ");
        var d3 = "return outputValue;", p3 = 1 === k2(t6.shapeInfo.logicalShape), v2 = 1 === k2(e5.logicalShape);
        if (1 !== i4 || p3 || v2) {
          if (p3 && !v2) d3 = 1 === s4 ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
          else if (u4.length) {
            var g2 = i4 - 2, m3 = i4 - 1;
            u4.indexOf(g2) > -1 && u4.indexOf(m3) > -1 ? d3 = "return vec4(outputValue.x);" : u4.indexOf(g2) > -1 ? d3 = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u4.indexOf(m3) > -1 && (d3 = "return vec4(outputValue.xx, outputValue.zz);");
          }
        } else d3 = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
        return "\n    vec4 " + a5 + "() {\n      " + c4 + " coords = getOutputCoords();\n      " + n5 + "\n      vec4 outputValue = get" + o5 + "(" + f4 + ");\n      " + d3 + "\n    }\n  ";
      }(t5, e4) : function(t6, e5) {
        var n5 = t6.name, r5 = n5.charAt(0).toUpperCase() + n5.slice(1), o5 = "get" + r5 + "AtOutCoords", a5 = e5.texShape, i4 = t6.shapeInfo.texShape, s4 = t6.shapeInfo.logicalShape.length, u4 = e5.logicalShape.length;
        if (!t6.shapeInfo.isUniform && s4 === u4 && null == t6.shapeInfo.flatOffset && S2(i4, a5)) return "\n      float " + o5 + "() {\n        return sampleTexture(" + n5 + ", resultUV);\n      }\n    ";
        var c4, l4 = ui2(u4), h4 = Mr2(t6.shapeInfo.logicalShape, e5.logicalShape), f4 = u4 - s4, d3 = ["x", "y", "z", "w", "u", "v"];
        c4 = 0 === s4 ? "" : u4 < 2 && h4.length >= 1 ? "coords = 0;" : h4.map(function(t7) {
          return "coords." + d3[t7 + f4] + " = 0;";
        }).join("\n");
        var p3 = "";
        p3 = u4 < 2 && s4 > 0 ? "coords" : t6.shapeInfo.logicalShape.map(function(t7, e6) {
          return "coords." + d3[e6 + f4];
        }).join(", ");
        return "\n    float " + o5 + "() {\n      " + l4 + " coords = getOutputCoords();\n      " + c4 + "\n      return get" + r5 + "(" + p3 + ");\n    }\n  ";
      }(t5, e4));
      return r4;
    }(t4, e3, r3);
  }).join("\n"), c3 = e3.texShape, l3 = Ya2(), h3 = function(t4) {
    return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + t4.texture2D + "(textureSampler, uv).r;\n    }\n  ";
  }(l3), f3 = function(t4) {
    return t4.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + t4.varyingFs + " vec2 resultUV;\n    " + t4.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " + t4.defineSpecialNaN + "\n    " + t4.defineSpecialInf + "\n    " + t4.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + ni2 + "\n    " + ri2 + "\n    " + oi2 + "\n  ";
  }(l3);
  return e3.isPacked ? (a3 = function(t4, e4) {
    switch (t4.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t5, e5) {
          var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)];
          if (1 === n5[0]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n5[1] + ".0);\n      }\n    ";
          if (1 === n5[1]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n5[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n      return 2 * (resTexRC.x * " + n5[1] + " + resTexRC.y);\n    }\n  ";
        }(0, e4);
      case 2:
        return function(t5, e5) {
          var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)];
          if (S2(t5, e5)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n5[0] + ", " + n5[1] + "));\n      }\n    ";
          var r5 = Math.ceil(t5[1] / 2);
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n\n      int index = resTexRC.x * " + n5[1] + " + resTexRC.y;\n      int r = 2 * (index / " + r5 + ");\n      int c = imod(index, " + r5 + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
        }(t4, e4);
      case 3:
        return n4 = t4, r4 = e4, o4 = [Math.ceil(r4[0] / 2), Math.ceil(r4[1] / 2)], a4 = Math.ceil(n4[2] / 2), i4 = a4 * Math.ceil(n4[1] / 2), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + o4[0] + ", " + o4[1] + "));\n      int index = resTexRC.x * " + o4[1] + " + resTexRC.y;\n\n      int b = index / " + i4 + ";\n      index -= b * " + i4 + ";\n\n      int r = 2 * (index / " + a4 + ");\n      int c = imod(index, " + a4 + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
      default:
        return function(t5, e5) {
          for (var n5 = [Math.ceil(e5[0] / 2), Math.ceil(e5[1] / 2)], r5 = Math.ceil(t5[t5.length - 1] / 2), o5 = r5 * Math.ceil(t5[t5.length - 2] / 2), a5 = o5, i5 = "", s4 = "b, r, c", u4 = 2; u4 < t5.length - 1; u4++) a5 *= t5[t5.length - u4 - 1], i5 = "\n      int b" + u4 + " = index / " + a5 + ";\n      index -= b" + u4 + " * " + a5 + ";\n    " + i5, s4 = "b" + u4 + ", " + s4;
          return "\n    ivec" + t5.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n5[0] + ", " + n5[1] + "));\n      int index = resTexRC.x * " + n5[1] + " + resTexRC.y;\n\n      " + i5 + "\n\n      int b = index / " + o5 + ";\n      index -= b * " + o5 + ";\n\n      int r = 2 * (index / " + r5 + ");\n      int c = imod(index, " + r5 + ") * 2;\n\n      return ivec" + t5.length + "(" + s4 + ");\n    }\n  ";
        }(t4, e4);
    }
    var n4, r4, o4, a4, i4;
  }(e3.logicalShape, c3), i3 = function(t4) {
    return "\n    void setOutput(vec4 val) {\n      " + t4.output + " = val;\n    }\n  ";
  }(l3)) : (a3 = function(t4, e4) {
    switch (t4.length) {
      case 0:
        return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
      case 1:
        return function(t5, e5) {
          if (1 === e5[0]) return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + e5[1] + ".0);\n      }\n    ";
          if (1 === e5[1]) return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + e5[0] + ".0);\n      }\n    ";
          return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e5[0] + ", " + e5[1] + "));\n      return resTexRC.x * " + e5[1] + " + resTexRC.y;\n    }\n  ";
        }(0, e4);
      case 2:
        return function(t5, e5) {
          if (S2(t5, e5)) return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + e5[0] + ", " + e5[1] + "));\n      }\n    ";
          if (1 === t5[1]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e5[0] + ", " + e5[1] + "));\n        int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
          if (1 === t5[0]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e5[0] + ", " + e5[1] + "));\n        int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
          return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n      int r = index / " + t5[1] + ";\n      int c = index - r * " + t5[1] + ";\n      return ivec2(r, c);\n    }\n  ";
        }(t4, e4);
      case 3:
        return n4 = e4, r4 = $a2(["r", "c", "d"], t4), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n4[0] + ", " + n4[1] + "));\n      int index = resTexRC.x * " + n4[1] + " + resTexRC.y;\n      " + r4 + "\n      return ivec3(r, c, d);\n    }\n  ";
      case 4:
        return function(t5, e5) {
          var n5 = $a2(["r", "c", "d", "d2"], t5);
          return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n      " + n5 + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
        }(t4, e4);
      case 5:
        return function(t5, e5) {
          var n5 = $a2(["r", "c", "d", "d2", "d3"], t5);
          return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + e5[0] + ",\n                             " + e5[1] + "));\n\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n\n      " + n5 + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
        }(t4, e4);
      case 6:
        return function(t5, e5) {
          var n5 = $a2(["r", "c", "d", "d2", "d3", "d4"], t5);
          return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e5[0] + ", " + e5[1] + "));\n      int index = resTexRC.x * " + e5[1] + " + resTexRC.y;\n\n      " + n5 + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
        }(t4, e4);
      default:
        throw new Error(t4.length + "-D output sampling is not yet supported");
    }
    var n4, r4;
  }(e3.logicalShape, c3), i3 = function(t4) {
    return "\n    void setOutput(float val) {\n      " + t4.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
  }(l3)), r3 && (f3 += ai2), [f3, h3, i3, s3, a3, u3, n3].join("\n");
}
function ti2(t3) {
  var e3 = t3.shapeInfo.logicalShape;
  switch (e3.length) {
    case 0:
      return function(t4) {
        var e4 = t4.name, n3 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1);
        if (t4.shapeInfo.isUniform) return "float " + n3 + "() {return " + e4 + ";}";
        var r3 = t4.shapeInfo.texShape, o3 = r3[0], a3 = r3[1];
        if (1 === o3 && 1 === a3) return "\n      float " + n3 + "() {\n        return sampleTexture(" + e4 + ", halfCR);\n      }\n    ";
        var i3 = t4.shapeInfo.texShape, s3 = i3[0], u3 = i3[1], c3 = ii2(e4);
        return "\n    float " + n3 + "() {\n      vec2 uv = uvFromFlat(" + s3 + ", " + u3 + ", " + c3 + ");\n      return sampleTexture(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 1:
      return function(t4) {
        var e4 = t4.name, n3 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1);
        if (t4.shapeInfo.isUniform) return "\n      float " + n3 + "(int index) {\n        " + si2(t4) + "\n      }\n    ";
        var r3 = t4.shapeInfo.texShape, o3 = r3[0], a3 = r3[1];
        if (1 === a3 && 1 === o3) return "\n      float " + n3 + "(int index) {\n        return sampleTexture(" + e4 + ", halfCR);\n      }\n    ";
        var i3 = ii2(e4);
        if (1 === a3) return "\n      float " + n3 + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i3 + ") + 0.5) / " + o3 + ".0);\n        return sampleTexture(" + e4 + ", uv);\n      }\n    ";
        if (1 === o3) return "\n      float " + n3 + "(int index) {\n        vec2 uv = vec2((float(index + " + i3 + ") + 0.5) / " + a3 + ".0, 0.5);\n        return sampleTexture(" + e4 + ", uv);\n      }\n    ";
        return "\n    float " + n3 + "(int index) {\n      vec2 uv = uvFromFlat(" + o3 + ", " + a3 + ", index + " + i3 + ");\n      return sampleTexture(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 2:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = t4.shapeInfo.texShape;
        if (null != o3 && S2(e4, o3)) {
          var a3 = o3[0], i3 = o3[1];
          return "\n    float " + r3 + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i3 + ".0, " + a3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        }
        var s3 = M2(e4), u3 = s3.newShape, c3 = s3.keptDims, l3 = u3;
        if (l3.length < e4.length) {
          var h3 = ci2(t4, l3);
          return "\n      " + ti2(h3) + "\n      float " + r3 + "(int row, int col) {\n        return " + r3 + "(" + li2(["row", "col"], c3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + e4[1] + ", 1)));\n        " + si2(t4) + "\n      }\n    ";
        var f3 = o3[0], d3 = o3[1], p3 = ii2(n3);
        if (1 === d3) return "\n    float " + r3 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + p3 + "), vec3(" + e4[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + f3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        if (1 === f3) return "\n    float " + r3 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + p3 + "), vec3(" + e4[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + d3 + ".0, 0.5);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        return "\n  float " + r3 + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + e4[1] + " + col + " + p3 + ";\n    vec2 uv = uvFromFlat(" + f3 + ", " + d3 + ", index);\n    return sampleTexture(" + n3 + ", uv);\n  }\n";
      }(t3);
    case 3:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[1] * e4[2], a3 = e4[2], i3 = M2(e4), s3 = i3.newShape, u3 = i3.keptDims, c3 = s3;
        if (c3.length < e4.length) {
          var l3 = ci2(t4, c3);
          return "\n        " + ti2(l3) + "\n        float " + r3 + "(int row, int col, int depth) {\n          return " + r3 + "(" + li2(["row", "col", "depth"], u3) + ");\n        }\n      ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + o3 + ", " + a3 + ", 1)));\n        " + si2(t4) + "\n      }\n    ";
        var h3 = t4.shapeInfo.texShape, f3 = h3[0], d3 = h3[1], p3 = t4.shapeInfo.flatOffset;
        if (d3 === o3 && null == p3) return "\n        float " + r3 + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + a3 + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + d3 + ".0, " + f3 + ".0);\n          return sampleTexture(" + n3 + ", uv);\n        }\n      ";
        if (d3 === a3 && null == p3) return "\n    float " + r3 + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + e4[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + d3 + ".0, " + f3 + ".0);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
        var v2 = ii2(n3);
        return "\n      float " + r3 + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + o3 + " + col * " + a3 + " + depth + " + v2 + ";\n        vec2 uv = uvFromFlat(" + f3 + ", " + d3 + ", index);\n        return sampleTexture(" + n3 + ", uv);\n      }\n  ";
      }(t3);
    case 4:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[3], a3 = e4[2] * o3, i3 = e4[1] * a3, s3 = M2(e4), u3 = s3.newShape, c3 = s3.keptDims;
        if (u3.length < e4.length) {
          var l3 = ci2(t4, u3);
          return "\n      " + ti2(l3) + "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        return " + r3 + "(" + li2(["row", "col", "depth", "depth2"], c3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i3 + ", " + a3 + ", " + o3 + ", 1)));\n        " + si2(t4) + "\n      }\n    ";
        var h3 = t4.shapeInfo.flatOffset, f3 = t4.shapeInfo.texShape, d3 = f3[0], p3 = f3[1];
        if (p3 === i3 && null == h3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + a3 + ", " + o3 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + p3 + ".0, " + d3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (p3 === o3 && null == h3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + e4[1] * e4[2] + ", " + e4[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + p3 + ".0, " + d3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var v2 = ii2(n3);
        return "\n    float " + r3 + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i3 + " + col * " + a3 + " +\n          depth * " + o3 + " + depth2;\n      vec2 uv = uvFromFlat(" + d3 + ", " + p3 + ", index + " + v2 + ");\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    case 5:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = e4[4], a3 = e4[3] * o3, i3 = e4[2] * a3, s3 = e4[1] * i3, u3 = M2(e4), c3 = u3.newShape, l3 = u3.keptDims;
        if (c3.length < e4.length) {
          var h3 = ci2(t4, c3);
          return "\n      " + ti2(h3) + "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r3 + "(" + li2(["row", "col", "depth", "depth2", "depth3"], l3) + ");\n      }\n    ";
        }
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + s3 + ", " + i3 + ", " + a3 + ", " + o3 + ")) +\n          depth3;\n        " + si2(t4) + "\n      }\n    ";
        var f3 = t4.shapeInfo.flatOffset, d3 = t4.shapeInfo.texShape, p3 = d3[0], v2 = d3[1];
        if (v2 === s3 && null == f3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i3 + ", " + a3 + ", " + o3 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + v2 + ".0, " + p3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (v2 === o3 && null == f3) return "\n      float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + e4[1] * e4[2] * e4[3] + ",\n               " + e4[2] * e4[3] + ", " + e4[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + v2 + ".0, " + p3 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var g2 = ii2(n3);
        return "\n    float " + r3 + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + s3 + " + col * " + i3 + " + depth * " + a3 + " +\n          depth2 * " + o3 + " + depth3 + " + g2 + ";\n      vec2 uv = uvFromFlat(" + p3 + ", " + v2 + ", index);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    case 6:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n3 = t4.name, r3 = "get" + n3.charAt(0).toUpperCase() + n3.slice(1), o3 = M2(e4), a3 = o3.newShape, i3 = o3.keptDims;
        if (a3.length < e4.length) {
          var s3 = ci2(t4, a3);
          return "\n      " + ti2(s3) + "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r3 + "(" + li2(["row", "col", "depth", "depth2", "depth3", "depth4"], i3) + ");\n      }\n    ";
        }
        var u3 = e4[5], c3 = e4[4] * u3, l3 = e4[3] * c3, h3 = e4[2] * l3, f3 = e4[1] * h3;
        if (t4.shapeInfo.isUniform) return "\n      float " + r3 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + f3 + ", " + h3 + ", " + l3 + ", " + c3 + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + u3 + ", 1)));\n        " + si2(t4) + "\n      }\n    ";
        var d3 = t4.shapeInfo.flatOffset, p3 = t4.shapeInfo.texShape, v2 = p3[0], g2 = p3[1];
        if (g2 === f3 && null == d3) return "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + h3 + ", " + l3 + ", " + c3 + ", " + u3 + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + g2 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        if (g2 === u3 && null == d3) return "\n      float " + r3 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + e4[1] * e4[2] * e4[3] * e4[4] + ",\n               " + e4[2] * e4[3] * e4[4] + ",\n               " + e4[3] * e4[4] + ",\n               " + e4[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + g2 + ".0, " + v2 + ".0);\n        return sampleTexture(" + n3 + ", uv);\n      }\n    ";
        var m3 = ii2(n3);
        return "\n    float " + r3 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + f3 + " + col * " + h3 + " + depth * " + l3 + " +\n          depth2 * " + c3 + " + depth3 * " + u3 + " + depth4 + " + m3 + ";\n      vec2 uv = uvFromFlat(" + v2 + ", " + g2 + ", index);\n      return sampleTexture(" + n3 + ", uv);\n    }\n  ";
      }(t3);
    default:
      throw new Error(e3.length + "-D input sampling is not yet supported");
  }
}
function ei2(t3) {
  var e3, n3, r3;
  switch (t3.shapeInfo.logicalShape.length) {
    case 0:
      return e3 = t3.name, n3 = "get" + e3.charAt(0).toUpperCase() + e3.slice(1), r3 = Ya2(), "\n    vec4 " + n3 + "() {\n      return " + r3.texture2D + "(" + e3 + ", halfCR);\n    }\n  ";
    case 1:
      return function(t4) {
        var e4 = t4.name, n4 = "get" + e4.charAt(0).toUpperCase() + e4.slice(1), r4 = t4.shapeInfo.texShape, o3 = [Math.ceil(r4[0] / 2), Math.ceil(r4[1] / 2)], a3 = Ya2();
        return "\n    vec4 " + n4 + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o3[0] + ", " + o3[1] + ", index);\n      return " + a3.texture2D + "(" + e4 + ", uv);\n    }\n  ";
      }(t3);
    case 2:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n4 = t4.name, r4 = "get" + n4.charAt(0).toUpperCase() + n4.slice(1), o3 = t4.shapeInfo.texShape, a3 = o3[0], i3 = o3[1], s3 = Ya2();
        if (null != o3 && S2(e4, o3)) return "\n      vec4 " + r4 + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i3 + ".0, " + a3 + ".0);\n\n        return " + s3.texture2D + "(" + n4 + ", uv);\n      }\n    ";
        var u3 = [Math.ceil(o3[0] / 2), Math.ceil(o3[1] / 2)], c3 = Math.ceil(e4[1] / 2);
        return "\n    vec4 " + r4 + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + c3 + ", " + u3[0] + ", " + u3[1] + ", row, col);\n      return " + s3.texture2D + "(" + n4 + ", uv);\n    }\n  ";
      }(t3);
    case 3:
      return function(t4) {
        var e4 = t4.shapeInfo.logicalShape, n4 = t4.name, r4 = "get" + n4.charAt(0).toUpperCase() + n4.slice(1), o3 = t4.shapeInfo.texShape, a3 = [Math.ceil(o3[0] / 2), Math.ceil(o3[1] / 2)];
        if (1 === e4[0]) {
          var i3 = e4.slice(1), s3 = ci2(t4, i3);
          return "\n        " + ei2(s3) + "\n        vec4 " + r4 + "(int b, int row, int col) {\n          return " + r4 + "(" + li2(["b", "row", "col"], [1, 2]) + ");\n        }\n      ";
        }
        var u3 = a3[0], c3 = a3[1], l3 = Math.ceil(e4[2] / 2), h3 = l3 * Math.ceil(e4[1] / 2), f3 = Ya2();
        return "\n    vec4 " + r4 + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + u3 + ", " + c3 + ", " + h3 + ", " + l3 + ", b, row, col);\n      return " + f3.texture2D + "(" + n4 + ", uv);\n    }\n  ";
      }(t3);
    default:
      return function(t4) {
        for (var e4 = t4.shapeInfo.logicalShape, n4 = e4.length, r4 = t4.name, o3 = "get" + r4.charAt(0).toUpperCase() + r4.slice(1), a3 = t4.shapeInfo.texShape, i3 = [Math.ceil(a3[0] / 2), Math.ceil(a3[1] / 2)], s3 = i3[0], u3 = i3[1], c3 = Math.ceil(e4[n4 - 1] / 2), l3 = c3 * Math.ceil(e4[n4 - 2] / 2), h3 = "int b, int row, int col", f3 = "b * " + l3 + " + (row / 2) * " + c3 + " + (col / 2)", d3 = 2; d3 < n4 - 1; d3++) h3 = "int b" + d3 + ", " + h3, l3 *= e4[n4 - d3 - 1], f3 = "b" + d3 + " * " + l3 + " + " + f3;
        var p3 = Ya2();
        return "\n    vec4 " + o3 + "(" + h3 + ") {\n      int index = " + f3 + ";\n      int texR = index / " + u3 + ";\n      int texC = index - texR * " + u3 + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + u3 + ", " + s3 + ");\n      return " + p3.texture2D + "(" + r4 + ", uv);\n    }\n  ";
      }(t3);
  }
}
var ni2 = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var ri2 = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var oi2 = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
var ai2 = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
function ii2(t3) {
  return "offset" + t3;
}
function si2(t3) {
  var e3 = t3.name, n3 = k2(t3.shapeInfo.logicalShape);
  return n3 < 2 ? "return " + e3 + ";" : "\n    for (int i = 0; i < " + n3 + "; i++) {\n      if (i == index) {\n        return " + e3 + "[i];\n      }\n    }\n  ";
}
function ui2(t3) {
  if (t3 <= 1) return "int";
  if (2 === t3) return "ivec2";
  if (3 === t3) return "ivec3";
  if (4 === t3) return "ivec4";
  if (5 === t3) return "ivec5";
  if (6 === t3) return "ivec6";
  throw Error("GPU for rank " + t3 + " is not yet supported");
}
function ci2(t3, e3) {
  var n3 = JSON.parse(JSON.stringify(t3));
  return n3.shapeInfo.logicalShape = e3, n3;
}
function li2(t3, e3) {
  return e3.map(function(e4) {
    return t3[e4];
  }).join(", ");
}
var hi2 = function(t3, e3, n3, r3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, C2(t3.length > 2, function() {
    return "Packed arg" + (n3.charAt(0).toUpperCase() + n3.slice(1)) + " supports only inputs with rank above 2.";
  });
  var o3 = t3[t3.length - 1], a3 = Math.ceil(o3 / e3);
  this.outputShape = t3.slice(0, -1), a3 > 1 && this.outputShape.push(a3), r3 || this.variableNames.push("bestIndicesA");
  var i3, s3, u3 = this.outputShape, c3 = u3.length, l3 = ui2(c3), h3 = Xa2("coords", c3);
  if (1 === a3) {
    var f3 = ui2(s3 = c3 + 1);
    i3 = "\n        " + f3 + " sourceLocR = " + f3 + "(" + h3.join() + ", 0);\n        ++" + h3[c3 - 1] + ";\n        " + f3 + " sourceLocG = " + f3 + "(" + h3.join() + ", 0);\n        ++" + h3[c3 - 2] + ";\n        " + f3 + " sourceLocA = " + f3 + "(" + h3.join() + ", 0);\n        --" + h3[c3 - 1] + ";\n        " + f3 + " sourceLocB = " + f3 + "(" + h3.join() + ", 0);\n        --" + h3[c3 - 2] + ";";
  } else s3 = c3, i3 = "\n        " + l3 + " sourceLocR = coords;\n        ++" + h3[c3 - 1] + ";\n        " + l3 + " sourceLocG = coords;\n        ++" + h3[c3 - 2] + ";\n        " + l3 + " sourceLocA = coords;\n        --" + h3[c3 - 1] + ";\n        " + l3 + " sourceLocB = coords;\n        --" + h3[c3 - 2] + ";";
  var d3 = ["x", "y", "z", "w", "u", "v"].slice(0, s3), p3 = "." + d3[s3 - 1], v2 = d3.map(function(t4) {
    return "int " + t4;
  }), g2 = Xa2("sourceLocR", s3 - 1).concat("inIdx.r"), m3 = Xa2("sourceLocG", s3 - 1).concat("inIdx.g"), y3 = Xa2("sourceLocB", s3 - 1).concat("inIdx.b"), x3 = Xa2("sourceLocA", s3 - 1).concat("inIdx.a"), b3 = "max" === n3 ? "greaterThan" : "lessThan", w3 = r3 ? "" : "\n          inIdx = round(vec4(getBestIndicesAChannel(" + g2.join() + "),\n                             getBestIndicesAChannel(" + m3.join() + "),\n                             getBestIndicesAChannel(" + y3.join() + "),\n                             getBestIndicesAChannel(" + x3.join() + ")));", E3 = "vec4(\n            getAChannel(" + g2.join() + "),\n            hasNextCol ? getAChannel(" + m3.join() + ") : 0.,\n            hasNextRow ? getAChannel(" + y3.join() + ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" + x3.join() + ") : 0.)", R3 = r3 ? "" : "\n      float getBestIndicesAChannel(" + v2.join() + ") {\n        return getChannel(getBestIndicesA(" + d3.join() + "),\n                                          vec2(" + d3.slice(-2).join() + "));\n      }";
  this.userCode = "\n      float getAChannel(" + v2.join() + ") {\n        return getChannel(getA(" + d3.join() + "),\n                               vec2(" + d3.slice(-2).join() + "));\n      }\n      " + R3 + "\n      void main() {\n        " + l3 + " coords = getOutputCoords();\n        bool hasNextCol = " + h3[c3 - 1] + " < " + (u3[c3 - 1] - 1) + ";\n        bool hasNextRow = " + h3[c3 - 2] + " < " + (u3[c3 - 2] - 1) + ";\n        " + i3 + "\n        ivec4 srcIdx = ivec4(sourceLocR" + p3 + ", sourceLocG" + p3 + ",\n          sourceLocB" + p3 + ", sourceLocA" + p3 + ") * " + e3 + ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " + E3 + ";\n\n        for (int i = 0; i < " + e3 + "; i++) {\n          inIdx = srcIdx;\n          " + w3 + "\n          vec4 candidate = " + E3 + ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" + b3 + "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
};
var fi2 = function(t3) {
  this.variableNames = ["dy"], this.outputShape = t3.inShape;
  var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = t3.dilationHeight, i3 = t3.dilationWidth, s3 = t3.effectiveFilterHeight, u3 = t3.effectiveFilterWidth, c3 = s3 - 1 - t3.padInfo.top, l3 = u3 - 1 - t3.padInfo.left, h3 = 1 / (e3 * n3);
  this.userCode = "\n      const ivec2 pads = ivec2(" + c3 + ", " + l3 + ");\n      const float avgMultiplier = float(" + h3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s3 + ";\n            wR += " + a3 + ") {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + u3 + ";\n            wC+= " + i3 + ") {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var di2 = function(t3) {
  this.variableNames = ["dy"], this.outputShape = t3.inShape;
  var e3 = t3.filterDepth, n3 = t3.filterHeight, r3 = t3.filterWidth, o3 = t3.strideDepth, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = t3.dilationDepth, u3 = t3.dilationHeight, c3 = t3.dilationWidth, l3 = t3.effectiveFilterDepth, h3 = t3.effectiveFilterHeight, f3 = t3.effectiveFilterWidth, d3 = l3 - 1 - t3.padInfo.front, p3 = h3 - 1 - t3.padInfo.top, v2 = f3 - 1 - t3.padInfo.left, g2 = 1 / (e3 * n3 * r3);
  this.userCode = "\n      const ivec3 pads = ivec3(" + d3 + ", " + p3 + ", " + v2 + ");\n      const float avgMultiplier = float(" + g2 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + l3 + ";\n            wD += " + s3 + ") {\n          float dyD = float(dyDCorner + wD) / " + o3 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t3.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + h3 + ";\n              wR += " + u3 + ") {\n            float dyR = float(dyRCorner + wR) / " + a3 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + f3 + ";\n                wC += " + c3 + ") {\n              float dyC = float(dyCCorner + wC) / " + i3 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var pi2 = function(t3, e3, n3, r3, o3, a3) {
  this.outputShape = [], this.variableNames = ["x", "mean", "variance"], Pr2(t3, e3), Pr2(t3, n3);
  var i3 = "0.0";
  null != r3 && (Pr2(t3, r3), this.variableNames.push("offset"), i3 = "getOffsetAtOutCoords()");
  var s3 = "1.0";
  null != o3 && (Pr2(t3, o3), this.variableNames.push("scale"), s3 = "getScaleAtOutCoords()"), this.outputShape = t3, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i3 + ";\n        float scale = " + s3 + ";\n        float inv = scale * inversesqrt(variance + float(" + a3 + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
};
var vi2 = function(t3, e3, n3, r3, o3, a3) {
  this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], Pr2(t3, e3), Pr2(t3, n3);
  var i3 = "vec4(0.0)";
  null != r3 && (Pr2(t3, r3), this.variableNames.push("offset"), i3 = "getOffsetAtOutCoords()");
  var s3 = "vec4(1.0)";
  null != o3 && (Pr2(t3, o3), this.variableNames.push("scale"), s3 = "getScaleAtOutCoords()"), this.outputShape = t3, this.userCode = "\n      void main() {\n        vec4 offset = " + i3 + ";\n        vec4 scale = " + s3 + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + a3 + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
};
var gi2 = "return areal * breal - aimag * bimag;";
var mi2 = "return areal * bimag + aimag * breal;";
var yi2 = function(t3, e3, n3) {
  this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = Pr2(e3, n3), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + t3 + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
};
var xi2 = "return a + b;";
var bi2 = "return a - b;";
var wi2 = "return a * b;";
var Ci2 = "\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;";
var Ei2 = "return (a < 0.) ? b * a : a;";
var Ri2 = function(t3, e3, n3) {
  this.variableNames = ["A", "B"], this.outputShape = Pr2(e3, n3), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + t3 + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
};
var Ii2 = "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n";
var ki2 = "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";
var Si2 = function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = false), this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = Pr2(e3, n3);
  var o3 = this.outputShape.length, a3 = "";
  if (r3) if (0 === o3 || 1 === k2(this.outputShape)) a3 = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
  else if (a3 = "\n          " + ui2(o3) + " coords = getOutputCoords();\n        ", 1 === o3) a3 += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
  else {
    var i3 = Xa2("coords", o3);
    a3 += "\n            bool nextRowOutOfBounds =\n              (" + i3[o3 - 2] + " + 1) >= " + this.outputShape[o3 - 2] + ";\n            bool nextColOutOfBounds =\n              (" + i3[o3 - 1] + " + 1) >= " + this.outputShape[o3 - 1] + ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
  }
  this.userCode = "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + t3 + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " + a3 + "\n\n        setOutput(result);\n      }\n    ";
};
var Ai2 = function() {
  function t3(t4) {
    this.variableNames = ["A"], this.outputShape = t4, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4, e3) {
    var n3 = this;
    return function(r3, o3) {
      null == n3.minLoc && (n3.minLoc = r3.getUniformLocationNoThrow(o3, "minVal"), n3.maxLoc = r3.getUniformLocationNoThrow(o3, "maxVal")), r3.gl.uniform1f(n3.minLoc, t4), r3.gl.uniform1f(n3.maxLoc, e3);
    };
  }, t3;
}();
var Ti2 = function() {
  function t3(t4) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t4, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4, e3) {
    var n3 = this;
    return function(r3, o3) {
      null == n3.minLoc && (n3.minLoc = r3.getUniformLocationNoThrow(o3, "minVal"), n3.maxLoc = r3.getUniformLocationNoThrow(o3, "maxVal")), r3.gl.uniform1f(n3.minLoc, t4), r3.gl.uniform1f(n3.maxLoc, e3);
    };
  }, t3;
}();
var Di2 = function(t3) {
  this.variableNames = ["real", "imag"], this.outputShape = t3, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
};
var Ni2 = function(t3) {
  this.outputShape = [], this.outputShape = Sn2(t3, 1), this.variableNames = t3.map(function(t4, e4) {
    return "T" + e4;
  });
  var e3 = new Array(t3.length - 1);
  e3[0] = t3[0][1];
  for (var n3 = 1; n3 < e3.length; n3++) e3[n3] = e3[n3 - 1] + t3[n3][1];
  var r3 = ["if (yC < " + e3[0] + ") setOutput(getT0(yR, yC));"];
  for (n3 = 1; n3 < e3.length; n3++) {
    var o3 = e3[n3 - 1];
    r3.push("else if (yC < " + e3[n3] + ") setOutput(getT" + n3 + "(yR, yC-" + o3 + "));");
  }
  var a3 = e3.length, i3 = e3[e3.length - 1];
  r3.push("else setOutput(getT" + a3 + "(yR, yC-" + i3 + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r3.join("\n        ") + "\n      }\n    ";
};
var Fi2 = function(t3, e3) {
  this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = Sn2(t3, e3);
  var n3 = this.outputShape, r3 = n3.length, o3 = ui2(r3), a3 = Xa2("coords", r3), i3 = ["x", "y", "z", "w", "u", "v"].slice(0, r3);
  this.variableNames = t3.map(function(t4, e4) {
    return "T" + e4;
  });
  var s3 = new Array(t3.length - 1);
  s3[0] = t3[0][e3];
  for (var u3 = 1; u3 < s3.length; u3++) s3[u3] = s3[u3 - 1] + t3[u3][e3];
  var c3 = i3[e3], l3 = i3.slice(-2), h3 = i3.join(), f3 = "if (" + c3 + " < " + s3[0] + ") {\n        return getChannel(\n            getT0(" + h3 + "), vec2(" + l3.join() + "));\n        }";
  for (u3 = 1; u3 < s3.length; u3++) {
    var d3 = s3[u3 - 1];
    f3 += "\n        if (" + c3 + " < " + s3[u3] + "  && " + c3 + " >= " + s3[u3 - 1] + ") {\n          return getChannel(\n            getT" + u3 + "(" + _i2(i3, c3, d3) + "),\n            vec2(" + _i2(l3, c3, d3) + "));\n        }";
  }
  var p3 = s3.length, v2 = s3[s3.length - 1];
  f3 += "\n        return getChannel(\n          getT" + p3 + "(" + _i2(i3, c3, v2) + "),\n          vec2(" + _i2(l3, c3, v2) + "));", this.userCode = "\n      float getValue(" + i3.map(function(t4) {
    return "int " + t4;
  }) + ") {\n        " + f3 + "\n      }\n\n      void main() {\n        " + o3 + " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" + a3 + "), 0., 0., 0.);\n\n        " + a3[r3 - 1] + " = " + a3[r3 - 1] + " + 1;\n        if (" + a3[r3 - 1] + " < " + n3[r3 - 1] + ") {\n          result.g = getValue(" + a3 + ");\n        }\n\n        " + a3[r3 - 2] + " = " + a3[r3 - 2] + " + 1;\n        if (" + a3[r3 - 2] + " < " + n3[r3 - 2] + ") {\n          result.a = getValue(" + a3 + ");\n        }\n\n        " + a3[r3 - 1] + " = " + a3[r3 - 1] + " - 1;\n        if (" + a3[r3 - 2] + " < " + n3[r3 - 2] + " &&\n            " + a3[r3 - 1] + " < " + n3[r3 - 1] + ") {\n          result.b = getValue(" + a3 + ");\n        }\n        setOutput(result);\n      }\n    ";
};
function _i2(t3, e3, n3) {
  var r3 = t3.indexOf(e3);
  return t3.map(function(t4, e4) {
    return e4 === r3 ? t4 + " - " + n3 : t4;
  }).join();
}
var Oi2 = function(t3) {
  this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
  var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left, a3 = "channelsLast" === t3.dataFormat;
  this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n            int xR = wR + yR * " + e3 + " - " + r3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n              int xC = wC + yC * " + n3 + " - " + o3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              if (" + a3 + ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Mi2 = function(t3) {
  this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
  var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = "channelsLast" === t3.dataFormat, i3 = e3 - 1 - t3.padInfo.top, s3 = n3 - 1 - t3.padInfo.left, u3 = a3 ? 1 : 2, c3 = a3 ? 2 : 3, l3 = a3 ? 3 : 1;
  this.userCode = "\n      const ivec2 pads = ivec2(" + i3 + ", " + s3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" + l3 + "];\n\n        ivec2 dyCorner = ivec2(coords[" + u3 + "], coords[" + c3 + "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + e3 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e3 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n3 + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + t3.outChannels + "; d2++) {\n\n              if (" + a3 + ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Bi2 = function(t3) {
  this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
  var e3 = t3.strideDepth, n3 = t3.strideHeight, r3 = t3.strideWidth, o3 = t3.padInfo.front, a3 = t3.padInfo.top, i3 = t3.padInfo.left;
  this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yF = 0; yF < " + t3.outDepth + "; yF++) {\n            int xF = wF + yF * " + e3 + " - " + o3 + ";\n\n            if (xF < 0 || xF >= " + t3.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n              int xR = wR + yR * " + n3 + " - " + a3 + ";\n\n              if (xR < 0 || xR >= " + t3.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n                int xC = wC + yC * " + r3 + " - " + i3 + ";\n\n                if (xC < 0 || xC >= " + t3.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Pi2 = function(t3) {
  this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
  var e3 = t3.filterDepth, n3 = t3.filterHeight, r3 = t3.filterWidth, o3 = t3.strideDepth, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = e3 - 1 - t3.padInfo.front, u3 = n3 - 1 - t3.padInfo.top, c3 = r3 - 1 - t3.padInfo.left;
  this.userCode = "\n      const ivec3 pads = ivec3(" + s3 + ", " + u3 + ", " + c3 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + e3 + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + o3 + ".0;\n\n          if (dyF < 0.0 || dyF >= " + t3.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + e3 + " - 1 - wF;\n\n          for (int wR = 0; wR < " + n3 + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + a3 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + n3 + " - 1 - wR;\n\n            for (int wC = 0; wC < " + r3 + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i3 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + r3 + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + t3.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Li2 = function(t3) {
  this.variableNames = ["x", "dy"], this.outputShape = t3.filterShape;
  var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.padInfo.top, o3 = t3.padInfo.left, a3 = t3.outChannels / t3.inChannels;
  this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + a3 + " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " + t3.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t3.outHeight + "; yR++) {\n            int xR = wR + yR * " + e3 + " - " + r3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t3.outWidth + "; yC++) {\n              int xC = wC + yC * " + n3 + " - " + o3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Wi2 = function(t3) {
  this.variableNames = ["dy", "W"], this.outputShape = t3.inShape;
  var e3 = t3.filterHeight, n3 = t3.filterWidth, r3 = t3.strideHeight, o3 = t3.strideWidth, a3 = e3 - 1 - t3.padInfo.top, i3 = n3 - 1 - t3.padInfo.left, s3 = t3.outChannels / t3.inChannels;
  this.userCode = "\n      const ivec2 pads = ivec2(" + a3 + ", " + i3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + e3 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e3 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n3 + " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s3 + "; dm++) {\n              int d2 = d1 * " + s3 + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Ui2 = function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = null), void 0 === r3 && (r3 = false), this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
  var o3 = t3.padInfo.top, a3 = t3.padInfo.left, i3 = t3.strideHeight, s3 = t3.strideWidth, u3 = t3.dilationHeight, c3 = t3.dilationWidth, l3 = t3.filterHeight, h3 = t3.filterWidth, f3 = 4 * Math.floor(t3.inChannels / 4), d3 = t3.inChannels % 4, p3 = "channelsLast" === t3.dataFormat, v2 = p3 ? 1 : 2, g2 = p3 ? 2 : 3, m3 = p3 ? 3 : 1, y3 = "", x3 = "";
  n3 && (y3 = r3 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n3 + "\n        }" : "\n          float activation(float x) {\n            " + n3 + "\n          }\n        ", x3 = "result = activation(result);");
  var b3 = e3 ? "result += getBiasAtOutCoords();" : "";
  e3 && this.variableNames.push("bias"), r3 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + y3 + "\n\n      const ivec2 strides = ivec2(" + i3 + ", " + s3 + ");\n      const ivec2 pads = ivec2(" + o3 + ", " + a3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" + m3 + "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" + v2 + "], coords[" + g2 + "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + l3 + "; wR++) {\n          int xR = xRCorner + wR * " + u3 + ";\n\n          if (xR < 0 || xR >= " + t3.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + h3 + "; wC++) {\n            int xC = xCCorner + wC * " + c3 + ";\n\n            if (xC < 0 || xC >= " + t3.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + f3 + "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" + p3 + ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" + (1 === d3) + ") {\n\n              if (" + p3 + ") {\n                dotProd +=\n                    getX(batch, xR, xC, " + f3 + ") *\n                    getW(wR, wC, " + f3 + ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " + f3 + ", xR, xC) *\n                    getW(wR, wC, " + f3 + ", d2);\n              }\n\n            } else if (" + (2 === d3) + ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " + f3 + ", d2),\n                getW(wR, wC, " + f3 + " + 1, d2)\n              );\n\n              if (" + p3 + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " + f3 + "),\n                  getX(batch, xR, xC, " + f3 + " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " + f3 + ", xR, xC),\n                  getX(batch, " + f3 + " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" + (3 === d3) + ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " + f3 + ", d2),\n                getW(wR, wC, " + f3 + " + 1, d2),\n                getW(wR, wC, " + f3 + " + 2, d2)\n              );\n\n              if (" + p3 + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " + f3 + "),\n                  getX(batch, xR, xC, " + f3 + " + 1),\n                  getX(batch, xR, xC, " + f3 + " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " + f3 + ", xR, xC),\n                  getX(batch, " + f3 + " + 1, xR, xC),\n                  getX(batch, " + f3 + " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " + b3 + "\n        " + x3 + "\n        setOutput(result);\n      }\n    ";
};
var Vi2 = function(t3) {
  this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
  var e3 = t3.padInfo.front, n3 = t3.padInfo.top, r3 = t3.padInfo.left, o3 = t3.strideDepth, a3 = t3.strideHeight, i3 = t3.strideWidth, s3 = t3.dilationDepth, u3 = t3.dilationHeight, c3 = t3.dilationWidth, l3 = t3.filterDepth, h3 = t3.filterHeight, f3 = t3.filterWidth, d3 = 4 * Math.floor(t3.inChannels / 4), p3 = t3.inChannels % 4;
  this.userCode = "\n      const ivec3 strides = ivec3(" + o3 + ", " + a3 + ", " + i3 + ");\n      const ivec3 pads = ivec3(" + e3 + ", " + n3 + ", " + r3 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + l3 + "; wF++) {\n          int xF = xFCorner + wF * " + s3 + ";\n\n          if (xF < 0 || xF >= " + t3.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h3 + "; wR++) {\n            int xR = xRCorner + wR * " + u3 + ";\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + f3 + "; wC++) {\n              int xC = xCCorner + wC * " + c3 + ";\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + d3 + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === p3) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + d3 + ") *\n                  getW(wF, wR, wC, " + d3 + ", d2);\n              } else if (" + (2 === p3) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + d3 + "),\n                  getX(batch, xF, xR, xC, " + d3 + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + d3 + ", d2),\n                  getW(wF, wR, wC, " + d3 + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === p3) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + d3 + "),\n                  getX(batch, xF, xR, xC, " + d3 + " + 1),\n                  getX(batch, xF, xR, xC, " + d3 + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + d3 + ", d2),\n                  getW(wF, wR, wC, " + d3 + " + 1, d2),\n                  getW(wF, wR, wC, " + d3 + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var zi2 = function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = null), void 0 === r3 && (r3 = false), this.variableNames = ["x", "W"], this.outputShape = t3.outShape;
  var o3 = t3.inHeight, a3 = t3.inWidth, i3 = t3.padInfo.top, s3 = t3.padInfo.left, u3 = t3.strideHeight, c3 = t3.strideWidth, l3 = t3.dilationHeight, h3 = t3.dilationWidth, f3 = t3.filterHeight, d3 = t3.filterWidth, p3 = t3.outChannels / t3.inChannels, v2 = "", g2 = "";
  n3 && (v2 = r3 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n3 + "\n        }" : "\n          float activation(float x) {\n            " + n3 + "\n          }\n        ", g2 = "result = activation(result);");
  var m3 = e3 ? "result += getBiasAtOutCoords();" : "";
  e3 && this.variableNames.push("bias"), r3 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + v2 + "\n\n      const ivec2 strides = ivec2(" + u3 + ", " + c3 + ");\n      const ivec2 pads = ivec2(" + i3 + ", " + s3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + p3 + ";\n        int q = d2 - d1 * " + p3 + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + f3 + "; wR++) {\n          int xR = xRCorner + wR * " + l3 + ";\n\n          if (xR < 0 || xR >= " + o3 + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + d3 + "; wC++) {\n            int xC = xCCorner + wC * " + h3 + ";\n\n            if (xC < 0 || xC >= " + a3 + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " + m3 + "\n        " + g2 + "\n        setOutput(result);\n      }\n    ";
};
var Gi2 = function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = false), void 0 === n3 && (n3 = null), void 0 === r3 && (r3 = false), this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3.outShape;
  for (var o3 = t3.inHeight, a3 = t3.inWidth, i3 = t3.padInfo.top, s3 = t3.padInfo.left, u3 = t3.strideHeight, c3 = t3.strideWidth, l3 = t3.dilationHeight, h3 = t3.dilationWidth, f3 = t3.filterHeight, d3 = t3.filterWidth, p3 = d3, v2 = "int xR; int xC; int xCOffset;", g2 = 0; g2 < f3; g2++) for (var m3 = 0; m3 < d3; m3++) v2 += "\n          vec4 xTexelR" + g2 + "C" + 2 * m3 + " = vec4(0.);\n          vec4 wR" + g2 + "C" + m3 + " = vec4(0.);\n          vec4 xR" + g2 + "C" + m3 + " = vec4(0.);";
  for (g2 = 0; g2 < f3; g2++) for (var y3 = 0; y3 < p3; y3++) {
    if (v2 += "\n          xR = xRCorner + " + g2 * l3 + ";\n          xC = xCCorner + " + (m3 = 2 * y3) * h3 + ";\n        ", 1 === c3) {
      if (m3 < d3 && (v2 += s3 % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + o3 + " && xCOffset >= 0 && xCOffset < " + a3 + ") {\n                  xTexelR" + g2 + "C" + m3 + " = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + a3 + ") {\n                    xTexelR" + g2 + "C" + m3 + ".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR" + g2 + "C" + m3 + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + o3 + " && xCOffset >= 0 && xCOffset < " + a3 + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + a3 + ") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR" + g2 + "C" + m3 + " = vec4(previous.zw, xTexelR" + g2 + "C" + m3 + ".xy);\n                } else {\n                  xR" + g2 + "C" + m3 + " = vec4(0, 0, xTexelR" + g2 + "C" + m3 + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + o3 + " && xC >= 0 && xC < " + a3 + ") {\n                  xTexelR" + g2 + "C" + m3 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + g2 + "C" + m3 + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + m3 + " = xTexelR" + g2 + "C" + m3 + ";\n              ", m3 + 1 < d3)) {
        var x3 = s3 % 2 == 0 ? b2(h3) : h3;
        h3 % 2 == 0 && s3 % 2 == 1 || h3 % 2 != 0 && s3 % 2 != 1 ? (v2 += "\n                  xCOffset = xC + " + s3 % 2 + " + " + x3 + ";\n\n                  if(xR >= 0 && xR < " + o3 + " &&\n                    xCOffset >= 0 && xCOffset < " + a3 + ") {\n                    xTexelR" + g2 + "C" + (m3 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", h3 > 1 && (v2 += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + o3 + " &&\n                      xCOffset >= 0 && xCOffset < " + a3 + ") {\n                      xTexelR" + g2 + "C" + m3 + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + g2 + "C" + m3 + " = vec4(0.);\n                    }\n                  "), v2 += "\n                  xR" + g2 + "C" + (m3 + 1) + " = vec4(\n                    xTexelR" + g2 + "C" + m3 + ".zw, xTexelR" + g2 + "C" + (m3 + 2) + ".xy);\n                ") : v2 += "\n                  xCOffset = xC + " + x3 + ";\n\n                  if(xR >= 0 && xR < " + o3 + " &&\n                    xCOffset >= 0 && xCOffset < " + a3 + ") {\n                    xTexelR" + g2 + "C" + (m3 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + g2 + "C" + (m3 + 1) + " = xTexelR" + g2 + "C" + (m3 + 2) + ";\n                ";
      }
    } else m3 < d3 && (v2 += "\n              if(xR >= 0 && xR < " + o3 + ") {\n            ", s3 % 2 == 1 ? (v2 += "\n                xCOffset = xC + 1 - " + c3 + ";\n                if(xCOffset >= 0 && xCOffset < " + a3 + ") {\n                  xTexelR" + g2 + "C" + m3 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + g2 + "C" + m3 + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + a3 + ") {\n                  xTexelR" + g2 + "C" + (m3 + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + g2 + "C" + (m3 + 2) + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + m3 + " = vec4(\n                  xTexelR" + g2 + "C" + m3 + ".zw, xTexelR" + g2 + "C" + (m3 + 2) + ".zw);\n              ", m3 + 1 < d3 && (v2 += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + c3 + ";\n                  if(xCOffset >= 0 && xCOffset < " + a3 + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + g2 + "C" + (m3 + 1) + " = vec4(xTexelR" + g2 + "C" + (m3 + 2) + ".xy, final.xy);\n                ")) : (v2 += "\n                if(xC >= 0 && xC < " + a3 + ") {\n                  xTexelR" + g2 + "C" + m3 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + g2 + "C" + m3 + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + c3 + ";\n                if(xCOffset >= 0 && xCOffset < " + a3 + ") {\n                  xTexelR" + g2 + "C" + (m3 + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + g2 + "C" + (m3 + 2) + " = vec4(0.);\n                }\n\n                xR" + g2 + "C" + m3 + " = vec4(\n                  xTexelR" + g2 + "C" + m3 + ".xy, xTexelR" + g2 + "C" + (m3 + 2) + ".xy);\n              ", m3 + 1 < d3 && (v2 += "\n                  xR" + g2 + "C" + (m3 + 1) + " = vec4(\n                    xTexelR" + g2 + "C" + m3 + ".zw, xTexelR" + g2 + "C" + (m3 + 2) + ".zw);\n                ")), v2 += "}");
    m3 < d3 && (v2 += "\n            vec4 wTexelR" + g2 + "C" + m3 + " = getW(" + g2 + ", " + m3 + ", d1, q);\n            wR" + g2 + "C" + m3 + " = vec4(wTexelR" + g2 + "C" + m3 + ".xz, wTexelR" + g2 + "C" + m3 + ".xz);\n          ", m3 + 1 < d3 && (v2 += "\n              vec4 wTexelR" + g2 + "C" + (m3 + 1) + " = getW(" + g2 + ", " + (m3 + 1) + ", d1, q);\n              wR" + g2 + "C" + (m3 + 1) + " =\n                vec4(wTexelR" + g2 + "C" + (m3 + 1) + ".xz, wTexelR" + g2 + "C" + (m3 + 1) + ".xz);"));
  }
  for (g2 = 0; g2 < f3; g2++) for (m3 = 0; m3 < d3; m3++) v2 += "dotProd += xR" + g2 + "C" + m3 + " * wR" + g2 + "C" + m3 + ";";
  var w3 = "", C3 = "";
  n3 && (w3 = r3 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + n3 + "\n        }" : "vec4 activation(vec4 x) {\n          " + n3 + "\n        }", C3 = "result = activation(result);");
  var E3 = e3 ? "result += getBiasAtOutCoords();" : "";
  e3 && this.variableNames.push("bias"), r3 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + w3 + "\n\n      const ivec2 strides = ivec2(" + u3 + ", " + c3 + ");\n      const ivec2 pads = ivec2(" + i3 + ", " + s3 + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " + v2 + "\n\n        vec4 result = dotProd;\n        " + E3 + "\n        " + C3 + "\n        setOutput(result);\n      }\n    ";
};
var Hi2 = function(t3, e3, n3, r3, o3) {
  this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
  var a3 = t3[0], i3 = t3[1], s3 = t3[2], u3 = t3[3], c3 = e3[0], l3 = n3[0], h3 = n3[1];
  this.outputShape = [c3, l3, h3, u3];
  var f3 = "bilinear" === r3 ? 1 : 0, d3 = [i3 - 1 + ".0", s3 - 1 + ".0"], p3 = d3[0], v2 = d3[1], g2 = l3 > 1 ? ["" + (i3 - 1) / (l3 - 1), "(y2-y1) * height_ratio", "y1*" + p3 + " + float(y)*(height_scale)"] : ["0.0", "0.0", "0.5 * (y1+y2) * " + p3], m3 = g2[0], y3 = g2[1], x3 = g2[2], b3 = h3 > 1 ? ["" + (s3 - 1) / (h3 - 1), "(x2-x1) * width_ratio", "x1*" + v2 + " + float(x)*(width_scale)"] : ["0.0", "0.0", "0.5 * (x1+x2) * " + v2], w3 = b3[0], C3 = b3[1], E3 = b3[2];
  this.userCode = "\n      const float height_ratio = float(" + m3 + ");\n      const float width_ratio = float(" + w3 + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + a3 + ") {\n          return;\n        }\n\n        float height_scale = " + y3 + ";\n        float width_scale = " + C3 + ";\n\n        float in_y = " + x3 + ";\n        if( in_y < 0.0 || in_y > " + p3 + " ) {\n          setOutput(float(" + o3 + "));\n          return;\n        }\n        float in_x = " + E3 + ";\n        if( in_x < 0.0 || in_x > " + v2 + " ) {\n          setOutput(float(" + o3 + "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" + f3 + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
};
var qi2 = function(t3, e3, n3) {
  this.variableNames = ["x"], this.outputShape = t3;
  var r3 = t3.length, o3 = t3[t3.length - 1], a3 = n3 ? "<" : ">";
  this.userCode = "\n      int getIndex(int i) {\n        " + (n3 ? "return " + o3 + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + ui2(r3) + " coords = getOutputCoords();\n        int end = " + Ki2(r3, "coords") + ";\n        float val = 0.0;\n        for (int i = " + o3 + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + a3 + " end) {\n            continue;\n          }\n          if (idx == end && " + e3 + ") {\n            continue;\n          }\n          " + Ki2(r3, "coords") + " = idx;\n          val += getX(" + function(t4, e4) {
    if (1 === t4) return "" + e4;
    if (2 === t4) return e4 + ".x, " + e4 + ".y";
    if (3 === t4) return e4 + ".x, " + e4 + ".y, " + e4 + ".z";
    if (4 === t4) return e4 + ".x, " + e4 + ".y, " + e4 + ".z, " + e4 + ".w";
    throw Error("Cumulative sum for rank " + t4 + " is not yet supported");
  }(r3, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
};
function Ki2(t3, e3) {
  if (1 === t3) return "" + e3;
  if (2 === t3) return e3 + ".y";
  if (3 === t3) return e3 + ".z";
  if (4 === t3) return e3 + ".w";
  throw Error("Cumulative sum for rank " + t3 + " is not yet supported");
}
var ji2 = function(t3) {
  this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = Vt2.DENSE;
  var e3 = Yt2(t3), n3 = Ya2();
  this.outputShape = t3, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + $a2(["r", "c", "d"], t3) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e3[0] + ", " + e3[1] + "));\n        int index = 4 * (resTexRC.x * " + e3[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " + n3.output + " = result;\n      }\n    ";
};
var Xi2 = function(t3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = Vt2.DENSE;
  var e3 = Yt2(t3), n3 = Ya2();
  this.outputShape = t3, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + $a2(["r", "c", "d"], t3) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e3[0] + ", " + e3[1] + "));\n        int index = 4 * (resTexRC.x * " + e3[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " + n3.output + " = result;\n      }\n    ";
};
var Yi2 = function() {
  function t3(t4, e3, n3) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t4, this.blockSize = e3, this.dataFormat = n3, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + e3 + ";\n      int offset_h = imod(h, " + e3 + ");\n      int in_w = w / " + e3 + ";\n      int offset_w = imod(w, " + e3 + ");\n      int offset_d = (offset_h * " + e3 + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
  }
  return t3.prototype.getHeightCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
  }, t3.prototype.getWidthCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
  }, t3.prototype.getDepthCoordString = function() {
    return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
  }, t3.prototype.getOutputDepthSize = function() {
    return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
  }, t3.prototype.getInputSamplingString = function() {
    return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }, t3;
}();
var $i2 = function(t3) {
  this.variableNames = ["X"], this.outputShape = [t3, t3], this.userCode = "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ";
};
var Qi2 = function(t3) {
  this.variableNames = ["A"], this.outTexUsage = zt2.DOWNLOAD;
  var e3 = Ya2();
  this.outputShape = t3, this.userCode = "\n      " + Ja2 + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + e3.output + " = encode_float(x);\n      }\n    ";
};
var Ji2 = function(t3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = zt2.DOWNLOAD;
  var e3 = Ya2();
  this.outputShape = t3, this.userCode = "\n      " + Ja2 + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " + e3.output + " = encode_float(x);\n      }\n    ";
};
var Zi2 = function(t3, e3, n3) {
  void 0 === n3 && (n3 = false), this.variableNames = ["A"];
  var r3 = Ya2(), o3 = e3[0], a3 = e3[1];
  this.outputShape = t3;
  var i3 = "result";
  n3 && (i3 = "floor(result * 255. + 0.5)"), this.userCode = "\n      " + Qa2(t3) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / " + a3 + ";\n        int c = imod(flatIndex, " + a3 + ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" + a3 + ".0, " + o3 + ".0);\n        vec4 values = " + r3.texture2D + "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " + r3.output + " = vec4(" + i3 + ", 0., 0., 0.);\n      }\n    ";
};
var ts2 = function(t3, e3, n3) {
  void 0 === n3 && (n3 = false), this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
  var r3 = Ya2(), o3 = e3[0], a3 = e3[1];
  this.outputShape = t3;
  var i3 = "", s3 = "result";
  n3 && (s3 = "floor(result * 255. + 0.5)");
  for (var u3 = 0; u3 <= 1; u3++) for (var c3 = 0; c3 <= 1; c3++) {
    var l3 = 2 * u3 + c3;
    i3 += "\n          localCoords = coords;\n          if(localCoords[2] + " + c3 + " < " + t3[2] + ") {\n            localCoords[2] += " + c3 + ";\n            if(localCoords[1] + " + u3 + " < " + t3[1] + ") {\n              localCoords[1] += " + u3 + ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " + a3 + ";\n              c = imod(flatIndex, " + a3 + ");\n              uv = (vec2(c, r) + halfCR) / vec2(" + a3 + ".0, " + o3 + ".0);\n              values = " + r3.texture2D + "(A, uv);\n\n              if(offset == 0) {\n                result[" + l3 + "] = values[0];\n              } else if(offset == 1) {\n                result[" + l3 + "] = values[1];\n              } else if(offset == 2) {\n                result[" + l3 + "] = values[2];\n              } else {\n                result[" + l3 + "] = values[3];\n              }\n            }\n          }\n        ";
  }
  this.userCode = "\n      " + Qa2(t3) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        " + i3 + "\n\n        " + r3.output + " = " + s3 + ";\n      }\n    ";
};
var es2 = "return real * expR - imag * expI;";
var ns2 = "return real * expI + imag * expR;";
var rs2 = function(t3, e3, n3) {
  this.variableNames = ["real", "imag"];
  var r3 = e3[1];
  this.outputShape = e3;
  var o3 = n3 ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI, a3 = n3 ? r3 + ".0" : "1.0";
  this.userCode = "\n      const float exponentMultiplier = " + o3 + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + t3 + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + r3 + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + r3 + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + a3 + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
};
var os2 = function() {
  function t3(t4, e3) {
    this.outputShape = [], this.variableNames = ["x"], this.outputShape = t4, this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    return function(n3, r3) {
      null == e3.valueLoc && (e3.valueLoc = n3.getUniformLocationNoThrow(r3, "value")), n3.gl.uniform1f(e3.valueLoc, t4);
    };
  }, t3;
}();
var as2 = function(t3, e3, n3) {
  this.variableNames = ["A", "indices"];
  var r3 = t3.slice();
  r3[n3] = e3, this.outputShape = r3, this.rank = r3.length;
  var o3 = ui2(this.rank), a3 = function(t4, e4) {
    var n4 = t4.length;
    if (n4 > 4) throw Error("Gather for rank " + n4 + " is not yet supported");
    if (1 === n4) return "int(getIndices(resRC))";
    for (var r4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o4 = [], a4 = 0; a4 < t4.length; a4++) a4 === e4 ? o4.push("int(getIndices(" + r4[a4] + "))") : o4.push("" + r4[a4]);
    return o4.join();
  }(t3, n3);
  this.userCode = "\n      void main() {\n        " + o3 + " resRC = getOutputCoords();\n        setOutput(getA(" + a3 + "));\n      }\n    ";
};
var is2 = function(t3, e3, n3) {
  this.sliceDim = t3, this.strides = e3, this.variableNames = ["x", "indices"], this.outputShape = n3;
  var r3 = ui2(e3.length), o3 = ui2(n3.length), a3 = this.sliceDim > 1 ? "strides[j]" : "strides";
  this.userCode = "\n        " + r3 + " strides = " + r3 + "(" + this.strides + ");\n         void main() {\n          " + o3 + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + a3 + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
};
function ss2(t3, e3) {
  var n3 = Ya2();
  return oe2(t3, e3, n3.version + "\n    precision highp float;\n    " + n3.attribute + " vec3 clipSpacePos;\n    " + n3.attribute + " vec2 uv;\n    " + n3.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
}
function us2(t3, e3) {
  return fe2(t3, e3, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
}
function cs2(t3, e3) {
  return de2(t3, e3, new Uint16Array([0, 1, 2, 2, 1, 3]));
}
function ls2(t3, e3, n3, r3, o3, a3, i3) {
  ve2(n3, r3);
  var s3 = pe2(t3, e3), u3 = t3.TEXTURE_2D;
  return Jt2(t3, e3, function() {
    return t3.bindTexture(u3, s3);
  }), Jt2(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_WRAP_S, t3.CLAMP_TO_EDGE);
  }), Jt2(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_WRAP_T, t3.CLAMP_TO_EDGE);
  }), Jt2(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_MIN_FILTER, t3.NEAREST);
  }), Jt2(t3, e3, function() {
    return t3.texParameteri(u3, t3.TEXTURE_MAG_FILTER, t3.NEAREST);
  }), Jt2(t3, e3, function() {
    return t3.texImage2D(u3, 0, o3, n3, r3, 0, a3, i3, null);
  }), Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  }), s3;
}
function hs2(t3, e3, n3, r3, o3) {
  var a3 = Xt2(n3, r3);
  return ls2(t3, e3, a3[0], a3[1], o3.internalFormatFloat, o3.textureFormatFloat, t3.FLOAT);
}
function fs2(t3, e3, n3, r3, o3) {
  var a3 = Xt2(n3, r3);
  return ls2(t3, e3, a3[0], a3[1], o3.internalFormatHalfFloat, o3.textureFormatFloat, o3.textureTypeHalfFloat);
}
function ds2(t3, e3, n3, r3, o3) {
  var a3 = Xt2(n3, r3);
  return ls2(t3, e3, a3[0], a3[1], t3.RGBA, t3.RGBA, t3.UNSIGNED_BYTE);
}
function ps2(t3, e3, n3, r3, o3) {
  var a3 = $t2(n3, r3);
  return ls2(t3, e3, a3[0], a3[1], o3.internalFormatPackedFloat, t3.RGBA, t3.FLOAT);
}
function vs2(t3, e3, n3, r3, o3) {
  var a3 = $t2(n3, r3);
  return ls2(t3, e3, a3[0], a3[1], o3.internalFormatPackedHalfFloat, t3.RGBA, o3.textureTypeHalfFloat);
}
function gs2(t3, e3, n3, r3) {
  return Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.ARRAY_BUFFER, r3);
  }), me2(t3, e3, n3, "clipSpacePos", r3, 3, 20, 0) && me2(t3, e3, n3, "uv", r3, 2, 20, 12);
}
function ms2(t3, e3, n3, r3, o3, a3, i3) {
  var s3, u3, c3;
  Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  }), a3 instanceof Uint8Array ? (s3 = new Uint8Array(r3 * o3 * 4), u3 = t3.UNSIGNED_BYTE, c3 = t3.RGBA) : (s3 = new Float32Array(r3 * o3 * 4), u3 = t3.FLOAT, c3 = i3.internalFormatPackedFloat), s3.set(a3), Jt2(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, c3, r3, o3, 0, t3.RGBA, u3, s3);
  }), Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}
function ys2(t3, e3, n3, r3) {
  Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, n3);
  }), r3.data instanceof Uint8Array ? Jt2(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, t3.RGBA, r3.width, r3.height, 0, t3.RGBA, t3.UNSIGNED_BYTE, r3.data);
  }) : Jt2(t3, e3, function() {
    return t3.texImage2D(t3.TEXTURE_2D, 0, t3.RGBA, t3.RGBA, t3.UNSIGNED_BYTE, r3);
  }), Jt2(t3, e3, function() {
    return t3.bindTexture(t3.TEXTURE_2D, null);
  });
}
function xs2(t3, e3, n3, r3, o3) {
  var a3 = t3.createBuffer();
  Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.PIXEL_PACK_BUFFER, a3);
  });
  var i3 = 16 * n3 * r3;
  return Jt2(t3, e3, function() {
    return t3.bufferData(t3.PIXEL_PACK_BUFFER, i3, t3.STREAM_READ);
  }), Jt2(t3, e3, function() {
    return t3.readPixels(0, 0, r3, n3, t3.RGBA, t3.FLOAT, 0);
  }), Jt2(t3, e3, function() {
    return t3.bindBuffer(t3.PIXEL_PACK_BUFFER, null);
  }), a3;
}
function bs2(t3, e3, n3) {
  var r3 = t3, o3 = new Float32Array(n3);
  return r3.bindBuffer(r3.PIXEL_PACK_BUFFER, e3), r3.getBufferSubData(r3.PIXEL_PACK_BUFFER, 0, o3), r3.bindBuffer(r3.PIXEL_PACK_BUFFER, null), o3;
}
function ws2(t3, e3, n3, r3, o3) {
  var a3 = Xt2(n3, r3), i3 = a3[0], s3 = a3[1], u3 = new Uint8Array(n3 * r3 * 4);
  return Jt2(t3, e3, function() {
    return t3.readPixels(0, 0, i3, s3, o3.downloadTextureFormat, t3.UNSIGNED_BYTE, u3);
  }), new Float32Array(u3.buffer);
}
function Cs2(t3, e3, n3, r3, o3, a3, i3, s3) {
  var u3 = t3, c3 = new Float32Array(function(t4, e4) {
    var n4 = $t2(t4, e4);
    return n4[0] * n4[1] * 4;
  }(a3, i3));
  return u3.bindBuffer(u3.PIXEL_PACK_BUFFER, e3), u3.getBufferSubData(u3.PIXEL_PACK_BUFFER, 0, c3), u3.bindBuffer(u3.PIXEL_PACK_BUFFER, null), c3;
}
function Es2(t3, e3, n3, r3) {
  var o3 = new Float32Array(n3 * r3 * 4);
  return Jt2(t3, e3, function() {
    return t3.readPixels(0, 0, r3, n3, t3.RGBA, t3.FLOAT, o3);
  }), o3;
}
var Rs2 = Object.freeze({ createVertexShader: ss2, createVertexBuffer: us2, createIndexBuffer: cs2, createFloat32MatrixTexture: hs2, createFloat16MatrixTexture: fs2, createUnsignedBytesMatrixTexture: ds2, createPackedMatrixTexture: ps2, createFloat16PackedMatrixTexture: vs2, bindVertexProgramAttributeStreams: gs2, uploadDenseMatrixToTexture: ms2, uploadPixelDataToTexture: ys2, createBufferFromOutputTexture: xs2, downloadFloat32MatrixFromBuffer: bs2, downloadByteEncodedFloatMatrixFromOutputTexture: ws2, downloadPackedMatrixFromBuffer: Cs2, downloadMatrixFromPackedOutputTexture: Es2 });
var Is2 = function() {
  function t3(t4) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.vertexAttrsAreBound = false, this.itemsToPoll = [];
    var e3 = i2().getNumber("WEBGL_VERSION");
    null != t4 ? (this.gl = t4, Kt2(e3, t4)) : this.gl = jt2(e3);
    var n3 = "WEBGL_color_buffer_float";
    if (1 === i2().getNumber("WEBGL_VERSION")) {
      if (this.textureFloatExtension = re2(this.gl, this.debug, "OES_texture_float"), Pe2(this.gl, "OES_texture_half_float")) this.textureHalfFloatExtension = re2(this.gl, this.debug, "OES_texture_half_float");
      else if (i2().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(n3), Pe2(this.gl, "EXT_color_buffer_half_float")) this.colorBufferHalfFloatExtension = re2(this.gl, this.debug, "EXT_color_buffer_half_float");
      else if (i2().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (n3 = "EXT_color_buffer_float", Pe2(this.gl, n3)) this.colorBufferFloatExtension = this.gl.getExtension(n3);
    else {
      if (!Pe2(this.gl, "EXT_color_buffer_half_float")) throw new Error("GL context does not support color renderable floats");
      this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float");
    }
    this.vertexBuffer = us2(this.gl, this.debug), this.indexBuffer = cs2(this.gl, this.debug), this.framebuffer = ge2(this.gl, this.debug), this.textureConfig = Qt2(this.gl, this.textureHalfFloatExtension);
  }
  return Object.defineProperty(t3.prototype, "debug", { get: function() {
    return i2().getBool("DEBUG");
  }, enumerable: true, configurable: true }), t3.prototype.dispose = function() {
    var t4 = this;
    if (!this.disposed) {
      null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
      var e3 = this.gl;
      Jt2(e3, this.debug, function() {
        return e3.finish();
      }), Jt2(e3, this.debug, function() {
        return e3.bindFramebuffer(e3.FRAMEBUFFER, null);
      }), Jt2(e3, this.debug, function() {
        return e3.deleteFramebuffer(t4.framebuffer);
      }), Jt2(e3, this.debug, function() {
        return e3.bindBuffer(e3.ARRAY_BUFFER, null);
      }), Jt2(e3, this.debug, function() {
        return e3.bindBuffer(e3.ELEMENT_ARRAY_BUFFER, null);
      }), Jt2(e3, this.debug, function() {
        return e3.deleteBuffer(t4.indexBuffer);
      }), this.disposed = true;
    }
  }, t3.prototype.createFloat32MatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), hs2(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createFloat16MatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), fs2(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createUnsignedBytesMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), ds2(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.uploadPixelDataToTexture = function(t4, e3) {
    this.throwIfDisposed(), ys2(this.gl, this.debug, t4, e3);
  }, t3.prototype.uploadDenseMatrixToTexture = function(t4, e3, n3, r3) {
    this.throwIfDisposed(), ms2(this.gl, this.debug, t4, e3, n3, r3, this.textureConfig);
  }, t3.prototype.createFloat16PackedMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), vs2(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.createPackedMatrixTexture = function(t4, e3) {
    return this.throwIfDisposed(), ps2(this.gl, this.debug, t4, e3, this.textureConfig);
  }, t3.prototype.deleteMatrixTexture = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), this.outputTexture === t4 && (Ee2(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Jt2(this.gl, this.debug, function() {
      return e3.gl.deleteTexture(t4);
    });
  }, t3.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t4, e3, n3) {
    var r3 = this;
    return this.downloadMatrixDriver(t4, function() {
      return ws2(r3.gl, r3.debug, e3, n3, r3.textureConfig);
    });
  }, t3.prototype.downloadPackedMatrixFromBuffer = function(t4, e3, n3, r3, o3, a3) {
    return Cs2(this.gl, t4, 0, 0, 0, o3, a3, this.textureConfig);
  }, t3.prototype.downloadFloat32MatrixFromBuffer = function(t4, e3) {
    return bs2(this.gl, t4, e3);
  }, t3.prototype.createBufferFromTexture = function(t4, e3, n3) {
    this.bindTextureToFrameBuffer(t4);
    var r3 = xs2(this.gl, this.debug, e3, n3, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r3;
  }, t3.prototype.createAndWaitForFence = function() {
    var t4 = this.createFence(this.gl);
    return this.pollFence(t4);
  }, t3.prototype.createFence = function(t4) {
    var e3, n3, r3 = this;
    if (i2().getBool("WEBGL_FENCE_API_ENABLED")) {
      var o3 = t4, a3 = o3.fenceSync(o3.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t4.flush(), n3 = function() {
        var t5 = o3.clientWaitSync(a3, 0, 0);
        return t5 === o3.ALREADY_SIGNALED || t5 === o3.CONDITION_SATISFIED;
      }, e3 = a3;
    } else i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e3 = this.beginQuery(), this.endQuery(), n3 = function() {
      return r3.isQueryAvailable(e3, i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
    }) : n3 = function() {
      return true;
    };
    return { query: e3, isFencePassed: n3 };
  }, t3.prototype.downloadMatrixFromPackedTexture = function(t4, e3, n3) {
    var r3 = this;
    return this.downloadMatrixDriver(t4, function() {
      return Es2(r3.gl, r3.debug, e3, n3);
    });
  }, t3.prototype.createProgram = function(t4) {
    this.throwIfDisposed();
    var e3 = this.gl, n3 = ae2(e3, this.debug, t4), r3 = ss2(e3, this.debug), o3 = ce2(e3, this.debug);
    return Jt2(e3, this.debug, function() {
      return e3.attachShader(o3, r3);
    }), Jt2(e3, this.debug, function() {
      return e3.attachShader(o3, n3);
    }), le2(e3, this.debug, o3), this.debug && he2(e3, this.debug, o3), this.vertexAttrsAreBound || (this.setProgram(o3), this.vertexAttrsAreBound = gs2(e3, this.debug, this.program, this.vertexBuffer)), o3;
  }, t3.prototype.deleteProgram = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), t4 === this.program && (this.program = null), null != t4 && Jt2(this.gl, this.debug, function() {
      return e3.gl.deleteProgram(t4);
    });
  }, t3.prototype.setProgram = function(t4) {
    var e3 = this;
    this.throwIfDisposed(), this.program = t4, null != this.program && this.debug && he2(this.gl, this.debug, this.program), Jt2(this.gl, this.debug, function() {
      return e3.gl.useProgram(t4);
    });
  }, t3.prototype.getUniformLocation = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = true), this.throwIfDisposed(), n3 ? xe2(this.gl, this.debug, t4, e3) : be2(this.gl, t4, e3);
  }, t3.prototype.getAttributeLocation = function(t4, e3) {
    var n3 = this;
    return this.throwIfDisposed(), Jt2(this.gl, this.debug, function() {
      return n3.gl.getAttribLocation(t4, e3);
    });
  }, t3.prototype.getUniformLocationNoThrow = function(t4, e3) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t4, e3);
  }, t3.prototype.setInputMatrixTexture = function(t4, e3, n3) {
    this.throwIfDisposed(), this.throwIfNoProgram(), we2(this.gl, this.debug, this.program, t4, e3, n3);
  }, t3.prototype.setOutputMatrixTexture = function(t4, e3, n3) {
    this.setOutputMatrixTextureDriver(t4, n3, e3);
  }, t3.prototype.setOutputPackedMatrixTexture = function(t4, e3, n3) {
    this.throwIfDisposed();
    var r3 = $t2(e3, n3), o3 = r3[0], a3 = r3[1];
    this.setOutputMatrixTextureDriver(t4, o3, a3);
  }, t3.prototype.setOutputMatrixWriteRegion = function(t4, e3, n3, r3) {
    this.setOutputMatrixWriteRegionDriver(n3, t4, r3, e3);
  }, t3.prototype.setOutputPackedMatrixWriteRegion = function(t4, e3, n3, r3) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }, t3.prototype.debugValidate = function() {
    null != this.program && he2(this.gl, this.debug, this.program), Re2(this.gl);
  }, t3.prototype.executeProgram = function() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    var t4 = this.gl;
    this.debug && this.debugValidate(), Jt2(t4, this.debug, function() {
      return t4.drawElements(t4.TRIANGLES, 6, t4.UNSIGNED_SHORT, 0);
    });
  }, t3.prototype.blockUntilAllProgramsCompleted = function() {
    var t4 = this;
    this.throwIfDisposed(), Jt2(this.gl, this.debug, function() {
      return t4.gl.finish();
    });
  }, t3.prototype.getQueryTimerExtension = function() {
    return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = re2(this.gl, this.debug, 2 === i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }, t3.prototype.getQueryTimerExtensionWebGL2 = function() {
    return this.getQueryTimerExtension();
  }, t3.prototype.getQueryTimerExtensionWebGL1 = function() {
    return this.getQueryTimerExtension();
  }, t3.prototype.beginQuery = function() {
    if (2 === i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
      var t4 = this.gl, e3 = this.getQueryTimerExtensionWebGL2(), n3 = t4.createQuery();
      return t4.beginQuery(e3.TIME_ELAPSED_EXT, n3), n3;
    }
    var r3 = this.getQueryTimerExtensionWebGL1(), o3 = r3.createQueryEXT();
    return r3.beginQueryEXT(r3.TIME_ELAPSED_EXT, o3), o3;
  }, t3.prototype.endQuery = function() {
    if (2 !== i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
      var t4 = this.getQueryTimerExtensionWebGL1();
      t4.endQueryEXT(t4.TIME_ELAPSED_EXT);
    } else {
      var e3 = this.gl, n3 = this.getQueryTimerExtensionWebGL2();
      e3.endQuery(n3.TIME_ELAPSED_EXT);
    }
  }, t3.prototype.waitForQueryAndGetTime = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3 = this;
      return r2(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, F2(function() {
              return e3.disposed || e3.isQueryAvailable(t4, i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
            })];
          case 1:
            return n3.sent(), [2, this.getQueryTime(t4, i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))];
        }
      });
    });
  }, t3.prototype.getQueryTime = function(t4, e3) {
    if (0 === e3) return null;
    if (2 === e3) {
      var n3 = this.gl;
      return n3.getQueryParameter(t4, n3.QUERY_RESULT) / 1e6;
    }
    var r3 = this.getQueryTimerExtensionWebGL1();
    return r3.getQueryObjectEXT(t4, r3.QUERY_RESULT_EXT) / 1e6;
  }, t3.prototype.isQueryAvailable = function(t4, e3) {
    if (0 === e3) return true;
    if (2 === e3) {
      var n3 = this.gl, r3 = this.getQueryTimerExtensionWebGL2(), o3 = n3.getQueryParameter(t4, n3.QUERY_RESULT_AVAILABLE);
      return null == this.disjoint && (this.disjoint = this.gl.getParameter(r3.GPU_DISJOINT_EXT)), o3 && !this.disjoint;
    }
    o3 = (r3 = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t4, r3.QUERY_RESULT_AVAILABLE_EXT);
    return null == this.disjoint && (this.disjoint = this.gl.getParameter(r3.GPU_DISJOINT_EXT)), o3 && !this.disjoint;
  }, t3.prototype.pollFence = function(t4) {
    var e3 = this;
    return new Promise(function(n3) {
      e3.addItemToPoll(function() {
        return t4.isFencePassed();
      }, function() {
        return n3();
      });
    });
  }, t3.prototype.pollItems = function() {
    for (var t4 = function(t5) {
      for (var e4 = 0; e4 < t5.length; ++e4) {
        if (!t5[e4]()) break;
      }
      return e4 - 1;
    }(this.itemsToPoll.map(function(t5) {
      return t5.isDoneFn;
    })), e3 = 0; e3 <= t4; ++e3) {
      (0, this.itemsToPoll[e3].resolveFn)();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t4 + 1);
  }, t3.prototype.addItemToPoll = function(t4, e3) {
    var n3 = this;
    this.itemsToPoll.push({ isDoneFn: t4, resolveFn: e3 }), this.itemsToPoll.length > 1 || F2(function() {
      return n3.pollItems(), 0 === n3.itemsToPoll.length;
    });
  }, t3.prototype.bindTextureToFrameBuffer = function(t4) {
    this.throwIfDisposed(), Ce2(this.gl, this.debug, t4, this.framebuffer), this.debug && Re2(this.gl);
  }, t3.prototype.unbindTextureToFrameBuffer = function() {
    null != this.outputTexture ? (Ce2(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && Re2(this.gl)) : Ee2(this.gl, this.debug, this.framebuffer);
  }, t3.prototype.downloadMatrixDriver = function(t4, e3) {
    this.bindTextureToFrameBuffer(t4);
    var n3 = e3();
    return this.unbindTextureToFrameBuffer(), n3;
  }, t3.prototype.setOutputMatrixTextureDriver = function(t4, e3, n3) {
    this.throwIfDisposed();
    var r3 = this.gl;
    Ce2(r3, this.debug, t4, this.framebuffer), this.debug && Re2(r3), this.outputTexture = t4, Jt2(r3, this.debug, function() {
      return r3.viewport(0, 0, e3, n3);
    }), Jt2(r3, this.debug, function() {
      return r3.scissor(0, 0, e3, n3);
    });
  }, t3.prototype.setOutputMatrixWriteRegionDriver = function(t4, e3, n3, r3) {
    var o3 = this;
    this.throwIfDisposed(), Jt2(this.gl, this.debug, function() {
      return o3.gl.scissor(t4, e3, n3, r3);
    });
  }, t3.prototype.throwIfDisposed = function() {
    if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
  }, t3.prototype.throwIfNoProgram = function() {
    if (null == this.program) throw new Error("No GPU program is currently set.");
  }, t3;
}();
function ks2(t3, e3) {
  if (t3.length !== e3.length) throw Error("Binary was compiled with " + t3.length + " inputs, but was executed with " + e3.length + " inputs");
  t3.forEach(function(t4, n3) {
    var r3 = t4.logicalShape, o3 = e3[n3], a3 = o3.shape;
    if (!S2(r3, a3)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r3 + " and " + a3 + " must match");
    if (!t4.isUniform || !o3.isUniform) {
      var i3 = t4.texShape, s3 = o3.isUniform ? null : o3.texData.texShape;
      if (!S2(i3, s3)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i3 + " and " + s3 + " must match");
    }
  });
}
var Ss2 = function(t3, e3, n3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3;
  for (var r3 = n3.filterWidth, o3 = n3.inChannels, a3 = n3.strideWidth, i3 = n3.strideHeight, s3 = n3.padInfo, u3 = n3.outWidth, c3 = n3.dilationWidth, l3 = n3.dilationHeight, h3 = n3.dataFormat, f3 = s3.left, d3 = s3.top, p3 = o3 * r3, v2 = Ya2(), g2 = "channelsLast" === h3, m3 = g2 ? 0 : 1, y3 = g2 ? 1 : 2, x3 = "", b3 = 0; b3 <= 1; b3++) for (var w3 = 0; w3 <= 1; w3++) x3 += "\n          blockIndex = rc.y + " + w3 + ";\n          pos = rc.x + " + b3 + ";\n\n          if(blockIndex < " + t3[1] + " && pos < " + t3[0] + ") {\n            offsetY = int(blockIndex / (" + u3 + ")) * " + i3 + " - " + d3 + ";\n            d0 = offsetY + " + l3 + " * (pos / " + p3 + ");\n\n            if(d0 < " + e3[m3] + " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " + u3 + ".) * " + a3 + ". - " + f3 + ".);\n              d1 = offsetX + " + c3 + " * (int(mod(float(pos), " + p3 + ".) / " + o3 + ".));\n\n              if(d1 < " + e3[y3] + " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " + o3 + ".));\n\n                if (" + g2 + ") {\n                  innerDims = vec2(d1, ch);\n                  result[" + (2 * b3 + w3) + "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" + (2 * b3 + w3) + "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
  this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " + x3 + "\n\n        " + v2.output + " = result;\n      }\n    ";
};
var As2 = function(t3, e3, n3, r3, o3) {
  this.variableNames = ["x"], this.outputShape = [];
  var a3, i3 = e3, s3 = t3[3] - 1;
  this.outputShape = t3;
  var u3 = "float(" + n3 + ") + float(" + r3 + ") * sum";
  a3 = 0.5 === o3 ? "inversesqrt(" + u3 + ")" : 1 === o3 ? "1.0/(" + u3 + ")" : "exp(log(" + u3 + ") * float(-" + o3 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i3 + "; j <= " + i3 + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s3 + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + a3 + ";\n        setOutput(val);\n      }\n    ";
};
var Ts2 = function(t3, e3, n3, r3, o3) {
  this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t3, this.depth = t3[3], this.depthRadius = e3, this.bias = n3, this.alpha = r3, this.beta = o3, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + e3 + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + e3 + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + r3 + ") * norm + float(" + n3 + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + r3 + ")\n                * float(" + o3 + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + o3 + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
};
var Ds2 = function(t3, e3, n3, r3, o3) {
  this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
  var a3, i3 = e3, s3 = t3[3] - 1;
  this.outputShape = t3;
  var u3 = "float(" + n3 + ") + float(" + r3 + ") * sum";
  a3 = 0.5 === o3 ? "inversesqrt(" + u3 + ")" : 1 === o3 ? "1.0/(" + u3 + ")" : "exp(log(" + u3 + ") * float(-" + o3 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " + this.outputShape[3] + ";\n        bool hasNextRow = c < " + this.outputShape[2] + ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " + i3 + ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " + i3 + "; j <= " + i3 + "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" + s3 + "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " + a3 + ";\n        setOutput(result);\n      }\n    ";
};
var Ns2 = function(t3) {
  this.variableNames = ["dy", "maxPos"], this.outputShape = t3.inShape;
  var e3 = t3.strideHeight, n3 = t3.strideWidth, r3 = t3.dilationHeight, o3 = t3.effectiveFilterHeight, a3 = t3.effectiveFilterWidth, i3 = o3 - 1 - t3.padInfo.top, s3 = a3 - 1 - t3.padInfo.left, u3 = o3 * a3 - 1;
  this.userCode = "\n      const ivec2 pads = ivec2(" + i3 + ", " + s3 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + o3 + ";\n          wR += " + r3 + ") {\n          float dyR = float(dyRCorner + wR) / " + e3 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + a3 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + n3 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + u3 + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + a3 + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var Fs2 = function(t3) {
  this.variableNames = ["dy", "maxPos"], this.outputShape = t3.inShape;
  var e3 = t3.strideDepth, n3 = t3.strideHeight, r3 = t3.strideWidth, o3 = t3.dilationDepth, a3 = t3.dilationHeight, i3 = t3.dilationWidth, s3 = t3.effectiveFilterDepth, u3 = t3.effectiveFilterHeight, c3 = t3.effectiveFilterWidth, l3 = s3 - 1 - t3.padInfo.front, h3 = u3 - 1 - t3.padInfo.top, f3 = c3 - 1 - t3.padInfo.left, d3 = s3 * u3 * c3 - 1;
  this.userCode = "\n      const ivec3 pads = ivec3(" + l3 + ", " + h3 + ", " + f3 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + s3 + ";\n           wD += " + o3 + ") {\n          float dyD = float(dyDCorner + wD) / " + e3 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t3.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + u3 + ";\n              wR += " + a3 + ") {\n            float dyR = float(dyRCorner + wR) / " + n3 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t3.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + c3 + ";\n                wC += " + i3 + ") {\n              float dyC = float(dyCCorner + wC) / " + r3 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t3.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " + d3 + " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " + u3 + " * " + c3 + " +\n                  wR * " + c3 + " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
};
var _s2 = function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = false), void 0 === a3 && (a3 = null), void 0 === i3 && (i3 = false), this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e3;
  var s3 = n3 ? t3[1] : t3[2], u3 = Math.ceil(s3 / 2), c3 = n3 ? "i * 2, rc.y" : "rc.y, i * 2", l3 = r3 ? "rc.z, i * 2" : "i * 2, rc.z", h3 = n3 ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], f3 = r3 ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], d3 = "", p3 = "";
  a3 && (d3 = i3 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + a3 + "\n        }" : "vec4 activation(vec4 x) {\n          " + a3 + "\n        }", p3 = "result = activation(result);");
  var v2 = o3 ? "result += getBiasAtOutCoords();" : "";
  o3 && this.variableNames.push("bias"), i3 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + d3 + "\n\n      const float sharedDimension = " + u3 + ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + u3 + "; i++) {\n          vec4 a = getMatrixA(rc.x, " + c3 + ");\n          vec4 b = getMatrixB(rc.x, " + l3 + ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" + h3[0] + " * " + f3[0] + ");\n          result += (" + h3[1] + " * " + f3[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + v2 + "\n\n        " + p3 + "\n\n        setOutput(result);\n      }\n    ";
};
var Os2 = function() {
  function t3(t4, e3, n3) {
    this.variableNames = ["probs"], this.outputShape = [t4, n3], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (e3 - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (e3 - 1) + "));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    return function(n3, r3) {
      null == e3.seedLoc && (e3.seedLoc = n3.getUniformLocation(r3, "seed")), n3.gl.uniform1f(e3.seedLoc, t4);
    };
  }, t3;
}();
var Ms2 = function(t3, e3, n3, r3) {
  this.variableNames = ["indices"], this.outputShape = [t3, e3], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r3 + "), float(" + n3 + "),\n                      float(index == coords.y)));\n      }\n    ";
};
var Bs2 = function(t3) {
  this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = t3;
  var e3 = t3.length;
  if (0 === e3) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
  else {
    var n3 = Xa2("rc", e3), r3 = ui2(e3), o3 = function(t4, e4, n4) {
      if (1 === t4) return "rc > " + e4[0];
      for (var r4 = "", o4 = t4 - 2; o4 < t4; o4++) r4 += n4[o4] + " >= " + e4[o4], o4 < t4 - 1 && (r4 += "||");
      return r4;
    }(e3, t3, n3), a3 = function(t4, e4, n4, r4) {
      if (1 === t4) return "";
      var o4 = r4.slice(-2);
      return "\n    int r = " + o4[0] + ";\n    int c = " + o4[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + e4 + ";\n    bool rEdge = rp1 >= " + n4 + ";\n  ";
    }(e3, t3[t3.length - 1], t3[t3.length - 2], n3), i3 = function(t4, e4) {
      var n4 = t4.length, r4 = function(t5, e5) {
        for (var n5 = [], r5 = 0; r5 <= 1; r5++) for (var o4 = 0; o4 <= 1; o4++) {
          for (var a4 = (0 === r5 ? "r" : "rp1") + ", " + (0 === o4 ? "c" : "cp1"), i4 = 2; i4 < t5; i4++) a4 = e5[e5.length - 1 - i4] + "," + a4;
          n5.push(a4);
        }
        return n5;
      }(n4, e4);
      return 1 === n4 ? "getA(rc),\n            rc + 1 >= " + t4[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + r4[0] + "),\n          cEdge ? 0. : getA(" + r4[1] + "),\n          rEdge ? 0. : getA(" + r4[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r4[3] + ")";
    }(t3, n3);
    this.userCode = "\n        void main() {\n          " + r3 + " rc = getOutputCoords();\n\n          if(" + o3 + ") {\n            setOutput(vec4(0));\n          } else {\n            " + a3 + "\n\n            setOutput(vec4(" + i3 + "));\n          }\n        }\n      ";
  }
};
var Ps2 = function(t3, e3, n3) {
  this.variableNames = ["x"], this.outputShape = e3.map(function(e4, n4) {
    return e4[0] + t3[n4] + e4[1];
  });
  var r3 = t3.length, o3 = ui2(r3), a3 = e3.map(function(t4) {
    return t4[0];
  }).join(","), i3 = e3.map(function(e4, n4) {
    return e4[0] + t3[n4];
  }).join(","), s3 = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r3);
  this.userCode = 1 !== r3 ? "\n      " + o3 + " start = " + o3 + "(" + a3 + ");\n      " + o3 + " end = " + o3 + "(" + i3 + ");\n\n      void main() {\n        " + o3 + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n3 + "));\n        } else {\n          " + o3 + " coords = outC - start;\n          setOutput(getX(" + s3 + "));\n        }\n      }\n    " : "\n        int start = " + a3 + ";\n        int end = " + i3 + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n3 + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
};
var Ls2 = function(t3, e3, n3) {
  this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e3.map(function(e4, n4) {
    return e4[0] + t3[n4] + e4[1];
  });
  for (var r3 = t3.length, o3 = ui2(r3), a3 = e3.map(function(t4) {
    return t4[0];
  }).join(","), i3 = e3.map(function(e4, n4) {
    return e4[0] + t3[n4];
  }).join(","), s3 = Xa2("rc", r3), u3 = Xa2("source", r3), c3 = s3[r3 - 1] + " < " + this.outputShape[r3 - 1], l3 = 1 === r3 ? "source" : "vec2(" + u3.slice(-2).join() + ")", h3 = [o3 + " rc = outputLoc;", s3[r3 - 1] + " += 1;\n       if(" + c3 + ") {\n      ", 1 === r3 ? "" : "}\n       rc = outputLoc;\n       " + s3[r3 - 2] + " += 1;\n       if(" + s3[r3 - 2] + " < " + this.outputShape[r3 - 2] + ") {", 1 === r3 ? "" : "  " + s3[r3 - 1] + " += 1;\n         if(" + c3 + ") {"], f3 = 1 === r3 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", d3 = "", p3 = 0, v2 = 1 === r3 ? 2 : 4; p3 < v2; p3++) d3 += "\n        " + h3[p3] + "\n        if (" + f3 + ") {\n          result[" + p3 + "] = float(" + n3 + ");\n        } else {\n          " + o3 + " source = rc - start;\n          result[" + p3 + "] = getChannel(getX(" + u3.join() + "), " + l3 + ");\n        }\n      ";
  d3 += 1 === r3 ? "} " : "}}", this.userCode = "\n      const " + o3 + " start = " + o3 + "(" + a3 + ");\n      const " + o3 + " end = " + o3 + "(" + i3 + ");\n\n      void main() {\n        " + o3 + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + d3 + "\n        setOutput(result);\n      }\n    ";
};
var Ws2 = function(t3, e3, n3, r3, o3) {
  if (void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = false), this.variableNames = ["x"], "avg" === e3 && n3) throw new Error("Cannot compute positions for average pool.");
  var a3 = t3.filterWidth, i3 = t3.strideHeight, s3 = t3.strideWidth, u3 = t3.dilationHeight, c3 = t3.dilationWidth, l3 = t3.effectiveFilterHeight, h3 = t3.effectiveFilterWidth, f3 = t3.padInfo.top, d3 = t3.padInfo.left;
  this.outputShape = t3.outShape;
  var p3 = "avg" === e3, v2 = "((batch  * " + t3.inHeight + " + xR) * " + t3.inWidth + " + xC) * " + t3.inChannels + " + d", g2 = "(xR * " + t3.inWidth + " + xC) * " + t3.inChannels + " + d", m3 = "0.0";
  if (p3 || (m3 = "-1.0 / 1e-20"), n3) this.userCode = "\n        const ivec2 strides = ivec2(" + i3 + ", " + s3 + ");\n        const ivec2 pads = ivec2(" + f3 + ", " + d3 + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + l3 + ";\n              wR += " + u3 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + h3 + ";\n                wC += " + c3 + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + t3.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = " + (r3 ? o3 ? v2 : g2 : "wR * " + h3 + " + wC") + ";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
  else {
    var y3 = e3 + "(" + e3 + "(" + e3 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
    "avg" === e3 && (y3 = "avgValue / count");
    var x3 = 4 * Math.floor(a3 / 4), b3 = a3 % 4, w3 = "\n      if (" + p3 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
    this.userCode = "\n      const ivec2 strides = ivec2(" + i3 + ", " + s3 + ");\n      const ivec2 pads = ivec2(" + f3 + ", " + d3 + ");\n      const float initializationValue = " + m3 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + t3.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + m3 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + l3 + ";\n            wR += " + u3 + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + t3.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + x3 + "; wC += 4) {\n            int xC = xCCorner + wC * " + c3 + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + c3 + ", d),\n              getValue(batch, xR, xC + 2 * " + c3 + ", d),\n              getValue(batch, xR, xC + 3 * " + c3 + ", d)\n            );\n\n            " + w3 + "\n          }\n\n          int xC = xCCorner + " + x3 + ";\n          if (" + (1 === b3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + w3 + "\n          } else if (" + (2 === b3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + c3 + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + w3 + "\n          } else if (" + (3 === b3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + c3 + ", d),\n              getValue(batch, xR, xC + 2 * " + c3 + ", d),\n              initializationValue\n            );\n\n            " + w3 + "\n          }\n        }\n        setOutput(" + y3 + ");\n      }\n    ";
  }
};
var Us2 = function(t3, e3, n3, r3, o3) {
  if (void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = false), this.variableNames = ["x"], "avg" === e3 && n3) throw new Error("Cannot compute positions for average pool.");
  var a3 = t3.filterWidth, i3 = t3.strideDepth, s3 = t3.strideHeight, u3 = t3.strideWidth, c3 = t3.dilationDepth, l3 = t3.dilationHeight, h3 = t3.dilationWidth, f3 = t3.effectiveFilterDepth, d3 = t3.effectiveFilterHeight, p3 = t3.effectiveFilterWidth, v2 = t3.padInfo.front, g2 = t3.padInfo.top, m3 = t3.padInfo.left;
  this.outputShape = t3.outShape;
  var y3 = "avg" === e3, x3 = "0.0";
  if (y3 || (x3 = "-1.0 / 1e-20"), n3) this.userCode = "\n        const ivec3 strides =\n            ivec3(" + i3 + ", " + s3 + ", " + u3 + ");\n        const ivec3 pads = ivec3(" + v2 + ", " + g2 + ", " + m3 + ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " + f3 + ";\n              wD += " + c3 + ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " + t3.inDepth + ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " + d3 + ";\n                wR += " + l3 + ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " + t3.inHeight + ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " + p3 + ";\n                  wC += " + h3 + ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " + t3.inWidth + ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = " + (r3 ? o3 ? "(((batch * " + t3.inDepth + " + xD) * " + t3.inHeight + " + xR) * " + t3.inWidth + " + xC) * " + t3.inChannels + " + ch" : "((xD * " + t3.inHeight + " + xR) * " + t3.inWidth + " + xC) * " + t3.inChannels + " + ch" : "wD * " + d3 + " * " + p3 + " +\n                      wR * " + p3 + " + wC") + ";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
  else {
    var b3 = e3 + "(" + e3 + "(" + e3 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
    "avg" === e3 && (b3 = "avgValue / count");
    var w3 = 4 * Math.floor(a3 / 4), C3 = a3 % 4, E3 = "\n      if (" + y3 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
    this.userCode = "\n      const ivec3 strides =\n        ivec3(" + i3 + ", " + s3 + ", " + u3 + ");\n      const ivec3 pads = ivec3(" + v2 + ", " + g2 + ", " + m3 + ");\n      const float initializationValue = " + x3 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " + t3.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + x3 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " + f3 + ";\n            wD += " + c3 + ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " + t3.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + d3 + ";\n            wR += " + l3 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t3.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + w3 + "; wC += 4) {\n              int xC = xCCorner + wC * " + h3 + ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + h3 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + h3 + ", ch),\n                getValue(batch, xD, xR, xC + 3 * " + h3 + ", ch)\n              );\n\n              " + E3 + "\n            }\n\n            int xC = xCCorner + " + w3 + ";\n            if (" + (1 === C3) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " + E3 + "\n            } else if (" + (2 === C3) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + h3 + ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " + E3 + "\n            } else if (" + (3 === C3) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + h3 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + h3 + ", ch),\n                initializationValue\n              );\n\n              " + E3 + "\n            }\n          }\n          setOutput(" + b3 + ");\n        }\n      }\n    ";
  }
};
var Vs2 = function(t3, e3) {
  this.variableNames = ["x"];
  var n3 = t3.windowSize, r3 = t3.batchSize, o3 = t3.inSize, a3 = Math.ceil(o3 / n3);
  this.outputShape = [r3, a3];
  var i3 = "0.0", s3 = "";
  "prod" === e3 ? i3 = "1.0" : "min" === e3 ? (i3 = "1.0 / 1e-20", s3 = "min") : "max" === e3 && (i3 = "-1.0 / 1e-20", s3 = "max");
  var u3 = e3 + "(" + e3 + "(" + e3 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
  "sum" === e3 ? u3 = "sumValue" : "prod" === e3 ? u3 = "prodValue" : "all" === e3 ? u3 = "allValue" : "any" === e3 && (u3 = "anyValue");
  var c3 = 4 * Math.floor(n3 / 4), l3 = n3 % 4, h3 = "\n      if (" + ("sum" === e3) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === e3) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + s3 + "(values, minMaxValue);\n      }\n    ", f3 = "vec4";
  "all" === e3 ? (i3 = "1.0", h3 = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", f3 = "bvec4") : "any" === e3 && (i3 = "0.0", h3 = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", f3 = "bvec4");
  var d3 = "";
  o3 % n3 > 0 && (d3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i3 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + d3 + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n3 + ";\n\n        vec4 minMaxValue = vec4(" + i3 + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + c3 + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + f3 + " values = " + f3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + h3 + "\n        }\n\n        int inIdx = inOffset + " + c3 + ";\n        if (" + (1 === l3) + ") {\n          " + f3 + " values = " + f3 + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + h3 + "\n        } else if (" + (2 === l3) + ") {\n          " + f3 + " values = " + f3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + h3 + "\n        } else if (" + (3 === l3) + ") {\n          " + f3 + " values = " + f3 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + h3 + "\n        }\n        setOutput(" + u3 + ");\n      }\n    ";
};
var zs2 = function(t3, e3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3;
  for (var n3 = "", r3 = 0; r3 < 4; r3++) {
    var o3 = "thisRC = rc;";
    r3 % 2 == 1 && (o3 += "thisRC.z += 1;"), r3 > 1 && (o3 += "thisRC.y += 1;"), n3 += "\n        " + o3 + "\n        " + (r3 > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + r3 + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (r3 > 0 ? "}" : "") + "\n      ";
  }
  this.userCode = "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + $a2(["r", "c", "d"], e3) + "\n      return ivec3(r, c, d);\n    }\n  \n      " + Qa2(t3) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + t3[1] + ";\n        int cols = " + t3[2] + ";\n\n        " + n3 + "\n\n        setOutput(result);\n      }\n    ";
};
var Gs2 = function(t3, e3, n3) {
  this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e3.shape;
  var r3 = e3.shape, o3 = r3[1], a3 = r3[2], i3 = t3.shape, s3 = i3[1], u3 = i3[2], c3 = [n3 && s3 > 1 ? o3 - 1 : o3, n3 && u3 > 1 ? a3 - 1 : a3], l3 = [n3 && s3 > 1 ? s3 - 1 : s3, n3 && u3 > 1 ? u3 - 1 : u3], h3 = c3[0] / l3[0], f3 = c3[1] / l3[1], d3 = 1 / h3, p3 = 1 / f3, v2 = 2 * Math.ceil(d3) + 2, g2 = 2 * Math.ceil(p3) + 2;
  this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h3 + ");\n        const float widthScale = float(" + f3 + ");\n\n        const float invHeightScale = float(" + d3 + ");\n        const float invWidthScale = float(" + p3 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + g2 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s3 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u3 + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (o3 - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (a3 - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
};
var Hs2 = function(t3, e3, n3, r3) {
  this.variableNames = ["A"], this.outputShape = [];
  var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
  this.outputShape = [o3, e3, n3, s3];
  var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], c3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3];
  this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u3[0] / c3[0] + ",\n          " + u3[1] / c3[1] + ");\n      const vec2 inputShapeRC = vec2(" + a3 + ".0, " + i3 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
};
var qs2 = function(t3, e3, n3, r3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
  var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
  this.outputShape = [o3, e3, n3, s3];
  var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], c3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3];
  this.userCode = "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " + u3[0] / c3[0] + ",\n          " + u3[1] / c3[1] + ",\n          " + u3[1] / c3[1] + ");\n      const vec3 inputShapeRC = vec3(" + a3 + ".0, " + i3 + ".0,\n                                     " + i3 + ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " + (s3 - 1) + ";\n        bool hasNextRow = coords.z < " + (n3 - 1) + ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
};
var Ks2 = function(t3, e3, n3) {
  this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e3.shape;
  var r3 = e3.shape, o3 = r3[1], a3 = r3[2], i3 = t3.shape, s3 = i3[1], u3 = i3[2], c3 = [n3 && s3 > 1 ? o3 - 1 : o3, n3 && u3 > 1 ? a3 - 1 : a3], l3 = [n3 && s3 > 1 ? s3 - 1 : s3, n3 && u3 > 1 ? u3 - 1 : u3], h3 = c3[0] / l3[0], f3 = c3[1] / l3[1], d3 = 1 / h3, p3 = 1 / f3, v2 = 2 * Math.ceil(d3) + 2, g2 = 2 * Math.ceil(p3) + 2;
  this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h3 + ");\n        const float widthScale = float(" + f3 + ");\n\n        const float invHeightScale = float(" + d3 + ");\n        const float invWidthScale = float(" + p3 + ");\n\n        const int winHeight = int(" + v2 + ");\n        const int winWidth = int(" + g2 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s3 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u3 + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + c3[0] + ") *\n                (float(dyR) / float(" + l3[0] + "));\n\n            float sourceFracCol =\n                float(" + c3[1] + ") *\n                  (float(dyC) / float(" + l3[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + o3 + ") - 1),\n                " + n3 + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + a3 + ") - 1),\n                " + n3 + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
};
var js2 = function(t3, e3, n3, r3) {
  this.variableNames = ["A"], this.outputShape = [];
  var o3 = t3[0], a3 = t3[1], i3 = t3[2], s3 = t3[3];
  this.outputShape = [o3, e3, n3, s3];
  var u3 = [r3 && e3 > 1 ? a3 - 1 : a3, r3 && n3 > 1 ? i3 - 1 : i3], c3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], l3 = r3 ? "0.5" : "0.0";
  this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u3[0] / c3[0] + ",\n          " + u3[1] / c3[1] + ");\n      const vec2 inputShapeRC = vec2(" + a3 + ".0, " + i3 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + l3 + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
};
var Xs2 = function(t3, e3) {
  this.variableNames = ["x"];
  var n3 = t3.length;
  if (n3 > 4) throw new Error("WebGL backend: Reverse of rank-" + n3 + " tensor is not yet supported");
  if (this.outputShape = t3, 1 !== n3) {
    var r3 = t3.map(function(n4, r4) {
      return function(n5) {
        return -1 !== e3.indexOf(n5) && 1 !== t3[n5] ? t3[n5] + " - coords[" + n5 + "] - 1" : "coords[" + n5 + "]";
      }(r4);
    }).join(","), o3 = ui2(n3);
    this.userCode = "\n      void main() {\n        " + o3 + " coords = getOutputCoords();\n        setOutput(getX(" + r3 + "));\n      }\n    ";
  } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + t3[0] + " - coord - 1));\n        }\n      ";
};
var Ys2 = function(t3, e3) {
  this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
  var n3 = t3.length;
  if (n3 > 4) throw new Error("WebGL backend: Reverse of rank-" + n3 + " tensor is not yet supported");
  this.outputShape = t3;
  var r3 = Xa2("rc", n3), o3 = r3[n3 - 1] + " + 1 < " + this.outputShape[n3 - 1], a3 = r3[n3 - 2] + " + 1 < " + this.outputShape[n3 - 2], i3 = ui2(n3);
  function s3(n4) {
    var r4 = t3.map(function(r5, o4) {
      return function(n5, r6) {
        return -1 !== e3.indexOf(n5) && 1 !== t3[n5] ? t3[n5] + " - " + r6[n5] + " - 1" : "" + r6[n5];
      }(o4, n4);
    });
    return "getChannel(getX(" + r4.join(",") + "), vec2(" + r4.slice(-2).join(",") + "))";
  }
  this.userCode = 1 === n3 ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" + t3[0] + " - rc - 1),\n            " + t3[0] + " - rc - 1);\n          if(" + o3 + "){\n              result.g = getChannel(getX(" + t3[0] + " - (rc  + 1) - 1),\n                " + t3[0] + " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      " : "\n        void main() {\n          " + i3 + " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " + function(t4) {
    return s3(t4);
  }(r3.slice()) + ";\n          if(" + o3 + "){\n            result.g = " + function(t4) {
    return t4[n3 - 1] = "(" + t4[n3 - 1] + " + 1)", s3(t4);
  }(r3.slice()) + ";\n          }\n          if(" + a3 + ") {\n            result.b = " + function(t4) {
    return t4[n3 - 2] = "(" + t4[n3 - 2] + " + 1)", s3(t4);
  }(r3.slice()) + ";\n            if(" + o3 + ") {\n              result.a = " + function(t4) {
    return t4[n3 - 1] = "(" + t4[n3 - 1] + " + 1)", t4[n3 - 2] = "(" + t4[n3 - 2] + " + 1)", s3(t4);
  }(r3.slice()) + ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
};
var $s2 = function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === i3 && (i3 = true), this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a3;
  var s3 = ui2(o3.length), u3 = ui2(a3.length), c3 = "";
  1 === n3 ? c3 = "i" : 2 === n3 && (c3 = "i, j");
  var l3 = "getIndices(" + c3 + ")", h3 = "";
  1 === r3 ? h3 = "i" : 2 === r3 && (h3 = "i, coords[1]");
  var f3 = "getUpdates(" + h3 + ")", d3 = e3 > 1 ? "strides[j]" : "strides";
  this.userCode = "\n        " + s3 + " strides = " + s3 + "(" + o3 + ");\n\n        void main() {\n          " + u3 + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + t3 + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + e3 + "; j++) {\n              int index = round(" + l3 + ");\n              flattenedIndex += index * " + d3 + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + f3 + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
};
var Qs2 = function(t3, e3) {
  this.variableNames = ["x", "segmentIds"];
  var n3 = t3.windowSize, r3 = t3.batchSize, o3 = t3.inSize, a3 = t3.numSegments, i3 = a3 * Math.ceil(o3 / n3);
  this.outputShape = [r3, i3];
  var s3 = 4 * Math.floor(n3 / 4), u3 = n3 % 4, c3 = "\n        sumValue += dot(values, segFilter);\n    ", l3 = "";
  o3 % n3 > 0 && (l3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return initializationValue;\n        }\n      ");
  var h3 = "";
  o3 % n3 > 0 && (h3 = "\n        if (inIdx < 0 || inIdx >= " + o3 + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + l3 + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + h3 + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + a3 + ")) * float(" + n3 + "));\n        int currentSeg = int(mod(float(outIdx), float(" + a3 + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s3 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + c3 + "\n        }\n\n        int inIdx = inOffset + " + s3 + ";\n        if (" + (1 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + c3 + "\n        } else if (" + (2 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + c3 + "\n        } else if (" + (3 === u3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + c3 + "\n        }\n        setOutput(sumValue);\n      }\n    ";
};
var Js2 = function(t3, e3, n3) {
  var r3, o3;
  if (this.variableNames = ["c", "a", "b"], this.outputShape = e3, n3 > 4) throw Error("Where for rank " + n3 + " is not yet supported");
  if (1 === n3) o3 = "resRC", r3 = "resRC";
  else {
    for (var a3 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i3 = [], s3 = [], u3 = 0; u3 < e3.length; u3++) s3.push("" + a3[u3]), u3 < t3 && i3.push("" + a3[u3]);
    r3 = i3.join(), o3 = s3.join();
  }
  var c3 = ui2(n3);
  this.userCode = "\n      void main() {\n        " + c3 + " resRC = getOutputCoords();\n        float cVal = getC(" + r3 + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + o3 + "));\n        } else {\n          setOutput(getB(" + o3 + "));\n        }\n      }\n    ";
};
var Zs2 = function() {
  function t3(t4) {
    this.variableNames = ["source"], this.outputShape = t4, this.rank = t4.length;
    var e3, n3 = ui2(this.rank), r3 = "uniform int start[" + this.rank + "];", o3 = function(t5) {
      if (1 === t5) return "sourceLoc";
      if (t5 <= 6) return tu2.slice(0, t5).map(function(t6) {
        return "sourceLoc." + t6;
      }).join(",");
      throw Error("Slicing for rank " + t5 + " is not yet supported");
    }(this.rank);
    e3 = "\n        " + n3 + " sourceLoc;\n        " + n3 + " coords = getOutputCoords();\n        " + t4.map(function(t5, e4) {
      return "sourceLoc." + tu2[e4] + " = start[" + e4 + "] + coords." + tu2[e4] + ";";
    }).join("\n") + "\n      ", this.userCode = "\n      " + r3 + "\n      void main() {\n        " + e3 + "\n        setOutput(getSource(" + o3 + "));\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    if (t4.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t4.length + ")");
    return function(n3, r3) {
      null == e3.startLoc && (e3.startLoc = n3.getUniformLocationNoThrow(r3, "start"), null == e3.startLoc) || n3.gl.uniform1iv(e3.startLoc, t4);
    };
  }, t3;
}();
var tu2 = ["x", "y", "z", "w", "u", "v"];
var eu2 = function() {
  function t3(t4) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t4, this.rank = t4.length;
    var e3 = ui2(this.rank), n3 = Xa2("coords", this.rank), r3 = Xa2("sourceLoc", this.rank), o3 = 1 === this.rank ? "sourceLoc" : "vec2(" + r3.slice(-2).join() + ")", a3 = "getChannel(getSource(" + r3.join() + "), " + o3 + ")", i3 = "\n      result.x = " + a3 + ";\n      if (++" + n3[this.rank - 1] + " < " + t4[this.rank - 1] + ") {\n        ++" + r3[this.rank - 1] + ";\n        result.y = " + a3 + ";\n        --" + r3[this.rank - 1] + ";\n      }\n    ", s3 = 1 === this.rank ? "" : "\n      --" + n3[this.rank - 1] + ";\n      if (++" + n3[this.rank - 2] + " < " + t4[this.rank - 2] + ") {\n        ++" + r3[this.rank - 2] + ";\n        result.z = " + a3 + ";\n        if (++" + n3[this.rank - 1] + " < " + t4[this.rank - 1] + ") {\n          ++" + r3[this.rank - 1] + ";\n          result.w = " + a3 + ";\n        }\n      }\n    ", u3 = this.rank <= 4 ? "sourceLoc = coords +\n            " + e3 + "(" + t4.map(function(t5, e4) {
      return "start[" + e4 + "]";
    }).join() + ");" : t4.map(function(t5, e4) {
      return r3[e4] + " = " + n3[e4] + " + start[" + e4 + "];";
    }).join("\n");
    this.userCode = "\n      uniform int start[" + this.rank + "];\n      void main() {\n        " + e3 + " coords = getOutputCoords();\n        " + e3 + " sourceLoc;\n        " + u3 + "\n        vec4 result = vec4(0.);\n        " + i3 + "\n        " + s3 + "\n        setOutput(result);\n      }\n    ";
  }
  return t3.prototype.getCustomSetupFunc = function(t4) {
    var e3 = this;
    if (t4.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t4.length + ")");
    return function(n3, r3) {
      null == e3.startLoc && (e3.startLoc = n3.getUniformLocationNoThrow(r3, "start"), null == e3.startLoc) || n3.gl.uniform1iv(e3.startLoc, t4);
    };
  }, t3;
}();
var nu2 = function(t3, e3, n3) {
  this.variableNames = ["x"], this.outputShape = n3;
  var r3 = n3.length, o3 = ui2(n3.length), a3 = ui2(n3.length), i3 = "";
  if (1 === r3) i3 = "coords * strides + begin";
  else {
    var s3 = 0;
    i3 = n3.map(function(t4, e4) {
      return s3++, 1 === n3.length ? "coords * strides[" + e4 + "] + begin[" + e4 + "]" : "coords[" + (s3 - 1) + "] * strides[" + e4 + "] + begin[" + e4 + "]";
    }).join(",");
  }
  this.userCode = "\n      " + o3 + " begin = " + o3 + "(" + t3 + ");\n      " + o3 + " strides = " + o3 + "(" + e3 + ");\n\n      void main() {\n        " + a3 + " coords = getOutputCoords();\n        setOutput(getX(" + i3 + "));\n      }\n    ";
};
var ru2 = function() {
  function t3(t4) {
    this.gpgpu = t4, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
  }
  return t3.prototype.acquireTexture = function(t4, e3, n3) {
    var r3, o3 = ou2(e3, n3), a3 = au2(t4, o3, n3);
    if (a3 in this.freeTextures || (this.freeTextures[a3] = []), a3 in this.usedTextures || (this.usedTextures[a3] = []), this.freeTextures[a3].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this.log();
      var i3 = this.freeTextures[a3].shift();
      return this.usedTextures[a3].push(i3), i3;
    }
    return this.numUsedTextures++, this.log(), o3 === Gt2.PACKED_2X2_FLOAT32 ? r3 = this.gpgpu.createPackedMatrixTexture(t4[0], t4[1]) : o3 === Gt2.PACKED_2X2_FLOAT16 ? r3 = this.gpgpu.createFloat16PackedMatrixTexture(t4[0], t4[1]) : o3 === Gt2.UNPACKED_FLOAT32 ? r3 = this.gpgpu.createFloat32MatrixTexture(t4[0], t4[1]) : o3 === Gt2.UNPACKED_FLOAT16 ? r3 = this.gpgpu.createFloat16MatrixTexture(t4[0], t4[1]) : o3 === Gt2.PACKED_4X1_UNSIGNED_BYTE && (r3 = this.gpgpu.createUnsignedBytesMatrixTexture(t4[0], t4[1])), this.usedTextures[a3].push(r3), r3;
  }, t3.prototype.releaseTexture = function(t4, e3, n3, r3) {
    if (null != this.freeTextures) {
      var o3 = au2(e3, ou2(n3, r3), r3);
      o3 in this.freeTextures || (this.freeTextures[o3] = []), this.freeTextures[o3].push(t4), this.numFreeTextures++, this.numUsedTextures--;
      var a3 = this.usedTextures[o3], i3 = a3.indexOf(t4);
      if (i3 < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
      a3.splice(i3, 1), this.log();
    }
  }, t3.prototype.log = function() {
    if (this.logEnabled) {
      var t4 = this.numFreeTextures + this.numUsedTextures;
      console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + t4 + ")");
    }
  }, t3.prototype.getNumUsedTextures = function() {
    return this.numUsedTextures;
  }, t3.prototype.getNumFreeTextures = function() {
    return this.numFreeTextures;
  }, t3.prototype.dispose = function() {
    var t4 = this;
    if (null != this.freeTextures) {
      for (var e3 in this.freeTextures) this.freeTextures[e3].forEach(function(e4) {
        t4.gpgpu.deleteMatrixTexture(e4);
      });
      for (var e3 in this.usedTextures) this.usedTextures[e3].forEach(function(e4) {
        t4.gpgpu.deleteMatrixTexture(e4);
      });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
    }
  }, t3;
}();
function ou2(t3, e3) {
  if (t3 === zt2.UPLOAD) return Gt2.PACKED_2X2_FLOAT32;
  if (t3 === zt2.RENDER || null == t3) return function(t4) {
    return i2().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? t4 ? Gt2.PACKED_2X2_FLOAT32 : Gt2.UNPACKED_FLOAT32 : t4 ? Gt2.PACKED_2X2_FLOAT16 : Gt2.UNPACKED_FLOAT16;
  }(e3);
  if (t3 === zt2.DOWNLOAD || t3 === zt2.PIXELS) return Gt2.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error("Unknown logical texture type " + t3);
}
function au2(t3, e3, n3) {
  return t3[0] + "_" + t3[1] + "_" + e3 + "_" + n3;
}
var iu2 = function(t3, e3) {
  this.variableNames = ["A"];
  for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[r3] * e3[r3];
  this.outputShape = n3, this.rank = n3.length;
  var o3 = ui2(this.rank), a3 = function(t4) {
    var e4 = t4.length;
    if (e4 > 5) throw Error("Tile for rank " + e4 + " is not yet supported");
    if (1 === e4) return "imod(resRC, " + t4[0] + ")";
    for (var n4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], r4 = [], o4 = 0; o4 < t4.length; o4++) r4.push("imod(" + n4[o4] + ", " + t4[o4] + ")");
    return r4.join();
  }(t3);
  this.userCode = "\n      void main() {\n        " + o3 + " resRC = getOutputCoords();\n        setOutput(getA(" + a3 + "));\n      }\n    ";
};
var su2 = 1.7580993408473768;
var uu2 = 1.0507009873554805;
var cu2 = function(t3, e3) {
  this.variableNames = ["A"], this.outputShape = t3, this.userCode = "\n      float unaryOperation(float x) {\n        " + e3 + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
};
var lu2 = "if (isnan(x)) return x;";
var hu2 = "return x;";
var fu2 = "return abs(x);";
var du2 = lu2 + "\n  return (x < 0.0) ? 0.0 : x;\n";
var pu2 = lu2 + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";
var vu2 = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var gu2 = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + su2 + ";\n  float scale = " + uu2 + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
var mu2 = "return -x;";
var yu2 = "return ceil(x);";
var xu2 = "return floor(x);";
var bu2 = "return exp(x);";
var wu2 = "return exp(x) - 1.0;";
var Cu2 = lu2 + "\n  return sin(x);\n";
var Eu2 = lu2 + "\n  return cos(x);\n";
var Ru2 = lu2 + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n";
var Iu2 = lu2 + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n";
var ku2 = lu2 + "\n  return atan(x);\n";
var Su2 = lu2 + "return log(x + sqrt(x * x + 1.0));";
var Au2 = lu2 + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));";
var Tu2 = lu2 + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
var Du2 = "return x;";
var Nu2 = "return x;";
var Fu2 = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
var _u2 = "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
var Ou2 = "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";
var Mu2 = function(t3, e3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t3, this.userCode = "\n      vec4 unaryOperation(vec4 x) {\n        " + e3 + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
};
var Bu2 = function(t3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = t3;
  var e3 = t3.length, n3 = Xa2("rc", e3), r3 = ui2(e3), o3 = function(t4, e4) {
    if (1 === t4) return "rc";
    for (var n4 = "", r4 = 0; r4 < t4; r4++) n4 += e4[r4], r4 < t4 - 1 && (n4 += ",");
    return n4;
  }(e3, n3), a3 = n3.slice(-2), i3 = e3 <= 1 ? "rc" : "vec2(" + a3.join(",") + ")";
  this.userCode = "\n      void main() {\n        " + r3 + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o3 + ");\n\n        setOutput(getChannel(packedInput, " + i3 + "));\n      }\n    ";
};
var Pu2 = {};
function Lu2(t3, e3) {
  if (void 0 === e3 && (e3 = false), "linear" === t3) return e3 ? Nu2 : hu2;
  if ("relu" === t3) return e3 ? Fu2 : du2;
  if ("elu" === t3) return e3 ? Ou2 : vu2;
  if ("relu6" === t3) return e3 ? _u2 : pu2;
  if ("prelu" === t3) return e3 ? ki2 : Ei2;
  throw new Error("Activation " + t3 + " has not been implemented for the WebGL backend.");
}
var Wu2 = 600;
var Uu2 = function(t3) {
  function o3(e3) {
    var n3, r3 = t3.call(this) || this;
    if (r3.pendingRead = /* @__PURE__ */ new WeakMap(), r3.pendingDisposal = /* @__PURE__ */ new WeakSet(), r3.dataRefCount = /* @__PURE__ */ new WeakMap(), r3.numBytesInGPU = 0, r3.uploadWaitMs = 0, r3.downloadWaitMs = 0, r3.warnedAboutMemory = false, r3.pendingDeletes = 0, r3.disposed = false, !i2().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
    if (null == e3) {
      var o4 = jt2(i2().getNumber("WEBGL_VERSION"));
      r3.binaryCache = (n3 = i2().getNumber("WEBGL_VERSION")) in Pu2 ? Pu2[n3] : (Pu2[n3] = {}, Pu2[n3]), r3.gpgpu = new Is2(o4), r3.canvas = o4.canvas, r3.gpgpuCreatedLocally = true;
    } else r3.gpgpu = e3, r3.binaryCache = {}, r3.gpgpuCreatedLocally = false, r3.canvas = e3.gl.canvas;
    return r3.textureManager = new ru2(r3.gpgpu), r3.numMBBeforeWarning = null == i2().global.screen ? 1024 : i2().global.screen.height * i2().global.screen.width * window.devicePixelRatio * Wu2 / 1024 / 1024, r3.texData = new ca2(r3, Lt2), r3;
  }
  return e2(o3, t3), o3.prototype.numDataIds = function() {
    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;
  }, o3.prototype.write = function(t4, e3, n3) {
    if (i2().getBool("DEBUG") && this.checkNumericalProblems(t4), "complex64" === n3 && null != t4) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    var r3 = {};
    return this.texData.set(r3, { shape: e3, dtype: n3, values: t4, usage: zt2.UPLOAD }), r3;
  }, o3.prototype.move = function(t4, e3, n3, r3) {
    if (i2().getBool("DEBUG") && this.checkNumericalProblems(e3), "complex64" === r3) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t4, { shape: n3, dtype: r3, values: e3, usage: zt2.UPLOAD });
  }, o3.prototype.readSync = function(t4) {
    var e3 = this.texData.get(t4), n3 = e3.values, r3 = e3.dtype, o4 = e3.complexTensors, a3 = e3.slice, i3 = e3.shape, s3 = e3.isPacked;
    if (null != a3) {
      var u3 = void 0;
      u3 = s3 ? new Mu2(i3, Du2) : new cu2(i3, Du2);
      var c3 = this.runWebGLProgram(u3, [{ dataId: t4, shape: i3, dtype: r3 }], r3), l3 = this.readSync(c3.dataId);
      return this.disposeData(c3.dataId), l3;
    }
    if (null != n3) return this.convertAndCacheOnCPU(t4);
    if ("string" === r3) return n3;
    var h3, f3, d3 = null != this.activeTimers;
    (d3 && (h3 = et2()), "complex64" === r3) ? f3 = Aa2(o4.real.dataSync(), o4.imag.dataSync()) : f3 = this.getValuesFromTexture(t4);
    return d3 && (this.downloadWaitMs += et2() - h3), this.convertAndCacheOnCPU(t4, f3);
  }, o3.prototype.read = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o4, a3, s3, u3, c3, l3, h3, f3, d3, p3, v2, g2, m3, y3, x3, b3, w3, C3, E3, R3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (this.pendingRead.has(t4)) return e3 = this.pendingRead.get(t4), [2, new Promise(function(t5) {
              return e3.push(t5);
            })];
            if (n3 = this.texData.get(t4), o4 = n3.values, a3 = n3.shape, s3 = n3.slice, u3 = n3.dtype, c3 = n3.complexTensors, l3 = n3.isPacked, null != s3) return h3 = void 0, h3 = l3 ? new Mu2(a3, Du2) : new cu2(a3, Du2), f3 = this.runWebGLProgram(h3, [{ dataId: t4, shape: a3, dtype: u3 }], u3), d3 = this.read(f3.dataId), this.disposeData(f3.dataId), [2, d3];
            if (null != o4) return [2, this.convertAndCacheOnCPU(t4)];
            if (!i2().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === i2().getNumber("WEBGL_VERSION")) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
            return p3 = null, "complex64" !== u3 && i2().get("WEBGL_BUFFER_SUPPORTED") && (v2 = this.decode(t4), g2 = this.texData.get(v2.dataId), p3 = (R3 = this.gpgpu).createBufferFromTexture.apply(R3, [g2.texture].concat(Yt2(a3)))), this.pendingRead.set(t4, []), "complex64" === u3 ? [3, 2] : [4, this.gpgpu.createAndWaitForFence()];
          case 1:
            r3.sent(), r3.label = 2;
          case 2:
            return "complex64" !== u3 ? [3, 4] : [4, Promise.all([c3.real.data(), c3.imag.data()])];
          case 3:
            return y3 = r3.sent(), x3 = y3[0], b3 = y3[1], m3 = Aa2(x3, b3), [3, 5];
          case 4:
            null == p3 ? m3 = this.getValuesFromTexture(t4) : (w3 = k2(a3), m3 = this.gpgpu.downloadFloat32MatrixFromBuffer(p3, w3)), r3.label = 5;
          case 5:
            return null != v2 && this.disposeData(v2.dataId), C3 = this.convertAndCacheOnCPU(t4, m3), E3 = this.pendingRead.get(t4), this.pendingRead.delete(t4), E3.forEach(function(t5) {
              return t5(C3);
            }), this.pendingDisposal.has(t4) && (this.pendingDisposal.delete(t4), this.disposeData(t4), this.pendingDeletes--), [2, C3];
        }
      });
    });
  }, o3.prototype.checkNumericalProblems = function(t4) {
    if (null != t4) for (var e3 = 0; e3 < t4.length; e3++) {
      var n3 = t4[e3];
      if (!ee2(n3)) {
        if (i2().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")) throw Error("The value " + n3 + " cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");
        throw Error("The value " + n3 + " cannot be represented on this device.");
      }
    }
  }, o3.prototype.getValuesFromTexture = function(t4) {
    var e3, n3 = this.texData.get(t4), r3 = n3.shape, o4 = n3.dtype, a3 = n3.isPacked, s3 = k2(r3);
    if (i2().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      var u3 = this.decode(t4), c3 = this.texData.get(u3.dataId), l3 = (e3 = this.gpgpu).downloadMatrixFromPackedTexture.apply(e3, [c3.texture].concat(Yt2(r3))).subarray(0, s3);
      return this.disposeData(u3.dataId), l3;
    }
    var h3 = i2().getBool("WEBGL_PACK") && true === a3, f3 = h3 ? De2(r3) : r3, d3 = h3 ? new Ji2(f3) : new Qi2(f3), p3 = this.runWebGLProgram(d3, [{ shape: f3, dtype: o4, dataId: t4 }], "float32"), v2 = this.texData.get(p3.dataId), g2 = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v2.texture, v2.texShape[0], v2.texShape[1]).subarray(0, s3);
    return this.disposeData(p3.dataId), g2;
  }, o3.prototype.time = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o4, a3, s3, u3, c3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            return e3 = this.activeTimers, n3 = [], o4 = false, null == this.programTimersStack ? (this.programTimersStack = n3, o4 = true) : this.activeTimers.push(n3), this.activeTimers = n3, t4(), a3 = I2(this.activeTimers.map(function(t5) {
              return t5.query;
            })).filter(function(t5) {
              return null != t5;
            }), s3 = I2(this.activeTimers.map(function(t5) {
              return t5.name;
            })).filter(function(t5) {
              return null != t5;
            }), this.activeTimers = e3, o4 && (this.programTimersStack = null), u3 = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }, i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? [4, Promise.all(a3)] : [3, 2];
          case 1:
            return c3 = r3.sent(), u3.kernelMs = w2(c3), u3.getExtraProfileInfo = function() {
              return c3.map(function(t5, e4) {
                return { name: s3[e4], ms: t5 };
              }).map(function(t5) {
                return t5.name + ": " + t5.ms;
              }).join(", ");
            }, [3, 3];
          case 2:
            u3.kernelMs = { error: "WebGL query timers are not supported in this environment." }, r3.label = 3;
          case 3:
            return this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, u3];
        }
      });
    });
  }, o3.prototype.memory = function() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU };
  }, o3.prototype.startTimer = function() {
    return i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: et2(), endMs: null };
  }, o3.prototype.endTimer = function(t4) {
    return i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t4) : (t4.endMs = et2(), t4);
  }, o3.prototype.getQueryTime = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3;
      return r2(this, function(n3) {
        return i2().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? [2, this.gpgpu.waitForQueryAndGetTime(t4)] : [2, (e3 = t4).endMs - e3.startMs];
      });
    });
  }, o3.prototype.disposeData = function(t4) {
    if (!this.pendingDisposal.has(t4)) {
      if (this.pendingRead.has(t4)) return this.pendingDisposal.add(t4), void this.pendingDeletes++;
      if (this.texData.has(t4)) {
        this.releaseGPUData(t4);
        var e3 = this.texData.get(t4).complexTensors;
        null != e3 && (e3.real.dispose(), e3.imag.dispose()), this.texData.delete(t4);
      }
    }
  }, o3.prototype.releaseGPUData = function(t4) {
    var e3 = this.texData.get(t4), n3 = e3.texture, r3 = e3.dtype, o4 = e3.texShape, a3 = e3.usage, i3 = e3.isPacked, s3 = e3.slice, u3 = s3 && s3.origDataId || t4, c3 = this.dataRefCount.get(u3);
    c3 > 1 ? this.dataRefCount.set(u3, c3 - 1) : (this.dataRefCount.delete(u3), null != n3 && (this.numBytesInGPU -= this.computeBytes(o4, r3), this.textureManager.releaseTexture(n3, o4, a3, i3)));
    var l3 = this.texData.get(t4);
    l3.texture = null, l3.texShape = null, l3.isPacked = false, l3.slice = null;
  }, o3.prototype.getTexture = function(t4) {
    return this.uploadToGPU(t4), this.texData.get(t4).texture;
  }, o3.prototype.getDataInfo = function(t4) {
    return this.texData.get(t4);
  }, o3.prototype.getCPUBackend = function() {
    return i2().getBool("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = Lt2.findBackend("cpu")), this.cpuBackend) : null;
  }, o3.prototype.shouldExecuteOnCPU = function(t4, e3) {
    var n3 = this;
    return void 0 === e3 && (e3 = 128), null != this.getCPUBackend() && t4.every(function(t5) {
      return null == n3.texData.get(t5.dataId).texture && k2(t5.shape) < e3;
    });
  }, o3.prototype.getGPGPUContext = function() {
    return this.gpgpu;
  }, o3.prototype.complex = function(t4, e3) {
    var n3 = this.makeOutput(t4.shape, "complex64");
    return this.texData.get(n3.dataId).complexTensors = { real: Lt2.keep(t4.clone()), imag: Lt2.keep(e3.clone()) }, n3;
  }, o3.prototype.real = function(t4) {
    return this.texData.get(t4.dataId).complexTensors.real.clone();
  }, o3.prototype.imag = function(t4) {
    return this.texData.get(t4.dataId).complexTensors.imag.clone();
  }, o3.prototype.slice = function(t4, e3, n3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.slice(t4, e3, n3);
    if (0 === k2(n3)) return Fn2([], n3, t4.dtype);
    var r3 = this.texData.get(t4.dataId).isPacked, o4 = $o2(t4.shape, e3, n3);
    if (r3 || !o4) {
      var a3 = i2().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new eu2(n3) : new Zs2(n3), s3 = a3.getCustomSetupFunc(e3);
      return this.compileAndRun(a3, [t4], null, s3);
    }
    return this.uploadToGPU(t4.dataId), this.shallowSlice(t4, e3, n3);
  }, o3.prototype.shallowSlice = function(t4, e3, n3) {
    var r3 = this.texData.get(t4.dataId), o4 = this.makeOutput(n3, t4.dtype), a3 = this.texData.get(o4.dataId);
    Object.assign(a3, r3), a3.shape = n3, a3.dtype = t4.dtype;
    var i3 = Qo2(e3, t4.strides);
    r3.slice && (i3 += r3.slice.flatOffset), a3.slice = { flatOffset: i3, origDataId: r3.slice && r3.slice.origDataId || t4.dataId };
    var s3 = this.dataRefCount.get(a3.slice.origDataId) || 1;
    return this.dataRefCount.set(a3.slice.origDataId, s3 + 1), o4;
  }, o3.prototype.stridedSlice = function(t4, e3, n3, r3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.stridedSlice(t4, e3, n3, r3);
    var o4 = jo2(e3, n3, r3);
    if (o4.some(function(t5) {
      return 0 === t5;
    })) return Fn2([], o4);
    var a3 = new nu2(e3, r3, o4);
    return this.compileAndRun(a3, [t4]);
  }, o3.prototype.reverse = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ys2(t4.shape, e3) : new Xs2(t4.shape, e3);
    return this.compileAndRun(n3, [t4]);
  }, o3.prototype.concat = function(t4, e3) {
    if ("complex64" === t4[0].dtype) {
      var n3 = t4.map(function(t5) {
        return Dn2(t5);
      }), r3 = t4.map(function(t5) {
        return Nn2(t5);
      });
      return Tn2(this.concat(n3, e3), this.concat(r3, e3));
    }
    if (this.shouldExecuteOnCPU(t4)) return this.cpuBackend.concat(t4, e3);
    if (1 === t4.length) return t4[0];
    if (t4.length > i2().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
      var o4 = Math.floor(t4.length / 2), a3 = this.concat(t4.slice(0, o4), e3), s3 = this.concat(t4.slice(o4), e3);
      return this.concat([a3, s3], e3);
    }
    if (i2().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t4[0].rank > 1) {
      var u3 = new Fi2(t4.map(function(t5) {
        return t5.shape;
      }), e3);
      return this.compileAndRun(u3, t4);
    }
    var c3 = Sn2(t4.map(function(t5) {
      return t5.shape;
    }), e3), l3 = t4.map(function(t5) {
      return t5.as2D(-1, k2(t5.shape.slice(e3)));
    }), h3 = new Ni2(l3.map(function(t5) {
      return t5.shape;
    }));
    return this.compileAndRun(h3, l3).reshape(c3);
  }, o3.prototype.neg = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.neg(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, mu2, t4.dtype);
    var e3 = new cu2(t4.shape, mu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    var o4 = n3 ? t4.shape[2] : t4.shape[1], a3 = r3 ? e3.shape[1] : e3.shape[2], i3 = n3 ? t4.shape[1] : t4.shape[2], s3 = t4.shape[0];
    if ((1 === o4 || 1 === a3) && i3 > 1e3) {
      n3 && (t4 = ua2(t4, [0, 2, 1])), r3 && (e3 = ua2(e3, [0, 2, 1]));
      var u3 = 1 === a3 ? t4 : t4.as3D(s3, i3, 1), c3 = 1 === a3 ? 2 : 1, l3 = 1 === a3 ? e3.as3D(s3, 1, i3) : e3;
      return this.multiply(u3, l3).sum(c3, true);
    }
    var h3 = Tt2(t4.dtype, e3.dtype), f3 = new _s2(t4.shape, [s3, o4, a3], n3, r3);
    return this.compileAndRun(f3, [t4, e3], h3);
  }, o3.prototype.fusedBatchMatMul = function(t4) {
    var e3 = t4.a, n3 = t4.b, r3 = t4.transposeA, o4 = t4.transposeB, a3 = t4.bias, i3 = t4.activation, s3 = t4.preluActivationWeights, u3 = r3 ? e3.shape[2] : e3.shape[1], c3 = o4 ? n3.shape[1] : n3.shape[2], l3 = e3.shape[0], h3 = Tt2(e3.dtype, n3.dtype), f3 = null != a3, d3 = null != s3, p3 = i3 ? Lu2(i3, true) : null, v2 = new _s2(e3.shape, [l3, u3, c3], r3, o4, f3, p3, d3), g2 = [e3, n3];
    return a3 && g2.push(a3), s3 && g2.push(s3), this.compileAndRun(v2, g2, h3);
  }, o3.prototype.multiply = function(t4, e3) {
    if ("complex64" === t4.dtype) {
      var n3 = this.texData.get(t4.dataId), r3 = this.texData.get(e3.dataId), o4 = new yi2(gi2, t4.shape, e3.shape), a3 = new yi2(mi2, t4.shape, e3.shape), s3 = [this.makeComplexComponentTensorInfo(t4, n3.complexTensors.real), this.makeComplexComponentTensorInfo(t4, n3.complexTensors.imag), this.makeComplexComponentTensorInfo(e3, r3.complexTensors.real), this.makeComplexComponentTensorInfo(e3, r3.complexTensors.imag)], u3 = this.compileAndRun(o4, s3), c3 = this.compileAndRun(a3, s3), l3 = this.complex(u3, c3);
      return u3.dispose(), c3.dispose(), l3;
    }
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.multiply(t4, e3);
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, wi2, t4.dtype);
    var h3 = new Ri2(wi2, t4.shape, e3.shape);
    return this.compileAndRun(h3, [t4, e3], t4.dtype);
  }, o3.prototype.batchNormalization = function(t4, e3, n3, r3, o4, a3) {
    var s3 = [t4, e3, n3], u3 = null;
    null != a3 && (u3 = a3.shape, s3.push(a3));
    var c3 = null;
    if (null != o4 && (c3 = o4.shape, s3.push(o4)), i2().getBool("WEBGL_PACK_NORMALIZATION")) {
      var l3 = new vi2(t4.shape, e3.shape, n3.shape, u3, c3, r3);
      return this.compileAndRun(l3, s3);
    }
    var h3 = new pi2(t4.shape, e3.shape, n3.shape, u3, c3, r3);
    return this.compileAndRun(h3, s3);
  }, o3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o4) {
    var a3 = i2().getBool("WEBGL_PACK_NORMALIZATION") ? new Ds2(t4.shape, e3, n3, r3, o4) : new As2(t4.shape, e3, n3, r3, o4);
    return this.compileAndRun(a3, [t4]);
  }, o3.prototype.LRNGrad = function(t4, e3, n3, r3, o4, a3, i3) {
    var s3 = new Ts2(e3.shape, r3, o4, a3, i3);
    return this.compileAndRun(s3, [e3, n3, t4]);
  }, o3.prototype.tile = function(t4, e3) {
    if ("string" === t4.dtype) {
      var n3 = this.readSync(t4.dataId).map(function(t5) {
        return ot2(t5);
      });
      return Va2(er2(t4.shape, t4.dtype, n3), e3);
    }
    var r3 = new iu2(t4.shape, e3);
    return this.compileAndRun(r3, [t4]);
  }, o3.prototype.pad = function(t4, e3, n3) {
    var r3 = i2().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ls2(t4.shape, e3, n3) : new Ps2(t4.shape, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, o3.prototype.gather = function(t4, e3, n3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.gather(t4, e3, n3);
    var r3 = new as2(t4.shape, e3.size, n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.batchToSpaceND = function(t4, e3, n3) {
    C2(t4.rank <= 4, function() {
      return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
    });
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o4 = pr2(t4.shape, e3, r3), a3 = vr2(o4.length, e3.length), i3 = gr2(t4.shape, e3, r3), s3 = mr2(n3, e3.length), u3 = yr2(i3, n3, e3.length);
    return ua2(t4.reshape(o4), a3).reshape(i3).slice(s3, u3);
  }, o3.prototype.spaceToBatchND = function(t4, e3, n3) {
    C2(t4.rank <= 4, function() {
      return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
    });
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o4 = [[0, 0]];
    o4.push.apply(o4, n3);
    for (var a3 = 1 + e3.length; a3 < t4.shape.length; ++a3) o4.push([0, 0]);
    var i3 = t4.pad(o4), s3 = pr2(i3.shape, e3, r3, false), u3 = vr2(s3.length, e3.length, false), c3 = gr2(i3.shape, e3, r3, false);
    return ua2(i3.reshape(s3), u3).reshape(c3);
  }, o3.prototype.reduce = function(t4, e3, n3) {
    var r3 = t4.shape[0], o4 = t4.shape[1], a3 = Uo2(o4), i3 = new Vs2({ windowSize: a3, inSize: o4, batchSize: r3 }, e3), s3 = this.compileAndRun(i3, [t4], n3);
    return 1 === s3.shape[1] ? s3 : this.reduce(s3, e3, n3);
  }, o3.prototype.argReduce = function(t4, e3, n3) {
    void 0 === n3 && (n3 = null);
    var r3 = t4.shape[0], o4 = t4.shape[1];
    null != n3 && (r3 = n3.shape[0], o4 = n3.shape[1]);
    var a3 = Uo2(o4), i3 = new Ka2({ windowSize: a3, inSize: o4, batchSize: r3 }, e3, null == n3), s3 = [t4];
    null != n3 && s3.push(n3);
    var u3 = this.compileAndRun(i3, s3, "int32");
    return 1 === u3.shape[1] ? u3 : this.argReduce(t4, e3, u3);
  }, o3.prototype.argReducePacked = function(t4, e3, n3) {
    void 0 === n3 && (n3 = null);
    var r3 = null != n3 ? n3.shape : t4.shape, o4 = Uo2(r3[r3.length - 1]), a3 = new hi2(r3, o4, e3, null == n3), i3 = null == n3 ? [t4] : [t4, n3], s3 = this.compileAndRun(a3, i3, "int32");
    return s3.rank === t4.rank ? this.argReducePacked(t4, e3, s3) : s3;
  }, o3.prototype.sum = function(t4, e3) {
    Cn2("sum", e3, t4.rank);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4), i3 = Dt2(t4.dtype);
    return this.reduce(a3, "sum", i3).reshape(r3);
  }, o3.prototype.prod = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.prod(t4, e3);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4), i3 = Dt2(t4.dtype);
    return this.reduce(a3, "prod", i3).reshape(r3);
  }, o3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    var r3 = 0, o4 = En2([r3], t4.rank), a3 = t4;
    null != o4 && (a3 = ua2(t4, o4), r3 = In2(1, t4.rank)[0]);
    var i3 = function(t5, e4, n4) {
      for (var r4 = [], o5 = t5.length, a4 = 0; a4 < o5; a4++) a4 !== e4 ? r4.push(t5[a4]) : r4.push(n4);
      return r4;
    }(a3.shape, r3, n3), s3 = k2([a3.shape[r3]]), u3 = a3.as2D(-1, s3), c3 = Dt2(t4.dtype), l3 = this.segOpCompute(u3, "unsortedSegmentSum", e3, c3, n3).reshape(i3);
    return null != o4 && (l3 = ua2(l3, Rn2(o4))), l3;
  }, o3.prototype.segOpCompute = function(t4, e3, n3, r3, o4) {
    var a3 = t4.shape[0], i3 = t4.shape[1], s3 = function(t5, e4) {
      var n4, r4 = false;
      for (t5 <= Wo2 ? (n4 = t5, r4 = true) : n4 = Y2(t5, Math.floor(Math.sqrt(t5))); !r4; ) n4 > e4 || n4 === t5 ? r4 = true : n4 = Y2(t5, n4 + 1);
      return n4;
    }(i3, o4), u3 = new Qs2({ windowSize: s3, inSize: i3, batchSize: a3, numSegments: o4 }, e3), c3 = this.compileAndRun(u3, [t4, n3], r3);
    return c3.shape[1] === o4 ? c3 : (n3 = Kn2(0, o4).tile([i3 / s3]), this.segOpCompute(c3, e3, n3, r3, o4));
  }, o3.prototype.argMinMaxReduce = function(t4, e3, n3) {
    var r3 = [e3];
    if (Cn2("arg" + n3.charAt(0).toUpperCase() + n3.slice(1), r3, t4.rank), !i2().getBool("WEBGL_PACK_REDUCE") || t4.rank <= 2) {
      var o4 = bn2(t4.shape, r3), a3 = o4[0], s3 = k2(o4[1]), u3 = t4.as2D(-1, s3);
      return this.argReduce(u3, n3).reshape(a3);
    }
    return this.argReducePacked(t4, n3);
  }, o3.prototype.argMin = function(t4, e3) {
    return this.argMinMaxReduce(t4, e3, "min");
  }, o3.prototype.argMax = function(t4, e3) {
    return this.argMinMaxReduce(t4, e3, "max");
  }, o3.prototype.cumsum = function(t4, e3, n3, r3) {
    if (e3 !== t4.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (t4.rank - 1) + " but got axis=" + e3);
    var o4 = new qi2(t4.shape, n3, r3);
    return this.compileAndRun(o4, [t4]);
  }, o3.prototype.equal = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(equal(a, b));\n", "bool");
    var n3 = new Ri2("return float(a == b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.notEqual = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(notEqual(a, b));\n", "bool");
    var n3 = new Ri2("return float(a != b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.less = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.less(t4, e3);
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(lessThan(a, b));\n", "bool");
    var n3 = new Ri2("return float(a < b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.lessEqual = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(lessThanEqual(a, b));\n", "bool");
    var n3 = new Ri2("return float(a <= b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.greater = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.greater(t4, e3);
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(greaterThan(a, b));\n", "bool");
    var n3 = new Ri2("return float(a > b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.greaterEqual = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(greaterThanEqual(a, b));\n", "bool");
    var n3 = new Ri2("return float(a >= b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.logicalNot = function(t4) {
    var e3 = new cu2(t4.shape, "return float(!(x >= 1.0));");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.logicalAnd = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n", "bool");
    var n3 = new Ri2("return float(a >= 1.0 && b >= 1.0);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.logicalOr = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n", "bool");
    var n3 = new Ri2("return float(a >= 1.0 || b >= 1.0);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "bool");
  }, o3.prototype.select = function(t4, e3, n3) {
    var r3 = new Js2(t4.rank, e3.shape, e3.rank);
    return this.compileAndRun(r3, [t4, e3, n3], Tt2(e3.dtype, n3.dtype));
  }, o3.prototype.where = function(t4) {
    dn2("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    var e3 = t4.dataSync();
    return Ga2(t4.shape, e3);
  }, o3.prototype.topk = function(t4, e3, n3) {
    return za2(t4.dataSync(), t4.shape, t4.dtype, e3);
  }, o3.prototype.min = function(t4, e3) {
    Cn2("min", e3, t4.rank);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4);
    return this.reduce(a3, "min", a3.dtype).reshape(r3);
  }, o3.prototype.minimum = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.minimum(t4, e3);
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Ri2("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.mod = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Ri2("if (b == 0.0) return NAN;\n  return mod(a, b);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.max = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.max(t4, e3);
    Cn2("max", e3, t4.rank);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4);
    return this.reduce(a3, "max", a3.dtype).reshape(r3);
  }, o3.prototype.maximum = function(t4, e3) {
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.maximum(t4, e3);
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Ri2("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.all = function(t4, e3) {
    Cn2("all", e3, t4.rank);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4);
    return this.reduce(a3, "all", a3.dtype).reshape(r3);
  }, o3.prototype.any = function(t4, e3) {
    Cn2("any", e3, t4.rank);
    var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = k2(n3[1]), a3 = t4.as2D(-1, o4);
    return this.reduce(a3, "any", a3.dtype).reshape(r3);
  }, o3.prototype.floorDiv = function(t4, e3) {
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n", "int32");
    var n3 = new Ri2("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3], "int32");
  }, o3.prototype.add = function(t4, e3) {
    if ("complex64" === t4.dtype && "complex64" === e3.dtype) return this.complexSeparableBinaryOp(t4, e3, xi2);
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.add(t4, e3);
    var n3 = Tt2(t4.dtype, e3.dtype);
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, xi2, n3);
    var r3 = new Ri2(xi2, t4.shape, e3.shape);
    return this.compileAndRun(r3, [t4, e3], n3);
  }, o3.prototype.packedUnaryOp = function(t4, e3, n3) {
    var r3 = new Mu2(t4.shape, e3);
    return this.compileAndRun(r3, [t4], n3);
  }, o3.prototype.packedBinaryOp = function(t4, e3, n3, r3, o4) {
    void 0 === o4 && (o4 = false);
    var a3 = new Si2(n3, t4.shape, e3.shape, o4);
    return this.compileAndRun(a3, [t4, e3], r3);
  }, o3.prototype.complexSeparableBinaryOp = function(t4, e3, n3) {
    var r3 = this, o4 = this.texData.get(t4.dataId), a3 = this.texData.get(e3.dataId), i3 = [[o4.complexTensors.real, a3.complexTensors.real], [o4.complexTensors.imag, a3.complexTensors.imag]].map(function(o5) {
      var a4 = o5[0], i4 = o5[1], s4 = r3.makeComplexComponentTensorInfo(t4, a4), u4 = r3.makeComplexComponentTensorInfo(e3, i4), c4 = new Ri2(n3, t4.shape, e3.shape);
      return r3.compileAndRun(c4, [s4, u4], Tt2(a4.dtype, i4.dtype));
    }), s3 = i3[0], u3 = i3[1], c3 = this.complex(s3, u3);
    return s3.dispose(), u3.dispose(), c3;
  }, o3.prototype.makeComplexComponentTensorInfo = function(t4, e3) {
    return { dataId: e3.dataId, dtype: e3.dtype, shape: t4.shape };
  }, o3.prototype.addN = function(t4) {
    if (1 === t4.length) return t4[0];
    if (t4.length > i2().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
      var e3 = Math.floor(t4.length / 2), n3 = this.addN(t4.slice(0, e3)), r3 = this.addN(t4.slice(e3));
      return this.addN([n3, r3]);
    }
    var o4 = t4.map(function(t5) {
      return t5.dtype;
    }).reduce(function(t5, e4) {
      return Tt2(t5, e4);
    }), a3 = t4.map(function(t5) {
      return t5.shape;
    }), s3 = i2().getBool("WEBGL_PACK") ? new qa2(t4[0].shape, a3) : new Ha2(t4[0].shape, a3);
    return this.compileAndRun(s3, t4, o4);
  }, o3.prototype.subtract = function(t4, e3) {
    if ("complex64" === t4.dtype && "complex64" === e3.dtype) return this.complexSeparableBinaryOp(t4, e3, bi2);
    if (this.shouldExecuteOnCPU([t4, e3])) return this.cpuBackend.subtract(t4, e3);
    var n3 = Tt2(t4.dtype, e3.dtype);
    if (i2().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t4, e3, bi2, t4.dtype);
    var r3 = new Ri2(bi2, t4.shape, e3.shape);
    return this.compileAndRun(r3, [t4, e3], n3);
  }, o3.prototype.pow = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Ri2("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", t4.shape, e3.shape), r3 = Tt2(t4.dtype, e3.dtype);
    return this.compileAndRun(n3, [t4, e3], r3);
  }, o3.prototype.ceil = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.ceil(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, yu2, t4.dtype);
    var e3 = new cu2(t4.shape, yu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.floor = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.floor(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, xu2, t4.dtype);
    var e3 = new cu2(t4.shape, xu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.sign = function(t4) {
    var e3 = new cu2(t4.shape, "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.isNaN = function(t4) {
    var e3 = new cu2(t4.shape, "return float(isnan(x));");
    return this.compileAndRun(e3, [t4], "bool");
  }, o3.prototype.isInf = function(t4) {
    var e3 = new cu2(t4.shape, "return float(isinf(x));");
    return this.compileAndRun(e3, [t4], "bool");
  }, o3.prototype.isFinite = function(t4) {
    var e3 = new cu2(t4.shape, "return float(!isnan(x) && !isinf(x));");
    return this.compileAndRun(e3, [t4], "bool");
  }, o3.prototype.round = function(t4) {
    var e3 = new cu2(t4.shape, "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.exp = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.exp(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, bu2, t4.dtype);
    var e3 = new cu2(t4.shape, bu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.expm1 = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.expm1(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, wu2, t4.dtype);
    var e3 = new cu2(t4.shape, wu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.softmax = function(t4, e3) {
    var n3 = O2([e3], t4.shape), r3 = this.max(t4, n3), o4 = wn2(r3.shape, n3), a3 = this.subtract(t4, r3.reshape(o4)), i3 = this.exp(a3), s3 = this.sum(i3, n3).reshape(o4);
    return Bo2(i3, s3);
  }, o3.prototype.log = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.log(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n", t4.dtype);
    var e3 = new cu2(t4.shape, "if (x < 0.0) return NAN;\n  return log(x);");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.log1p = function(t4) {
    var e3 = new cu2(t4.shape, "return log(1.0 + x);");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.sqrt = function(t4) {
    var e3 = new cu2(t4.shape, "return sqrt(x);");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.rsqrt = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.rsqrt(t4);
    var e3 = new cu2(t4.shape, "return inversesqrt(x);");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.reciprocal = function(t4) {
    var e3 = new cu2(t4.shape, "return 1.0 / x;");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.relu = function(t4) {
    var e3;
    return e3 = i2().getBool("WEBGL_PACK") ? new Mu2(t4.shape, Fu2) : new cu2(t4.shape, du2), this.compileAndRun(e3, [t4]);
  }, o3.prototype.relu6 = function(t4) {
    var e3;
    return e3 = i2().getBool("WEBGL_PACK") ? new Mu2(t4.shape, _u2) : new cu2(t4.shape, pu2), this.compileAndRun(e3, [t4]);
  }, o3.prototype.prelu = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2(ki2, t4.shape, e3.shape) : new Ri2(Ei2, t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.elu = function(t4) {
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, Ou2, t4.dtype);
    var e3 = new cu2(t4.shape, vu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.eluDer = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n", t4.shape, e3.shape) : new Ri2("return (b >= 1.0) ? a : a * (b + 1.0);", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.selu = function(t4) {
    var e3 = new cu2(t4.shape, gu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.int = function(t4) {
    var e3 = new cu2(t4.shape, "return float(int(x));");
    return this.compileAndRun(e3, [t4], "int32");
  }, o3.prototype.clip = function(t4, e3, n3) {
    var r3, o4 = (r3 = i2().getBool("WEBGL_PACK_CLIP") ? new Ti2(t4.shape) : new Ai2(t4.shape)).getCustomSetupFunc(e3, n3);
    return this.compileAndRun(r3, [t4], null, o4);
  }, o3.prototype.abs = function(t4) {
    if (this.shouldExecuteOnCPU([t4])) return this.cpuBackend.abs(t4);
    if (i2().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t4, fu2, t4.dtype);
    var e3 = new cu2(t4.shape, fu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.complexAbs = function(t4) {
    var e3 = this.texData.get(t4.dataId), n3 = new Di2(t4.shape), r3 = [this.makeComplexComponentTensorInfo(t4, e3.complexTensors.real), this.makeComplexComponentTensorInfo(t4, e3.complexTensors.imag)];
    return this.compileAndRun(n3, r3);
  }, o3.prototype.sigmoid = function(t4) {
    var e3 = new cu2(t4.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.softplus = function(t4) {
    var e3 = new cu2(t4.shape, "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.sin = function(t4) {
    var e3 = new cu2(t4.shape, Cu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.cos = function(t4) {
    var e3 = new cu2(t4.shape, Eu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.tan = function(t4) {
    var e3 = new cu2(t4.shape, "return tan(x);");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.asin = function(t4) {
    var e3 = new cu2(t4.shape, Ru2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.acos = function(t4) {
    var e3 = new cu2(t4.shape, Iu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.atan = function(t4) {
    var e3 = new cu2(t4.shape, ku2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.atan2 = function(t4, e3) {
    var n3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t4.shape, e3.shape) : new Ri2("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n", t4.shape, e3.shape);
    return this.compileAndRun(n3, [t4, e3]);
  }, o3.prototype.sinh = function(t4) {
    var e3 = new cu2(t4.shape, "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.cosh = function(t4) {
    var e3 = new cu2(t4.shape, "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.tanh = function(t4) {
    var e3 = new cu2(t4.shape, "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.asinh = function(t4) {
    var e3 = new cu2(t4.shape, Su2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.acosh = function(t4) {
    var e3 = new cu2(t4.shape, Au2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.atanh = function(t4) {
    var e3 = new cu2(t4.shape, Tu2);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.erf = function(t4) {
    var e3 = new cu2(t4.shape, '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.step = function(t4, e3) {
    var n3 = new cu2(t4.shape, function(t5) {
      return void 0 === t5 && (t5 = 0), lu2 + "\n    return x > 0.0 ? 1.0 : float(" + t5 + ");\n  ";
    }(e3));
    return this.compileAndRun(n3, [t4]);
  }, o3.prototype.conv2dByMatMul = function(t4, e3, n3, r3, o4, a3) {
    var s3 = t4.shape, u3 = this.texData.get(t4.dataId), c3 = n3.inChannels, l3 = s3[0] * s3[1] * s3[2], h3 = n3.outChannels, f3 = "channelsLast" === n3.dataFormat, d3 = (1 === l3 || 1 === h3) && c3 > 1e3, p3 = s3[2] % 2 != 0 && !!u3.isPacked;
    if (d3 || !i2().getBool("WEBGL_LAZILY_UNPACK") || !i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") || !p3) {
      var v2 = f3 ? s3[0] * s3[1] * s3[2] : s3[0] * s3[2] * s3[3], g2 = this.reshape(t4, [1, v2, n3.inChannels]), m3 = this.reshape(e3, [1, n3.inChannels, n3.outChannels]);
      return this.reshape(this.fusedBatchMatMul({ a: g2, b: m3, transposeA: false, transposeB: false, bias: r3, activation: o4, preluActivationWeights: a3 }), n3.outShape);
    }
    var y3 = f3 ? s3[0] * s3[1] * (s3[2] + 1) : s3[0] * s3[2] * (s3[3] + 1), x3 = { dataId: t4.dataId, shape: [1, y3, n3.inChannels], dtype: t4.dtype }, b3 = u3.shape;
    u3.shape = u3.shape.slice(), u3.shape[u3.shape.length - 2]++, C2(_e2(u3.shape, x3.shape), function() {
      return "packed reshape " + u3.shape + " to " + x3.shape + " isn't free";
    });
    var w3 = this.reshape(e3, [1, n3.inChannels, n3.outChannels]), E3 = this.fusedBatchMatMul({ a: x3, b: w3, transposeA: false, transposeB: false, bias: r3, activation: o4, preluActivationWeights: a3 }), R3 = this.texData.get(E3.dataId);
    return C2(R3.isPacked, function() {
      return "batchMatMul result is expected to be packed";
    }), u3.shape = b3, R3.shape = n3.outShape, Lt2.makeTensorFromDataId(E3.dataId, n3.outShape, E3.dtype);
  }, o3.prototype.conv2dWithIm2Row = function(t4, e3, n3, r3, o4, a3) {
    var i3 = n3.filterWidth, s3 = n3.filterHeight, u3 = n3.inChannels, c3 = n3.outWidth, l3 = n3.outHeight, h3 = "channelsLast" === n3.dataFormat, f3 = i3 * s3 * u3, d3 = l3 * c3, p3 = [f3, d3], v2 = t4.squeeze([0]), g2 = e3.reshape([1, f3, -1]), m3 = new Ss2(p3, v2.shape, n3), y3 = this.compileAndRun(m3, [v2]).reshape([1, p3[0], p3[1]]), x3 = null != r3, b3 = null != a3, w3 = o4 ? Lu2(o4, true) : null, C3 = new _s2(y3.shape, [1, d3, n3.outChannels], true, false, x3, w3, b3), E3 = [y3, g2];
    r3 && E3.push(r3), b3 && E3.push(a3);
    var R3 = this.compileAndRun(C3, E3);
    return h3 ? R3.reshape([1, l3, c3, n3.outChannels]) : R3.reshape([1, n3.outChannels, l3, c3]);
  }, o3.prototype.fusedConv2d = function(t4) {
    var e3 = t4.input, n3 = t4.filter, r3 = t4.convInfo, o4 = t4.bias, a3 = t4.activation, s3 = t4.preluActivationWeights;
    if (1 === r3.filterHeight && 1 === r3.filterWidth && 1 === r3.dilationHeight && 1 === r3.dilationWidth && 1 === r3.strideHeight && 1 === r3.strideWidth && ("SAME" === r3.padInfo.type || "VALID" === r3.padInfo.type)) return this.conv2dByMatMul(e3, n3, r3, o4, a3, s3);
    if (i2().getBool("WEBGL_CONV_IM2COL") && 1 === e3.shape[0]) return this.conv2dWithIm2Row(e3, n3, r3, o4, a3, s3);
    var u3 = null != o4, c3 = null != s3, l3 = a3 ? Lu2(a3, false) : null, h3 = new Ui2(r3, u3, l3, c3), f3 = [e3, n3];
    return o4 && f3.push(o4), s3 && f3.push(s3), this.compileAndRun(h3, f3);
  }, o3.prototype.conv2d = function(t4, e3, n3) {
    if (1 === n3.filterHeight && 1 === n3.filterWidth && 1 === n3.dilationHeight && 1 === n3.dilationWidth && 1 === n3.strideHeight && 1 === n3.strideWidth && ("SAME" === n3.padInfo.type || "VALID" === n3.padInfo.type)) return this.conv2dByMatMul(t4, e3, n3);
    if (i2().getBool("WEBGL_CONV_IM2COL") && 1 === t4.shape[0]) return this.conv2dWithIm2Row(t4, e3, n3);
    var r3 = new Ui2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.conv2dDerInput = function(t4, e3, n3) {
    var r3 = new Mi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    var r3 = new Oi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.fusedDepthwiseConv2D = function(t4) {
    var e3, n3 = t4.input, r3 = t4.filter, o4 = t4.convInfo, a3 = t4.bias, s3 = t4.activation, u3 = t4.preluActivationWeights, c3 = i2().getBool("WEBGL_PACK_DEPTHWISECONV") && o4.strideWidth <= 2 && o4.outChannels / o4.inChannels == 1, l3 = s3 ? Lu2(s3, c3) : null, h3 = [n3, r3], f3 = null != a3, d3 = null != u3;
    return f3 && h3.push(a3), d3 && h3.push(u3), c3 ? (e3 = new Gi2(o4, f3, l3, d3), this.compileAndRun(e3, h3)) : (e3 = new zi2(o4, f3, l3, d3), this.compileAndRun(e3, h3));
  }, o3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    var r3;
    return i2().getBool("WEBGL_PACK_DEPTHWISECONV") && n3.strideWidth <= 2 && n3.outChannels / n3.inChannels == 1 ? (r3 = new Gi2(n3), this.compileAndRun(r3, [t4, e3])) : (r3 = new zi2(n3), this.compileAndRun(r3, [t4, e3]));
  }, o3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    var r3 = new Wi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    var r3 = new Li2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.conv3d = function(t4, e3, n3) {
    var r3 = new Vi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.conv3dDerInput = function(t4, e3, n3) {
    var r3 = new Pi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    var r3 = new Bi2(n3);
    return this.compileAndRun(r3, [t4, e3]);
  }, o3.prototype.maxPool = function(t4, e3) {
    var n3 = new Ws2(e3, "max", false);
    return this.compileAndRun(n3, [t4]);
  }, o3.prototype.avgPool = function(t4, e3) {
    var n3 = new Ws2(e3, "avg", false);
    return this.compileAndRun(n3, [t4], "float32");
  }, o3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    var o4 = new Ws2(r3, "max", true), a3 = this.compileAndRun(o4, [e3]), i3 = new Ns2(r3), s3 = this.compileAndRun(i3, [t4, a3], e3.dtype);
    return a3.dispose(), s3;
  }, o3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    var r3 = new fi2(n3);
    return this.compileAndRun(r3, [t4], e3.dtype);
  }, o3.prototype.cast = function(t4, e3) {
    return Ra2(t4, e3, this);
  }, o3.prototype.unstack = function(t4, e3) {
    for (var n3 = t4.shape[e3], r3 = new Array(t4.rank - 1), o4 = 0, a3 = 0; a3 < t4.rank; a3++) a3 !== e3 && (r3[o4++] = t4.shape[a3]);
    var i3 = new Array(t4.rank).fill(0), s3 = t4.shape.slice();
    s3[e3] = 1;
    var u3 = new Array(n3);
    for (a3 = 0; a3 < u3.length; a3++) i3[e3] = a3, u3[a3] = this.slice(t4, i3, s3).reshape(r3);
    return u3;
  }, o3.prototype.avgPool3d = function(t4, e3) {
    var n3 = new Us2(e3, "avg", false);
    return this.compileAndRun(n3, [t4], "float32");
  }, o3.prototype.avgPool3dBackprop = function(t4, e3, n3) {
    var r3 = new di2(n3);
    return this.compileAndRun(r3, [t4], e3.dtype);
  }, o3.prototype.maxPool3d = function(t4, e3) {
    var n3 = new Us2(e3, "max", false);
    return this.compileAndRun(n3, [t4], "float32");
  }, o3.prototype.maxPool3dBackprop = function(t4, e3, n3, r3) {
    var o4 = new Us2(r3, "max", true), a3 = this.compileAndRun(o4, [e3]), i3 = new Fs2(r3), s3 = this.compileAndRun(i3, [t4, a3], e3.dtype);
    return a3.dispose(), s3;
  }, o3.prototype.reshape = function(t4, e3) {
    var n3 = this.texData.get(t4.dataId);
    if (n3.isPacked && !_e2(t4.shape, e3) && (null === n3.texture || !_e2(n3.shape, e3))) {
      var r3 = this.packedReshape(t4, e3);
      return Lt2.makeTensorFromDataId(r3.dataId, r3.shape, r3.dtype);
    }
    return Ia2(t4, e3);
  }, o3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    var o4 = i2().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new qs2(t4.shape, e3, n3, r3) : new Hs2(t4.shape, e3, n3, r3);
    return this.compileAndRun(o4, [t4], "float32");
  }, o3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    var r3 = new Gs2(t4, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, o3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    var o4 = new js2(t4.shape, e3, n3, r3);
    return this.compileAndRun(o4, [t4]);
  }, o3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    var r3 = new Ks2(t4, e3, n3);
    return this.compileAndRun(r3, [t4]);
  }, o3.prototype.multinomial = function(t4, e3, n3, r3) {
    var o4 = e3 ? t4 : ia2(t4), a3 = o4.shape[0], i3 = o4.shape[1], s3 = new Os2(a3, i3, n3), u3 = s3.getCustomSetupFunc(r3);
    return this.compileAndRun(s3, [o4], "int32", u3);
  }, o3.prototype.oneHot = function(t4, e3, n3, r3) {
    var o4 = new Ms2(t4.size, e3, n3, r3);
    return this.compileAndRun(o4, [t4]);
  }, o3.prototype.diag = function(t4) {
    var e3 = new $i2(t4.size);
    return this.compileAndRun(e3, [t4]);
  }, o3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o4) {
    return dn2("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), Oa2(t4.dataSync(), e3.dataSync(), n3, r3, o4);
  }, o3.prototype.cropAndResize = function(t4, e3, n3, r3, o4, a3) {
    var i3 = new Hi2(t4.shape, e3.shape, r3, o4, a3);
    return this.compileAndRun(i3, [t4, e3, n3], "float32");
  }, o3.prototype.depthToSpace = function(t4, e3, n3) {
    C2(e3 > 1, function() {
      return "blockSize should be > 1 for depthToSpace, but was: " + e3;
    });
    var r3 = t4.shape[0], o4 = "NHWC" === n3 ? t4.shape[1] : t4.shape[2], a3 = "NHWC" === n3 ? t4.shape[2] : t4.shape[3], i3 = "NHWC" === n3 ? t4.shape[3] : t4.shape[1], s3 = o4 * e3, u3 = a3 * e3, c3 = i3 / (e3 * e3), l3 = new Yi2("NHWC" === n3 ? [r3, s3, u3, c3] : [r3, c3, s3, u3], e3, n3);
    return this.compileAndRun(l3, [t4]);
  }, o3.prototype.split = function(t4, e3, n3) {
    return Ua2(t4, e3, n3);
  }, o3.prototype.scatterND = function(t4, e3, n3) {
    var r3 = Go2(0, t4, n3), o4 = r3.sliceRank, a3 = r3.numUpdates, i3 = r3.sliceSize, s3 = r3.strides, u3 = r3.outputSize, c3 = [u3 / i3, i3], l3 = t4.reshape([a3, o4]), h3 = e3.reshape([a3, i3]);
    if (0 === u3) return Ia2(Fn2([]), n3);
    var f3 = On2(0), d3 = new $s2(a3, o4, l3.rank, h3.rank, s3, c3);
    return this.compileAndRun(d3, [h3, l3, f3]).reshape(n3);
  }, o3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    var o4 = Go2(0, t4, n3), a3 = o4.sliceRank, i3 = o4.numUpdates, s3 = o4.strides, u3 = o4.outputSize, c3 = new $s2(i3, a3, t4.rank, e3.rank, s3, [u3, 1], false);
    return this.compileAndRun(c3, [e3, t4, r3]).reshape(n3);
  }, o3.prototype.fft = function(t4) {
    return this.fftImpl(t4, false);
  }, o3.prototype.ifft = function(t4) {
    return this.fftImpl(t4, true);
  }, o3.prototype.fftImpl = function(t4, e3) {
    var n3 = this.texData.get(t4.dataId), r3 = new rs2(es2, t4.shape, e3), o4 = new rs2(ns2, t4.shape, e3), a3 = [this.makeComplexComponentTensorInfo(t4, n3.complexTensors.real), this.makeComplexComponentTensorInfo(t4, n3.complexTensors.imag)], i3 = this.compileAndRun(r3, a3), s3 = this.compileAndRun(o4, a3), u3 = this.complex(i3, s3).as2D(t4.shape[0], t4.shape[1]);
    return i3.dispose(), s3.dispose(), u3;
  }, o3.prototype.gatherND = function(t4, e3) {
    var n3 = e3.shape, r3 = n3[n3.length - 1], o4 = Po2(t4, e3), a3 = o4[0], i3 = o4[1], s3 = o4[2], u3 = o4[3], c3 = e3.reshape([i3, r3]), l3 = t4.reshape([t4.size / s3, s3]), h3 = new is2(r3, u3, [i3, s3]);
    return this.compileAndRun(h3, [l3, c3]).reshape(a3);
  }, o3.prototype.fill = function(t4, e3, n3) {
    if ("string" === (n3 = n3 || j2(e3))) {
      var r3 = P2(n3, k2(t4));
      return r3.fill(e3), Lt2.makeTensor(r3, t4, n3, this);
    }
    var o4 = new os2(t4, e3), a3 = o4.getCustomSetupFunc(e3);
    return this.compileAndRun(o4, [], n3, a3);
  }, o3.prototype.onesLike = function(t4) {
    if ("string" === t4.dtype) throw new Error("onesLike is not supported under string dtype");
    return this.fill(t4.shape, 1, t4.dtype);
  }, o3.prototype.zerosLike = function(t4) {
    return this.fill(t4.shape, "string" === t4.dtype ? "" : 0, t4.dtype);
  }, o3.prototype.linspace = function(t4, e3, n3) {
    return ka2(t4, e3, n3);
  }, o3.prototype.makeTensorInfo = function(t4, e3) {
    var n3 = this.write(null, t4, e3);
    return this.texData.get(n3).usage = null, { dataId: n3, shape: t4, dtype: e3 };
  }, o3.prototype.makeOutput = function(t4, e3) {
    var n3 = this.makeTensorInfo(t4, e3).dataId;
    return Lt2.makeTensorFromDataId(n3, t4, e3, this);
  }, o3.prototype.unpackTensor = function(t4) {
    var e3 = new Bu2(t4.shape);
    return this.runWebGLProgram(e3, [t4], t4.dtype);
  }, o3.prototype.packTensor = function(t4) {
    var e3 = new Bs2(t4.shape);
    return this.runWebGLProgram(e3, [t4], t4.dtype, null, true);
  }, o3.prototype.packedReshape = function(t4, e3) {
    var n3 = [Ae2(t4.shape)].concat(Te2(t4.shape)), r3 = { dtype: t4.dtype, shape: n3, dataId: t4.dataId }, o4 = [Ae2(e3)].concat(Te2(e3)), a3 = new zs2(o4, n3), i3 = this.runWebGLProgram(a3, [r3], t4.dtype, null, true);
    return { dataId: i3.dataId, shape: e3, dtype: i3.dtype };
  }, o3.prototype.decode = function(t4) {
    var e3, n3 = this.texData.get(t4), r3 = n3.isPacked, o4 = n3.shape, a3 = n3.dtype, i3 = De2(o4);
    e3 = r3 ? new Xi2(i3) : new ji2(i3);
    return { dtype: a3, shape: o4, dataId: this.runWebGLProgram(e3, [{ shape: i3, dtype: a3, dataId: t4 }], a3, null, true).dataId };
  }, o3.prototype.runWebGLProgram = function(t4, e3, n3, r3, o4) {
    var a3 = this;
    void 0 === o4 && (o4 = false);
    var s3 = this.makeTensorInfo(t4.outputShape, n3), u3 = this.texData.get(s3.dataId);
    if (t4.packedOutput && (u3.isPacked = true), t4.outPackingScheme === Vt2.DENSE) {
      var c3 = Yt2(t4.outputShape);
      u3.texShape = c3.map(function(t5) {
        return 2 * t5;
      });
    }
    if (null != t4.outTexUsage && (u3.usage = t4.outTexUsage), 0 === k2(s3.shape)) return u3.values = B2(s3.dtype, 0), s3;
    var l3 = [], h3 = e3.map(function(e4) {
      if ("complex64" === e4.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      var n4 = a3.texData.get(e4.dataId);
      if (null == n4.texture) {
        if (!t4.packedInputs && k2(e4.shape) <= i2().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: e4.shape, texData: null, isUniform: true, uniformValues: n4.values };
        t4.packedInputs && (n4.isPacked = true, n4.shape = e4.shape);
      } else if (!!n4.isPacked != !!t4.packedInputs) e4 = n4.isPacked ? a3.unpackTensor(e4) : a3.packTensor(e4), l3.push(e4), n4 = a3.texData.get(e4.dataId);
      else if (n4.isPacked && !_e2(n4.shape, e4.shape)) {
        var r4 = e4, o5 = e4.shape;
        e4.shape = n4.shape, e4 = a3.packedReshape(e4, o5), l3.push(e4), n4 = a3.texData.get(e4.dataId), r4.shape = o5;
      }
      return a3.uploadToGPU(e4.dataId), { shape: e4.shape, texData: n4, isUniform: false };
    });
    this.uploadToGPU(s3.dataId);
    var f3, d3 = { shape: s3.shape, texData: u3, isUniform: false }, p3 = function(t5, e4, n4) {
      var r4 = "";
      e4.concat(n4).forEach(function(t6) {
        var e5 = null != t6.texData && null != t6.texData.slice && t6.texData.slice.flatOffset > 0, n5 = t6.isUniform ? "uniform" : t6.texData.texShape;
        r4 += t6.shape + "_" + n5 + "_" + e5;
      });
      var o5 = t5.userCode, a4 = t5.constructor.name;
      return a4 += "_" + r4 + "_" + o5;
    }(t4, h3, d3), v2 = this.getAndSaveBinary(p3, function() {
      return function(t5, e4, n4, r4) {
        var o5 = e4.userCode, a4 = n4.map(function(t6, n5) {
          var r5 = { logicalShape: t6.shape, texShape: t6.isUniform ? null : t6.texData.texShape, isUniform: t6.isUniform, isPacked: !t6.isUniform && t6.texData.isPacked, flatOffset: null };
          return null != t6.texData && null != t6.texData.slice && t6.texData.slice.flatOffset > 0 && (r5.flatOffset = t6.texData.slice.flatOffset), { name: e4.variableNames[n5], shapeInfo: r5 };
        }), s4 = a4.map(function(t6) {
          return t6.shapeInfo;
        }), u4 = { logicalShape: r4.shape, texShape: r4.texData.texShape, isUniform: false, isPacked: r4.texData.isPacked, flatOffset: null }, c4 = Za2(a4, u4, o5, e4.packedInputs), l4 = t5.createProgram(c4), h4 = null, f4 = t5.getUniformLocation(l4, "NAN", false);
        1 === i2().getNumber("WEBGL_VERSION") && (h4 = t5.getUniformLocation(l4, "INFINITY", false));
        for (var d4 = {}, p4 = 0; p4 < e4.variableNames.length; p4++) {
          var v3 = e4.variableNames[p4];
          d4[v3] = t5.getUniformLocation(l4, v3, false), d4["offset" + v3] = t5.getUniformLocation(l4, "offset" + v3, false);
        }
        return { program: e4, source: c4, webGLProgram: l4, uniformLocations: d4, inShapeInfos: s4, outShapeInfo: u4, infLoc: h4, nanLoc: f4 };
      }(a3.gpgpu, t4, h3, d3);
    }), g2 = null != this.activeTimers;
    if (g2 && (f3 = this.startTimer()), function(t5, e4, n4, r4, o5) {
      ks2(e4.inShapeInfos, n4), ks2([e4.outShapeInfo], [r4]);
      var a4 = r4.texData.texture, s4 = r4.texData.texShape;
      r4.texData.isPacked ? t5.setOutputPackedMatrixTexture(a4, s4[0], s4[1]) : t5.setOutputMatrixTexture(a4, s4[0], s4[1]), t5.setProgram(e4.webGLProgram), 1 === i2().getNumber("WEBGL_VERSION") && null !== e4.infLoc && t5.gl.uniform1f(e4.infLoc, 1 / 0), null !== e4.nanLoc && t5.gl.uniform1f(e4.nanLoc, NaN), n4.forEach(function(n5, r5) {
        var o6 = e4.program.variableNames[r5], a5 = e4.uniformLocations[o6], i3 = e4.uniformLocations["offset" + o6];
        if (null != a5) if (n5.isUniform) if (k2(n5.shape) < 2) t5.gl.uniform1f(a5, n5.uniformValues[0]);
        else {
          var s5 = n5.uniformValues;
          s5 instanceof Float32Array || (s5 = new Float32Array(s5)), t5.gl.uniform1fv(a5, s5);
        }
        else null != n5.texData.slice && null != i3 && t5.gl.uniform1i(i3, n5.texData.slice.flatOffset), t5.setInputMatrixTexture(n5.texData.texture, a5, r5);
      }), null != o5 && o5(t5, e4.webGLProgram), t5.executeProgram();
    }(this.gpgpu, v2, h3, d3, r3), l3.forEach(function(t5) {
      return a3.disposeData(t5.dataId);
    }), g2 && (f3 = this.endTimer(f3), this.activeTimers.push({ name: t4.constructor.name, query: this.getQueryTime(f3) })), !i2().getBool("WEBGL_LAZILY_UNPACK") && u3.isPacked && false === o4) {
      var m3 = this.unpackTensor(s3);
      return this.disposeData(s3.dataId), m3;
    }
    return s3;
  }, o3.prototype.compileAndRun = function(t4, e3, n3, r3, o4) {
    void 0 === o4 && (o4 = false), n3 = n3 || e3[0].dtype;
    var a3 = this.runWebGLProgram(t4, e3, n3, r3, o4);
    return Lt2.makeTensorFromDataId(a3.dataId, a3.shape, a3.dtype);
  }, o3.prototype.getAndSaveBinary = function(t4, e3) {
    return t4 in this.binaryCache || (this.binaryCache[t4] = e3()), this.binaryCache[t4];
  }, o3.prototype.getTextureManager = function() {
    return this.textureManager;
  }, o3.prototype.dispose = function() {
    var t4 = this;
    if (!this.disposed) {
      if (!i2().getBool("IS_TEST")) Object.keys(this.binaryCache).forEach(function(e3) {
        t4.gpgpu.deleteProgram(t4.binaryCache[e3].webGLProgram), delete t4.binaryCache[e3];
      });
      this.textureManager.dispose(), null != this.canvas && "undefined" != typeof HTMLCanvasElement && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true;
    }
  }, o3.prototype.floatPrecision = function() {
    var t4 = this;
    return null == this.floatPrecisionValue && (this.floatPrecisionValue = Ze2(function() {
      if (!i2().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        var e3 = i2().getBool("DEBUG");
        i2().set("DEBUG", false);
        var n3 = t4.abs(On2(1e-8)).dataSync()[0];
        if (i2().set("DEBUG", e3), n3 > 0) return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }, o3.prototype.epsilon = function() {
    return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
  }, o3.prototype.uploadToGPU = function(t4) {
    var e3, n3 = this.texData.get(t4), r3 = n3.shape, o4 = n3.dtype, a3 = n3.values, i3 = n3.texture, s3 = n3.usage, u3 = n3.isPacked;
    if (null == i3) {
      var c3, l3 = null != this.activeTimers;
      l3 && (c3 = et2());
      var h3 = n3.texShape;
      if (null == h3 && (h3 = Ne2(r3, u3), n3.texShape = h3), null != a3) {
        var f3 = De2(r3), d3 = void 0, p3 = h3[1], v2 = h3[0], g2 = a3 instanceof Uint8Array;
        u3 ? (p3 = (e3 = $t2(h3[0], h3[1]))[0], v2 = e3[1], d3 = new ts2(f3, [v2, p3], g2)) : d3 = new Zi2(f3, [v2, p3], g2);
        var m3 = this.makeTensorInfo([v2, p3], o4);
        this.texData.get(m3.dataId).usage = g2 ? zt2.PIXELS : zt2.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m3.dataId), p3, v2, a3);
        var y3 = this.runWebGLProgram(d3, [m3], o4, null, true), x3 = this.texData.get(y3.dataId);
        n3.texture = x3.texture, n3.texShape = x3.texShape, n3.isPacked = x3.isPacked, n3.usage = x3.usage, this.disposeData(m3.dataId), this.texData.delete(y3.dataId), n3.values = null, l3 && (this.uploadWaitMs += et2() - c3);
      } else {
        var b3 = this.acquireTexture(h3, s3, o4, u3);
        n3.texture = b3;
      }
    }
  }, o3.prototype.convertAndCacheOnCPU = function(t4, e3) {
    var n3 = this.texData.get(t4), r3 = n3.dtype;
    return this.releaseGPUData(t4), null != e3 && (n3.values = function(t5, e4) {
      if ("float32" === e4 || "complex64" === e4) return t5;
      if ("int32" === e4 || "bool" === e4) {
        for (var n4 = "int32" === e4 ? new Int32Array(t5.length) : new Uint8Array(t5.length), r4 = 0; r4 < n4.length; ++r4) n4[r4] = Math.round(t5[r4]);
        return n4;
      }
      throw new Error("Unknown dtype " + e4);
    }(e3, r3)), n3.values;
  }, o3.prototype.acquireTexture = function(t4, e3, n3, r3) {
    if (this.numBytesInGPU += this.computeBytes(t4, n3), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {
      var o4 = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn("High memory usage in GPU: " + o4 + " MB, most likely due to a memory leak");
    }
    return this.textureManager.acquireTexture(t4, e3, r3);
  }, o3.prototype.computeBytes = function(t4, e3) {
    return t4[0] * t4[1] * z2(e3);
  }, o3;
}(la2);
Wt2() && Lt2.registerBackend("webgl", function() {
  return new Uu2();
}, 2);
function Vu2(t3, e3) {
  return t3(e3 = { exports: {} }, e3.exports), e3.exports;
}
var zu2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4, n4 = this, r4 = (e4 = 4022871197, function(t6) {
        t6 = t6.toString();
        for (var n5 = 0; n5 < t6.length; n5++) {
          var r5 = 0.02519603282416938 * (e4 += t6.charCodeAt(n5));
          r5 -= e4 = r5 >>> 0, e4 = (r5 *= e4) >>> 0, e4 += 4294967296 * (r5 -= e4);
        }
        return 23283064365386963e-26 * (e4 >>> 0);
      });
      n4.next = function() {
        var t6 = 2091639 * n4.s0 + 23283064365386963e-26 * n4.c;
        return n4.s0 = n4.s1, n4.s1 = n4.s2, n4.s2 = t6 - (n4.c = 0 | t6);
      }, n4.c = 1, n4.s0 = r4(" "), n4.s1 = r4(" "), n4.s2 = r4(" "), n4.s0 -= r4(t5), n4.s0 < 0 && (n4.s0 += 1), n4.s1 -= r4(t5), n4.s1 < 0 && (n4.s1 += 1), n4.s2 -= r4(t5), n4.s2 < 0 && (n4.s2 += 1), r4 = null;
    }
    function o3(t5, e4) {
      return e4.c = t5.c, e4.s0 = t5.s0, e4.s1 = t5.s1, e4.s2 = t5.s2, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = n4.next;
      return i3.int32 = function() {
        return 4294967296 * n4.next() | 0;
      }, i3.double = function() {
        return i3() + 11102230246251565e-32 * (2097152 * i3() | 0);
      }, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.alea = a3;
  }(0, t3, false);
});
var Gu2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.next = function() {
        var t6 = e4.x ^ e4.x << 11;
        return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w ^= e4.w >>> 19 ^ t6 ^ t6 >>> 8;
      }, t5 === (0 | t5) ? e4.x = t5 : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 64; r4++) e4.x ^= 0 | n4.charCodeAt(r4), e4.next();
    }
    function o3(t5, e4) {
      return e4.x = t5.x, e4.y = t5.y, e4.z = t5.z, e4.w = t5.w, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xor128 = a3;
  }(0, t3, false);
});
var Hu2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.next = function() {
        var t6 = e4.x ^ e4.x >>> 2;
        return e4.x = e4.y, e4.y = e4.z, e4.z = e4.w, e4.w = e4.v, (e4.d = e4.d + 362437 | 0) + (e4.v = e4.v ^ e4.v << 4 ^ t6 ^ t6 << 1) | 0;
      }, e4.x = 0, e4.y = 0, e4.z = 0, e4.w = 0, e4.v = 0, t5 === (0 | t5) ? e4.x = t5 : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 64; r4++) e4.x ^= 0 | n4.charCodeAt(r4), r4 == n4.length && (e4.d = e4.x << 10 ^ e4.x >>> 4), e4.next();
    }
    function o3(t5, e4) {
      return e4.x = t5.x, e4.y = t5.y, e4.z = t5.z, e4.w = t5.w, e4.v = t5.v, e4.d = t5.d, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xorwow = a3;
  }(0, t3, false);
});
var qu2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this;
      e4.next = function() {
        var t6, n4, r4 = e4.x, o4 = e4.i;
        return t6 = r4[o4], n4 = (t6 ^= t6 >>> 7) ^ t6 << 24, n4 ^= (t6 = r4[o4 + 1 & 7]) ^ t6 >>> 10, n4 ^= (t6 = r4[o4 + 3 & 7]) ^ t6 >>> 3, n4 ^= (t6 = r4[o4 + 4 & 7]) ^ t6 << 7, t6 = r4[o4 + 7 & 7], n4 ^= (t6 ^= t6 << 13) ^ t6 << 9, r4[o4] = n4, e4.i = o4 + 1 & 7, n4;
      }, function(t6, e5) {
        var n4, r4 = [];
        if (e5 === (0 | e5)) r4[0] = e5;
        else for (e5 = "" + e5, n4 = 0; n4 < e5.length; ++n4) r4[7 & n4] = r4[7 & n4] << 15 ^ e5.charCodeAt(n4) + r4[n4 + 1 & 7] << 13;
        for (; r4.length < 8; ) r4.push(0);
        for (n4 = 0; n4 < 8 && 0 === r4[n4]; ++n4) ;
        for (8 == n4 ? r4[7] = -1 : r4[n4], t6.x = r4, t6.i = 0, n4 = 256; n4 > 0; --n4) t6.next();
      }(e4, t5);
    }
    function o3(t5, e4) {
      return e4.x = t5.x.slice(), e4.i = t5.i, e4;
    }
    function a3(t5, e4) {
      null == t5 && (t5 = +/* @__PURE__ */ new Date());
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && (a4.x && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xorshift7 = a3;
  }(0, t3, false);
});
var Ku2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this;
      e4.next = function() {
        var t6, n4, r4 = e4.w, o4 = e4.X, a4 = e4.i;
        return e4.w = r4 = r4 + 1640531527 | 0, n4 = o4[a4 + 34 & 127], t6 = o4[a4 = a4 + 1 & 127], n4 ^= n4 << 13, t6 ^= t6 << 17, n4 ^= n4 >>> 15, t6 ^= t6 >>> 12, n4 = o4[a4] = n4 ^ t6, e4.i = a4, n4 + (r4 ^ r4 >>> 16) | 0;
      }, function(t6, e5) {
        var n4, r4, o4, a4, i3, s3 = [], u3 = 128;
        for (e5 === (0 | e5) ? (r4 = e5, e5 = null) : (e5 += "\0", r4 = 0, u3 = Math.max(u3, e5.length)), o4 = 0, a4 = -32; a4 < u3; ++a4) e5 && (r4 ^= e5.charCodeAt((a4 + 32) % e5.length)), 0 === a4 && (i3 = r4), r4 ^= r4 << 10, r4 ^= r4 >>> 15, r4 ^= r4 << 4, r4 ^= r4 >>> 13, a4 >= 0 && (i3 = i3 + 1640531527 | 0, o4 = 0 == (n4 = s3[127 & a4] ^= r4 + i3) ? o4 + 1 : 0);
        for (o4 >= 128 && (s3[127 & (e5 && e5.length || 0)] = -1), o4 = 127, a4 = 512; a4 > 0; --a4) r4 = s3[o4 + 34 & 127], n4 = s3[o4 = o4 + 1 & 127], r4 ^= r4 << 13, n4 ^= n4 << 17, r4 ^= r4 >>> 15, n4 ^= n4 >>> 12, s3[o4] = r4 ^ n4;
        t6.w = i3, t6.X = s3, t6.i = o4;
      }(e4, t5);
    }
    function o3(t5, e4) {
      return e4.i = t5.i, e4.w = t5.w, e4.X = t5.X.slice(), e4;
    }
    function a3(t5, e4) {
      null == t5 && (t5 = +/* @__PURE__ */ new Date());
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && (a4.X && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.xor4096 = a3;
  }(0, t3, false);
});
var ju2 = Vu2(function(t3) {
  !function(t4, e3, n3) {
    function r3(t5) {
      var e4 = this, n4 = "";
      e4.next = function() {
        var t6 = e4.b, n5 = e4.c, r5 = e4.d, o4 = e4.a;
        return t6 = t6 << 25 ^ t6 >>> 7 ^ n5, n5 = n5 - r5 | 0, r5 = r5 << 24 ^ r5 >>> 8 ^ o4, o4 = o4 - t6 | 0, e4.b = t6 = t6 << 20 ^ t6 >>> 12 ^ n5, e4.c = n5 = n5 - r5 | 0, e4.d = r5 << 16 ^ n5 >>> 16 ^ o4, e4.a = o4 - t6 | 0;
      }, e4.a = 0, e4.b = 0, e4.c = -1640531527, e4.d = 1367130551, t5 === Math.floor(t5) ? (e4.a = t5 / 4294967296 | 0, e4.b = 0 | t5) : n4 += t5;
      for (var r4 = 0; r4 < n4.length + 20; r4++) e4.b ^= 0 | n4.charCodeAt(r4), e4.next();
    }
    function o3(t5, e4) {
      return e4.a = t5.a, e4.b = t5.b, e4.c = t5.c, e4.d = t5.d, e4;
    }
    function a3(t5, e4) {
      var n4 = new r3(t5), a4 = e4 && e4.state, i3 = function() {
        return (n4.next() >>> 0) / 4294967296;
      };
      return i3.double = function() {
        do {
          var t6 = ((n4.next() >>> 11) + (n4.next() >>> 0) / 4294967296) / (1 << 21);
        } while (0 === t6);
        return t6;
      }, i3.int32 = n4.next, i3.quick = i3, a4 && ("object" == typeof a4 && o3(a4, n4), i3.state = function() {
        return o3(n4, {});
      }), i3;
    }
    e3 && e3.exports ? e3.exports = a3 : n3 && n3.amd ? n3(function() {
      return a3;
    }) : this.tychei = a3;
  }(0, t3, false);
});
var Xu2 = Vu2(function(t3) {
  !function(e3, n3) {
    var r3, o3 = this, a3 = 256, i3 = 6, s3 = "random", u3 = n3.pow(a3, i3), c3 = n3.pow(2, 52), l3 = 2 * c3, h3 = a3 - 1;
    function f3(t4, h4, f4) {
      var m3 = [], y3 = v2(function t5(e4, n4) {
        var r4, o4 = [], a4 = typeof e4;
        if (n4 && "object" == a4) for (r4 in e4) try {
          o4.push(t5(e4[r4], n4 - 1));
        } catch (t6) {
        }
        return o4.length ? o4 : "string" == a4 ? e4 : e4 + "\0";
      }((h4 = 1 == h4 ? { entropy: true } : h4 || {}).entropy ? [t4, g2(e3)] : null == t4 ? function() {
        try {
          var t5;
          return r3 && (t5 = r3.randomBytes) ? t5 = t5(a3) : (t5 = new Uint8Array(a3), (o3.crypto || o3.msCrypto).getRandomValues(t5)), g2(t5);
        } catch (t6) {
          var n4 = o3.navigator, i4 = n4 && n4.plugins;
          return [+/* @__PURE__ */ new Date(), o3, i4, o3.screen, g2(e3)];
        }
      }() : t4, 3), m3), x3 = new d3(m3), b3 = function() {
        for (var t5 = x3.g(i3), e4 = u3, n4 = 0; t5 < c3; ) t5 = (t5 + n4) * a3, e4 *= a3, n4 = x3.g(1);
        for (; t5 >= l3; ) t5 /= 2, e4 /= 2, n4 >>>= 1;
        return (t5 + n4) / e4;
      };
      return b3.int32 = function() {
        return 0 | x3.g(4);
      }, b3.quick = function() {
        return x3.g(4) / 4294967296;
      }, b3.double = b3, v2(g2(x3.S), e3), (h4.pass || f4 || function(t5, e4, r4, o4) {
        return o4 && (o4.S && p3(o4, x3), t5.state = function() {
          return p3(x3, {});
        }), r4 ? (n3[s3] = t5, e4) : t5;
      })(b3, y3, "global" in h4 ? h4.global : this == n3, h4.state);
    }
    function d3(t4) {
      var e4, n4 = t4.length, r4 = this, o4 = 0, i4 = r4.i = r4.j = 0, s4 = r4.S = [];
      for (n4 || (t4 = [n4++]); o4 < a3; ) s4[o4] = o4++;
      for (o4 = 0; o4 < a3; o4++) s4[o4] = s4[i4 = h3 & i4 + t4[o4 % n4] + (e4 = s4[o4])], s4[i4] = e4;
      (r4.g = function(t5) {
        for (var e5, n5 = 0, o5 = r4.i, i5 = r4.j, s5 = r4.S; t5--; ) e5 = s5[o5 = h3 & o5 + 1], n5 = n5 * a3 + s5[h3 & (s5[o5] = s5[i5 = h3 & i5 + e5]) + (s5[i5] = e5)];
        return r4.i = o5, r4.j = i5, n5;
      })(a3);
    }
    function p3(t4, e4) {
      return e4.i = t4.i, e4.j = t4.j, e4.S = t4.S.slice(), e4;
    }
    function v2(t4, e4) {
      for (var n4, r4 = t4 + "", o4 = 0; o4 < r4.length; ) e4[h3 & o4] = h3 & (n4 ^= 19 * e4[h3 & o4]) + r4.charCodeAt(o4++);
      return g2(e4);
    }
    function g2(t4) {
      return String.fromCharCode.apply(0, t4);
    }
    if (n3["seed" + s3] = f3, v2(n3.random(), e3), t3.exports) {
      t3.exports = f3;
      try {
        r3 = require_crypto();
      } catch (t4) {
      }
    }
  }([], Math);
});
Xu2.alea = zu2, Xu2.xor128 = Gu2, Xu2.xorwow = Hu2, Xu2.xorshift7 = qu2, Xu2.xor4096 = Ku2, Xu2.tychei = ju2;
var Yu2 = Xu2.alea;
var $u2 = An2({ addN_: function(t3) {
  C2(Array.isArray(t3), function() {
    return "The argument passed to tf.addN() must be a list of tensors";
  }), C2(t3.length >= 1, function() {
    return "Must pass at least one tensor to tf.addN(), but got " + t3.length;
  });
  var e3 = t3.map(function(t4, e4) {
    return gn2(t4, "tensors" + e4, "addN");
  }), n3 = e3[0];
  e3.forEach(function(t4) {
    if (t4.dtype !== n3.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e3.forEach(function(t4) {
    if (!S2(t4.shape, n3.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  var r3 = e3;
  return Lt2.runKernelFunc(function(t4, n4) {
    return t4.addN(e3);
  }, r3, null, "AddN");
} });
function Qu2() {
  Xe2("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
}
function Ju2(t3) {
  return 0 === t3.rank || 1 === t3.rank ? t3.as4D(1, 1, 1, t3.size) : 2 === t3.rank ? t3.as4D(1, 1, t3.shape[0], t3.shape[1]) : 3 === t3.rank ? t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]) : t3;
}
function Zu2(t3, e3, n3, r3, o3, a3) {
  null == a3 && (a3 = 1e-3);
  var i3, s3, u3 = gn2(t3, "x", "batchNorm"), c3 = gn2(e3, "mean", "batchNorm"), l3 = gn2(n3, "variance", "batchNorm");
  null != o3 && (i3 = gn2(o3, "scale", "batchNorm")), null != r3 && (s3 = gn2(r3, "offset", "batchNorm")), C2(c3.rank === l3.rank, function() {
    return "Batch normalization gradient requires mean and variance to have equal ranks.";
  }), C2(null == s3 || c3.rank === s3.rank, function() {
    return "Batch normalization gradient requires mean and offset to have equal ranks.";
  }), C2(null == i3 || c3.rank === i3.rank, function() {
    return "Batch normalization gradient requires mean and scale to have equal ranks.";
  });
  var h3 = { x: u3, scale: i3, offset: s3, mean: c3, variance: l3 }, f3 = { varianceEpsilon: a3 };
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = Ju2(u3), r4 = t4.batchNormalization(n4, tc2(c3), tc2(l3), a3, tc2(i3), tc2(s3));
    return e4([u3, c3, l3, i3]), r4;
  }, h3, null, "FusedBatchNorm", f3).reshape(u3.shape);
}
function tc2(t3) {
  return null == t3 ? null : 0 === t3.rank ? t3.as1D() : 1 === t3.rank ? t3 : 2 === t3.rank ? t3.as4D(1, 1, t3.shape[0], t3.shape[1]) : 3 === t3.rank ? t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]) : t3;
}
var ec2 = An2({ batchNormalization_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Qu2(), Zu2(t3, e3, n3, a3, o3, r3);
} });
var nc2 = An2({ batchNorm_: Zu2 });
function rc2(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = gn2(t3, "x", "batchNorm"), c3 = gn2(e3, "mean", "batchNorm"), l3 = gn2(n3, "variance", "batchNorm");
  return null != o3 && (i3 = gn2(o3, "scale", "batchNorm")), null != r3 && (s3 = gn2(r3, "offset", "batchNorm")), C2(2 === u3.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + u3.rank + ".";
  }), C2(2 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + c3.rank + ".";
  }), C2(2 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + l3.rank + ".";
  }), null != i3 && C2(2 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && C2(2 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s3.rank + ".";
  }), nc2(u3, c3, l3, s3, i3, a3);
}
var oc2 = An2({ batchNormalization2d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Qu2(), rc2(t3, e3, n3, a3, o3, r3);
} });
var ac2 = An2({ batchNorm2d_: rc2 });
function ic2(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = gn2(t3, "x", "batchNorm"), c3 = gn2(e3, "mean", "batchNorm"), l3 = gn2(n3, "variance", "batchNorm");
  return null != o3 && (i3 = gn2(o3, "scale", "batchNorm")), null != r3 && (s3 = gn2(r3, "offset", "batchNorm")), C2(3 === u3.rank, function() {
    return "Error in batchNorm3D: x must be rank 3 but got rank " + u3.rank + ".";
  }), C2(3 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + c3.rank + ".";
  }), C2(3 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + l3.rank + ".";
  }), null != i3 && C2(3 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && C2(3 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s3.rank + ".";
  }), nc2(u3, c3, l3, s3, i3, a3);
}
var sc2 = An2({ batchNormalization3d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Qu2(), ic2(t3, e3, n3, a3, o3, r3);
} });
var uc2 = An2({ batchNorm3d_: ic2 });
function cc2(t3, e3, n3, r3, o3, a3) {
  var i3, s3, u3 = gn2(t3, "x", "batchNorm"), c3 = gn2(e3, "mean", "batchNorm"), l3 = gn2(n3, "variance", "batchNorm");
  return null != o3 && (i3 = gn2(o3, "scale", "batchNorm")), null != r3 && (s3 = gn2(r3, "offset", "batchNorm")), C2(4 === u3.rank, function() {
    return "Error in batchNorm4D: x must be rank 4 but got rank " + u3.rank + ".";
  }), C2(4 === c3.rank || 1 === c3.rank, function() {
    return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + c3.rank + ".";
  }), C2(4 === l3.rank || 1 === l3.rank, function() {
    return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + l3.rank + ".";
  }), null != i3 && C2(4 === i3.rank || 1 === i3.rank, function() {
    return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i3.rank + ".";
  }), null != s3 && C2(4 === s3.rank || 1 === s3.rank, function() {
    return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s3.rank + ".";
  }), nc2(u3, c3, l3, s3, i3, a3);
}
var lc2 = An2({ batchNormalization4d_: function(t3, e3, n3, r3, o3, a3) {
  return void 0 === r3 && (r3 = 1e-3), Qu2(), cc2(t3, e3, n3, a3, o3, r3);
} });
var hc2 = An2({ batchNorm4d_: cc2 });
var fc2 = An2({ broadcastTo_: function(t3, e3) {
  var n3 = gn2(t3, "broadcastTo", "x"), r3 = n3.shape;
  if (e3.some(function(t4) {
    return !(t4 > 0) || t4 % 1 != 0;
  })) throw new Error("broadcastTo(): Invalid broadcast shape [" + e3 + "].");
  if (e3.length < n3.rank) throw new Error("broadcastTo(): shape.length=" + e3.length + " < input.rank=" + n3.rank + ".");
  if (e3.length > n3.rank) {
    for (var o3 = n3.shape.slice(); o3.length < e3.length; ) o3.unshift(1);
    n3 = n3.reshape(o3);
  }
  for (var a3 = n3.shape, i3 = Array.from(e3), s3 = e3.length - 1; s3 >= 0; s3--) if (a3[s3] === e3[s3]) i3[s3] = 1;
  else if (1 !== n3.shape[s3]) throw new Error("broadcastTo(): [" + r3 + "] cannot be broadcast to [" + e3 + "].");
  var u3 = i3.map(function(t4, e4) {
    return t4 > 1 ? e4 : -1;
  }).filter(function(t4) {
    return t4 >= 0;
  });
  if (0 === u3.length) return n3.clone();
  var c3 = { x: n3 }, l3 = { shape: e3, inputShape: a3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.tile(n3, i3);
  }, c3, function(t4) {
    return { x: function() {
      return t4.sum(u3, true);
    } };
  }, Sr2, l3);
} });
var dc2 = An2({ clone_: function(t3) {
  var e3 = gn2(t3, "x", "clone", null);
  return Lt2.runKernelFunc(function() {
    return Lt2.makeTensorFromDataId(e3.dataId, e3.shape, e3.dtype);
  }, { x: e3 }, null, Tr2);
} });
var pc2 = An2({ logicalAnd_: function(t3, e3) {
  var n3 = gn2(t3, "a", "logicalAnd", "bool"), r3 = gn2(e3, "b", "logicalAnd", "bool");
  return Pr2(n3.shape, r3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.logicalAnd(n3, r3);
  }, { a: n3, b: r3 }, null, "LogicalAnd");
} });
var vc2 = An2({ logicalNot_: function(t3) {
  var e3 = gn2(t3, "x", "logicalNot", "bool");
  return Lt2.runKernelFunc(function(t4) {
    return t4.logicalNot(e3);
  }, { $x: e3 });
} });
var gc2 = An2({ logicalOr_: function(t3, e3) {
  var n3 = gn2(t3, "a", "logicalOr", "bool"), r3 = gn2(e3, "b", "logicalOr", "bool");
  return Pr2(n3.shape, r3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.logicalOr(n3, r3);
  }, { $a: n3, $b: r3 });
} });
var mc2 = An2({ logicalXor_: function(t3, e3) {
  var n3 = gn2(t3, "a", "logicalXor", "bool"), r3 = gn2(e3, "b", "logicalXor", "bool");
  return Pr2(n3.shape, r3.shape), gc2(t3, e3).logicalAnd(pc2(t3, e3).logicalNot());
} });
var yc2 = An2({ where_: function(t3, e3, n3) {
  var r3 = gn2(e3, "a", "where"), o3 = gn2(n3, "b", "where"), a3 = gn2(t3, "condition", "where", "bool");
  return E2(r3.shape, o3.shape, "Error in where: "), 1 === a3.rank ? C2(a3.shape[0] === r3.shape[0], function() {
    return "The first dimension of `a` must match the size of `condition`.";
  }) : E2(a3.shape, o3.shape, "Error in where: "), Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.select(a3, r3, o3);
    return e4([a3]), n4;
  }, { $condition: a3, $a: r3, $b: o3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $condition: function() {
      return Xn2(n4).toFloat();
    }, $a: function() {
      return t4.mul(n4.cast(t4.dtype));
    }, $b: function() {
      return t4.mul(n4.logicalNot().cast(t4.dtype));
    } };
  });
} });
var xc2 = function(t3) {
  return n2(this, void 0, void 0, function() {
    var e3, n3, o3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return [4, (e3 = gn2(t3, "condition", "whereAsync", "bool")).data()];
        case 1:
          return n3 = r3.sent(), o3 = Ga2(e3.shape, n3), t3 !== e3 && e3.dispose(), [2, o3];
      }
    });
  });
};
var bc2 = An2({ divNoNan_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "div"), o3 = gn2(e3, "b", "div");
  r3 = (n3 = Nt2(r3, o3))[0], o3 = n3[1];
  var a3 = Bo2(r3, o3), i3 = Xn2(a3), s3 = o3.equal(i3);
  return yc2(s3, i3, a3);
} });
var wc2 = An2({ tile_: function(t3, e3) {
  var n3 = gn2(t3, "x", "tile", null);
  C2(n3.rank === e3.length, function() {
    return "Error in transpose: rank of input " + n3.rank + " must match length of reps " + e3 + ".";
  });
  var r3 = [n3], o3 = { x: n3 }, a3 = { reps: e3 };
  return Lt2.runKernelFunc(function(t4, r4) {
    var o4 = t4.tile(n3, e3);
    return r4([n3]), o4;
  }, o3, null, Dr2, a3, r3);
} });
var Cc2 = An2({ eye_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = "float32"), null == e3 && (e3 = t3);
  for (var o3 = er2([t3, e3], r3), a3 = t3 <= e3 ? t3 : e3, i3 = 0; i3 < a3; ++i3) o3.set(1, i3, i3);
  var s3 = o3.toTensor().as2D(t3, e3);
  if (null == n3) return s3;
  if (1 === n3.length) return wc2(sr2(s3, 0), [n3[0], 1, 1]);
  if (2 === n3.length) return wc2(sr2(sr2(s3, 0), 0), [n3[0], n3[1], 1, 1]);
  if (3 === n3.length) return wc2(sr2(sr2(sr2(s3, 0), 0), 0), [n3[0], n3[1], n3[2], 1, 1]);
  throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n3.length + "D.");
} });
var Ec2 = An2({ multinomial_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = false);
  var o3 = gn2(t3, "logits", "multinomial"), a3 = o3.size, i3 = o3.rank;
  if (a3 < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a3 + ".");
  if (i3 > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i3);
  n3 = n3 || Math.random();
  var s3 = 1 === i3 ? o3.as2D(1, -1) : o3, u3 = Lt2.runKernelFunc(function(t4) {
    return t4.multinomial(s3, r3, e3, n3);
  }, { logits2D: s3 });
  return 1 === i3 ? u3.as1D() : u3;
} });
var Rc2 = An2({ oneHot_: function(t3, e3, n3, r3) {
  if (void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 0), e3 < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + e3);
  var o3 = gn2(t3, "indices", "oneHot", "int32"), a3 = o3.shape.concat([e3]), i3 = { indices: o3 = o3.flatten() }, s3 = { depth: e3, onValue: n3, offValue: r3 };
  return Lt2.runKernelFunc(function(t4, a4) {
    return a4([o3]), t4.oneHot(o3, e3, n3, r3);
  }, i3, null, Ar2, s3).reshape(a3);
} });
var Ic2 = An2({ pad_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3 = gn2(t3, "x", "pad");
  if (0 === r3.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  var o3 = { paddings: e3, constantValue: n3 }, a3 = { x: r3 };
  return Lt2.runKernelFunc(function(t4, o4) {
    return o4([r3]), t4.pad(r3, e3, n3);
  }, a3, null, Nr2, o3);
} });
var kc2 = An2({ pad1d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), C2(2 === e3.length, function() {
    return "Invalid number of paddings. Must be length of 2.";
  }), Ic2(t3, [e3], n3);
} });
var Sc2 = An2({ pad2d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), C2(2 === e3.length && 2 === e3[0].length && 2 === e3[1].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), Ic2(t3, e3, n3);
} });
var Ac2 = An2({ pad3d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), C2(3 === e3.length && 2 === e3[0].length && 2 === e3[1].length && 2 === e3[2].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), Ic2(t3, e3, n3);
} });
var Tc2 = An2({ pad4d_: function(t3, e3, n3) {
  return void 0 === n3 && (n3 = 0), C2(4 === e3.length && 2 === e3[0].length && 2 === e3[1].length && 2 === e3[2].length && 2 === e3[3].length, function() {
    return "Invalid number of paddings. Must be length of 2 each.";
  }), Ic2(t3, e3, n3);
} });
var Dc2 = An2({ rand_: function(t3, e3, n3) {
  var r3 = k2(t3), o3 = null;
  if (null == n3 || "float32" === n3) o3 = new Float32Array(r3);
  else if ("int32" === n3) o3 = new Int32Array(r3);
  else {
    if ("bool" !== n3) throw new Error("Unknown data type " + n3);
    o3 = new Uint8Array(r3);
  }
  for (var a3 = 0; a3 < r3; a3++) o3[a3] = e3();
  return Lt2.makeTensor(o3, t3, n3);
} });
var Nc2 = 1e-3;
var Fc2 = 0.1;
function _c2() {
  return 32 === Lt2.backend.floatPrecision() ? Nc2 : Fc2;
}
function Oc2(t3, e3, n3) {
  var r3 = true;
  if ((V2(t3) || V2(e3)) && (r3 = false), V2(t3) && V2(e3) && (r3 = true), r3) {
    var o3 = t3.constructor.name, a3 = e3.constructor.name;
    if (o3 !== a3) throw new Error("Arrays are of different type. Actual: " + o3 + ". Expected: " + a3);
  }
  if (Array.isArray(t3) && Array.isArray(e3)) {
    var i3 = pn2(t3), s3 = pn2(e3);
    if (!S2(i3, s3)) throw new Error("Arrays have different shapes. Actual: [" + i3 + "]. Expected: [" + s3 + "]");
  }
  var u3 = V2(t3) ? t3 : I2(t3), c3 = V2(e3) ? e3 : I2(e3);
  if (u3.length !== c3.length) throw new Error("Arrays have different lengths actual: " + u3.length + " vs expected: " + c3.length + ".\nActual:   " + u3 + ".\nExpected: " + c3 + ".");
  for (var l3 = 0; l3 < c3.length; ++l3) {
    var h3 = u3[l3], f3 = c3[l3];
    if (!n3(h3, f3)) throw new Error("Arrays differ: actual[" + l3 + "] = " + h3 + ", expected[" + l3 + "] = " + f3 + ".\nActual:   " + u3 + ".\nExpected: " + c3 + ".");
  }
}
function Mc2(t3, e3, n3) {
  return !isFinite(t3) && !isFinite(e3) || !(isNaN(t3) || isNaN(e3) || Math.abs(t3 - e3) > n3);
}
var Bc2 = Object.freeze({ TEST_EPSILON_FLOAT16: Fc2, expectArraysClose: function(t3, e3, n3) {
  return null == n3 && (n3 = _c2()), Oc2(t3, e3, function(t4, e4) {
    return Mc2(t4, e4, n3);
  });
}, testEpsilon: _c2, expectPromiseToFail: function(t3, e3) {
  t3().then(function() {
    return e3.fail();
  }, function() {
    return e3();
  });
}, expectArraysEqual: function(t3, e3) {
  var n3 = "string" == typeof e3 || "number" == typeof e3 || "boolean" == typeof e3 ? [e3] : e3;
  return H2(t3) || H2(t3[0]) || H2(e3) || H2(e3[0]) ? Oc2(t3, n3, function(t4, e4) {
    return t4 == e4;
  }) : Oc2(t3, e3, function(t4, e4) {
    return Mc2(t4, e4, 0);
  });
}, expectNumbersClose: function(t3, e3, n3) {
  if (null == n3 && (n3 = _c2()), !Mc2(t3, e3, n3)) throw new Error("Numbers differ: actual === " + t3 + ", expected === " + e3);
}, expectValuesInRange: function(t3, e3, n3) {
  for (var r3 = 0; r3 < t3.length; r3++) if (t3[r3] < e3 || t3[r3] > n3) throw new Error("Value out of range:" + t3[r3] + " low: " + e3 + ", high: " + n3);
}, expectArrayBuffersEqual: function(t3, e3) {
  expect(new Float32Array(t3)).toEqual(new Float32Array(e3));
} });
var Pc2 = function() {
  function t3(t4, e3, n3, r3, o3) {
    this.mean = t4, this.stdDev = e3, this.dtype = n3, this.nextVal = NaN, this.truncated = r3, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
    var a3 = o3 || Math.random();
    this.random = Yu2(a3.toString());
  }
  return t3.prototype.nextValue = function() {
    if (!isNaN(this.nextVal)) {
      var t4 = this.nextVal;
      return this.nextVal = NaN, t4;
    }
    for (var e3, n3, r3 = false; !r3; ) {
      var o3 = void 0, a3 = void 0, i3 = void 0;
      do {
        i3 = (o3 = 2 * this.random() - 1) * o3 + (a3 = 2 * this.random() - 1) * a3;
      } while (i3 >= 1 || 0 === i3);
      var s3 = Math.sqrt(-2 * Math.log(i3) / i3);
      e3 = this.mean + this.stdDev * o3 * s3, n3 = this.mean + this.stdDev * a3 * s3, this.truncated && !this.isValidTruncated(e3) || (r3 = true);
    }
    return this.truncated && !this.isValidTruncated(n3) || (this.nextVal = this.convertValue(n3)), this.convertValue(e3);
  }, t3.prototype.convertValue = function(t4) {
    return null == this.dtype || "float32" === this.dtype ? t4 : Math.round(t4);
  }, t3.prototype.isValidTruncated = function(t4) {
    return t4 <= this.upper && t4 >= this.lower;
  }, t3;
}();
var Lc2 = function() {
  function t3(t4, e3, n3, r3) {
    this.alpha = t4, this.beta = 1 / e3, this.dtype = n3;
    var o3 = r3 || Math.random();
    this.randu = Yu2(o3.toString()), this.randn = new Pc2(0, 1, n3, false, this.randu()), this.d = t4 < 1 ? t4 + 2 / 3 : t4 - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  return t3.prototype.nextValue = function() {
    for (var t4, e3, n3, r3, o3, a3; ; ) {
      do {
        r3 = this.randn.nextValue(), a3 = 1 + this.c * r3;
      } while (a3 <= 0);
      if (a3 *= a3 * a3, e3 = 1 - 0.331 * (t4 = r3 * r3) * t4, n3 = 0.5 * t4 + this.d * (1 - a3 + Math.log(a3)), (o3 = this.randu()) < e3 || Math.log(o3) < n3) break;
    }
    return a3 = 1 / this.beta * this.d * a3, this.alpha < 1 && (a3 *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a3);
  }, t3.prototype.convertValue = function(t4) {
    return "float32" === this.dtype ? t4 : Math.round(t4);
  }, t3;
}();
var Wc2 = function() {
  function t3(t4, e3, n3, r3) {
    var o3 = this;
    if (void 0 === t4 && (t4 = 0), void 0 === e3 && (e3 = 1), this.canReturnFloat = function() {
      return null == o3.dtype || "float32" === o3.dtype;
    }, this.min = t4, this.range = e3 - t4, this.dtype = n3, null == r3 && (r3 = Math.random()), "number" == typeof r3 && (r3 = r3.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error("The difference between " + t4 + " - " + e3 + " <= 1 and dtype is not float");
    this.random = Yu2(r3);
  }
  return t3.prototype.convertValue = function(t4) {
    return this.canReturnFloat() ? t4 : Math.round(t4);
  }, t3.prototype.nextValue = function() {
    return this.convertValue(this.min + this.range * this.random());
  }, t3;
}();
var Uc2 = An2({ randomGamma_: function(t3, e3, n3, r3, o3) {
  if (void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = "float32"), null == n3 && (n3 = 1), null == r3 && (r3 = "float32"), "float32" !== r3 && "int32" !== r3) throw new Error("Unsupported data type " + r3);
  for (var a3 = new Lc2(e3, n3, r3, o3), i3 = er2(t3, r3), s3 = 0; s3 < i3.values.length; s3++) i3.values[s3] = a3.nextValue();
  return i3.toTensor();
} });
var Vc2 = An2({ randomNormal_: function(t3, e3, n3, r3, o3) {
  if (void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), null != r3 && "bool" === r3) throw new Error("Unsupported data type " + r3);
  for (var a3 = new Pc2(e3, n3, r3, false, o3), i3 = er2(t3, r3), s3 = 0; s3 < i3.values.length; s3++) i3.values[s3] = a3.nextValue();
  return i3.toTensor();
} });
var zc2 = An2({ randomUniform_: function(t3, e3, n3, r3, o3) {
  void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = "float32");
  for (var a3 = er2(t3, r3), i3 = new Wc2(e3, n3, null, o3), s3 = 0; s3 < a3.values.length; s3++) a3.values[s3] = i3.nextValue();
  return a3.toTensor();
} });
var Gc2 = An2({ square_: function(t3) {
  var e3 = gn2(t3, "x", "square"), n3 = [e3];
  return Lt2.runKernelFunc(function(t4, n4) {
    return n4([e3]), t4.square(e3);
  }, { x: e3 }, null, "Square", {}, n3, []);
} });
var Hc2 = An2({ squaredDifference_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "squaredDifference"), o3 = gn2(e3, "b", "squaredDifference");
  n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape);
  var a3 = { a: r3, b: o3 }, i3 = [r3, o3];
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.squaredDifference(r3, o3);
    return e4([r3, o3]), n4;
  }, a3, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o4 = On2(2);
    return { a: function() {
      return t4.mul(n4.sub(r4).mul(o4));
    }, b: function() {
      return t4.mul(r4.sub(n4).mul(o4));
    } };
  }, Er2, {}, i3, []);
} });
var qc2 = An2({ truncatedNormal_: function(t3, e3, n3, r3, o3) {
  if (void 0 === e3 && (e3 = 0), void 0 === n3 && (n3 = 1), null != r3 && "bool" === r3) throw new Error("Unsupported data type $ { dtype }");
  for (var a3 = new Pc2(e3, n3, r3, true, o3), i3 = er2(t3, r3), s3 = 0; s3 < i3.values.length; s3++) i3.values[s3] = a3.nextValue();
  return i3.toTensor();
} });
var Kc2 = An2({ equal_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "equal"), o3 = gn2(e3, "b", "equal");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.equal(r3, o3);
  }, { $a: r3, $b: o3 });
} });
var jc2 = An2({ equalStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "equalStrict"), r3 = gn2(e3, "b", "equalStrict");
  return E2(n3.shape, r3.shape, "Error in equalStrict: "), n3.equal(r3);
} });
var Xc2 = An2({ greater_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "greater"), o3 = gn2(e3, "b", "greater");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.greater(r3, o3);
  }, { a: r3, b: o3 }, null, "Greater");
} });
var Yc2 = An2({ greaterEqual_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "greaterEqual"), o3 = gn2(e3, "b", "greaterEqual");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.greaterEqual(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1];
    return { a: function() {
      return Xn2(n4);
    }, b: function() {
      return Xn2(r4);
    } };
  }, "GreaterEqual");
} });
var $c2 = An2({ greaterEqualStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "greaterEqualStrict"), r3 = gn2(e3, "b", "greaterEqualStrict");
  return E2(n3.shape, r3.shape, "Error in greaterEqualStrict: "), n3.greaterEqual(r3);
} });
var Qc2 = An2({ greaterStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "greaterStrict"), r3 = gn2(e3, "b", "greaterStrict");
  return E2(n3.shape, r3.shape, "Error in greaterStrict: "), n3.greater(r3);
} });
var Jc2 = An2({ less_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "less"), o3 = gn2(e3, "b", "less");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.less(r3, o3);
  }, { a: r3, b: o3 }, null, "Less");
} });
var Zc2 = An2({ lessEqual_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "lessEqual"), o3 = gn2(e3, "b", "lessEqual");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.lessEqual(r3, o3);
    return e4([r3, o3]), n4;
  }, { a: r3, b: o3 }, null, "LessEqual");
} });
var tl2 = An2({ lessEqualStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "lessEqualStrict"), r3 = gn2(e3, "b", "lessEqualStrict");
  return E2(n3.shape, r3.shape, "Error in lessEqualStrict: "), n3.lessEqual(r3);
} });
var el2 = An2({ lessStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "lessStrict"), r3 = gn2(e3, "b", "lessStrict");
  return E2(n3.shape, r3.shape, "Error in lessStrict: "), n3.less(r3);
} });
var nl2 = An2({ notEqual_: function(t3, e3) {
  var n3, r3 = gn2(t3, "a", "notEqual"), o3 = gn2(e3, "b", "notEqual");
  return n3 = Nt2(r3, o3), r3 = n3[0], o3 = n3[1], Pr2(r3.shape, o3.shape), Lt2.runKernelFunc(function(t4) {
    return t4.notEqual(r3, o3);
  }, { a: r3, b: o3 }, null, "NotEqual");
} });
var rl2 = An2({ notEqualStrict_: function(t3, e3) {
  var n3 = gn2(t3, "a", "notEqualStrict"), r3 = gn2(e3, "b", "notEqualStrict");
  return E2(n3.shape, r3.shape, "Error in notEqualStrict: "), n3.notEqual(r3);
} });
function ol2(t3, e3) {
  for (var n3 = [], r3 = t3; r3 < e3; ++r3) n3.push(r3);
  return n3;
}
function al2(t3) {
  for (var e3 = [], n3 = 0; n3 < t3.length; ++n3) for (var r3 = 0; r3 < t3[n3].length; ++r3) e3.push(t3[n3][r3]);
  return e3;
}
var il2 = An2({ gather_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = 0);
  var r3 = gn2(t3, "x", "gather"), o3 = gn2(e3, "indices", "gather", "int32");
  n3 = O2(n3, r3.shape)[0];
  var a3 = function(t4, e4, n4) {
    for (var r4 = t4.shape[n4], o4 = [], a4 = 1, i3 = 1, s3 = 0; s3 < n4; s3++) o4.push(t4.shape[s3]), a4 *= t4.shape[s3];
    for (s3 = 0; s3 < e4.rank; s3++) o4.push(e4.shape[s3]);
    for (s3 = n4 + 1; s3 < t4.rank; s3++) o4.push(t4.shape[s3]), i3 *= t4.shape[s3];
    return { batchSize: a4, sliceSize: i3, dimSize: r4, outputShape: o4 };
  }(r3, o3, n3);
  return Lt2.runKernelFunc(function(t4, e4) {
    var a4 = t4.gather(r3, o3.flatten(), n3);
    return e4([o3]), a4;
  }, { x: r3, indices: o3 }, function(t4, e4) {
    var o4 = e4[0];
    return { x: function() {
      var e5 = r3.shape, a4 = o4.size, i3 = e5.slice(0, n3), s3 = i3.length, u3 = e5.slice(n3, e5.length).slice(1), c3 = u3.length, l3 = ol2(0, s3), h3 = ol2(s3 + 1, s3 + 1 + c3), f3 = al2([i3, [a4], u3]), d3 = t4.reshape(f3), p3 = o4.reshape([a4]), v2 = al2([[s3], l3, h3]), g2 = d3.transpose(v2), m3 = sl2(g2, p3, r3.shape[n3]), y3 = Rn2(v2);
      return m3 = m3.transpose(y3);
    }, indices: function() {
      return o4;
    } };
  }, "Gather", { axis: n3 }).reshape(a3.outputShape);
} });
var sl2 = An2({ unsortedSegmentSum_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "unsortedSegmentSum"), o3 = gn2(e3, "segmentIds", "unsortedSegmentSum", "int32");
  return C2(A2(n3), function() {
    return "numSegments must be of dtype int";
  }), Lt2.runKernelFunc(function(t4, e4) {
    var a3 = t4.unsortedSegmentSum(r3, o3, n3);
    return e4([o3]), a3;
  }, { $x: r3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $x: function() {
      return function(t5, e5) {
        for (var n5 = Eo2(e5, Xn2(e5)), r4 = il2(t5, n5), o4 = Yc2(e5, On2(0, "int32")), a3 = r4.rank - o4.rank, i3 = 0; i3 < a3; ++i3) o4 = sr2(o4, i3 + 1);
        o4 = pc2(o4, zn2(r4.shape, "bool"));
        var s3 = Xn2(r4);
        return yc2(o4, r4, s3);
      }(t4, n4);
    } };
  });
} });
var ul2 = function(t3, e3, o3) {
  return n2(this, void 0, void 0, function() {
    var n3, a3, i3, s3, u3, c3, l3, h3, f3, d3, p3, v2, g2;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          for (n3 = gn2(t3, "tensor", "boolMask"), a3 = gn2(e3, "mask", "boolMask", "bool"), i3 = null == o3 ? 0 : o3, s3 = a3.rank, u3 = n3.shape, C2(s3 > 0, function() {
            return "mask cannot be scalar";
          }), E2(u3.slice(i3, i3 + s3), a3.shape, "mask's shape must match the first K dimensions of tensor's shape,"), c3 = 1, l3 = i3; l3 < i3 + s3; l3++) c3 *= u3[l3];
          return h3 = u3.slice(0, i3).concat([c3], u3.slice(i3 + s3)), f3 = n3.reshape(h3), d3 = a3.reshape([-1]), [4, xc2(d3)];
        case 1:
          return p3 = r3.sent(), v2 = p3.squeeze([1]), g2 = il2(f3, v2, i3), t3 !== n3 && n3.dispose(), e3 !== a3 && a3.dispose(), v2.dispose(), f3.dispose(), d3.dispose(), p3.dispose(), [2, g2];
      }
    });
  });
};
function cl2(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = "NHWC"), C2(t3.length === e3.rank, function() {
    return "Length of inShape (" + t3.length + ") and rank of dy (" + e3.rank + ") must match";
  });
  var s3 = t3, u3 = e3, c3 = false;
  3 === e3.rank && (c3 = true, u3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2]), s3 = [1, t3[0], t3[1], t3[2]]), C2(4 === s3.length, function() {
    return "Error in conv2dDerInput: inShape must be length 4, but got length " + s3.length + ".";
  }), C2(4 === u3.rank, function() {
    return "Error in conv2dDerInput: dy must be rank 4, but got rank " + u3.rank;
  }), C2(4 === n3.rank, function() {
    return "Error in conv2dDerInput: filter must be rank 4, but got rank " + n3.rank;
  });
  var l3 = "NHWC" === a3 ? s3[3] : s3[1], h3 = "NHWC" === a3 ? u3.shape[3] : u3.shape[1];
  C2(l3 === n3.shape[2], function() {
    return "Error in conv2dDerInput: depth of input (" + l3 + ") must match input depth for filter " + n3.shape[2] + ".";
  }), C2(h3 === n3.shape[3], function() {
    return "Error in conv2dDerInput: depth of output (" + h3 + ") must match output depth for filter " + n3.shape[3] + ".";
  }), null != i3 && C2(A2(o3), function() {
    return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + o3 + ".";
  });
  var f3 = Ea2(a3), d3 = pa2(s3, n3.shape, r3, 1, o3, i3, false, f3), p3 = Lt2.runKernelFunc(function(t4, e4) {
    var r4 = t4.conv2dDerInput(u3, n3, d3);
    return e4([n3, u3]), r4;
  }, { dy4D: u3, filter: n3 }, function(t4, e4) {
    var n4 = e4[0], s4 = e4[1];
    return { dy4D: function() {
      return dl2(t4, n4, r3, o3, a3, 1, i3);
    }, filter: function() {
      return vl2(t4, s4, n4.shape, r3, o3, a3, i3);
    } };
  });
  return c3 ? p3.as3D(p3.shape[1], p3.shape[2], p3.shape[3]) : p3;
}
function ll2(t3) {
  var e3 = function(t4) {
    return "number" == typeof t4 ? [t4, t4, t4] : 2 === t4.length ? [t4[0], t4[1], 1] : t4;
  }(t3), n3 = e3[0], r3 = e3[1], o3 = e3[2];
  return 1 === n3 && 1 === r3 && 1 === o3;
}
function hl2(t3, e3, n3, r3, o3) {
  C2(t3.length === e3.rank, function() {
    return "Length of inShape (" + t3.length + ") and rank of dy (" + e3.rank + ") must match";
  });
  var a3 = t3, i3 = e3, s3 = false;
  4 === e3.rank && (s3 = true, i3 = e3.as5D(1, e3.shape[0], e3.shape[1], e3.shape[2], e3.shape[3]), a3 = [1, t3[0], t3[1], t3[2], t3[3]]);
  var u3 = a3[4], c3 = i3.shape[4];
  C2(5 === a3.length, function() {
    return "Error in conv3dDerInput: inShape must be length 5, but got length " + a3.length + ".";
  }), C2(5 === i3.rank, function() {
    return "Error in conv3dDerInput: dy must be rank 5, but got rank " + i3.rank;
  }), C2(5 === n3.rank, function() {
    return "Error in conv3dDerInput: filter must be rank 5, but got rank " + n3.rank;
  }), C2(u3 === n3.shape[3], function() {
    return "Error in conv3dDerInput: depth of input (" + u3 + ") must match input depth for filter " + n3.shape[3] + ".";
  }), C2(c3 === n3.shape[4], function() {
    return "Error in conv3dDerInput: depth of output (" + c3 + ") must match output depth for filter " + n3.shape[4] + ".";
  });
  var l3 = va2(a3, n3.shape, r3, 1, o3), h3 = Lt2.runKernelFunc(function(t4) {
    return t4.conv3dDerInput(i3, n3, l3);
  }, { dy5D: i3 });
  return s3 ? h3.as4D(h3.shape[1], h3.shape[2], h3.shape[3], h3.shape[4]) : h3;
}
var fl2 = An2({ conv1d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NWC"), void 0 === a3 && (a3 = 1);
  var s3 = gn2(t3, "x", "conv1d"), u3 = gn2(e3, "filter", "conv1d"), c3 = s3, l3 = false;
  2 === s3.rank && (l3 = true, c3 = s3.as3D(1, s3.shape[0], s3.shape[1])), C2(3 === c3.rank, function() {
    return "Error in conv1d: input must be rank 3, but got rank " + c3.rank + ".";
  }), C2(3 === u3.rank, function() {
    return "Error in conv1d: filter must be rank 3, but got rank " + u3.rank + ".";
  }), null != i3 && C2(A2(r3), function() {
    return "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  }), C2(c3.shape[2] === u3.shape[1], function() {
    return "Error in conv1d: depth of input (" + c3.shape[2] + ") must match input depth for filter " + u3.shape[1] + ".";
  }), C2(Ca2(n3, a3), function() {
    return "Error in conv1D: Either stride or dilation must be 1. Got stride " + n3 + " and dilation '" + a3 + "'";
  }), C2("NWC" === o3, function() {
    return "Error in conv1d: got dataFormat of " + o3 + " but only NWC is currently supported.";
  });
  var h3 = u3.as4D(1, u3.shape[0], u3.shape[1], u3.shape[2]), f3 = c3.as4D(c3.shape[0], 1, c3.shape[1], c3.shape[2]), d3 = dl2(f3, h3, [1, n3], r3, "NHWC", [1, a3], i3);
  return l3 ? d3.as2D(d3.shape[2], d3.shape[3]) : d3.as3D(d3.shape[0], d3.shape[2], d3.shape[3]);
} });
var dl2 = An2({ conv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NHWC"), void 0 === a3 && (a3 = [1, 1]);
  var s3 = gn2(t3, "x", "conv2d"), u3 = gn2(e3, "filter", "conv2d"), c3 = s3, l3 = false;
  3 === s3.rank && (l3 = true, c3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), C2(4 === c3.rank, function() {
    return "Error in conv2d: input must be rank 4, but got rank " + c3.rank + ".";
  }), C2(4 === u3.rank, function() {
    return "Error in conv2d: filter must be rank 4, but got rank " + u3.rank + ".";
  }), null != i3 && C2(A2(r3), function() {
    return "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  });
  var h3 = "NHWC" === o3 ? c3.shape[3] : c3.shape[1];
  C2(h3 === u3.shape[2], function() {
    return "Error in conv2d: depth of input (" + h3 + ") must match input depth for filter " + u3.shape[2] + ".";
  }), C2(Ca2(n3, a3), function() {
    return "Error in conv2D: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  });
  var f3 = Ea2(o3), d3 = pa2(c3.shape, u3.shape, n3, a3, r3, i3, false, f3), p3 = [u3, c3], v2 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.conv2d(c3, u3, d3);
    return e4([u3, c3]), n4;
  }, { x: c3, filter: u3 }, function(t4, e4) {
    var i4 = e4, s4 = i4[0], u4 = i4[1];
    return C2(wa2(a3), function() {
      return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a3 + "'";
    }), { x: function() {
      return gl2(u4.shape, t4, s4, n3, r3, o3);
    }, filter: function() {
      return vl2(u4, t4, s4.shape, n3, r3, o3);
    } };
  }, "Conv2D", d3, p3);
  return l3 ? v2.as3D(v2.shape[1], v2.shape[2], v2.shape[3]) : v2;
} });
var pl2 = An2({ conv3d_: function(t3, e3, n3, r3, o3, a3) {
  void 0 === o3 && (o3 = "NDHWC"), void 0 === a3 && (a3 = [1, 1, 1]);
  var i3 = gn2(t3, "x", "conv3d"), s3 = gn2(e3, "filter", "conv3d"), u3 = i3, c3 = false;
  4 === i3.rank && (c3 = true, u3 = i3.as5D(1, i3.shape[0], i3.shape[1], i3.shape[2], i3.shape[3])), C2(5 === u3.rank, function() {
    return "Error in conv3d: input must be rank 5, but got rank " + u3.rank + ".";
  }), C2(5 === s3.rank, function() {
    return "Error in conv3d: filter must be rank 5, but got rank " + s3.rank + ".";
  }), C2(u3.shape[4] === s3.shape[3], function() {
    return "Error in conv3d: depth of input (" + u3.shape[4] + ") must match input depth for filter " + s3.shape[3] + ".";
  }), C2(function(t4, e4) {
    return ll2(t4) || ll2(e4);
  }(n3, a3), function() {
    return "Error in conv3D: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  }), C2("NDHWC" === o3, function() {
    return "Error in conv3d: got dataFormat of " + o3 + " but only NDHWC is currently supported.";
  });
  var l3 = va2(u3.shape, s3.shape, n3, a3, r3), h3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.conv3d(u3, s3, l3);
    return e4([u3, s3]), n4;
  }, { x: u3, $filter: s3 }, function(t4, e4) {
    C2(ll2(a3), function() {
      return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a3 + "'";
    });
    var o4 = e4[0], i4 = e4[1];
    return { x: function() {
      return hl2(o4.shape, t4, i4, n3, r3);
    }, $filter: function() {
      return function(t5, e5, n4, r4, o5) {
        var a4 = t5;
        4 === t5.rank && (a4 = t5.as5D(1, t5.shape[0], t5.shape[1], t5.shape[2], t5.shape[3]));
        var i5 = e5;
        4 === i5.rank && (i5 = e5.as5D(1, e5.shape[0], e5.shape[1], e5.shape[2], e5.shape[3]));
        C2(5 === a4.rank, function() {
          return "Error in conv3dDerFilter: input must be rank 5, but got shape " + a4.shape + ".";
        }), C2(5 === i5.rank, function() {
          return "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i5.shape + ".";
        }), C2(5 === n4.length, function() {
          return "Error in conv3dDerFilter: filterShape must be length 5, but got " + n4 + ".";
        }), C2(a4.shape[4] === n4[3], function() {
          return "Error in conv3dDerFilter: depth of input " + a4.shape[4] + ") must match input depth in filter (" + n4[3] + ".";
        }), C2(i5.shape[4] === n4[4], function() {
          return "Error in conv3dDerFilter: depth of dy (" + i5.shape[4] + ") must match output depth for filter (" + n4[4] + ").";
        });
        var s4 = va2(a4.shape, n4, r4, 1, o5);
        return Lt2.runKernelFunc(function(t6) {
          return t6.conv3dDerFilter(a4, i5, s4);
        }, { x5D: a4, dy5D: i5 });
      }(o4, t4, i4.shape, n3, r3);
    } };
  });
  return c3 ? h3.as4D(h3.shape[1], h3.shape[2], h3.shape[3], h3.shape[4]) : h3;
} });
var vl2 = An2({ conv2dDerFilter_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = "NHWC");
  var s3 = t3;
  3 === t3.rank && (s3 = t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]));
  var u3 = e3;
  3 === u3.rank && (u3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2])), C2(4 === s3.rank, function() {
    return "Error in conv2dDerFilter: input must be rank 4, but got shape " + s3.shape + ".";
  }), C2(4 === u3.rank, function() {
    return "Error in conv2dDerFilter: dy must be rank 4, but got shape " + u3.shape + ".";
  }), C2(4 === n3.length, function() {
    return "Error in conv2dDerFilter: filterShape must be length 4, but got " + n3 + ".";
  });
  var c3 = "NHWC" === a3 ? s3.shape[3] : s3.shape[1], l3 = "NHWC" === a3 ? u3.shape[3] : u3.shape[1];
  C2(c3 === n3[2], function() {
    return "Error in conv2dDerFilter: depth of input " + c3 + ") must match input depth in filter (" + n3[2] + ".";
  }), C2(l3 === n3[3], function() {
    return "Error in conv2dDerFilter: depth of dy (" + l3 + ") must match output depth for filter (" + n3[3] + ").";
  }), null != i3 && C2(A2(o3), function() {
    return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + o3 + ".";
  });
  var h3 = Ea2(a3), f3 = pa2(s3.shape, n3, r3, 1, o3, i3, false, h3);
  return Lt2.runKernelFunc(function(t4) {
    return t4.conv2dDerFilter(s3, u3, f3);
  }, { x4D: s3, dy4D: u3 });
} });
var gl2 = An2({ conv2dDerInput_: cl2 });
var ml2 = An2({ depthwiseConv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === o3 && (o3 = "NHWC"), void 0 === a3 && (a3 = [1, 1]);
  var s3 = gn2(t3, "x", "depthwiseConv2d"), u3 = gn2(e3, "filter", "depthwiseConv2d"), c3 = s3, l3 = false;
  3 === s3.rank && (l3 = true, c3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), C2(4 === c3.rank, function() {
    return "Error in depthwiseConv2d: input must be rank 4, but got rank " + c3.rank + ".";
  }), C2(4 === u3.rank, function() {
    return "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u3.rank + ".";
  }), C2(c3.shape[3] === u3.shape[2], function() {
    return "Error in depthwiseConv2d: number of input channels (" + c3.shape[3] + ") must match the inChannels dimension in filter " + u3.shape[2] + ".";
  }), null == a3 && (a3 = [1, 1]), C2(Ca2(n3, a3), function() {
    return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + a3 + "'";
  }), null != i3 && C2(A2(r3), function() {
    return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i3 + " but got pad " + r3 + ".";
  });
  var h3 = pa2(c3.shape, u3.shape, n3, a3, r3, i3, true), f3 = [c3, u3], d3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.depthwiseConv2D(c3, u3, h3);
    return e4([c3, u3]), n4;
  }, { x: c3, filter: u3 }, function(t4, e4) {
    C2(wa2(a3), function() {
      return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a3 + "'";
    });
    var n4 = e4[0], r4 = e4[1];
    return { x: function() {
      return yl2(n4.shape, t4, r4, h3);
    }, filter: function() {
      return xl2(n4, t4, r4.shape, h3);
    } };
  }, "DepthwiseConv2dNative", h3, f3);
  return l3 ? d3.as3D(d3.shape[1], d3.shape[2], d3.shape[3]) : d3;
} });
var yl2 = An2({ depthwiseConv2dDerInput_: function(t3, e3, n3, r3) {
  var o3 = e3, a3 = false;
  3 === e3.rank && (a3 = true, o3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2]));
  var i3 = Lt2.runKernelFunc(function(t4) {
    return t4.depthwiseConv2DDerInput(o3, n3, r3);
  }, { dy4D: o3 });
  return a3 ? i3.as3D(i3.shape[1], i3.shape[2], i3.shape[3]) : i3;
} });
var xl2 = An2({ depthwiseConv2dDerFilter_: function(t3, e3, n3, r3) {
  var o3 = t3;
  3 === t3.rank && (o3 = t3.as4D(1, t3.shape[0], t3.shape[1], t3.shape[2]));
  var a3 = e3;
  return 3 === a3.rank && (a3 = e3.as4D(1, e3.shape[0], e3.shape[1], e3.shape[2])), Lt2.runKernelFunc(function(t4) {
    return t4.depthwiseConv2DDerFilter(o3, a3, r3);
  }, { x4D: o3, dy4D: a3 });
} });
var bl2 = An2({ separableConv2d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = [1, 1]), void 0 === i3 && (i3 = "NHWC");
  var s3 = gn2(t3, "x", "separableConv2d"), u3 = gn2(e3, "depthwiseFilter", "separableConv2d"), c3 = gn2(n3, "pointwiseFilter", "separableConv2d"), l3 = s3, h3 = false;
  if (3 === s3.rank && (h3 = true, l3 = s3.as4D(1, s3.shape[0], s3.shape[1], s3.shape[2])), "NCHW" === i3) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  C2(4 === l3.rank, function() {
    return "Error in separableConv2d: input must be rank 4, but got rank " + l3.rank + ".";
  }), C2(4 === u3.rank, function() {
    return "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u3.rank + ".";
  }), C2(4 === c3.rank, function() {
    return "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u3.rank + ".";
  }), C2(1 === c3.shape[0], function() {
    return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + c3.shape[0] + ".";
  }), C2(1 === c3.shape[1], function() {
    return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " + c3.shape[1] + ".";
  });
  var f3 = u3.shape[2], d3 = u3.shape[3];
  C2(c3.shape[2] === f3 * d3, function() {
    return "Error in separableConv2d: the third dimension of pointwise filter must be " + f3 * d3 + ", but got " + c3.shape[2] + ".";
  });
  var p3 = ml2(l3, u3, r3, o3, i3, a3), v2 = dl2(p3, c3, 1, "valid", i3);
  return h3 ? v2.as3D(v2.shape[1], v2.shape[2], v2.shape[3]) : v2;
} });
var wl2 = An2({ conv2dTranspose_: function(t3, e3, n3, r3, o3, a3) {
  return cl2(n3, gn2(t3, "x", "conv2dTranspose"), gn2(e3, "filter", "conv2dTranspose"), r3, o3, "NHWC", a3);
} });
var Cl2 = An2({ conv3dTranspose_: function(t3, e3, n3, r3, o3) {
  return hl2(n3, gn2(t3, "x", "conv3dTranspose"), gn2(e3, "filter", "conv3dTranspose"), r3, o3);
} });
var El2 = An2({ matMul_: function(t3, e3, n3, r3) {
  var o3;
  void 0 === n3 && (n3 = false), void 0 === r3 && (r3 = false);
  var a3 = gn2(t3, "a", "matMul"), i3 = gn2(e3, "b", "matMul");
  o3 = Nt2(a3, i3), a3 = o3[0], i3 = o3[1];
  var s3 = n3 ? a3.shape[a3.rank - 2] : a3.shape[a3.rank - 1], u3 = r3 ? i3.shape[i3.rank - 1] : i3.shape[i3.rank - 2], c3 = n3 ? a3.shape[a3.rank - 1] : a3.shape[a3.rank - 2], l3 = r3 ? i3.shape[i3.rank - 2] : i3.shape[i3.rank - 1], h3 = a3.shape.slice(0, -2), f3 = i3.shape.slice(0, -2), d3 = k2(h3), p3 = k2(f3);
  C2(a3.rank >= 2 && i3.rank >= 2 && a3.rank === i3.rank, function() {
    return "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a3.rank + " and " + i3.rank + ".";
  }), C2(S2(h3, f3), function() {
    return "Error in matMul: outer dimensions (" + h3 + ") and (" + f3 + ") of Tensors with shapes " + a3.shape + " and " + i3.shape + " must match.";
  }), C2(s3 === u3, function() {
    return "Error in matMul: inner shapes (" + s3 + ") and (" + u3 + ") of Tensors with shapes " + a3.shape + " and " + i3.shape + " and transposeA=" + n3 + " and transposeB=" + r3 + " must match.";
  });
  var v2 = a3.shape.slice(0, -2).concat([c3, l3]), g2 = n3 ? a3.as3D(d3, s3, c3) : a3.as3D(d3, c3, s3), m3 = r3 ? i3.as3D(p3, l3, u3) : i3.as3D(p3, u3, l3), y3 = { transposeA: n3, transposeB: r3 };
  return Lt2.runKernelFunc(function(t4, e4) {
    var o4 = t4.batchMatMul(g2, m3, n3, r3);
    return e4([g2, m3]), o4;
  }, { a: g2, b: m3 }, function(t4, e4) {
    var o4 = e4, a4 = o4[0], i4 = o4[1];
    return n3 || r3 ? !n3 && r3 ? { a: function() {
      return t4.matMul(i4, false, false);
    }, b: function() {
      return t4.matMul(a4, true, false);
    } } : n3 && !r3 ? { a: function() {
      return i4.matMul(t4, false, true);
    }, b: function() {
      return a4.matMul(t4, false, false);
    } } : { a: function() {
      return i4.matMul(t4, true, true);
    }, b: function() {
      return t4.matMul(a4, true, true);
    } } : { a: function() {
      return t4.matMul(i4, false, true);
    }, b: function() {
      return a4.matMul(t4, true, false);
    } };
  }, "BatchMatMul", y3).reshape(v2);
} });
var Rl2 = An2({ dot_: function(t3, e3) {
  var n3 = gn2(t3, "t1", "dot"), r3 = gn2(e3, "t2", "dot");
  C2(!(1 !== n3.rank && 2 !== n3.rank || 1 !== r3.rank && 2 !== r3.rank), function() {
    return "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n3.rank + " and " + r3.rank + ".";
  });
  var o3 = 1 === n3.rank ? n3.size : n3.shape[1], a3 = 1 === r3.rank ? r3.size : r3.shape[0];
  return C2(o3 === a3, function() {
    return "Error in dot: inner dimensions of inputs must match, but got " + o3 + " and " + a3 + ".";
  }), 1 === n3.rank && 1 === r3.rank ? n3.as2D(1, -1).matMul(r3.as2D(-1, 1)).asScalar() : 1 === n3.rank && 2 === r3.rank ? n3.as2D(1, -1).matMul(r3.as2D(r3.shape[0], r3.shape[1])).as1D() : 2 === n3.rank && 1 === r3.rank ? n3.matMul(r3.as2D(-1, 1)).as1D() : n3.matMul(r3.as2D(r3.shape[0], r3.shape[1]));
} });
var Il2 = An2({ outerProduct_: function(t3, e3) {
  var n3 = gn2(t3, "v1", "outerProduct"), r3 = gn2(e3, "v2", "outerProduct");
  return C2(1 === n3.rank && 1 === r3.rank, function() {
    return "Error in outerProduct: inputs must be rank 1, but got ranks " + n3.rank + " and " + r3.rank + ".";
  }), n3.as2D(-1, 1).matMul(r3.as2D(1, -1));
} });
var kl2 = An2({ reverse_: function(t3, e3) {
  var n3 = gn2(t3, "x", "reverse");
  if (0 === n3.rank) return n3.clone();
  var r3 = O2(e3, n3.shape);
  return Lt2.runKernelFunc(function(t4) {
    return t4.reverse(n3, r3);
  }, { $x: n3 }, function(t4) {
    return { $x: function() {
      return t4.reverse(r3);
    } };
  }).reshapeAs(n3);
} });
var Sl2 = An2({ reverse1d_: function(t3) {
  var e3 = gn2(t3, "x", "reverse");
  return C2(1 === e3.rank, function() {
    return "Error in reverse1D: x must be rank 1 but got rank " + e3.rank + ".";
  }), kl2(e3, 0);
} });
var Al2 = An2({ reverse2d_: function(t3, e3) {
  var n3 = gn2(t3, "x", "reverse");
  return C2(2 === n3.rank, function() {
    return "Error in reverse2D: x must be rank 2 but got rank " + n3.rank + ".";
  }), kl2(n3, e3);
} });
var Tl2 = An2({ reverse3d_: function(t3, e3) {
  var n3 = gn2(t3, "x", "reverse");
  return C2(3 === n3.rank, function() {
    return "Error in reverse3D: x must be rank 3 but got rank " + n3.rank + ".";
  }), kl2(n3, e3);
} });
var Dl2 = An2({ reverse4d_: function(t3, e3) {
  var n3 = gn2(t3, "x", "reverse");
  return C2(4 === n3.rank, function() {
    return "Error in reverse4D: x must be rank 4 but got rank " + n3.rank + ".";
  }), kl2(n3, e3);
} });
function Nl2(t3, e3, n3, r3, o3, a3) {
  var i3 = gn2(t3, "x", "maxPool"), s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), null == r3 && (r3 = [1, 1]), C2(4 === s3.rank, function() {
    return "Error in maxPool: input must be rank 4 but got rank " + s3.rank + ".";
  }), C2(Ca2(n3, r3), function() {
    return "Error in maxPool: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + r3 + "'";
  }), null != a3 && C2(A2(o3), function() {
    return "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var c3 = fa2(s3.shape, e3, n3, r3, o3, a3);
  if (1 === c3.filterWidth && 1 === c3.filterHeight && S2(c3.inShape, c3.outShape)) return i3.clone();
  var l3 = [s3], h3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.maxPool(s3, c3);
    return e4([s3, n4]), n4;
  }, { x: s3 }, function(t4, a4) {
    var i4 = a4[0], s4 = a4[1];
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a5, i5, s5) {
        var u4 = gn2(t5, "dy", "maxPoolBackprop"), c4 = gn2(e4, "input", "maxPoolBackprop"), l4 = gn2(n4, "output", "maxPoolBackprop");
        C2(c4.rank === u4.rank, function() {
          return "Rank of input (" + c4.rank + ") does not match rank of dy (" + u4.rank + ")";
        }), null == a5 && (a5 = [1, 1]);
        C2(Ca2(o4, a5), function() {
          return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o4 + " and dilations '" + a5 + "'";
        }), C2(4 === u4.rank, function() {
          return "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u4.rank + ".";
        }), C2(4 === c4.rank, function() {
          return "Error in maxPoolBackprop: input must be rank 4 but got rank " + c4.rank + ".";
        }), null != s5 && C2(A2(i5), function() {
          return "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + s5 + " but got pad " + i5 + ".";
        });
        var h4 = fa2(c4.shape, r4, o4, a5, i5, s5);
        return Lt2.runKernelFunc(function(t6) {
          return t6.maxPoolBackprop(u4, c4, l4, h4);
        }, { $dy: u4, $input: c4 });
      }(t4, i4, s4, e3, n3, r3, o3);
    } };
  }, "MaxPool", c3, l3);
  return u3 ? h3.as3D(h3.shape[1], h3.shape[2], h3.shape[3]) : h3;
}
function Fl2(t3, e3, n3, r3, o3, a3) {
  var i3 = gn2(t3, "x", "avgPool", "float32");
  null == r3 && (r3 = [1, 1]), C2(Ca2(n3, r3), function() {
    return "Error in avgPool: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + r3 + "'";
  });
  var s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), C2(4 === s3.rank, function() {
    return "Error in avgPool: x must be rank 4 but got rank " + s3.rank + ".";
  }), null != a3 && C2(A2(o3), function() {
    return "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a3 + " but got pad " + o3 + ".";
  });
  var c3 = fa2(s3.shape, e3, n3, r3, o3, a3);
  if (1 === c3.filterWidth && 1 === c3.filterHeight && S2(c3.inShape, c3.outShape)) return i3.clone();
  var l3 = Lt2.runKernelFunc(function(t4) {
    return t4.avgPool(s3, c3);
  }, { x: s3 }, function(t4) {
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a4) {
        var i4 = gn2(t5, "dy", "avgPoolBackprop"), s4 = gn2(e4, "input", "avgPoolBackprop");
        C2(s4.rank === i4.rank, function() {
          return "Rank of input (" + s4.rank + ") does not match rank of dy (" + i4.rank + ")";
        }), null == o4 && (o4 = [1, 1]);
        C2(Ca2(r4, o4), function() {
          return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r4 + " and dilations '" + o4 + "'";
        });
        var u4 = s4, c4 = i4, l4 = false;
        3 === s4.rank && (l4 = true, u4 = s4.as4D(1, s4.shape[0], s4.shape[1], s4.shape[2]), c4 = i4.as4D(1, i4.shape[0], i4.shape[1], i4.shape[2]));
        C2(4 === c4.rank, function() {
          return "Error in avgPoolBackprop: dy must be rank 4 but got rank " + c4.rank + ".";
        }), C2(4 === u4.rank, function() {
          return "Error in avgPoolBackprop: input must be rank 4 but got rank " + u4.rank + ".";
        });
        var h3 = fa2(u4.shape, n4, r4, o4, a4), f3 = Lt2.runKernelFunc(function(t6) {
          return t6.avgPoolBackprop(c4, u4, h3);
        }, { dy4D: c4, input4D: u4 });
        if (l4) return f3.as3D(f3.shape[1], f3.shape[2], f3.shape[3]);
        return f3;
      }(t4, s3, e3, n3, r3, o3);
    } };
  }, "AvgPool", c3);
  return l3 = l3.cast(i3.dtype), u3 ? l3.as3D(l3.shape[1], l3.shape[2], l3.shape[3]) : l3;
}
var _l2 = An2({ maxPool_: function(t3, e3, n3, r3, o3) {
  return Nl2(t3, e3, n3, 1, r3, o3);
} });
var Ol2 = An2({ avgPool_: function(t3, e3, n3, r3, o3) {
  return Fl2(t3, e3, n3, 1, r3, o3);
} });
var Ml2 = An2({ pool_: function(t3, e3, n3, r3, o3, a3) {
  null == o3 && (o3 = [1, 1]), null == a3 && (a3 = 1), 0 === r3 && (r3 = "valid");
  var i3 = gn2(t3, "x", "maxPool"), s3 = i3, u3 = false;
  3 === i3.rank && (u3 = true, s3 = i3.as4D(1, i3.shape[0], i3.shape[1], i3.shape[2])), C2(Ca2(a3, o3), function() {
    return "Error in pool: Either strides or dilations must be 1. Got strides " + a3 + " and dilations '" + o3 + "'";
  });
  var c3, l3 = fa2(s3.shape, e3, a3, o3, r3), h3 = [l3.dilationHeight, l3.dilationWidth];
  c3 = "same" === r3 ? function(t4, e4) {
    var n4 = t4.map(function(t5, n5) {
      return t5 + (t5 - 1) * (e4[n5] - 1);
    }).map(function(t5) {
      return t5 - 1;
    }), r4 = n4.map(function(t5) {
      return Math.floor(t5 / 2);
    }), o4 = n4.map(function(t5, e5) {
      return t5 - r4[e5];
    });
    return n4.map(function(t5, e5) {
      return [r4[e5], o4[e5]];
    });
  }([l3.filterHeight, l3.filterWidth], h3) : [[0, 0], [0, 0]];
  var f3 = 1 === h3[0] && 1 === h3[1], d3 = function(t4, e4, n4) {
    var r4 = n4.map(function(t5) {
      return t5[0];
    }), o4 = n4.map(function(t5) {
      return t5[1];
    }), a4 = t4.concat(r4, o4), i4 = e4.map(function(t5, e5) {
      return (t5 - a4[e5] % t5) % t5;
    }), s4 = o4.map(function(t5, e5) {
      return t5 + i4[e5];
    }), u4 = e4.map(function(t5, e5) {
      return [r4[e5], s4[e5]];
    }), c4 = e4.map(function(t5, e5) {
      return [0, i4[e5]];
    });
    return [u4, c4];
  }([l3.inHeight, l3.inWidth], h3, c3), p3 = d3[0], v2 = d3[1], g2 = f3 ? r3 : "valid", m3 = f3 ? s3 : cr2(s3, h3, p3), y3 = ("avg" === n3 ? function() {
    return Fl2(m3, e3, a3, 1, g2);
  } : function() {
    return Nl2(m3, e3, a3, 1, g2);
  })(), x3 = f3 ? y3 : rr2(y3, h3, v2);
  return u3 ? x3.as3D(x3.shape[1], x3.shape[2], x3.shape[3]) : x3;
} });
var Bl2 = An2({ maxPool3d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = "NDHWC");
  var s3 = gn2(t3, "x", "maxPool3d"), u3 = s3, c3 = false;
  4 === s3.rank && (c3 = true, u3 = s3.as5D(1, s3.shape[0], s3.shape[1], s3.shape[2], s3.shape[3])), null == i3 && (i3 = [1, 1, 1]), C2(5 === u3.rank, function() {
    return "Error in maxPool3d: x must be rank 5 but got rank " + u3.rank + ".";
  }), C2("NDHWC" === a3, function() {
    return "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " + a3;
  }), C2(Ca2(n3, i3), function() {
    return "Error in maxPool3d: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + i3 + "'";
  }), null != o3 && C2(A2(r3), function() {
    return "Error in maxPool3d: pad must be an integer when using, dimRoundingMode " + o3 + " but got pad " + r3 + ".";
  });
  var l3 = da2(u3.shape, e3, n3, i3, r3, o3, a3), h3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.maxPool3d(u3, l3);
    return e4([u3, n4]), n4;
  }, { x: u3 }, function(t4, a4) {
    var s4 = a4[0], u4 = a4[1];
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a5, i4, s5) {
        var u5 = gn2(t5, "dy", "maxPool3dBackprop"), c4 = gn2(e4, "input", "maxPool3dBackprop"), l4 = gn2(n4, "output", "maxPool3dBackprop"), h4 = u5, f3 = c4, d3 = l4, p3 = false;
        4 === c4.rank && (p3 = true, h4 = u5.as5D(1, u5.shape[0], u5.shape[1], u5.shape[2], u5.shape[3]), f3 = c4.as5D(1, c4.shape[0], c4.shape[1], c4.shape[2], c4.shape[3]), d3 = l4.as5D(1, l4.shape[0], l4.shape[1], l4.shape[2], l4.shape[3]));
        C2(5 === h4.rank, function() {
          return "Error in maxPool3dBackprop: dy must be rank 5 but got rank " + h4.rank + ".";
        }), C2(5 === f3.rank, function() {
          return "Error in maxPool3dBackprop: input must be rank 5 but got rank " + f3.rank + ".";
        }), C2(5 === d3.rank, function() {
          return "Error in maxPool3dBackprop: output must be rank 5 but got rank " + d3.rank + ".";
        }), null == a5 && (a5 = [1, 1, 1]);
        C2(Ca2(o4, a5), function() {
          return "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides " + o4 + " and dilations '" + a5 + "'";
        }), null != s5 && C2(A2(i4), function() {
          return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + s5 + " but got pad " + i4 + ".";
        });
        var v2 = da2(f3.shape, r4, o4, a5, i4, s5), g2 = Lt2.runKernelFunc(function(t6) {
          return t6.maxPool3dBackprop(h4, f3, d3, v2);
        }, { dy5D: h4, input5D: f3 });
        if (p3) return g2.as4D(g2.shape[1], g2.shape[2], g2.shape[3], g2.shape[4]);
        return g2;
      }(t4, s4, u4, e3, n3, i3, r3, o3);
    } };
  });
  return c3 ? h3.as4D(h3.shape[1], h3.shape[2], h3.shape[3], h3.shape[4]) : h3;
} });
var Pl2 = An2({ avgPool3d_: function(t3, e3, n3, r3, o3, a3, i3) {
  void 0 === a3 && (a3 = "NDHWC");
  var s3 = gn2(t3, "x", "avgPool3d", "float32"), u3 = s3, c3 = false;
  4 === s3.rank && (c3 = true, u3 = s3.as5D(1, s3.shape[0], s3.shape[1], s3.shape[2], s3.shape[3])), null == i3 && (i3 = [1, 1, 1]), C2(5 === u3.rank, function() {
    return "Error in avgPool3d: x must be rank 5 but got rank " + u3.rank + ".";
  }), C2("NDHWC" === a3, function() {
    return "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " + a3;
  }), C2(Ca2(n3, i3), function() {
    return "Error in avgPool3d: Either strides or dilations must be 1. Got strides " + n3 + " and dilations '" + i3 + "'";
  }), null != o3 && C2(A2(r3), function() {
    return "Error in avgPool3d: pad must be an integer when using, dimRoundingMode " + o3 + " but got pad " + r3 + ".";
  });
  var l3 = da2(u3.shape, e3, n3, i3, r3, o3, a3), h3 = Lt2.runKernelFunc(function(t4) {
    return t4.avgPool3d(u3, l3);
  }, { x: u3 }, function(t4) {
    return { x: function() {
      return function(t5, e4, n4, r4, o4, a4, i4) {
        var s4 = gn2(t5, "dy", "avgPool3dBackprop"), u4 = gn2(e4, "input", "avgPool3dBackprop"), c4 = s4, l4 = u4, h4 = false;
        4 === u4.rank && (h4 = true, c4 = s4.as5D(1, s4.shape[0], s4.shape[1], s4.shape[2], s4.shape[3]), l4 = u4.as5D(1, u4.shape[0], u4.shape[1], u4.shape[2], u4.shape[3]));
        C2(5 === c4.rank, function() {
          return "Error in avgPool3dBackprop: dy must be rank 5 but got rank " + c4.rank + ".";
        }), C2(5 === l4.rank, function() {
          return "Error in avgPool3dBackprop: input must be rank 5 but got rank " + l4.rank + ".";
        }), null == o4 && (o4 = [1, 1, 1]);
        C2(Ca2(r4, o4), function() {
          return "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides " + r4 + " and dilations '" + o4 + "'";
        }), null != i4 && C2(A2(a4), function() {
          return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + i4 + " but got pad " + a4 + ".";
        });
        var f3 = da2(l4.shape, n4, r4, o4, a4, i4), d3 = Lt2.runKernelFunc(function(t6) {
          return t6.avgPool3dBackprop(c4, l4, f3);
        }, { dy5D: c4, input5D: l4 });
        if (h4) return d3.as4D(d3.shape[1], d3.shape[2], d3.shape[3], d3.shape[4]);
        return d3;
      }(t4, u3, e3, n3, i3, r3, o3);
    } };
  });
  return h3 = h3.cast(u3.dtype), c3 ? h3.as4D(h3.shape[1], h3.shape[2], h3.shape[3], h3.shape[4]) : h3;
} });
var Ll2 = An2({ maxPoolWithArgmax_: function(t3, e3, n3, r3, o3) {
  void 0 === o3 && (o3 = false);
  var a3 = gn2(t3, "x", "maxPoolWithArgmax"), i3 = { filterSize: e3, strides: n3, pad: r3, includeBatchInIndex: o3 }, s3 = Lt2.runKernel("MaxPoolWithArgmax", { x: a3 }, i3);
  return { result: s3[0], indexes: s3[1] };
} });
var Wl2 = An2({ slice_: function(t3, e3, n3) {
  var r3, o3, a3 = gn2(t3, "x", "slice");
  if (0 === a3.rank) throw new Error("Slicing scalar is not possible");
  (r3 = "number" == typeof e3 ? [e3].concat(new Array(a3.rank - 1).fill(0)) : e3.length < a3.rank ? e3.concat(new Array(a3.rank - e3.length).fill(0)) : e3.slice()).forEach(function(t4) {
    C2(-1 !== t4, function() {
      return "slice() does not support negative begin indexing.";
    });
  }), o3 = (o3 = null == n3 ? new Array(a3.rank).fill(-1) : "number" == typeof n3 ? [n3].concat(new Array(a3.rank - 1).fill(-1)) : n3.length < a3.rank ? n3.concat(new Array(a3.rank - n3.length).fill(-1)) : n3).map(function(t4, e4) {
    return t4 >= 0 ? t4 : (C2(-1 === t4, function() {
      return "Negative size values should be exactly -1 but got " + t4 + " for the slice() size at index " + e4 + ".";
    }), a3.shape[e4] - r3[e4]);
  }), qo2(a3, r3, o3);
  var i3 = a3.shape, s3 = { begin: r3, size: o3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.slice(a3, r3, o3);
  }, { x: a3 }, function(t4) {
    for (var e4 = [], n4 = 0; n4 < t4.rank; n4++) e4.push([r3[n4], i3[n4] - r3[n4] - o3[n4]]);
    return { x: function() {
      return Ic2(t4, e4);
    } };
  }, "Slice", s3);
} });
var Ul2 = An2({ slice1d_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "slice1d");
  return C2(1 === r3.rank, function() {
    return "slice1d expects a rank-1 tensor, but got a rank-" + r3.rank + " tensor";
  }), Wl2(r3, [e3], [n3]);
} });
var Vl2 = An2({ slice2d_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "slice2d");
  return C2(2 === r3.rank, function() {
    return "slice2d expects a rank-2 tensor, but got a rank-" + r3.rank + " tensor";
  }), Wl2(r3, e3, n3);
} });
var zl2 = An2({ slice3d_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "slice3d");
  return C2(3 === r3.rank, function() {
    return "slice3d expects a rank-3 tensor, but got a rank-" + r3.rank + " tensor";
  }), Wl2(r3, e3, n3);
} });
var Gl2 = An2({ slice4d_: function(t3, e3, n3) {
  var r3 = gn2(t3, "x", "slice4d");
  return C2(4 === r3.rank, function() {
    return "slice4d expects a rank-4 tensor, but got a rank-" + r3.rank + " tensor";
  }), Wl2(r3, e3, n3);
} });
function Hl2(t3, e3, n3, r3, o3) {
  return e3.rank < n3.rank && (e3 = e3.reshape(wn2(e3.shape, r3))), t3.rank < n3.rank && (t3 = t3.reshape(wn2(t3.shape, r3))), { x: function() {
    var r4 = t3.mul(n3.equal(e3).cast(t3.dtype));
    return null == o3 ? r4 : r4.transpose(o3);
  } };
}
var ql2 = An2({ all_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "all", "bool"), o3 = O2(e3, r3.shape), a3 = o3, i3 = En2(a3, r3.rank);
  null != i3 && (r3 = r3.transpose(i3), a3 = In2(a3.length, r3.rank));
  var s3 = Lt2.runKernelFunc(function(t4) {
    return t4.all(r3, a3);
  }, { $x: r3 });
  if (n3) {
    var u3 = wn2(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var Kl2 = An2({ any_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "any", "bool"), o3 = O2(e3, r3.shape), a3 = o3, i3 = En2(a3, r3.rank);
  null != i3 && (r3 = r3.transpose(i3), a3 = In2(a3.length, r3.rank));
  var s3 = Lt2.runKernelFunc(function(t4) {
    return t4.any(r3, a3);
  }, { $x: r3 });
  if (n3) {
    var u3 = wn2(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var jl2 = An2({ argMax_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = gn2(t3, "x", "argMax");
  null == e3 && (e3 = 0);
  var r3 = O2(e3, n3.shape), o3 = En2(r3, n3.rank);
  null != o3 && (n3 = n3.transpose(o3), r3 = In2(r3.length, n3.rank));
  var a3 = { axis: r3[0] }, i3 = [n3];
  return Lt2.runKernelFunc(function(t4, e4) {
    var o4 = t4.argMax(n3, r3[0]);
    return e4([n3]), o4;
  }, { x: n3 }, function(t4, e4) {
    var n4 = e4[0];
    return { x: function() {
      return Xn2(n4);
    } };
  }, "ArgMax", a3, i3);
} });
var Xl2 = An2({ argMin_: function(t3, e3) {
  void 0 === e3 && (e3 = 0);
  var n3 = gn2(t3, "x", "argMin");
  null == e3 && (e3 = 0);
  var r3 = O2(e3, n3.shape), o3 = En2(r3, n3.rank);
  return null != o3 && (n3 = n3.transpose(o3), r3 = In2(r3.length, n3.rank)), Lt2.runKernelFunc(function(t4, e4) {
    var o4 = t4.argMin(n3, r3[0]);
    return e4([n3]), o4;
  }, { $x: n3 }, function(t4, e4) {
    var n4 = e4[0];
    return { $x: function() {
      return Xn2(n4);
    } };
  });
} });
var Yl2 = An2({ logSumExp_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "logSumExp"), o3 = O2(e3, r3.shape), a3 = r3.max(o3, true), i3 = r3.sub(a3).exp().sum(o3).log(), s3 = a3.reshape(i3.shape).add(i3);
  if (n3) {
    var u3 = wn2(s3.shape, o3);
    return s3.reshape(u3);
  }
  return s3;
} });
var $l2 = An2({ max_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "max"), o3 = r3, a3 = O2(e3, r3.shape), i3 = a3, s3 = En2(i3, r3.rank);
  null != s3 && (r3 = r3.transpose(s3), i3 = In2(i3.length, r3.rank));
  var u3 = [r3], c3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.max(r3, i3);
    return e4([o3, n4]), n4;
  }, { x: r3 }, function(t4, e4) {
    return Hl2(t4, e4[1], e4[0], a3, s3);
  }, "Max", { axes: i3 }, u3, [true]);
  if (n3) {
    var l3 = wn2(c3.shape, a3);
    c3 = c3.reshape(l3);
  }
  return c3;
} });
var Ql2 = An2({ mean_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "mean"), o3 = O2(e3, r3.shape), a3 = k2(bn2(r3.shape, o3)[1]);
  return oa2(function(t4) {
    var r4 = On2(a3);
    return { value: (r4.dtype === t4.dtype ? t4 : t4.cast(r4.dtype)).div(r4).sum(e3, n3), gradFunc: function(e4) {
      var n4 = t4.shape.slice();
      return o3.forEach(function(t5) {
        n4[t5] = 1;
      }), e4.reshape(n4).mul(zn2(t4.shape, "float32")).div(a3);
    } };
  })(r3);
} });
var Jl2 = An2({ min_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "min"), o3 = r3, a3 = O2(e3, r3.shape), i3 = a3, s3 = En2(i3, r3.rank);
  null != s3 && (r3 = r3.transpose(s3), i3 = In2(i3.length, r3.rank));
  var u3 = [r3], c3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.min(r3, i3);
    return e4([o3, n4]), n4;
  }, { x: r3 }, function(t4, e4) {
    return Hl2(t4, e4[1], e4[0], a3, s3);
  }, "Min", { axes: i3 }, u3, [true]);
  if (n3) {
    var l3 = wn2(c3.shape, a3);
    c3 = c3.reshape(l3);
  }
  return c3;
} });
var Zl2 = An2({ moments_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = O2(e3, (t3 = gn2(t3, "x", "moments")).shape), o3 = t3.mean(r3, n3), a3 = o3.shape;
  n3 || (a3 = wn2(o3.shape, r3));
  var i3 = t3.toFloat().sub(o3.reshape(a3)).square();
  return { mean: o3, variance: i3.mean(r3, n3) };
} });
var th2 = An2({ sum_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "sum");
  "bool" === r3.dtype && (r3 = r3.toInt());
  var o3 = O2(e3, r3.shape);
  return oa2(function(t4) {
    var e4 = En2(o3, t4.rank), r4 = o3, a3 = t4;
    null != e4 && (a3 = t4.transpose(e4), r4 = In2(r4.length, t4.rank));
    var i3 = function(e5) {
      var n4 = t4.shape.slice();
      return o3.forEach(function(t5) {
        n4[t5] = 1;
      }), e5.reshape(n4).mul(zn2(t4.shape, "float32"));
    }, s3 = { axes: r4 }, u3 = Lt2.runKernelFunc(function(t5) {
      return t5.sum(a3, r4);
    }, { x: a3 }, function(t5) {
      return { x: function() {
        return i3(t5);
      } };
    }, "Sum", s3);
    if (n3) {
      var c3 = wn2(u3.shape, o3);
      u3 = u3.reshape(c3);
    }
    return { value: u3, gradFunc: i3 };
  })(r3);
} });
var eh2 = An2({ prod_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = null), void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "x", "prod");
  "bool" === r3.dtype && (r3 = r3.toInt());
  var o3 = O2(e3, r3.shape), a3 = En2(o3, r3.rank), i3 = o3, s3 = r3;
  null != a3 && (s3 = r3.transpose(a3), i3 = In2(i3.length, r3.rank));
  var u3 = Lt2.runKernelFunc(function(t4) {
    return t4.prod(s3, i3);
  }, { permutedX: s3 });
  if (n3) {
    var c3 = wn2(u3.shape, o3);
    u3 = u3.reshape(c3);
  }
  return u3;
} });
var nh2 = An2({ elu_: function(t3) {
  var e3 = gn2(t3, "x", "elu");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.elu(e3);
    return n3([r3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      return Lt2.runKernelFunc(function(e5) {
        return e5.eluDer(t4, n3);
      }, { dy: t4, y: n3 });
    } };
  });
} });
var rh2 = An2({ leakyRelu_: function(t3, e3) {
  void 0 === e3 && (e3 = 0.2);
  var n3 = gn2(t3, "x", "leakyRelu");
  return Eo2(On2(e3).mul(n3), n3);
} });
var oh2 = An2({ prelu_: function(t3, e3) {
  var n3 = gn2(t3, "x", "prelu"), r3 = gn2(e3, "alpha", "prelu");
  return Lt2.runKernelFunc(function(t4, e4) {
    var o3 = t4.prelu(n3, r3);
    return e4([n3, r3]), o3;
  }, { x: n3, alpha: r3 }, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o3 = n4.greater(0);
    return { x: function() {
      return yc2(o3, t4, t4.mul(r4));
    }, alpha: function() {
      var e5 = yc2(o3, Xn2(t4), t4.mul(n4)), a3 = Br2(r4.shape, t4.shape);
      return a3.length > 0 && (e5 = e5.sum(a3)), e5.reshape(r4.shape);
    } };
  }, "Prelu");
} });
var ah2 = An2({ relu_: function(t3) {
  var e3 = gn2(t3, "x", "relu");
  return "bool" === e3.dtype ? e3.toInt() : Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.relu(e3);
    return n3([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { x: function() {
      return t4.mulStrict(n3.step().toFloat());
    } };
  }, "Relu");
} });
var ih2 = An2({ relu6_: function(t3) {
  var e3 = gn2(t3, "x", "relu6");
  return "bool" === e3.dtype ? e3.toInt() : Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.relu6(e3);
    return n3([e3]), r3;
  }, { x: e3 }, function(t4, e4) {
    var n3 = e4[0], r3 = n3.lessEqual(6).mul(n3.step());
    return { x: function() {
      return t4.mulStrict(r3.toFloat());
    } };
  }, "Relu6");
} });
var sh2 = An2({ selu_: function(t3) {
  var e3 = gn2(t3, "x", "selu");
  return Lt2.runKernelFunc(function(t4, n3) {
    var r3 = t4.selu(e3);
    return n3([e3]), r3;
  }, { $x: e3 }, function(t4, e4) {
    var n3 = e4[0];
    return { $x: function() {
      var e5 = n3.greater(On2(0)), r3 = On2(su2), o3 = On2(uu2), a3 = t4.mul(o3), i3 = t4.mul(r3).mul(n3.toFloat().exp());
      return yc2(e5, a3, i3);
    } };
  });
} });
var uh2 = An2({ localResponseNormalization_: function(t3, e3, n3, r3, o3) {
  void 0 === e3 && (e3 = 5), void 0 === n3 && (n3 = 1), void 0 === r3 && (r3 = 1), void 0 === o3 && (o3 = 0.5);
  var a3 = gn2(t3, "x", "localResponseNormalization");
  C2(4 === a3.rank || 3 === a3.rank, function() {
    return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a3.rank + ".";
  }), C2(A2(e3), function() {
    return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " + e3 + ".";
  });
  var i3 = a3, s3 = false;
  3 === a3.rank && (s3 = true, i3 = a3.as4D(1, a3.shape[0], a3.shape[1], a3.shape[2]));
  var u3 = Lt2.runKernelFunc(function(t4, a4) {
    var s4 = t4.localResponseNormalization4D(i3, e3, n3, r3, o3);
    return a4([i3, s4]), s4;
  }, { x4D: i3 }, function(t4, a4) {
    var i4 = a4[0], s4 = a4[1];
    return { x4D: function() {
      return Lt2.runKernelFunc(function(a5) {
        return a5.LRNGrad(t4, i4, s4, e3, n3, r3, o3);
      }, {});
    } };
  });
  return s3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var ch2 = An2({ norm_: function(t3, e3, n3, r3) {
  void 0 === e3 && (e3 = "euclidean"), void 0 === n3 && (n3 = null), void 0 === r3 && (r3 = false);
  var o3 = function t4(e4, n4, r4) {
    void 0 === r4 && (r4 = null);
    if (0 === e4.rank) return e4.abs();
    if (1 !== e4.rank && null === r4) return t4(e4.reshape([-1]), n4, r4);
    if (1 === e4.rank || "number" == typeof r4 || Array.isArray(r4) && 1 === r4.length) {
      if (1 === n4) return e4.abs().sum(r4);
      if (n4 === 1 / 0) return e4.abs().max(r4);
      if (n4 === -1 / 0) return e4.abs().min(r4);
      if ("euclidean" === n4 || 2 === n4) return e4.abs().pow(On2(2, "int32")).sum(r4).sqrt();
      throw new Error("Error in norm: invalid ord value: " + n4);
    }
    if (Array.isArray(r4) && 2 === r4.length) {
      if (1 === n4) return e4.abs().sum(r4[0]).max(r4[1] - 1);
      if (n4 === 1 / 0) return e4.abs().sum(r4[1]).max(r4[0]);
      if (n4 === -1 / 0) return e4.abs().sum(r4[1]).min(r4[0]);
      if ("fro" === n4 || "euclidean" === n4) return e4.square().sum(r4).sqrt();
      throw new Error("Error in norm: invalid ord value: " + n4);
    }
    throw new Error("Error in norm: invalid axis: " + r4);
  }(t3 = gn2(t3, "x", "norm"), e3, n3), a3 = o3.shape;
  if (r3) {
    var i3 = O2(n3, t3.shape);
    a3 = wn2(o3.shape, i3);
  }
  return o3.reshape(a3);
} });
var lh2 = An2({ basicLSTMCell_: function(t3, e3, n3, r3, o3, a3) {
  var i3 = gn2(t3, "forgetBias", "basicLSTMCell"), s3 = gn2(e3, "lstmKernel", "basicLSTMCell"), u3 = gn2(n3, "lstmBias", "basicLSTMCell"), c3 = gn2(r3, "data", "basicLSTMCell"), l3 = gn2(o3, "c", "basicLSTMCell"), h3 = gn2(a3, "h", "basicLSTMCell"), f3 = c3.concat(h3, 1).matMul(s3).add(u3), d3 = f3.shape[0], p3 = f3.shape[1] / 4, v2 = [d3, p3], g2 = f3.slice([0, 0], v2), m3 = f3.slice([0, p3], v2), y3 = f3.slice([0, 2 * p3], v2), x3 = f3.slice([0, 3 * p3], v2), b3 = g2.sigmoid().mulStrict(m3.tanh()).addStrict(l3.mulStrict(i3.add(y3).sigmoid())), w3 = b3.tanh().mulStrict(x3.sigmoid());
  return [b3, w3];
} });
var hh2 = An2({ multiRNNCell_: function(t3, e3, n3, r3) {
  for (var o3 = gn2(e3, "data", "multiRNNCell"), a3 = mn2(n3, "c", "multiRNNCell"), i3 = mn2(r3, "h", "multiRNNCell"), s3 = o3, u3 = [], c3 = 0; c3 < t3.length; c3++) {
    var l3 = t3[c3](s3, a3[c3], i3[c3]);
    u3.push(l3[0]), u3.push(l3[1]), s3 = l3[1];
  }
  var h3 = [], f3 = [];
  for (c3 = 0; c3 < u3.length; c3 += 2) h3.push(u3[c3]), f3.push(u3[c3 + 1]);
  return [h3, f3];
} });
var fh2 = An2({ movingAverage_: function(t3, e3, n3, r3, o3) {
  void 0 === o3 && (o3 = true);
  var a3 = gn2(t3, "v", "movingAverage"), i3 = gn2(e3, "x", "movingAverage"), s3 = gn2(n3, "decay", "movingAverage");
  Ft2(a3, i3), C2(S2(a3.shape, i3.shape), function() {
    return "Shape mismatch in v and x";
  });
  var u3 = On2(1), c3 = u3.sub(s3), l3 = i3.sub(a3).mul(c3);
  if (o3) {
    C2(null != r3, function() {
      return "When using zeroDebias: true, step is required.";
    });
    var h3 = gn2(r3, "step", "movingAverage");
    l3 = l3.div(u3.sub(No2(s3, h3)));
  }
  return a3.add(l3);
} });
var dh2 = An2({ stridedSlice_: function(t3, e3, n3, r3, o3, a3, i3, s3, u3) {
  if (void 0 === o3 && (o3 = 0), void 0 === a3 && (a3 = 0), void 0 === i3 && (i3 = 0), void 0 === s3 && (s3 = 0), void 0 === u3 && (u3 = 0), null == r3 && (r3 = new Array(e3.length)), 0 !== i3) throw new Error("ellipsis mask is not yet supported");
  var c3 = gn2(t3, "x", "stridedSlice"), l3 = Ko2(s3), h3 = c3.shape.slice();
  l3.forEach(function(t4) {
    e3[t4] = 0, n3[t4] = 1, h3.splice(t4, 0, 1);
  }), c3 = c3.reshape(h3);
  for (var f3 = 0; f3 < c3.rank; f3++) e3[f3] = Xo2(o3, e3, r3, c3.shape, f3), n3[f3] = Yo2(a3, n3, r3, c3.shape, f3), r3[f3] = r3[f3] || 1;
  var d3 = Ko2(u3);
  d3.forEach(function(t4) {
    n3[t4] = e3[t4] + 1, r3[t4] = 1;
  });
  var p3 = jo2(e3, n3, r3), v2 = p3.filter(function(t4, e4) {
    return -1 === d3.indexOf(e4);
  });
  return r3.every(function(t4) {
    return 1 === t4;
  }) ? Wl2(c3, e3, p3).reshape(v2) : Lt2.runKernelFunc(function(t4) {
    return t4.stridedSlice(c3, e3, n3, r3);
  }, { $x: c3 }).reshape(v2);
} });
var ph2 = An2({ topk_: function(t3, e3, n3) {
  void 0 === e3 && (e3 = 1), void 0 === n3 && (n3 = true);
  var r3 = gn2(t3, "x", "topk");
  if (0 === r3.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
  var o3 = r3.shape[r3.shape.length - 1];
  if (e3 > o3) throw new Error("'k' passed to topk() must be <= the last dimension (" + o3 + ") but got " + e3);
  var a3 = Lt2.runKernelFunc(function(t4) {
    return t4.topk(r3, e3, n3);
  }, { $x: r3 });
  return { values: a3[0], indices: a3[1] };
} });
var vh2 = An2({ scatterND_: function(t3, e3, n3) {
  var r3 = gn2(t3, "indices", "scatterND", "int32"), o3 = gn2(e3, "updates", "scatterND");
  return zo2(o3, r3, n3), Lt2.runKernelFunc(function(t4) {
    return t4.scatterND(r3, o3, n3);
  }, { indices: r3, updates: o3 }, null, "ScatterNd", { shape: n3 });
} });
var gh2 = An2({ fft_: function(t3) {
  C2("complex64" === t3.dtype, function() {
    return "The dtype for tf.spectral.fft() must be complex64 but got " + t3.dtype + ".";
  });
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3, r3 = t3.as2D(n3, e3);
  return Lt2.runKernelFunc(function(t4) {
    return t4.fft(r3);
  }, { input: t3 }).reshape(t3.shape);
} });
var mh2 = An2({ ifft_: function(t3) {
  C2("complex64" === t3.dtype, function() {
    return "The dtype for tf.spectral.ifft() must be complex64 but got " + t3.dtype + ".";
  });
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3, r3 = t3.as2D(n3, e3);
  return Lt2.runKernelFunc(function(t4) {
    return t4.ifft(r3);
  }, { input: t3 }).reshape(t3.shape);
} });
var yh2 = An2({ rfft_: function(t3, e3) {
  C2("float32" === t3.dtype, function() {
    return "The dtype for rfft() must be real value but got " + t3.dtype;
  });
  var n3, r3 = t3.shape[t3.shape.length - 1], o3 = t3.size / r3;
  if (null != e3 && e3 < r3) {
    var a3 = t3.shape.map(function(t4) {
      return 0;
    }), i3 = t3.shape.map(function(t4) {
      return t4;
    });
    i3[t3.shape.length - 1] = e3, n3 = t3.slice(a3, i3), r3 = e3;
  } else if (null != e3 && e3 > r3) {
    var s3 = t3.shape.map(function(t4) {
      return t4;
    });
    s3[t3.shape.length - 1] = e3 - r3, n3 = t3.concat(Gn2(s3), t3.shape.length - 1), r3 = e3;
  } else n3 = t3;
  var u3 = n3.zerosLike(), c3 = Tn2(n3, u3).as2D(o3, r3), l3 = gh2(c3), h3 = Math.floor(r3 / 2) + 1, f3 = Dn2(l3), d3 = Nn2(l3), p3 = f3.split([h3, r3 - h3], f3.shape.length - 1), v2 = d3.split([h3, r3 - h3], d3.shape.length - 1), g2 = n3.shape.slice();
  return g2[n3.shape.length - 1] = h3, Tn2(p3[0], v2[0]).reshape(g2);
} });
var xh2 = An2({ irfft_: function(t3) {
  var e3 = t3.shape[t3.shape.length - 1], n3 = t3.size / e3;
  if (e3 <= 2) {
    var r3 = t3.as2D(n3, e3), o3 = mh2(r3);
    return Dn2(o3);
  }
  var a3 = [n3, 2 * (e3 - 1)], i3 = Dn2(t3).as2D(n3, e3), s3 = Nn2(t3).as2D(n3, e3), u3 = i3.slice([0, 1], [n3, e3 - 2]).reverse(1), c3 = s3.slice([0, 1], [n3, e3 - 2]).reverse(1).mul(On2(-1)), l3 = i3.concat(u3, 1), h3 = s3.concat(c3, 1);
  return r3 = Tn2(l3, h3).as2D(a3[0], a3[1]), o3 = mh2(r3), Dn2(o3);
} });
var bh2 = Object.freeze({ fft: gh2, ifft: mh2, rfft: yh2, irfft: xh2 });
var wh2 = An2({ sparseToDense_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = 0);
  var o3 = gn2(t3, "sparseIndices", "sparseToDense", "int32"), a3 = gn2(e3, "sparseValues", "sparseToDense"), i3 = gn2(r3, "defaultValue", "sparseToDense", a3.dtype);
  return function(t4, e4, n4, r4) {
    if ("int32" !== t4.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + t4.dtype + ".");
    if (t4.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + t4.shape + ".");
    var o4 = t4.rank > 0 ? t4.shape[0] : 1, a4 = t4.rank > 1 ? t4.shape[1] : 1;
    if (n4.length !== a4) throw new Error("outputShape has incorrect number of elements:, " + n4.length + ", should be: " + a4 + ".");
    var i4 = e4.size;
    if (0 !== e4.rank && (1 !== e4.rank || i4 !== o4)) throw new Error("sparseValues has incorrect shape " + e4.shape + ", should be [] or [" + o4 + "]");
    if (e4.dtype !== r4.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
  }(o3, a3, n3, i3), Lt2.runKernelFunc(function(t4) {
    return t4.sparseToDense(o3, a3, n3, i3);
  }, { $sparseIndices: o3, $sparseValues: a3, $defaultValue: i3 });
} });
var Ch2 = An2({ gatherND_: function(t3, e3) {
  var n3 = gn2(e3, "indices", "gatherND", "int32"), r3 = gn2(t3, "x", "gatherND");
  return Lt2.runKernelFunc(function(t4) {
    return t4.gatherND(r3, n3);
  }, { x: r3, indices: n3 }, null, "GatherNd");
} });
var Eh2 = An2({ diag_: function(t3) {
  var e3 = gn2(t3, "x", "diag").flatten(), n3 = t3.shape.concat(t3.shape);
  return Lt2.runKernelFunc(function(t4) {
    return t4.diag(e3);
  }, { $x: e3 }).reshape(n3);
} });
var Rh2 = An2({ dropout_: function(t3, e3, n3, r3) {
  var o3 = gn2(t3, "x", "dropout");
  if (C2("float32" === o3.dtype, function() {
    return "x has to be a floating point tensor since it's going to be scaled, but got a " + o3.dtype + " tensor instead.";
  }), C2(e3 >= 0 && e3 < 1, function() {
    return "rate must be a float in the range [0, 1), but got " + e3 + ".";
  }), 0 === e3) return t3 instanceof wt2 ? o3.clone() : o3;
  var a3 = function(t4, e4) {
    if (null == e4) return t4.shape.slice();
    if (S2(t4.shape, e4)) return e4;
    if (t4.shape.length === e4.length) {
      for (var n4 = [], r4 = 0; r4 < t4.shape.length; r4++) null == e4[r4] && null != t4.shape[r4] ? n4.push(t4.shape[r4]) : n4.push(e4[r4]);
      return n4;
    }
    return e4;
  }(o3, n3), i3 = 1 - e3, s3 = zc2(a3, 0, 1, "float32", r3).add(i3).floor().div(i3);
  return o3.mul(s3);
} });
function Ih2(t3, e3, n3) {
  for (var r3 = 1 - t3 % 2, o3 = new Float32Array(t3), a3 = 0; a3 < t3; ++a3) {
    var i3 = 2 * Math.PI * a3 / (t3 + r3 - 1);
    o3[a3] = e3 - n3 * Math.cos(i3);
  }
  return Mn2(o3, "float32");
}
var kh2 = An2({ hannWindow_: function(t3) {
  return Ih2(t3, 0.5, 0.5);
} });
var Sh2 = An2({ hammingWindow_: function(t3) {
  return Ih2(t3, 0.54, 0.46);
} });
var Ah2 = An2({ frame_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = false), void 0 === o3 && (o3 = 0);
  for (var a3 = 0, i3 = []; a3 + e3 <= t3.size; ) i3.push(Wl2(t3, a3, e3)), a3 += n3;
  if (r3) for (; a3 < t3.size; ) {
    var s3 = a3 + e3 - t3.size, u3 = Yn2([Wl2(t3, a3, e3 - s3), Hn2([s3], o3)]);
    i3.push(u3), a3 += n3;
  }
  return 0 === i3.length ? Bn2([], [0, e3]) : Yn2(i3).as2D(i3.length, e3);
} });
var Th2 = An2({ stft_: function(t3, e3, n3, r3, o3) {
  var a3;
  void 0 === o3 && (o3 = kh2), null == r3 && (a3 = e3, r3 = Math.floor(Math.pow(2, Math.ceil(Math.log(a3) / Math.log(2)))));
  for (var i3 = Ah2(t3, e3, n3), s3 = To2(i3, o3(e3)), u3 = [], c3 = 0; c3 < i3.shape[0]; c3++) u3.push(yh2(s3.slice([c3, 0], [1, e3]), r3));
  return Yn2(u3);
} });
var Dh2 = Object.freeze({ hannWindow: kh2, hammingWindow: Sh2, frame: Ah2, stft: Th2 });
var Nh2;
var Fh2 = function(t3, e3, o3) {
  return void 0 === o3 && (o3 = 1), n2(this, void 0, void 0, function() {
    var n3, a3, i3, s3, u3, c3, l3, h3, f3, d3, p3, v2, g2, m3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return n3 = gn2(t3, "predictions", "inTopK"), a3 = gn2(e3, "targets", "inTopK"), C2(n3.rank > 1, function() {
            return "inTopK() expects the predictions to be of rank 2 or higher, but got " + n3.rank;
          }), C2(n3.rank - 1 === a3.rank, function() {
            return "predictions rank should be 1 larger than targets rank, but got predictions rank " + n3.rank + " and targets rank " + a3.rank;
          }), E2(n3.shape.slice(0, n3.shape.length - 1), a3.shape, "predictions's shape should be align with the targets' shape, except the last dimension."), i3 = n3.shape[n3.shape.length - 1], C2(o3 > 0 && o3 <= i3, function() {
            return "'k' passed to inTopK() must be > 0 && <= the predictions last dimension (" + i3 + "), but got " + o3;
          }), [4, n3.data()];
        case 1:
          return s3 = r3.sent(), [4, a3.data()];
        case 2:
          for (u3 = r3.sent(), c3 = [s3.length / i3, i3], h3 = c3[1], f3 = B2("bool", l3 = c3[0]), d3 = 0; d3 < l3; d3++) {
            for (p3 = d3 * h3, v2 = s3.subarray(p3, p3 + h3), g2 = [], m3 = 0; m3 < v2.length; m3++) g2.push({ value: v2[m3], index: m3 });
            for (g2.sort(function(t4, e4) {
              return e4.value - t4.value;
            }), f3[d3] = 0, m3 = 0; m3 < o3; m3++) if (g2[m3].index === u3[d3]) {
              f3[d3] = 1;
              break;
            }
          }
          return t3 !== n3 && n3.dispose(), e3 !== a3 && a3.dispose(), [2, Fn2(f3, a3.shape, "bool")];
      }
    });
  });
};
!function(t3) {
  t3[t3.NONE = 0] = "NONE", t3[t3.MEAN = 1] = "MEAN", t3[t3.SUM = 2] = "SUM", t3[t3.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
}(Nh2 || (Nh2 = {}));
var _h2 = An2({ absoluteDifference_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var o3 = gn2(t3, "labels", "absoluteDifference"), a3 = gn2(e3, "predictions", "absoluteDifference"), i3 = null;
  null != n3 && (i3 = gn2(n3, "weights", "absoluteDifference")), E2(o3.shape, a3.shape, "Error in absoluteDifference: ");
  var s3 = o3.sub(a3).abs();
  return Oh2(s3, i3, r3);
} });
var Oh2 = An2({ computeWeightedLoss_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var r3 = gn2(t3, "losses", "computeWeightedLoss"), o3 = null;
  null != e3 && (o3 = gn2(e3, "weights", "computeWeightedLoss"));
  var a3 = null == o3 ? r3 : r3.mul(o3);
  if (n3 === Nh2.NONE) return a3;
  if (n3 === Nh2.SUM) return a3.sum();
  if (n3 === Nh2.MEAN) {
    if (null == o3) return a3.mean();
    var i3 = r3.size / o3.size, s3 = a3.sum().div(o3.sum());
    return i3 > 1 ? s3.div(On2(i3)) : s3;
  }
  if (n3 === Nh2.SUM_BY_NONZERO_WEIGHTS) {
    if (null == o3) return a3.sum().div(On2(r3.size));
    var u3 = o3.mul(zn2(r3.shape)).notEqual(On2(0)).sum().toFloat();
    return a3.sum().div(u3);
  }
  throw Error("Unknown reduction: " + n3);
} });
var Mh2 = An2({ cosineDistance_: function(t3, e3, n3, r3, o3) {
  void 0 === o3 && (o3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var a3 = gn2(t3, "labels", "cosineDistance"), i3 = gn2(e3, "predictions", "cosineDistance"), s3 = null;
  null != r3 && (s3 = gn2(r3, "weights", "cosineDistance")), E2(a3.shape, i3.shape, "Error in cosineDistance: ");
  var u3 = On2(1).sub(a3.mul(i3).sum(n3, true));
  return Oh2(u3, s3, o3);
} });
var Bh2 = An2({ hingeLoss_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var o3 = gn2(t3, "labels", "hingeLoss"), a3 = gn2(e3, "predictions", "hingeLoss"), i3 = null;
  null != n3 && (i3 = gn2(n3, "weights", "hingeLoss")), E2(o3.shape, a3.shape, "Error in hingeLoss: ");
  var s3 = On2(1);
  o3 = On2(2).mul(o3).sub(s3);
  var u3 = s3.sub(o3.mul(a3)).relu();
  return Oh2(u3, i3, r3);
} });
var Ph2 = An2({ huberLoss_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 1), void 0 === o3 && (o3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var a3 = gn2(t3, "labels", "huberLoss"), i3 = gn2(e3, "predictions", "huberLoss"), s3 = null;
  null != n3 && (s3 = gn2(n3, "weights", "huberLoss")), E2(a3.shape, i3.shape, "Error in huberLoss: ");
  var u3 = On2(r3), c3 = i3.sub(a3).abs(), l3 = Io2(c3, u3), h3 = c3.sub(l3), f3 = On2(0.5).mul(l3.square()).add(u3.mul(h3));
  return Oh2(f3, s3, o3);
} });
var Lh2 = An2({ logLoss_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 1e-7), void 0 === o3 && (o3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var a3 = gn2(t3, "labels", "logLoss"), i3 = gn2(e3, "predictions", "logLoss"), s3 = null;
  null != n3 && (s3 = gn2(n3, "weights", "logLoss")), E2(a3.shape, i3.shape, "Error in logLoss: ");
  var u3 = On2(1), c3 = On2(r3), l3 = a3.mul(i3.add(c3).log()).neg().sub(u3.sub(a3).mul(u3.sub(i3).add(c3).log()));
  return Oh2(l3, s3, o3);
} });
var Wh2 = An2({ meanSquaredError_: function(t3, e3, n3, r3) {
  void 0 === r3 && (r3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var o3 = gn2(t3, "labels", "meanSquaredError"), a3 = gn2(e3, "predictions", "meanSquaredError"), i3 = null;
  null != n3 && (i3 = gn2(n3, "weights", "meanSquaredError")), E2(o3.shape, a3.shape, "Error in meanSquaredError: ");
  var s3 = o3.squaredDifference(a3);
  return Oh2(s3, i3, r3);
} });
var Uh2 = An2({ sigmoidCrossEntropy_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var a3 = gn2(t3, "multiClassLabels", "sigmoidCrossEntropy"), i3 = gn2(e3, "logits", "sigmoidCrossEntropy"), s3 = null;
  if (null != n3 && (s3 = gn2(n3, "weights", "sigmoidCrossEntropy")), E2(a3.shape, i3.shape, "Error in sigmoidCrossEntropy: "), r3 > 0) {
    var u3 = On2(r3), c3 = On2(1), l3 = On2(0.5);
    a3 = a3.mul(c3.sub(u3)).add(l3.mul(u3));
  }
  var h3 = function(t4, e4) {
    var n4 = gn2(t4, "labels", "sigmoidCrossEntropyWithLogits"), r4 = gn2(e4, "logits", "sigmoidCrossEntropyWithLogits");
    E2(n4.shape, r4.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    var o4 = r4.relu(), a4 = r4.mul(n4), i4 = r4.abs().neg().exp().log1p();
    return o4.sub(a4).add(i4);
  }(a3, i3);
  return Oh2(h3, s3, o3);
} });
var Vh2 = An2({ softmaxCrossEntropy_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0), void 0 === o3 && (o3 = Nh2.SUM_BY_NONZERO_WEIGHTS);
  var a3 = gn2(t3, "onehotLabels", "softmaxCrossEntropy"), i3 = gn2(e3, "logits", "softmaxCrossEntropy"), s3 = null;
  if (null != n3 && (s3 = gn2(n3, "weights", "softmaxCrossEntropy")), E2(a3.shape, i3.shape, "Error in softmaxCrossEntropy: "), r3 > 0) {
    var u3 = On2(r3), c3 = On2(1), l3 = On2(a3.shape[1]);
    a3 = a3.mul(c3.sub(u3)).add(u3.div(l3));
  }
  var h3 = function(t4, e4, n4) {
    if (void 0 === n4 && (n4 = -1), -1 === n4 && (n4 = e4.rank - 1), n4 !== e4.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + e4.rank + " and dim was " + n4);
    return oa2(function(t5, e5, r4) {
      var o4 = e5.logSumExp([n4], true), a4 = e5.toFloat().sub(o4);
      r4([t5, a4]);
      return { value: a4.mul(t5).neg().sum([n4]), gradFunc: function(t6, e6) {
        var r5 = e6[0], o5 = e6[1], a5 = wn2(t6.shape, [n4]);
        return [t6.reshape(a5).mul(r5.toFloat().sub(o5.exp())), t6.reshape(a5).mul(o5.exp().sub(r5.toFloat()))];
      } };
    })(t4, e4);
  }(a3, i3);
  return Oh2(h3, s3, o3);
} });
var zh2 = Object.freeze({ get Reduction() {
  return Nh2;
}, absoluteDifference: _h2, computeWeightedLoss: Oh2, cosineDistance: Mh2, hingeLoss: Bh2, huberLoss: Ph2, logLoss: Lh2, meanSquaredError: Wh2, sigmoidCrossEntropy: Uh2, softmaxCrossEntropy: Vh2 });
function Gh2(t3, e3) {
  return void 0 === e3 && (e3 = false), Lt2.tidy(function() {
    if (2 !== t3.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + t3.shape.length + "D Tensor.");
    for (var n3 = t3.shape[0], r3 = t3.shape[1], o3 = Cc2(n3), a3 = t3.clone(), i3 = Bn2([[1]], [1, 1]), s3 = i3.clone(), u3 = n3 >= r3 ? r3 : n3, c3 = function(t4) {
      var e4, u4 = a3, c4 = s3, l4 = o3;
      e4 = Lt2.tidy(function() {
        var e5 = a3.slice([t4, t4], [n3 - t4, 1]), u5 = e5.norm(), c5 = a3.slice([t4, t4], [1, 1]), l5 = Bn2([[-1]]).where(c5.greater(0), Bn2([[1]])), h3 = c5.sub(l5.mul(u5)), f3 = e5.div(h3);
        s3 = 1 === f3.shape[0] ? i3.clone() : i3.concat(f3.slice([1, 0], [f3.shape[0] - 1, f3.shape[1]]), 0);
        var d3 = l5.matMul(h3).div(u5).neg(), p3 = a3.slice([t4, 0], [n3 - t4, r3]), v2 = d3.mul(s3), g2 = s3.transpose();
        if (0 === t4) a3 = p3.sub(v2.matMul(g2.matMul(p3)));
        else {
          var m3 = p3.sub(v2.matMul(g2.matMul(p3)));
          a3 = a3.slice([0, 0], [t4, r3]).concat(m3, 0);
        }
        var y3 = v2.transpose(), x3 = o3.slice([0, t4], [n3, o3.shape[1] - t4]);
        if (0 === t4) o3 = x3.sub(x3.matMul(s3).matMul(y3));
        else {
          var b3 = x3.sub(x3.matMul(s3).matMul(y3));
          o3 = o3.slice([0, 0], [n3, t4]).concat(b3, 1);
        }
        return [s3, a3, o3];
      }), s3 = e4[0], a3 = e4[1], o3 = e4[2], tn2([u4, c4, l4]);
    }, l3 = 0; l3 < u3; ++l3) c3(l3);
    return !e3 && n3 > r3 && (o3 = o3.slice([0, 0], [n3, r3]), a3 = a3.slice([0, 0], [r3, r3])), [o3, a3];
  });
}
var Hh2 = An2({ bandPart_: function(t3, e3, n3) {
  if (e3 % 1 != 0) throw new Error("bandPart(): numLower must be an integer, got " + e3 + ".");
  if (n3 % 1 != 0) throw new Error("bandPart(): numUpper must be an integer, got " + n3 + ".");
  var r3 = gn2(t3, "a", "bandPart");
  if (r3.rank < 2) throw new Error("bandPart(): Rank must be at least 2, got " + r3.rank + ".");
  var o3 = r3.shape, a3 = r3.shape.slice(-2), i3 = a3[0], s3 = a3[1];
  if (!(e3 <= i3)) throw new Error("bandPart(): numLower (" + e3 + ") must not be greater than the number of rows (" + i3 + ").");
  if (!(n3 <= s3)) throw new Error("bandPart(): numUpper (" + n3 + ") must not be greater than the number of columns (" + s3 + ").");
  e3 < 0 && (e3 = i3), n3 < 0 && (n3 = s3);
  var u3 = Kn2(0, i3, 1, "int32").reshape([-1, 1]), c3 = Kn2(0, s3, 1, "int32"), l3 = Oo2(u3, c3), h3 = pc2(l3.lessEqual(On2(+e3, "int32")), l3.greaterEqual(On2(-n3, "int32"))), f3 = Gn2([i3, s3], r3.dtype);
  return hr2(fr2(r3.reshape([-1, i3, s3])).map(function(t4) {
    return yc2(h3, t4, f3);
  })).reshape(o3);
} });
var qh2 = An2({ gramSchmidt_: function(t3) {
  var e3;
  if (Array.isArray(t3)) {
    e3 = false, C2(null != t3 && t3.length > 0, function() {
      return "Gram-Schmidt process: input must not be null, undefined, or empty";
    });
    for (var n3 = t3[0].shape[0], r3 = function(e4) {
      C2(t3[e4].shape[0] === n3, function() {
        return "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + t3[e4].shape[0] + " vs. " + n3 + ")";
      });
    }, o3 = 1; o3 < t3.length; ++o3) r3(o3);
  } else e3 = true, t3 = tr2(t3, t3.shape[0], 0).map(function(t4) {
    return lr2(t4, [0]);
  });
  C2(t3.length <= t3[0].shape[0], function() {
    return "Gram-Schmidt: Number of vectors (" + t3.length + ") exceeds number of dimensions (" + t3[0].shape[0] + ").";
  });
  var a3 = [], i3 = t3, s3 = function(t4) {
    a3.push(Lt2.tidy(function() {
      var e4 = i3[t4];
      if (t4 > 0) for (var n4 = 0; n4 < t4; ++n4) {
        var r4 = th2(a3[n4].mulStrict(e4)).mul(a3[n4]);
        e4 = e4.sub(r4);
      }
      return e4.div(ch2(e4, "euclidean"));
    }));
  };
  for (o3 = 0; o3 < t3.length; ++o3) s3(o3);
  return e3 ? hr2(a3, 0) : a3;
} });
var Kh2 = An2({ qr_: function(t3, e3) {
  if (void 0 === e3 && (e3 = false), t3.rank < 2) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + t3.rank);
  if (2 === t3.rank) return Gh2(t3, e3);
  var n3 = t3.shape.slice(0, t3.shape.length - 2).reduce(function(t4, e4) {
    return t4 * e4;
  }), r3 = fr2(t3.reshape([n3, t3.shape[t3.shape.length - 2], t3.shape[t3.shape.length - 1]]), 0), o3 = [], a3 = [];
  return r3.forEach(function(t4) {
    var n4 = Gh2(t4, e3), r4 = n4[0], i3 = n4[1];
    o3.push(r4), a3.push(i3);
  }), [hr2(o3, 0).reshape(t3.shape), hr2(a3, 0).reshape(t3.shape)];
} });
var jh2 = Object.freeze({ bandPart: Hh2, gramSchmidt: qh2, qr: Kh2 });
function Xh2(t3, e3, n3, r3, o3, a3) {
  null == r3 && (r3 = 0.5), null == o3 && (o3 = Number.NEGATIVE_INFINITY), null == a3 && (a3 = 0);
  var i3 = t3.shape[0];
  return n3 = Math.min(n3, i3), C2(0 <= r3 && r3 <= 1, function() {
    return "iouThreshold must be in [0, 1], but was '" + r3 + "'";
  }), C2(2 === t3.rank, function() {
    return "boxes must be a 2D tensor, but was of rank '" + t3.rank + "'";
  }), C2(4 === t3.shape[1], function() {
    return "boxes must have 4 columns, but 2nd dimension was " + t3.shape[1];
  }), C2(1 === e3.rank, function() {
    return "scores must be a 1D tensor";
  }), C2(e3.shape[0] === i3, function() {
    return "scores has incompatible shape with boxes. Expected " + i3 + ", but was " + e3.shape[0];
  }), C2(0 <= a3 && a3 <= 1, function() {
    return "softNmsSigma must be in [0, 1], but was '" + a3 + "'";
  }), { maxOutputSize: n3, iouThreshold: r3, scoreThreshold: o3, softNmsSigma: a3 };
}
var Yh2 = An2({ resizeBilinear_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "images", "resizeBilinear");
  C2(3 === r3.rank || 4 === r3.rank, function() {
    return "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r3.rank + ".";
  }), C2(2 === e3.length, function() {
    return "Error in resizeBilinear: new shape must 2D, but got shape " + e3 + ".";
  });
  var o3 = r3, a3 = false;
  3 === r3.rank && (a3 = true, o3 = r3.as4D(1, r3.shape[0], r3.shape[1], r3.shape[2]));
  var i3 = e3[0], s3 = e3[1], u3 = Lt2.runKernelFunc(function(t4, e4) {
    return e4([o3]), t4.resizeBilinear(o3, i3, s3, n3);
  }, { x: o3 }, function(t4, e4) {
    return { x: function() {
      return Lt2.runKernelFunc(function(r4) {
        return r4.resizeBilinearBackprop(t4, e4[0], n3);
      }, {});
    } };
  }, "ResizeBilinear", { alignCorners: n3, newHeight: i3, newWidth: s3 });
  return a3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var $h2 = An2({ resizeNearestNeighbor_: function(t3, e3, n3) {
  void 0 === n3 && (n3 = false);
  var r3 = gn2(t3, "images", "resizeNearestNeighbor");
  C2(3 === r3.rank || 4 === r3.rank, function() {
    return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r3.rank + ".";
  }), C2(2 === e3.length, function() {
    return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + e3 + ".";
  }), C2("float32" === r3.dtype || "int32" === r3.dtype, function() {
    return "`images` must have `int32` or `float32` as dtype";
  });
  var o3 = r3, a3 = false;
  3 === r3.rank && (a3 = true, o3 = r3.as4D(1, r3.shape[0], r3.shape[1], r3.shape[2]));
  var i3 = e3[0], s3 = e3[1], u3 = Lt2.runKernelFunc(function(t4, e4) {
    return e4([o3]), t4.resizeNearestNeighbor(o3, i3, s3, n3);
  }, { batchImages: o3 }, function(t4, e4) {
    return { batchImages: function() {
      return Lt2.runKernelFunc(function(r4) {
        return r4.resizeNearestNeighborBackprop(t4, e4[0], n3);
      }, {});
    } };
  });
  return a3 ? u3.as3D(u3.shape[1], u3.shape[2], u3.shape[3]) : u3;
} });
var Qh2 = An2({ nonMaxSuppression_: function(t3, e3, n3, r3, o3) {
  void 0 === r3 && (r3 = 0.5), void 0 === o3 && (o3 = Number.NEGATIVE_INFINITY);
  var a3 = gn2(t3, "boxes", "nonMaxSuppression"), i3 = gn2(e3, "scores", "nonMaxSuppression"), s3 = Xh2(a3, i3, n3, r3, o3);
  n3 = s3.maxOutputSize, r3 = s3.iouThreshold, o3 = s3.scoreThreshold;
  var u3 = { maxOutputSize: n3, iouThreshold: r3, scoreThreshold: o3 };
  return Lt2.runKernelFunc(function(t4) {
    return t4.nonMaxSuppression(a3, i3, n3, r3, o3);
  }, { boxes: a3, scores: i3 }, null, "NonMaxSuppressionV3", u3);
} });
var Jh2 = function(t3, e3, o3, a3, i3) {
  return void 0 === a3 && (a3 = 0.5), void 0 === i3 && (i3 = Number.NEGATIVE_INFINITY), n2(this, void 0, void 0, function() {
    var n3, s3, u3, c3, l3, h3, f3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return n3 = gn2(t3, "boxes", "nonMaxSuppressionAsync"), s3 = gn2(e3, "scores", "nonMaxSuppressionAsync"), u3 = Xh2(n3, s3, o3, a3, i3), o3 = u3.maxOutputSize, a3 = u3.iouThreshold, i3 = u3.scoreThreshold, [4, Promise.all([n3.data(), s3.data()])];
        case 1:
          return c3 = r3.sent(), l3 = c3[0], h3 = c3[1], f3 = Oa2(l3, h3, o3, a3, i3), n3 !== t3 && n3.dispose(), s3 !== e3 && s3.dispose(), [2, f3];
      }
    });
  });
};
var Zh = An2({ nonMaxSuppressionWithScore_: function(t3, e3, n3, r3, o3, a3) {
  void 0 === r3 && (r3 = 0.5), void 0 === o3 && (o3 = Number.NEGATIVE_INFINITY), void 0 === a3 && (a3 = 0);
  var i3 = gn2(t3, "boxes", "nonMaxSuppression"), s3 = gn2(e3, "scores", "nonMaxSuppression"), u3 = Xh2(i3, s3, n3, r3, o3, a3), c3 = { maxOutputSize: n3 = u3.maxOutputSize, iouThreshold: r3 = u3.iouThreshold, scoreThreshold: o3 = u3.scoreThreshold, softNmsSigma: a3 = u3.softNmsSigma }, l3 = Lt2.runKernel("NonMaxSuppressionV5", { boxes: i3, scores: s3 }, c3);
  return { selectedIndices: l3[0], selectedScores: l3[1] };
} });
var tf = function(t3, e3, o3, a3, i3, s3) {
  return void 0 === a3 && (a3 = 0.5), void 0 === i3 && (i3 = Number.NEGATIVE_INFINITY), void 0 === s3 && (s3 = 0), n2(this, void 0, void 0, function() {
    var n3, u3, c3, l3, h3, f3, d3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return n3 = gn2(t3, "boxes", "nonMaxSuppressionAsync"), u3 = gn2(e3, "scores", "nonMaxSuppressionAsync"), c3 = Xh2(n3, u3, o3, a3, i3, s3), o3 = c3.maxOutputSize, a3 = c3.iouThreshold, i3 = c3.scoreThreshold, s3 = c3.softNmsSigma, [4, Promise.all([n3.data(), u3.data()])];
        case 1:
          return l3 = r3.sent(), h3 = l3[0], f3 = l3[1], d3 = Ma2(h3, f3, o3, a3, i3, s3), n3 !== t3 && n3.dispose(), u3 !== e3 && u3.dispose(), [2, d3];
      }
    });
  });
};
var ef = An2({ cropAndResize_: function(t3, e3, n3, r3, o3, a3) {
  var i3 = gn2(t3, "image", "cropAndResize"), s3 = gn2(e3, "boxes", "cropAndResize", "float32"), u3 = gn2(n3, "boxInd", "cropAndResize", "int32");
  o3 = o3 || "bilinear", a3 = a3 || 0;
  var c3 = s3.shape[0];
  return C2(4 === i3.rank, function() {
    return "Error in cropAndResize: image must be rank 4,but got rank " + i3.rank + ".";
  }), C2(2 === s3.rank && 4 === s3.shape[1], function() {
    return "Error in cropAndResize: boxes must be have size [" + c3 + ",4] but had shape " + s3.shape + ".";
  }), C2(1 === u3.rank && u3.shape[0] === c3, function() {
    return "Error in cropAndResize: boxInd must be have size [" + c3 + "] but had shape " + s3.shape + ".";
  }), C2(2 === r3.length, function() {
    return "Error in cropAndResize: cropSize must be of length 2, but got length " + r3.length + ".";
  }), C2(r3[0] >= 1 && r3[1] >= 1, function() {
    return "cropSize must be atleast [1,1], but was " + r3;
  }), C2("bilinear" === o3 || "nearest" === o3, function() {
    return "method must be bilinear or nearest, but was " + o3;
  }), Lt2.runKernelFunc(function(t4, e4) {
    return t4.cropAndResize(i3, s3, u3, r3, o3, a3);
  }, { images: i3, boxes: s3, boxInd: u3 }, null, "CropAndResize", { method: o3, extrapolationValue: a3, cropSize: r3 });
} });
var nf = Object.freeze({ resizeBilinear: Yh2, resizeNearestNeighbor: $h2, nonMaxSuppression: Qh2, nonMaxSuppressionAsync: Jh2, nonMaxSuppressionWithScore: Zh, nonMaxSuppressionWithScoreAsync: tf, cropAndResize: ef });
var rf = function(t3, e3) {
  return !(t3 > 0) || "linear" === e3;
};
var of = function(t3, e3, n3) {
  if (null == n3 || "linear" === n3) return t3;
  if ("relu" === n3) return t3.mul(e3.step());
  throw new Error("Gradient for activation " + n3 + " has not been implemented yet.");
};
var af = function(t3, e3) {
  var n3 = e3, r3 = Br2(t3.shape, e3.shape);
  return r3.length > 0 && (n3 = n3.sum(r3)), n3.reshape(t3.shape);
};
var sf = function(t3, e3, n3) {
  if ("linear" === e3) return t3;
  if ("relu" === e3) return ah2(t3);
  if ("elu" === e3) return nh2(t3);
  if ("relu6" === e3) return ih2(t3);
  if ("prelu" === e3) return oh2(t3, n3);
  throw new Error("Unknown fused activation " + e3 + ".");
};
var uf = An2({ fusedMatMul_: function(t3) {
  var e3, n3 = t3.a, r3 = t3.b, o3 = t3.transposeA, a3 = void 0 !== o3 && o3, i3 = t3.transposeB, s3 = void 0 !== i3 && i3, u3 = t3.bias, c3 = t3.activation, l3 = void 0 === c3 ? "linear" : c3, h3 = t3.preluActivationWeights;
  if (false === rf(Lt2.state.gradientDepth, l3)) {
    var f3 = El2(n3, r3, a3, s3);
    return null != u3 && (f3 = Or2(f3, u3)), sf(f3, l3, h3);
  }
  var d3 = gn2(n3, "a", "fused matMul"), p3 = gn2(r3, "b", "fused matMul");
  e3 = Nt2(d3, p3), d3 = e3[0], p3 = e3[1];
  var v2 = a3 ? d3.shape[d3.rank - 2] : d3.shape[d3.rank - 1], g2 = s3 ? p3.shape[p3.rank - 1] : p3.shape[p3.rank - 2], m3 = a3 ? d3.shape[d3.rank - 1] : d3.shape[d3.rank - 2], y3 = s3 ? p3.shape[p3.rank - 2] : p3.shape[p3.rank - 1], x3 = d3.shape.slice(0, -2), b3 = p3.shape.slice(0, -2), w3 = k2(x3), E3 = k2(b3);
  C2(d3.rank >= 2 && p3.rank >= 2 && d3.rank === p3.rank, function() {
    return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + d3.rank + " and " + p3.rank + ".";
  }), C2(S2(x3, b3), function() {
    return "Error in fused matMul: outer dimensions (" + x3 + ") and (" + b3 + ") of Tensors with shapes " + d3.shape + " and " + p3.shape + " must match.";
  }), C2(v2 === g2, function() {
    return "Error in fused matMul: inner shapes (" + v2 + ") and (" + g2 + ") of Tensors with shapes " + d3.shape + " and " + p3.shape + " and transposeA=" + a3 + " and transposeB=" + s3 + " must match.";
  });
  var R3, I3, A3 = d3.shape.slice(0, -2).concat([m3, y3]), T3 = a3 ? d3.as3D(w3, v2, m3) : d3.as3D(w3, m3, v2), D3 = s3 ? p3.as3D(E3, y3, g2) : p3.as3D(E3, g2, y3);
  null != u3 && Pr2(A3, (R3 = Nt2(R3 = gn2(u3, "bias", "fused matMul"), d3)[0]).shape), null != h3 && (I3 = gn2(h3, "prelu weights", "fused matMul"));
  var N3 = { a: T3, b: D3 };
  null != u3 && (N3.bias = R3), null != h3 && (N3.preluActivationWeights = I3);
  var F3 = [T3, D3];
  return Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.fusedBatchMatMul({ a: T3, b: D3, transposeA: a3, transposeB: s3, bias: R3, activation: l3, preluActivationWeights: I3 });
    return e4([T3, D3, n4]), n4;
  }, N3, function(t4, e4) {
    var n4 = e4[0], r4 = e4[1], o4 = e4[2], i4 = of(t4, o4, l3), c4 = {};
    return null != u3 && (c4 = { bias: function() {
      return af(R3, i4);
    } }), a3 || s3 ? !a3 && s3 ? Object.assign({ a: function() {
      return i4.matMul(r4, false, false);
    }, b: function() {
      return i4.matMul(n4, true, false);
    } }, c4) : a3 && !s3 ? Object.assign({ a: function() {
      return r4.matMul(i4, false, true);
    }, b: function() {
      return n4.matMul(i4, false, false);
    } }, c4) : Object.assign({ a: function() {
      return r4.matMul(i4, true, true);
    }, b: function() {
      return i4.matMul(n4, true, true);
    } }, c4) : Object.assign({ a: function() {
      return i4.matMul(r4, false, true);
    }, b: function() {
      return n4.matMul(i4, true, false);
    } }, c4);
  }, "_FusedMatMul", { transposeA: a3, transposeB: s3, activation: l3 }, F3, [true]).reshape(A3);
} });
var cf = An2({ fusedConv2d_: function(t3) {
  var e3 = t3.x, n3 = t3.filter, r3 = t3.strides, o3 = t3.pad, a3 = t3.dataFormat, i3 = void 0 === a3 ? "NHWC" : a3, s3 = t3.dilations, u3 = void 0 === s3 ? [1, 1] : s3, c3 = t3.dimRoundingMode, l3 = t3.bias, h3 = t3.activation, f3 = void 0 === h3 ? "linear" : h3, d3 = t3.preluActivationWeights;
  if (f3 = f3 || "linear", false === rf(Lt2.state.gradientDepth, f3)) {
    var p3 = dl2(e3, n3, r3, o3, i3, u3, c3);
    return null != l3 && (p3 = Or2(p3, l3)), sf(p3, f3, d3);
  }
  var v2 = gn2(e3, "x", "conv2d"), g2 = gn2(n3, "filter", "conv2d"), m3 = v2, y3 = false;
  3 === v2.rank && (y3 = true, m3 = v2.as4D(1, v2.shape[0], v2.shape[1], v2.shape[2])), C2(4 === m3.rank, function() {
    return "Error in fused conv2d: input must be rank 4, but got rank " + m3.rank + ".";
  }), C2(4 === g2.rank, function() {
    return "Error in fused conv2d: filter must be rank 4, but got rank " + g2.rank + ".";
  }), null != c3 && C2(A2(o3), function() {
    return "Error in fused conv2d: pad must be an integer when using, dimRoundingMode " + c3 + " but got pad " + o3 + ".";
  }), C2(m3.shape[3] === g2.shape[2], function() {
    return "Error in conv2d: depth of input (" + m3.shape[3] + ") must match input depth for filter " + g2.shape[2] + ".";
  }), C2(Ca2(r3, u3), function() {
    return "Error in conv2D: Either strides or dilations must be 1. Got strides " + r3 + " and dilations '" + u3 + "'";
  }), C2("NHWC" === i3, function() {
    return "Error in conv2d: got dataFormat of " + i3 + " but only NHWC is currently supported.";
  });
  var x3, b3, w3 = pa2(m3.shape, g2.shape, r3, u3, o3, c3);
  null != l3 && (x3 = Nt2(x3 = gn2(l3, "bias", "fused conv2d"), v2)[0], Pr2(w3.outShape, x3.shape)), null != d3 && (b3 = gn2(d3, "prelu weights", "fused conv2d"));
  var E3 = { x: m3, filter: g2 };
  null != l3 && (E3.bias = x3), null != d3 && (E3.preluActivationWeights = b3);
  var R3 = [g2, m3], I3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.fusedConv2d({ input: m3, filter: g2, convInfo: w3, bias: x3, activation: f3, preluActivationWeights: b3 });
    return e4([g2, m3, n4]), n4;
  }, E3, function(t4, e4) {
    var n4 = e4, a4 = n4[0], i4 = n4[1], s4 = n4[2], c4 = of(t4, s4, f3);
    C2(wa2(u3), function() {
      return "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + u3 + "'";
    });
    var h4 = {};
    return null != l3 && (h4 = { bias: function() {
      return af(x3, c4);
    } }), Object.assign({ x: function() {
      return gl2(i4.shape, c4, a4, r3, o3);
    }, filter: function() {
      return vl2(i4, c4, a4.shape, r3, o3);
    } }, h4);
  }, "FusedConv2D", { convInfo: w3, activation: f3 }, R3, [true]);
  return y3 ? I3.as3D(I3.shape[1], I3.shape[2], I3.shape[3]) : I3;
} });
var lf = An2({ fusedDepthwiseConv2d_: function(t3) {
  var e3 = t3.x, n3 = t3.filter, r3 = t3.strides, o3 = t3.pad, a3 = t3.dataFormat, i3 = void 0 === a3 ? "NHWC" : a3, s3 = t3.dilations, u3 = void 0 === s3 ? [1, 1] : s3, c3 = t3.dimRoundingMode, l3 = t3.bias, h3 = t3.activation, f3 = void 0 === h3 ? "linear" : h3, d3 = t3.preluActivationWeights;
  if (false === rf(Lt2.state.gradientDepth, f3)) {
    var p3 = ml2(e3, n3, r3, o3, i3, u3, c3);
    return null != l3 && (p3 = Or2(p3, l3)), sf(p3, f3, d3);
  }
  var v2 = gn2(e3, "x", "depthwiseConv2d"), g2 = gn2(n3, "filter", "depthwiseConv2d"), m3 = v2, y3 = false;
  3 === v2.rank && (y3 = true, m3 = v2.as4D(1, v2.shape[0], v2.shape[1], v2.shape[2])), C2(4 === m3.rank, function() {
    return "Error in fused depthwiseConv2d: input must be rank 4, but got rank " + m3.rank + ".";
  }), C2(4 === g2.rank, function() {
    return "Error in fused depthwiseConv2d: filter must be rank 4, but got rank " + g2.rank + ".";
  }), C2(m3.shape[3] === g2.shape[2], function() {
    return "Error in fused depthwiseConv2d: number of input channels (" + m3.shape[3] + ") must match the inChannels dimension in filter " + g2.shape[2] + ".";
  }), null == u3 && (u3 = [1, 1]), C2(Ca2(r3, u3), function() {
    return "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides " + r3 + " and dilations '" + u3 + "'";
  }), null != c3 && C2(A2(o3), function() {
    return "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode " + c3 + " but got pad " + o3 + ".";
  });
  var x3, b3, w3 = pa2(m3.shape, g2.shape, r3, u3, o3, c3, true);
  null != l3 && (x3 = Nt2(x3 = gn2(l3, "bias", "fused conv2d"), v2)[0], Pr2(w3.outShape, x3.shape)), null != d3 && (b3 = gn2(d3, "prelu weights", "fused depthwiseConv2d"));
  var E3 = { x: m3, filter: g2 };
  null != l3 && (E3.bias = x3), null != d3 && (E3.preluActivationWeights = b3);
  var R3 = [g2, m3], I3 = Lt2.runKernelFunc(function(t4, e4) {
    var n4 = t4.fusedDepthwiseConv2D({ input: m3, filter: g2, convInfo: w3, bias: x3, activation: f3, preluActivationWeights: b3 });
    return e4([g2, m3, n4]), n4;
  }, E3, function(t4, e4) {
    C2(wa2(u3), function() {
      return "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + u3 + "'";
    });
    var n4 = e4[0], r4 = e4[1], o4 = e4[2], a4 = of(t4, o4, f3), i4 = {};
    return null != l3 && (i4 = { bias: function() {
      return af(x3, a4);
    } }), Object.assign({ x: function() {
      return yl2(r4.shape, a4, n4, w3);
    }, filter: function() {
      return xl2(r4, a4, n4.shape, w3);
    } }, i4);
  }, "FusedDepthwiseConv2D", { convInfo: w3, activation: f3 }, R3, [true]);
  return y3 ? I3.as3D(I3.shape[1], I3.shape[2], I3.shape[3]) : I3;
} });
var hf = Object.freeze({ matMul: uf, conv2d: cf, depthwiseConv2d: lf });
var ff = Object.freeze({ image: nf, linalg: jh2, losses: zh2, spectral: bh2, fused: hf, signal: Dh2, add: Or2, addN: $u2, batchNorm: nc2, batchNormalization: ec2, batchNorm2d: ac2, batchNormalization2d: oc2, batchNorm3d: uc2, batchNormalization3d: sc2, batchNorm4d: hc2, batchNormalization4d: lc2, broadcastTo: fc2, clone: dc2, div: Bo2, divNoNan: bc2, eye: Cc2, multinomial: Ec2, oneHot: Rc2, pad: Ic2, pad1d: kc2, pad2d: Sc2, pad3d: Ac2, pad4d: Tc2, rand: Dc2, randomGamma: Uc2, randomNormal: Vc2, randomUniform: zc2, square: Gc2, squaredDifference: Hc2, tile: wc2, truncatedNormal: qc2, conv1d: fl2, conv2d: dl2, conv3d: pl2, depthwiseConv2d: ml2, separableConv2d: bl2, conv2dTranspose: wl2, conv3dTranspose: Cl2, op: An2, booleanMaskAsync: ul2, complex: Tn2, real: Dn2, imag: Nn2, concat: Yn2, concat1d: $n2, concat2d: Qn2, concat3d: Jn2, concat4d: Zn2, split: tr2, matMul: El2, dot: Rl2, outerProduct: Il2, reverse: kl2, reverse1d: Sl2, reverse2d: Al2, reverse3d: Tl2, reverse4d: Dl2, maxPool: _l2, avgPool: Ol2, pool: Ml2, maxPool3d: Bl2, avgPool3d: Pl2, maxPoolWithArgmax: Ll2, slice: Wl2, slice1d: Ul2, slice2d: Vl2, slice3d: zl2, slice4d: Gl2, abs: Lr2, acos: Wr2, acosh: Ur2, asin: Vr2, asinh: zr2, atan: Gr2, atanh: Hr2, ceil: qr2, clipByValue: Kr2, cos: jr2, cosh: Xr2, erf: Yr2, exp: $r2, expm1: Qr2, floor: Jr2, log: Zr2, log1p: to2, logSigmoid: eo2, neg: no2, reciprocal: ro2, round: oo2, rsqrt: ao2, sigmoid: io2, sign: so2, isNaN: uo2, isInf: co2, isFinite: lo2, sin: ho2, sinh: fo2, softplus: po2, sqrt: vo2, step: go2, tan: mo2, tanh: yo2, all: ql2, any: Kl2, argMax: jl2, argMin: Xl2, logSumExp: Yl2, max: $l2, mean: Ql2, min: Jl2, moments: Zl2, sum: th2, prod: eh2, equal: Kc2, equalStrict: jc2, greater: Xc2, greaterEqual: Yc2, greaterEqualStrict: $c2, greaterStrict: Qc2, less: Jc2, lessEqual: Zc2, lessEqualStrict: tl2, lessStrict: el2, notEqual: nl2, notEqualStrict: rl2, addStrict: xo2, atan2: bo2, divStrict: wo2, floorDiv: Co2, maximum: Eo2, maximumStrict: Ro2, minimum: Io2, minimumStrict: ko2, mod: So2, modStrict: Ao2, mul: To2, mulStrict: Do2, pow: No2, powStrict: Fo2, squaredDifferenceStrict: _o2, sub: Oo2, subStrict: Mo2, elu: nh2, leakyRelu: rh2, prelu: oh2, relu: ah2, relu6: ih2, selu: sh2, logicalAnd: pc2, logicalNot: vc2, logicalOr: gc2, logicalXor: mc2, where: yc2, whereAsync: xc2, buffer: er2, print: nr2, batchToSpaceND: rr2, cast: or2, cumsum: ar2, depthToSpace: ir2, expandDims: sr2, reshape: ur2, spaceToBatchND: cr2, squeeze: lr2, stack: hr2, unstack: fr2, setdiff1dAsync: dr2, fill: Hn2, linspace: qn2, ones: zn2, range: Kn2, scalar: On2, tensor: Fn2, tensor1d: Mn2, tensor2d: Bn2, tensor3d: Pn2, tensor4d: Ln2, tensor5d: Wn2, tensor6d: Un2, variable: Vn2, zeros: Gn2, onesLike: jn2, zerosLike: Xn2, transpose: ua2, softmax: ia2, logSoftmax: sa2, localResponseNormalization: uh2, norm: ch2, gather: il2, unsortedSegmentSum: sl2, basicLSTMCell: lh2, multiRNNCell: hh2, movingAverage: fh2, stridedSlice: dh2, topk: ph2, scatterND: vh2, fft: gh2, ifft: mh2, rfft: yh2, irfft: xh2, sparseToDense: wh2, gatherND: Ch2, diag: Eh2, dropout: Rh2, hannWindow: kh2, hammingWindow: Sh2, frame: Ah2, stft: Th2, inTopKAsync: Fh2 });
function df(t3, e3) {
  Array.isArray(t3) || (t3 = [t3]), t3.forEach(function(t4) {
    null != t4 && C2("complex64" !== t4.dtype, function() {
      return e3 + " does not support complex64 tensors.";
    });
  });
}
function pf(t3, e3, n3, r3, o3, a3) {
  for (var i3 = o3.strideHeight, s3 = o3.strideWidth, u3 = o3.dilationHeight, c3 = o3.dilationWidth, l3 = o3.effectiveFilterHeight, h3 = o3.effectiveFilterWidth, f3 = o3.padInfo.top, d3 = o3.padInfo.left, p3 = "max" === a3 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, v2 = er2(o3.outShape, n3), g2 = v2.values, m3 = o3.outShape[1] * o3.outShape[2] * o3.outShape[3], y3 = o3.outShape[2] * o3.outShape[3], x3 = o3.outShape[3], b3 = 0; b3 < o3.batchSize; ++b3) for (var w3 = b3 * m3, C3 = b3 * r3[0], E3 = 0; E3 < o3.inChannels; ++E3) for (var R3 = 0; R3 < o3.outHeight; ++R3) for (var I3 = R3 * i3 - f3, k3 = Math.max(0, I3), S3 = Math.min(o3.inHeight, l3 + I3), A3 = w3 + R3 * y3, T3 = 0; T3 < o3.outWidth; ++T3) {
    for (var D3 = T3 * s3 - d3, N3 = Math.max(0, D3), F3 = Math.min(o3.inWidth, h3 + D3), _3 = p3, O3 = 0, M3 = 0, B3 = k3; B3 < S3; B3 += u3) {
      for (var P3 = C3 + B3 * r3[1], L3 = N3; L3 < F3; L3 += c3) {
        var W3 = t3[P3 + L3 * r3[2] + E3];
        "max" === a3 && W3 > _3 ? _3 = W3 : "avg" === a3 && (O3 += W3, M3++);
      }
      if (isNaN(_3)) break;
    }
    g2[A3 + T3 * x3 + E3] = "avg" === a3 ? O3 / M3 : _3;
  }
  return v2;
}
function vf(t3, e3, n3, r3, o3, a3) {
  void 0 === o3 && (o3 = false), void 0 === a3 && (a3 = false);
  for (var i3 = er2(r3.outShape, "int32"), s3 = r3.strideHeight, u3 = r3.strideWidth, c3 = r3.dilationHeight, l3 = r3.dilationWidth, h3 = r3.effectiveFilterHeight, f3 = r3.effectiveFilterWidth, d3 = r3.padInfo.top, p3 = r3.padInfo.left, v2 = er2(e3, n3, t3), g2 = 0; g2 < r3.batchSize; ++g2) for (var m3 = 0; m3 < r3.inChannels; ++m3) for (var y3 = 0; y3 < r3.outHeight; ++y3) {
    for (var x3 = y3 * s3 - d3, b3 = x3; b3 < 0; ) b3 += c3;
    for (var w3 = Math.min(r3.inHeight, h3 + x3), C3 = 0; C3 < r3.outWidth; ++C3) {
      for (var E3 = C3 * u3 - p3, R3 = E3; R3 < 0; ) R3 += l3;
      for (var I3 = Math.min(r3.inWidth, f3 + E3), k3 = Number.NEGATIVE_INFINITY, S3 = -1, A3 = b3; A3 < w3; A3 += c3) for (var T3 = A3 - x3, D3 = R3; D3 < I3; D3 += l3) {
        var N3 = D3 - E3, F3 = v2.get(g2, A3, D3, m3);
        F3 > k3 && (k3 = F3, S3 = o3 ? a3 ? ((g2 * r3.inHeight + A3) * r3.inWidth + D3) * r3.inChannels + m3 : (A3 * r3.inWidth + D3) * r3.inChannels + m3 : T3 * f3 + N3);
      }
      i3.set(S3, g2, y3, C3, m3);
    }
  }
  return i3;
}
function gf(t3, e3, n3, r3) {
  if ("linear" === n3) return t3.linear(e3);
  if ("relu" === n3) return t3.relu(e3);
  if ("elu" === n3) return t3.elu(e3);
  if ("relu6" === n3) return t3.relu6(e3);
  if ("prelu" === n3) return t3.prelu(e3, r3);
  throw new Error("Activation " + n3 + " has not been implemented for the CPU backend.");
}
var mf = function(t3) {
  function o3() {
    var e3 = t3.call(this) || this;
    return e3.blockSize = 48, e3.firstUse = true, e3.data = new ca2(e3, Lt2), e3;
  }
  return e2(o3, t3), o3.prototype.write = function(t4, e3, n3) {
    this.firstUse && (this.firstUse = false, i2().get("IS_NODE") && dn2("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));
    var r3 = {};
    return this.data.set(r3, { values: t4, dtype: n3 }), r3;
  }, o3.prototype.move = function(t4, e3, n3, r3) {
    this.data.set(t4, { values: e3, dtype: r3 });
  }, o3.prototype.numDataIds = function() {
    return this.data.numDataIds();
  }, o3.prototype.read = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        return [2, this.readSync(t4)];
      });
    });
  }, o3.prototype.readSync = function(t4) {
    var e3 = this.data.get(t4), n3 = e3.dtype, r3 = e3.complexTensors;
    return "complex64" === n3 ? Aa2(this.readSync(r3.real.dataId), this.readSync(r3.imag.dataId)) : this.data.get(t4).values;
  }, o3.prototype.bufferSync = function(t4) {
    var e3 = this.readSync(t4.dataId), n3 = e3;
    if ("string" === t4.dtype) try {
      n3 = e3.map(function(t5) {
        return ot2(t5);
      });
    } catch (t5) {
      throw new Error("Failed to decode encoded string bytes into utf-8");
    }
    return er2(t4.shape, t4.dtype, n3);
  }, o3.prototype.makeOutput = function(t4, e3, n3) {
    var r3 = this.write(t4, e3, n3);
    return Lt2.makeTensorFromDataId(r3, e3, n3, this);
  }, o3.prototype.disposeData = function(t4) {
    if (this.data.has(t4)) {
      var e3 = this.data.get(t4).complexTensors;
      null != e3 && (e3.real.dispose(), e3.imag.dispose()), this.data.delete(t4);
    }
  }, o3.prototype.time = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3;
      return r2(this, function(n3) {
        return e3 = et2(), t4(), [2, { kernelMs: et2() - e3 }];
      });
    });
  }, o3.prototype.memory = function() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }, o3.prototype.complex = function(t4, e3) {
    var n3 = this.makeOutput(null, t4.shape, "complex64");
    return this.data.get(n3.dataId).complexTensors = { real: Lt2.keep(t4.clone()), imag: Lt2.keep(e3.clone()) }, n3;
  }, o3.prototype.real = function(t4) {
    return this.data.get(t4.dataId).complexTensors.real.clone();
  }, o3.prototype.imag = function(t4) {
    return this.data.get(t4.dataId).complexTensors.imag.clone();
  }, o3.prototype.slice = function(t4, e3, n3) {
    if (df(t4, "slice"), $o2(t4.shape, e3, n3)) {
      var r3 = Qo2(e3, t4.strides), o4 = k2(n3);
      return Fn2(this.readSync(t4.dataId).subarray(r3, r3 + o4), n3, t4.dtype);
    }
    for (var a3 = er2(n3, t4.dtype), i3 = this.bufferSync(t4), s3 = 0; s3 < a3.size; ++s3) {
      var u3 = a3.indexToLoc(s3).map(function(t5, n4) {
        return t5 + e3[n4];
      });
      a3.values[s3] = i3.get.apply(i3, u3);
    }
    return a3.toTensor();
  }, o3.prototype.stridedSlice = function(t4, e3, n3, r3) {
    df(t4, "stridedSlice");
    var o4 = jo2(e3, n3, r3);
    if (o4.some(function(t5) {
      return 0 === t5;
    })) return Fn2([], o4);
    for (var a3 = er2(o4, t4.dtype), i3 = this.bufferSync(t4), s3 = 0; s3 < a3.size; s3++) {
      for (var u3 = a3.indexToLoc(s3), c3 = new Array(u3.length), l3 = 0; l3 < c3.length; l3++) c3[l3] = u3[l3] * r3[l3] + e3[l3];
      a3.set.apply(a3, [i3.get.apply(i3, c3)].concat(u3));
    }
    return a3.toTensor();
  }, o3.prototype.diag = function(t4) {
    for (var e3 = this.readSync(t4.dataId), n3 = er2([t4.size, t4.size], t4.dtype), r3 = n3.values, o4 = 0; o4 < e3.length; o4++) r3[o4 * t4.size + o4] = e3[o4];
    return n3.toTensor();
  }, o3.prototype.unstack = function(t4, e3) {
    for (var n3 = t4.shape[e3], r3 = new Array(t4.rank - 1), o4 = 0, a3 = 0; a3 < t4.rank; a3++) a3 !== e3 && (r3[o4++] = t4.shape[a3]);
    var i3 = new Array(t4.rank).fill(0), s3 = t4.shape.slice();
    s3[e3] = 1;
    var u3 = new Array(n3);
    for (a3 = 0; a3 < u3.length; a3++) i3[e3] = a3, u3[a3] = this.slice(t4, i3, s3).reshape(r3);
    return u3;
  }, o3.prototype.reverse = function(t4, e3) {
    df(t4, "reverse");
    for (var n3 = er2(t4.shape, t4.dtype), r3 = this.bufferSync(t4), o4 = function(o5) {
      var a4 = n3.indexToLoc(o5), i3 = a4.slice();
      e3.forEach(function(e4) {
        return i3[e4] = t4.shape[e4] - 1 - i3[e4];
      }), n3.set.apply(n3, [r3.get.apply(r3, i3)].concat(a4));
    }, a3 = 0; a3 < n3.size; a3++) o4(a3);
    return n3.toTensor();
  }, o3.prototype.concat = function(t4, e3) {
    var n3 = this;
    if ("complex64" === t4[0].dtype) {
      var r3 = t4.map(function(t5) {
        return Dn2(t5);
      }), o4 = t4.map(function(t5) {
        return Nn2(t5);
      });
      return Tn2(this.concat(r3, e3), this.concat(o4, e3));
    }
    var a3 = t4.map(function(t5) {
      var n4 = k2(t5.shape.slice(e3));
      return t5.as2D(-1, n4);
    }), i3 = Sn2(a3.map(function(t5) {
      return t5.shape;
    }), 1), s3 = er2(i3, t4[0].dtype).values;
    if (1 === a3[0].shape[0]) {
      var u3 = 0;
      a3.forEach(function(t5) {
        s3.set(n3.readSync(t5.dataId), u3), u3 += t5.size;
      });
    } else {
      var c3 = 0;
      a3.forEach(function(t5) {
        for (var e4 = n3.readSync(t5.dataId), r4 = 0, o5 = 0; o5 < t5.shape[0]; ++o5) for (var a4 = o5 * i3[1] + c3, u4 = 0; u4 < t5.shape[1]; ++u4) s3[a4 + u4] = e4[r4++];
        c3 += t5.shape[1];
      });
    }
    var l3 = Sn2(t4.map(function(t5) {
      return t5.shape;
    }), e3);
    return Fn2(s3, l3, t4[0].dtype);
  }, o3.prototype.neg = function(t4) {
    return df(t4, "neg"), this.multiply(On2(-1), t4);
  }, o3.prototype.add = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 + n3, imag: e4 + r3 };
    }) : this.broadcastedBinaryOp(t4, e3, Tt2(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 + e4;
    });
  }, o3.prototype.addN = function(t4) {
    var e3 = this;
    df(t4, "addN");
    for (var n3 = t4.map(function(t5) {
      return e3.readSync(t5.dataId);
    }), r3 = er2(t4[0].shape, t4[0].dtype), o4 = r3.values, a3 = 0; a3 < t4.length; a3++) for (var i3 = n3[a3], s3 = 0; s3 < o4.length; s3++) o4[s3] += i3[s3];
    return r3.toTensor();
  }, o3.prototype.softmax = function(t4, e3) {
    var n3 = O2([e3], t4.shape), r3 = this.max(t4, n3), o4 = wn2(r3.shape, n3), a3 = this.subtract(t4, r3.reshape(o4)), i3 = this.exp(a3), s3 = this.sum(i3, n3).reshape(o4);
    return Bo2(i3, s3);
  }, o3.prototype.subtract = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 - n3, imag: e4 - r3 };
    }) : this.broadcastedBinaryOp(t4, e3, Tt2(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 - e4;
    });
  }, o3.prototype.pow = function(t4, e3) {
    return df([t4, e3], "pow"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.pow(t5, e4);
    });
  }, o3.prototype.batchMatMul = function(t4, e3, n3, r3) {
    df([t4, e3], "matMul");
    for (var o4 = n3 ? t4.shape[1] : t4.shape[2], a3 = n3 ? t4.shape[2] : t4.shape[1], i3 = r3 ? e3.shape[1] : e3.shape[2], s3 = t4.shape[0], u3 = this.readSync(t4.dataId), c3 = this.readSync(e3.dataId), l3 = n3 ? [t4.strides[0], 1, t4.strides[1]] : [t4.strides[0], t4.strides[1], 1], h3 = l3[0], f3 = l3[1], d3 = l3[2], p3 = r3 ? [1, e3.strides[1], e3.strides[0]] : [e3.strides[1], 1, e3.strides[0]], v2 = p3[0], g2 = p3[1], m3 = p3[2], y3 = a3 * i3, x3 = er2([s3, a3, i3], t4.dtype), b3 = x3.values, w3 = this.blockSize, C3 = 0; C3 < s3; C3++) for (var E3 = 0; E3 < a3; E3 += w3) for (var R3 = 0; R3 < i3; R3 += w3) for (var I3 = 0; I3 < o4; I3 += w3) for (var k3 = Math.min(E3 + w3, a3), S3 = Math.min(R3 + w3, i3), A3 = Math.min(I3 + w3, o4), T3 = E3; T3 < k3; T3++) for (var D3 = R3; D3 < S3; D3++) {
      for (var N3 = 0, F3 = I3; F3 < A3; F3++) N3 += u3[C3 * h3 + T3 * f3 + F3 * d3] * c3[F3 * v2 + D3 * g2 + C3 * m3];
      b3[C3 * y3 + (T3 * i3 + D3)] += N3;
    }
    return x3.toTensor();
  }, o3.prototype.fusedBatchMatMul = function(t4) {
    var e3 = t4.a, n3 = t4.b, r3 = t4.transposeA, o4 = t4.transposeB, a3 = t4.bias, i3 = t4.activation, s3 = t4.preluActivationWeights, u3 = this.batchMatMul(e3, n3, r3, o4);
    return a3 && (u3 = this.add(u3, a3)), i3 && (u3 = gf(this, u3, i3, s3)), u3;
  }, o3.prototype.multiply = function(t4, e3) {
    return "complex64" === t4.dtype || "complex64" === e3.dtype ? this.broadcastedBinaryComplexOp(t4.cast("complex64"), e3.cast("complex64"), function(t5, e4, n3, r3) {
      return { real: t5 * n3 - e4 * r3, imag: t5 * r3 + e4 * n3 };
    }) : this.broadcastedBinaryOp(t4, e3, Tt2(t4.dtype, e3.dtype), function(t5, e4) {
      return t5 * e4;
    });
  }, o3.prototype.floorDiv = function(t4, e3) {
    df([t4, e3], "floorDiv");
    return this.broadcastedBinaryOp(t4, e3, "int32", function(t5, e4) {
      return Math.floor(t5 / e4);
    });
  }, o3.prototype.sum = function(t4, e3) {
    df(t4, "sum"), Cn2("sum", e3, t4.rank);
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, Tt2(t4.dtype, "int32")), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = 0, f3 = 0; f3 < i3; ++f3) h3 += u3[l3 + f3];
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.prod = function(t4, e3) {
    df(t4, "sum");
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, Tt2(t4.dtype, "int32")), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = 1, f3 = 0; f3 < i3; ++f3) h3 *= u3[l3 + f3];
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.unsortedSegmentSum = function(t4, e3, n3) {
    df(t4, "unsortedSegmentSum");
    for (var r3 = [], o4 = t4.rank - e3.rank, a3 = 0; a3 < o4; ++a3) e3 = e3.expandDims(a3 + 1);
    for (a3 = 0; a3 < n3; ++a3) {
      var i3 = On2(a3, "int32"), s3 = Kc2(i3, e3).asType("float32").mul(t4).sum(0);
      r3.push(s3);
    }
    return hr2(r3);
  }, o3.prototype.argMin = function(t4, e3) {
    df(t4, "argMin");
    var n3 = [e3];
    Cn2("argMin", n3, t4.rank);
    for (var r3 = bn2(t4.shape, n3), o4 = r3[0], a3 = r3[1], i3 = Gn2(o4, "int32"), s3 = k2(a3), u3 = this.readSync(i3.dataId), c3 = this.readSync(t4.dataId), l3 = 0; l3 < u3.length; ++l3) {
      for (var h3 = l3 * s3, f3 = c3[h3], d3 = 0, p3 = 0; p3 < s3; ++p3) {
        var v2 = c3[h3 + p3];
        v2 < f3 && (f3 = v2, d3 = p3);
      }
      u3[l3] = d3;
    }
    return i3;
  }, o3.prototype.argMax = function(t4, e3) {
    df(t4, "argMax");
    var n3 = [e3];
    Cn2("argMax", n3, t4.rank);
    for (var r3 = bn2(t4.shape, n3), o4 = r3[0], a3 = r3[1], i3 = Gn2(o4, "int32"), s3 = k2(a3), u3 = this.readSync(i3.dataId), c3 = this.readSync(t4.dataId), l3 = 0; l3 < u3.length; ++l3) {
      for (var h3 = l3 * s3, f3 = c3[h3], d3 = 0, p3 = 0; p3 < s3; ++p3) {
        var v2 = c3[h3 + p3];
        v2 > f3 && (f3 = v2, d3 = p3);
      }
      u3[l3] = d3;
    }
    return i3;
  }, o3.prototype.cumsum = function(t4, e3, n3, r3) {
    if (df(t4, "cumsum"), e3 !== t4.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (t4.rank - 1) + " but got axis=" + e3);
    for (var o4 = Tt2(t4.dtype, "int32"), a3 = Gn2(t4.shape, o4), i3 = this.readSync(a3.dataId), s3 = this.readSync(t4.dataId), u3 = t4.shape[t4.rank - 1], c3 = r3 ? function(t5, e4) {
      return t5 + u3 - e4 - 1;
    } : function(t5, e4) {
      return t5 + e4;
    }, l3 = 0; l3 < s3.length; l3 += u3) for (var h3 = 0; h3 < u3; h3++) {
      var f3 = c3(l3, h3);
      if (0 === h3) i3[f3] = n3 ? 0 : s3[f3];
      else {
        var d3 = c3(l3, h3 - 1);
        i3[f3] = n3 ? s3[d3] + i3[d3] : s3[f3] + i3[d3];
      }
    }
    return a3;
  }, o3.prototype.equal = function(t4, e3) {
    return df([t4, e3], "equal"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 === e4 ? 1 : 0;
    });
  }, o3.prototype.notEqual = function(t4, e3) {
    return df([t4, e3], "notEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 !== e4 ? 1 : 0;
    });
  }, o3.prototype.less = function(t4, e3) {
    return df([t4, e3], "less"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 < e4 ? 1 : 0;
    });
  }, o3.prototype.lessEqual = function(t4, e3) {
    return df([t4, e3], "lessEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 <= e4 ? 1 : 0;
    });
  }, o3.prototype.greater = function(t4, e3) {
    return df([t4, e3], "greater"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 > e4 ? 1 : 0;
    });
  }, o3.prototype.greaterEqual = function(t4, e3) {
    return df([t4, e3], "greaterEqual"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 >= e4 ? 1 : 0;
    });
  }, o3.prototype.logicalNot = function(t4) {
    df(t4, "logicalNot");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = e3[r3] ? 0 : 1;
    return this.makeOutput(n3, t4.shape, "bool");
  }, o3.prototype.logicalAnd = function(t4, e3) {
    return df([t4, e3], "logicalAnd"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 && e4;
    });
  }, o3.prototype.logicalOr = function(t4, e3) {
    return df([t4, e3], "logicalOr"), this.broadcastedBinaryOp(t4, e3, "bool", function(t5, e4) {
      return t5 || e4;
    });
  }, o3.prototype.select = function(t4, e3, n3) {
    df([t4, e3, n3], "select");
    for (var r3 = this.readSync(t4.dataId), o4 = this.readSync(e3.dataId), a3 = this.readSync(n3.dataId), i3 = Gn2(e3.shape, Tt2(e3.dtype, n3.dtype)), s3 = this.readSync(i3.dataId), u3 = 0, c3 = 0 === t4.rank || t4.rank > 1 || 1 === e3.rank ? 1 : k2(e3.shape.slice(1)), l3 = 0; l3 < r3.length; l3++) for (var h3 = 0; h3 < c3; h3++) 1 === r3[l3] ? s3[u3++] = o4[l3] : s3[u3++] = a3[l3];
    return i3;
  }, o3.prototype.where = function(t4) {
    df([t4], "where");
    var e3 = this.readSync(t4.dataId);
    return Ga2(t4.shape, e3);
  }, o3.prototype.topk = function(t4, e3, n3) {
    return df(t4, "topk"), za2(this.readSync(t4.dataId), t4.shape, t4.dtype, e3);
  }, o3.prototype.min = function(t4, e3) {
    df(t4, "min"), Cn2("min", e3, t4.rank);
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, t4.dtype), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = u3[l3], f3 = 0; f3 < i3; ++f3) {
        var d3 = u3[l3 + f3];
        d3 < h3 && (h3 = d3);
      }
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.minimum = function(t4, e3) {
    return df([t4, e3], "minimum"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.min(t5, e4);
    });
  }, o3.prototype.mod = function(t4, e3) {
    return df([t4, e3], "mod"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      var n3 = t5 % e4;
      return t5 < 0 && e4 < 0 || t5 >= 0 && e4 >= 0 ? n3 : (n3 + e4) % e4;
    });
  }, o3.prototype.max = function(t4, e3) {
    df(t4, "max"), Cn2("max", e3, t4.rank);
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, t4.dtype), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = u3[l3], f3 = 0; f3 < i3; ++f3) {
        var d3 = u3[l3 + f3];
        d3 > h3 && (h3 = d3);
      }
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.maximum = function(t4, e3) {
    return df([t4, e3], "maximum"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.max(t5, e4);
    });
  }, o3.prototype.all = function(t4, e3) {
    df(t4, "all"), Cn2("all", e3, t4.rank);
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, t4.dtype), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = u3[l3], f3 = 0; f3 < i3; ++f3) {
        var d3 = u3[l3 + f3];
        h3 = h3 && d3;
      }
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.any = function(t4, e3) {
    df(t4, "any"), Cn2("any", e3, t4.rank);
    for (var n3 = bn2(t4.shape, e3), r3 = n3[0], o4 = n3[1], a3 = Gn2(r3, t4.dtype), i3 = k2(o4), s3 = this.readSync(a3.dataId), u3 = this.readSync(t4.dataId), c3 = 0; c3 < s3.length; ++c3) {
      for (var l3 = c3 * i3, h3 = u3[l3], f3 = 0; f3 < i3; ++f3) {
        var d3 = u3[l3 + f3];
        h3 = h3 || d3;
      }
      s3[c3] = h3;
    }
    return a3;
  }, o3.prototype.squaredDifference = function(t4, e3) {
    return df([t4, e3], "squaredDifference"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      var n3 = t5 - e4;
      return n3 * n3;
    });
  }, o3.prototype.ceil = function(t4) {
    df(t4, "ceil");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.ceil(e3[r3]);
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.floor = function(t4) {
    df(t4, "floor");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.floor(e3[r3]);
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.sign = function(t4) {
    df(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) e3[r3] < 0 ? n3[r3] = -1 : e3[r3] > 0 ? n3[r3] = 1 : n3[r3] = 0;
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.isNaN = function(t4) {
    df(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Number.isNaN(e3[r3]) && (n3[r3] = 1);
    return this.makeOutput(n3, t4.shape, "bool");
  }, o3.prototype.isInf = function(t4) {
    df(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Math.abs(e3[r3]) === 1 / 0 && (n3[r3] = 1);
    return this.makeOutput(n3, t4.shape, "bool");
  }, o3.prototype.isFinite = function(t4) {
    df(t4, "x");
    for (var e3 = this.readSync(t4.dataId), n3 = new Uint8Array(e3.length), r3 = 0; r3 < e3.length; ++r3) Number.isFinite(e3[r3]) && (n3[r3] = 1);
    return this.makeOutput(n3, t4.shape, "bool");
  }, o3.prototype.round = function(t4) {
    df(t4, "round");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o4 = Math.floor(e3[r3]);
      e3[r3] - o4 < 0.5 ? n3[r3] = Math.floor(e3[r3]) : e3[r3] - o4 > 0.5 ? n3[r3] = Math.ceil(e3[r3]) : n3[r3] = o4 % 2 == 0 ? o4 : o4 + 1;
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.exp = function(t4) {
    df(t4, "exp");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.exp(e3[r3]);
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.expm1 = function(t4) {
    df(t4, "expm1");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = Math.expm1(e3[r3]);
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.log = function(t4) {
    df(t4, "log");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o4 = e3[r3];
      n3[r3] = Math.log(o4);
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.log1p = function(t4) {
    df(t4, "log1p");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o4 = e3[r3];
      n3[r3] = Math.log1p(o4);
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.sqrt = function(t4) {
    df(t4, "sqrt");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o4 = e3[r3];
      n3[r3] = Math.sqrt(o4);
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.rsqrt = function(t4) {
    df(t4, "rsqrt");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) {
      var o4 = e3[r3];
      n3[r3] = 1 / Math.sqrt(o4);
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.reciprocal = function(t4) {
    df(t4, "reciprocal");
    for (var e3 = this.readSync(t4.dataId), n3 = new Float32Array(e3.length), r3 = 0; r3 < e3.length; ++r3) n3[r3] = 1 / e3[r3];
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.linear = function(t4) {
    return t4;
  }, o3.prototype.relu = function(t4) {
    df(t4, "relu");
    for (var e3 = Gn2(t4.shape, t4.dtype), n3 = this.readSync(e3.dataId), r3 = this.readSync(t4.dataId), o4 = 0; o4 < r3.length; ++o4) n3[o4] = Math.max(0, r3[o4]);
    return e3;
  }, o3.prototype.relu6 = function(t4) {
    df(t4, "relu");
    for (var e3 = Gn2(t4.shape, t4.dtype), n3 = this.readSync(e3.dataId), r3 = this.readSync(t4.dataId), o4 = 0; o4 < r3.length; ++o4) n3[o4] = Math.min(Math.max(0, r3[o4]), 6);
    return e3;
  }, o3.prototype.prelu = function(t4, e3) {
    return df([t4, e3], "prelu"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return t5 < 0 ? e4 * t5 : t5;
    });
  }, o3.prototype.elu = function(t4) {
    df(t4, "elu");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) {
      var o4 = n3[r3];
      e3[r3] = o4 >= 0 ? o4 : Math.exp(o4) - 1;
    }
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.eluDer = function(t4, e3) {
    df([t4, e3], "eluDer");
    for (var n3 = new Float32Array(e3.size), r3 = this.readSync(e3.dataId), o4 = this.readSync(t4.dataId), a3 = 0; a3 < r3.length; ++a3) {
      var i3 = r3[a3];
      n3[a3] = i3 >= 1 ? o4[a3] : o4[a3] * (i3 + 1);
    }
    return this.makeOutput(n3, e3.shape, "float32");
  }, o3.prototype.selu = function(t4) {
    df(t4, "selu");
    for (var e3 = su2, n3 = uu2, r3 = new Float32Array(t4.size), o4 = this.readSync(t4.dataId), a3 = 0; a3 < o4.length; ++a3) {
      var i3 = o4[a3];
      r3[a3] = i3 >= 0 ? n3 * i3 : e3 * (Math.exp(i3) - 1);
    }
    return this.makeOutput(r3, t4.shape, "float32");
  }, o3.prototype.clip = function(t4, e3, n3) {
    df(t4, "clip");
    for (var r3 = new Float32Array(t4.size), o4 = this.readSync(t4.dataId), a3 = 0; a3 < o4.length; ++a3) {
      var i3 = o4[a3];
      r3[a3] = i3 > n3 ? n3 : i3 < e3 ? e3 : i3;
    }
    return this.makeOutput(r3, t4.shape, "float32");
  }, o3.prototype.abs = function(t4) {
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.abs(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.complexAbs = function(t4) {
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < t4.size; ++r3) {
      var o4 = n3[2 * r3], a3 = n3[2 * r3 + 1];
      e3[r3] = Math.hypot(o4, a3);
    }
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.int = function(t4) {
    df(t4, "int");
    for (var e3 = new Int32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = n3[r3];
    return this.makeOutput(e3, t4.shape, "int32");
  }, o3.prototype.sigmoid = function(t4) {
    df(t4, "sigmoid");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = 1 / (1 + Math.exp(-n3[r3]));
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.softplus = function(t4) {
    df(t4, "softplus");
    for (var e3 = Math.log(11920928955078125e-23) + 2, n3 = new Float32Array(t4.size), r3 = this.readSync(t4.dataId), o4 = 0; o4 < r3.length; ++o4) {
      var a3 = r3[o4] > -e3, i3 = r3[o4] < e3, s3 = Math.exp(r3[o4]), u3 = void 0;
      u3 = i3 ? s3 : a3 ? r3[o4] : Math.log(1 + s3), n3[o4] = u3;
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.sin = function(t4) {
    df(t4, "sin");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.sin(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.cos = function(t4) {
    df(t4, "cos");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.cos(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.tan = function(t4) {
    df(t4, "tan");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.tan(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.asin = function(t4) {
    df(t4, "asin");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.asin(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.acos = function(t4) {
    df(t4, "acos");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.acos(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.atan = function(t4) {
    df(t4, "atan");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.atan(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.atan2 = function(t4, e3) {
    return df([t4, e3], "atan2"), this.broadcastedBinaryOp(t4, e3, t4.dtype, function(t5, e4) {
      return Math.atan2(t5, e4);
    });
  }, o3.prototype.sinh = function(t4) {
    df(t4, "sinh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.sinh(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.cosh = function(t4) {
    df(t4, "cosh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.cosh(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.tanh = function(t4) {
    df(t4, "tanh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = T2(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.asinh = function(t4) {
    df(t4, "asinh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.asinh(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.acosh = function(t4) {
    df(t4, "acosh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.acosh(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.atanh = function(t4) {
    df(t4, "atanh");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) e3[r3] = Math.atanh(n3[r3]);
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.erf = function(t4) {
    df(t4, "erf");
    for (var e3 = new Float32Array(t4.size), n3 = this.readSync(t4.dataId), r3 = 0; r3 < n3.length; ++r3) {
      var o4 = Math.sign(n3[r3]), a3 = Math.abs(n3[r3]), i3 = 1 / (1 + 0.3275911 * a3);
      e3[r3] = o4 * (1 - ((((1.061405429 * i3 - 1.453152027) * i3 + 1.421413741) * i3 - 0.284496736) * i3 + 0.254829592) * i3 * Math.exp(-a3 * a3));
    }
    return this.makeOutput(e3, t4.shape, "float32");
  }, o3.prototype.step = function(t4, e3) {
    void 0 === e3 && (e3 = 0), df(t4, "step");
    for (var n3 = new Float32Array(t4.size), r3 = this.readSync(t4.dataId), o4 = 0; o4 < r3.length; ++o4) {
      var a3 = r3[o4];
      isNaN(a3) ? n3[o4] = NaN : n3[o4] = a3 > 0 ? 1 : e3;
    }
    return this.makeOutput(n3, t4.shape, "float32");
  }, o3.prototype.fusedConv2d = function(t4) {
    var e3 = t4.input, n3 = t4.filter, r3 = t4.convInfo, o4 = t4.bias, a3 = t4.activation, i3 = t4.preluActivationWeights, s3 = this.conv2d(e3, n3, r3);
    return o4 && (s3 = this.add(s3, o4)), a3 && (s3 = gf(this, s3, a3, i3)), s3;
  }, o3.prototype.conv2d = function(t4, e3, n3) {
    df([t4, e3], "conv2d");
    for (var r3 = n3.filterHeight, o4 = n3.filterWidth, a3 = n3.dilationHeight, i3 = n3.dilationWidth, s3 = n3.padInfo.left, u3 = n3.padInfo.top, c3 = "channelsLast" === n3.dataFormat, l3 = er2(n3.outShape, t4.dtype), h3 = t4.strides[0], f3 = c3 ? t4.strides[1] : t4.strides[2], d3 = c3 ? t4.strides[2] : 1, p3 = c3 ? 1 : t4.strides[1], v2 = l3.strides[0], g2 = c3 ? l3.strides[1] : l3.strides[2], m3 = c3 ? l3.strides[2] : 1, y3 = c3 ? 1 : l3.strides[1], x3 = this.readSync(t4.dataId), b3 = this.readSync(e3.dataId), w3 = l3.values, C3 = 0; C3 < n3.batchSize; ++C3) for (var E3 = C3 * h3, R3 = C3 * v2, I3 = 0; I3 < n3.outHeight; ++I3) for (var k3 = R3 + I3 * g2, S3 = I3 * n3.strideHeight - u3, A3 = 0; A3 < r3; A3++) {
      var T3 = S3 + A3 * a3;
      if (!(T3 < 0 || T3 >= n3.inHeight)) for (var D3 = A3 * e3.strides[0], N3 = E3 + T3 * f3, F3 = 0; F3 < n3.outWidth; ++F3) for (var _3 = k3 + F3 * m3, O3 = F3 * n3.strideWidth - s3, M3 = 0; M3 < o4; M3++) {
        var B3 = O3 + M3 * i3;
        if (!(B3 < 0 || B3 >= n3.inWidth)) for (var P3 = N3 + B3 * d3, L3 = D3 + M3 * e3.strides[1], W3 = 0; W3 < n3.inChannels; ++W3) {
          for (var U3 = x3[P3 + W3 * p3], V3 = 0; V3 < n3.outChannels; ++V3) w3[_3 + V3 * y3] += U3 * b3[L3 + V3];
          L3 += n3.outChannels;
        }
      }
    }
    return l3.toTensor();
  }, o3.prototype.conv3d = function(t4, e3, n3) {
    for (var r3 = n3.filterDepth, o4 = n3.filterHeight, a3 = n3.filterWidth, i3 = n3.dilationDepth, s3 = n3.dilationHeight, u3 = n3.dilationWidth, c3 = n3.padInfo.front, l3 = n3.padInfo.left, h3 = n3.padInfo.top, f3 = er2(n3.outShape, t4.dtype), d3 = this.readSync(t4.dataId), p3 = this.readSync(e3.dataId), v2 = f3.values, g2 = 0; g2 < n3.batchSize; ++g2) for (var m3 = g2 * t4.strides[0], y3 = g2 * f3.strides[0], x3 = 0; x3 < n3.outDepth; ++x3) for (var b3 = y3 + x3 * f3.strides[1], w3 = x3 * n3.strideDepth - c3, C3 = 0; C3 < r3; C3++) {
      var E3 = w3 + C3 * i3;
      if (!(E3 < 0 || E3 >= n3.inDepth)) for (var R3 = C3 * e3.strides[0], I3 = m3 + E3 * t4.strides[1], k3 = 0; k3 < n3.outHeight; ++k3) for (var S3 = b3 + k3 * f3.strides[2], A3 = k3 * n3.strideHeight - h3, T3 = 0; T3 < o4; T3++) {
        var D3 = A3 + T3 * s3;
        if (!(D3 < 0 || D3 >= n3.inHeight)) for (var N3 = R3 + T3 * e3.strides[1], F3 = I3 + D3 * t4.strides[2], _3 = 0; _3 < n3.outWidth; ++_3) for (var O3 = S3 + _3 * n3.outChannels, M3 = _3 * n3.strideWidth - l3, B3 = 0; B3 < a3; B3++) {
          var P3 = M3 + B3 * u3;
          if (!(P3 < 0 || P3 >= n3.inWidth)) for (var L3 = N3 + B3 * e3.strides[2], W3 = F3 + P3 * n3.inChannels, U3 = L3, V3 = 0; V3 < n3.inChannels; ++V3) {
            for (var z3 = d3[W3 + V3], G3 = 0; G3 < n3.outChannels; ++G3) v2[O3 + G3] += z3 * p3[U3 + G3];
            U3 += n3.outChannels;
          }
        }
      }
    }
    return f3.toTensor();
  }, o3.prototype.conv2dDerInput = function(t4, e3, n3) {
    df([t4, e3], "conv2dDerInput");
    for (var r3 = er2(n3.inShape, "float32"), o4 = r3.values, a3 = this.readSync(t4.dataId), i3 = this.readSync(e3.dataId), s3 = e3.strides, u3 = s3[0], c3 = s3[1], l3 = s3[2], h3 = n3.batchSize, f3 = n3.filterHeight, d3 = n3.filterWidth, p3 = n3.inChannels, v2 = n3.inHeight, g2 = n3.inWidth, m3 = n3.outChannels, y3 = n3.outHeight, x3 = n3.outWidth, b3 = n3.strideHeight, w3 = n3.strideWidth, C3 = n3.dataFormat, E3 = f3 - 1 - n3.padInfo.top, R3 = d3 - 1 - n3.padInfo.left, I3 = "channelsLast" === C3, k3 = r3.strides[0], S3 = I3 ? r3.strides[1] : r3.strides[2], A3 = I3 ? r3.strides[2] : 1, T3 = I3 ? 1 : r3.strides[1], D3 = t4.strides[0], N3 = I3 ? t4.strides[1] : t4.strides[2], F3 = I3 ? t4.strides[2] : 1, _3 = I3 ? 1 : t4.strides[1], O3 = 0; O3 < h3; ++O3) for (var M3 = 0; M3 < p3; ++M3) for (var B3 = 0; B3 < v2; ++B3) for (var P3 = B3 - E3, L3 = Math.max(0, Math.ceil(P3 / b3)), W3 = Math.min(y3, (f3 + P3) / b3), U3 = 0; U3 < g2; ++U3) {
      for (var V3 = U3 - R3, z3 = Math.max(0, Math.ceil(V3 / w3)), G3 = Math.min(x3, (d3 + V3) / w3), H3 = 0, q3 = L3; q3 < W3; ++q3) for (var K3 = q3 * b3 - P3, j3 = z3; j3 < G3; ++j3) for (var X3 = D3 * O3 + N3 * q3 + F3 * j3, Y3 = u3 * (f3 - 1 - K3) + c3 * (d3 - 1 - (j3 * w3 - V3)) + l3 * M3, $3 = 0; $3 < m3; ++$3) {
        H3 += a3[X3 + _3 * $3] * i3[Y3 + $3];
      }
      o4[k3 * O3 + S3 * B3 + A3 * U3 + T3 * M3] = H3;
    }
    return r3.toTensor();
  }, o3.prototype.conv3dDerInput = function(t4, e3, n3) {
    for (var r3 = er2(n3.inShape, "float32"), o4 = r3.values, a3 = r3.strides, i3 = a3[0], s3 = a3[1], u3 = a3[2], c3 = a3[3], l3 = this.readSync(t4.dataId), h3 = t4.strides, f3 = h3[0], d3 = h3[1], p3 = h3[2], v2 = h3[3], g2 = this.readSync(e3.dataId), m3 = e3.strides, y3 = m3[0], x3 = m3[1], b3 = m3[2], w3 = m3[3], C3 = n3.batchSize, E3 = n3.filterDepth, R3 = n3.filterHeight, I3 = n3.filterWidth, k3 = n3.inChannels, S3 = n3.inDepth, A3 = n3.inHeight, T3 = n3.inWidth, D3 = n3.outChannels, N3 = n3.outDepth, F3 = n3.outHeight, _3 = n3.outWidth, O3 = n3.strideDepth, M3 = n3.strideHeight, B3 = n3.strideWidth, P3 = E3 - 1 - n3.padInfo.front, L3 = R3 - 1 - n3.padInfo.top, W3 = I3 - 1 - n3.padInfo.left, U3 = 0; U3 < C3; ++U3) for (var V3 = 0; V3 < k3; ++V3) for (var z3 = 0; z3 < S3; ++z3) for (var G3 = z3 - P3, H3 = Math.max(0, Math.ceil(G3 / O3)), q3 = Math.min(N3, (E3 + G3) / O3), K3 = 0; K3 < A3; ++K3) for (var j3 = K3 - L3, X3 = Math.max(0, Math.ceil(j3 / M3)), Y3 = Math.min(F3, (R3 + j3) / M3), $3 = 0; $3 < T3; ++$3) {
      for (var Q3 = $3 - W3, J3 = Math.max(0, Math.ceil(Q3 / B3)), Z3 = Math.min(_3, (I3 + Q3) / B3), tt3 = 0, et3 = H3; et3 < q3; ++et3) for (var nt3 = et3 * O3 - G3, rt3 = X3; rt3 < Y3; ++rt3) for (var ot3 = rt3 * M3 - j3, at3 = J3; at3 < Z3; ++at3) for (var it3 = f3 * U3 + d3 * et3 + p3 * rt3 + v2 * at3, st3 = y3 * (E3 - 1 - nt3) + x3 * (R3 - 1 - ot3) + b3 * (I3 - 1 - (at3 * B3 - Q3)) + w3 * V3, ut3 = 0; ut3 < D3; ++ut3) {
        tt3 += l3[it3 + ut3] * g2[st3 + ut3];
      }
      o4[i3 * U3 + s3 * z3 + u3 * K3 + c3 * $3 + V3] = tt3;
    }
    return r3.toTensor();
  }, o3.prototype.conv2dDerFilter = function(t4, e3, n3) {
    df([t4, e3], "conv2dDerFilter");
    for (var r3 = n3.strideHeight, o4 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = "channelsLast" === n3.dataFormat, u3 = er2(n3.filterShape, "float32"), c3 = n3.padInfo.left, l3 = n3.padInfo.top, h3 = this.bufferSync(t4), f3 = this.bufferSync(e3), d3 = 0; d3 < a3; ++d3) for (var p3 = Math.max(0, Math.ceil((l3 - d3) / r3)), v2 = Math.min(n3.outHeight, (n3.inHeight + l3 - d3) / r3), g2 = 0; g2 < i3; ++g2) for (var m3 = Math.max(0, Math.ceil((c3 - g2) / o4)), y3 = Math.min(n3.outWidth, (n3.inWidth + c3 - g2) / o4), x3 = 0; x3 < n3.inChannels; ++x3) for (var b3 = 0; b3 < n3.outChannels; ++b3) {
      for (var w3 = 0, C3 = 0; C3 < n3.batchSize; ++C3) for (var E3 = p3; E3 < v2; ++E3) for (var R3 = d3 + E3 * r3 - l3, I3 = m3; I3 < y3; ++I3) {
        var k3 = g2 + I3 * o4 - c3;
        w3 += s3 ? h3.get(C3, R3, k3, x3) * f3.get(C3, E3, I3, b3) : h3.get(C3, x3, R3, k3) * f3.get(C3, b3, E3, I3);
      }
      u3.set(w3, d3, g2, x3, b3);
    }
    return u3.toTensor();
  }, o3.prototype.conv3dDerFilter = function(t4, e3, n3) {
    for (var r3 = n3.strideDepth, o4 = n3.strideHeight, a3 = n3.strideWidth, i3 = n3.filterDepth, s3 = n3.filterHeight, u3 = n3.filterWidth, c3 = er2(n3.filterShape, "float32"), l3 = c3.values, h3 = c3.strides, f3 = h3[0], d3 = h3[1], p3 = h3[2], v2 = h3[3], g2 = this.readSync(e3.dataId), m3 = e3.strides, y3 = m3[0], x3 = m3[1], b3 = m3[2], w3 = m3[3], C3 = this.readSync(t4.dataId), E3 = t4.strides, R3 = E3[0], I3 = E3[1], k3 = E3[2], S3 = E3[3], A3 = n3.padInfo.front, T3 = n3.padInfo.left, D3 = n3.padInfo.top, N3 = 0; N3 < i3; ++N3) for (var F3 = Math.max(0, Math.ceil((A3 - N3) / r3)), _3 = Math.min(n3.outDepth, (n3.inDepth + A3 - N3) / r3), O3 = N3 * f3, M3 = 0; M3 < s3; ++M3) for (var B3 = Math.max(0, Math.ceil((D3 - M3) / o4)), P3 = Math.min(n3.outHeight, (n3.inHeight + D3 - M3) / o4), L3 = M3 * d3 + O3, W3 = 0; W3 < u3; ++W3) for (var U3 = Math.max(0, Math.ceil((T3 - W3) / a3)), V3 = Math.min(n3.outWidth, (n3.inWidth + T3 - W3) / a3), z3 = W3 * p3 + L3, G3 = 0; G3 < n3.inChannels; ++G3) for (var H3 = G3 * v2 + z3, q3 = 0; q3 < n3.outChannels; ++q3) {
      for (var K3 = 0, j3 = 0; j3 < n3.batchSize; ++j3) for (var X3 = j3 * R3, Y3 = j3 * y3, $3 = F3; $3 < _3; ++$3) for (var Q3 = (N3 + $3 * r3 - A3) * I3 + X3, J3 = $3 * x3 + Y3, Z3 = B3; Z3 < P3; ++Z3) for (var tt3 = (M3 + Z3 * o4 - D3) * k3 + Q3, et3 = Z3 * b3 + J3, nt3 = U3; nt3 < V3; ++nt3) {
        var rt3 = nt3 * w3 + et3;
        K3 += C3[(W3 + nt3 * a3 - T3) * S3 + tt3 + G3] * g2[rt3 + q3];
      }
      l3[H3 + q3] = K3;
    }
    return c3.toTensor();
  }, o3.prototype.fusedDepthwiseConv2D = function(t4) {
    var e3 = t4.input, n3 = t4.filter, r3 = t4.convInfo, o4 = t4.bias, a3 = t4.activation, i3 = t4.preluActivationWeights, s3 = this.depthwiseConv2D(e3, n3, r3);
    return o4 && (s3 = this.add(s3, o4)), a3 && (s3 = gf(this, s3, a3, i3)), s3;
  }, o3.prototype.depthwiseConv2D = function(t4, e3, n3) {
    df([t4, e3], "depthwiseConv2D");
    for (var r3 = n3.filterHeight, o4 = n3.filterWidth, a3 = n3.dilationHeight, i3 = n3.dilationWidth, s3 = n3.padInfo.left, u3 = n3.padInfo.top, c3 = n3.outChannels / n3.inChannels, l3 = er2(n3.outShape, t4.dtype), h3 = this.readSync(t4.dataId), f3 = this.readSync(e3.dataId), d3 = l3.values, p3 = 0; p3 < n3.batchSize; ++p3) for (var v2 = p3 * t4.strides[0], g2 = p3 * l3.strides[0], m3 = 0; m3 < n3.outHeight; ++m3) for (var y3 = g2 + m3 * l3.strides[1], x3 = m3 * n3.strideHeight - s3, b3 = 0; b3 < r3; ++b3) {
      var w3 = x3 + b3 * a3;
      if (!(w3 < 0 || w3 >= n3.inHeight)) for (var C3 = b3 * e3.strides[0], E3 = v2 + w3 * t4.strides[1], R3 = 0; R3 < n3.outWidth; ++R3) for (var I3 = y3 + R3 * l3.strides[2], k3 = R3 * n3.strideWidth - u3, S3 = 0; S3 < o4; ++S3) {
        var A3 = k3 + S3 * i3;
        if (!(A3 < 0 || A3 >= n3.inWidth)) for (var T3 = C3 + S3 * e3.strides[1], D3 = E3 + A3 * n3.inChannels, N3 = I3, F3 = T3, _3 = 0; _3 < n3.inChannels; ++_3) {
          for (var O3 = h3[D3 + _3], M3 = 0; M3 < c3; ++M3) d3[N3 + M3] += O3 * f3[F3 + M3];
          N3 += c3, F3 += c3;
        }
      }
    }
    return l3.toTensor();
  }, o3.prototype.depthwiseConv2DDerInput = function(t4, e3, n3) {
    df([t4, e3], "depthwiseConv2DDerInput");
    for (var r3 = er2(n3.inShape, "float32"), o4 = r3.values, a3 = r3.strides, i3 = a3[0], s3 = a3[1], u3 = a3[2], c3 = this.readSync(t4.dataId), l3 = t4.strides, h3 = l3[0], f3 = l3[1], d3 = l3[2], p3 = this.readSync(e3.dataId), v2 = e3.strides, g2 = v2[0], m3 = v2[1], y3 = v2[2], x3 = n3.batchSize, b3 = n3.filterHeight, w3 = n3.filterWidth, C3 = n3.inChannels, E3 = n3.inHeight, R3 = n3.inWidth, I3 = n3.outChannels, k3 = n3.outHeight, S3 = n3.outWidth, A3 = n3.strideHeight, T3 = n3.strideWidth, D3 = b3 - 1 - n3.padInfo.top, N3 = w3 - 1 - n3.padInfo.left, F3 = I3 / C3, _3 = 0; _3 < x3; ++_3) for (var O3 = 0; O3 < C3; ++O3) for (var M3 = 0; M3 < E3; ++M3) for (var B3 = M3 - D3, P3 = Math.max(0, Math.ceil(B3 / A3)), L3 = Math.min(k3, (b3 + B3) / A3), W3 = 0; W3 < R3; ++W3) {
      for (var U3 = W3 - N3, V3 = Math.max(0, Math.ceil(U3 / T3)), z3 = Math.min(S3, (w3 + U3) / T3), G3 = 0, H3 = P3; H3 < L3; ++H3) for (var q3 = H3 * A3 - B3, K3 = V3; K3 < z3; ++K3) for (var j3 = h3 * _3 + f3 * H3 + d3 * K3, X3 = g2 * (b3 - 1 - q3) + m3 * (w3 - 1 - (K3 * T3 - U3)) + y3 * O3, Y3 = 0; Y3 < F3; ++Y3) {
        G3 += c3[j3 + (O3 * F3 + Y3)] * p3[X3 + Y3];
      }
      o4[i3 * _3 + s3 * M3 + u3 * W3 + O3] = G3;
    }
    return r3.toTensor();
  }, o3.prototype.depthwiseConv2DDerFilter = function(t4, e3, n3) {
    df([t4, e3], "depthwiseConv2DDerFilter");
    for (var r3 = n3.strideHeight, o4 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = er2(n3.filterShape, "float32"), u3 = n3.padInfo.left, c3 = n3.padInfo.top, l3 = n3.outChannels / n3.inChannels, h3 = this.bufferSync(t4), f3 = this.bufferSync(e3), d3 = 0; d3 < a3; ++d3) for (var p3 = Math.max(0, Math.ceil((c3 - d3) / r3)), v2 = Math.min(n3.outHeight, (n3.inHeight + c3 - d3) / r3), g2 = 0; g2 < i3; ++g2) for (var m3 = Math.max(0, Math.ceil((u3 - g2) / o4)), y3 = Math.min(n3.outWidth, (n3.inWidth + u3 - g2) / o4), x3 = 0; x3 < n3.outChannels; ++x3) {
      for (var b3 = Math.trunc(x3 / l3), w3 = x3 % l3, C3 = 0, E3 = 0; E3 < n3.batchSize; ++E3) for (var R3 = p3; R3 < v2; ++R3) for (var I3 = d3 + R3 * r3 - c3, k3 = m3; k3 < y3; ++k3) {
        var S3 = g2 + k3 * o4 - u3;
        C3 += h3.get(E3, I3, S3, b3) * f3.get(E3, R3, k3, x3);
      }
      s3.set(C3, d3, g2, b3, w3);
    }
    return s3.toTensor();
  }, o3.prototype.tile = function(t4, e3) {
    return df(t4, "tile"), Va2(this.bufferSync(t4), e3);
  }, o3.prototype.pad = function(t4, e3, n3) {
    df(t4, "pad");
    var r3 = e3.map(function(e4, n4) {
      return e4[0] + t4.shape[n4] + e4[1];
    }), o4 = e3.map(function(t5) {
      return t5[0];
    }), a3 = this.bufferSync(t4), i3 = er2(r3, t4.dtype);
    0 !== n3 && i3.values.fill(n3);
    for (var s3 = 0; s3 < t4.size; s3++) {
      var u3 = a3.indexToLoc(s3), c3 = u3.map(function(t5, e4) {
        return t5 + o4[e4];
      });
      i3.set.apply(i3, [a3.get.apply(a3, u3)].concat(c3));
    }
    return i3.toTensor();
  }, o3.prototype.gather = function(t4, e3, n3) {
    df([t4, e3], "gather");
    var r3 = t4.shape.slice(), o4 = this.readSync(e3.dataId);
    r3[n3] = o4.length;
    for (var a3 = er2(r3, t4.dtype), i3 = this.bufferSync(t4), s3 = 0; s3 < a3.size; ++s3) {
      var u3 = a3.indexToLoc(s3), c3 = u3.slice();
      c3[n3] = o4[u3[n3]];
      var l3 = i3.locToIndex(c3);
      a3.values[s3] = i3.values[l3];
    }
    return a3.toTensor();
  }, o3.prototype.batchToSpaceND = function(t4, e3, n3) {
    df([t4], "batchToSpaceND");
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o4 = pr2(t4.shape, e3, r3), a3 = vr2(o4.length, e3.length), i3 = gr2(t4.shape, e3, r3), s3 = mr2(n3, e3.length), u3 = yr2(i3, n3, e3.length);
    return ua2(t4.reshape(o4), a3).reshape(i3).slice(s3, u3);
  }, o3.prototype.spaceToBatchND = function(t4, e3, n3) {
    df([t4], "spaceToBatchND");
    var r3 = e3.reduce(function(t5, e4) {
      return t5 * e4;
    }), o4 = [[0, 0]];
    o4.push.apply(o4, n3);
    for (var a3 = 1 + e3.length; a3 < t4.shape.length; ++a3) o4.push([0, 0]);
    var i3 = t4.pad(o4), s3 = pr2(i3.shape, e3, r3, false), u3 = vr2(s3.length, e3.length, false), c3 = gr2(i3.shape, e3, r3, false);
    return ua2(i3.reshape(s3), u3).reshape(c3);
  }, o3.prototype.maxPool = function(t4, e3) {
    return df(t4, "maxPool"), pf(this.readSync(t4.dataId), t4.shape, t4.dtype, t4.strides, e3, "max").toTensor();
  }, o3.prototype.maxPoolBackprop = function(t4, e3, n3, r3) {
    df([e3, n3], "maxPoolBackprop");
    for (var o4 = this.readSync(e3.dataId), a3 = er2(r3.outShape, e3.dtype, vf(o4, e3.shape, e3.dtype, r3).values), i3 = r3.strideHeight, s3 = r3.strideWidth, u3 = r3.dilationHeight, c3 = r3.dilationWidth, l3 = r3.effectiveFilterHeight, h3 = r3.effectiveFilterWidth, f3 = h3 - 1 - r3.padInfo.left, d3 = l3 - 1 - r3.padInfo.top, p3 = er2(e3.shape, "float32"), v2 = this.bufferSync(t4), g2 = 0; g2 < r3.batchSize; ++g2) for (var m3 = 0; m3 < r3.inChannels; ++m3) for (var y3 = 0; y3 < r3.inHeight; ++y3) for (var x3 = 0; x3 < r3.inWidth; ++x3) {
      for (var b3 = y3 - d3, w3 = x3 - f3, C3 = 0, E3 = 0; E3 < l3; E3 += u3) {
        var R3 = (b3 + E3) / i3;
        if (!(R3 < 0 || R3 >= r3.outHeight || Math.floor(R3) !== R3)) for (var I3 = 0; I3 < h3; I3 += c3) {
          var k3 = (w3 + I3) / s3;
          if (!(k3 < 0 || k3 >= r3.outWidth || Math.floor(k3) !== k3)) {
            var S3 = l3 * h3 - 1 - a3.get(g2, R3, k3, m3) === E3 * h3 + I3 ? 1 : 0;
            if (0 !== S3) C3 += v2.get(g2, R3, k3, m3) * S3;
          }
        }
      }
      p3.set(C3, g2, y3, x3, m3);
    }
    return p3.toTensor();
  }, o3.prototype.avgPoolBackprop = function(t4, e3, n3) {
    df([t4, e3], "avgPoolBackprop");
    for (var r3 = n3.strideHeight, o4 = n3.strideWidth, a3 = n3.filterHeight, i3 = n3.filterWidth, s3 = n3.dilationHeight, u3 = n3.dilationWidth, c3 = n3.effectiveFilterHeight, l3 = n3.effectiveFilterWidth, h3 = l3 - 1 - n3.padInfo.left, f3 = c3 - 1 - n3.padInfo.top, d3 = er2(e3.shape, "float32"), p3 = 1 / (a3 * i3), v2 = this.bufferSync(t4), g2 = 0; g2 < n3.batchSize; ++g2) for (var m3 = 0; m3 < n3.inChannels; ++m3) for (var y3 = 0; y3 < n3.inHeight; ++y3) for (var x3 = 0; x3 < n3.inWidth; ++x3) {
      for (var b3 = y3 - f3, w3 = x3 - h3, C3 = 0, E3 = 0; E3 < c3; E3 += s3) {
        var R3 = (b3 + E3) / r3;
        if (!(R3 < 0 || R3 >= n3.outHeight || Math.floor(R3) !== R3)) for (var I3 = 0; I3 < l3; I3 += u3) {
          var k3 = (w3 + I3) / o4;
          if (!(k3 < 0 || k3 >= n3.outWidth || Math.floor(k3) !== k3)) C3 += v2.get(g2, R3, k3, m3);
        }
      }
      d3.set(C3 * p3, g2, y3, x3, m3);
    }
    return d3.toTensor();
  }, o3.prototype.pool3d = function(t4, e3, n3) {
    df(t4, "pool3d");
    for (var r3 = e3.strideDepth, o4 = e3.strideHeight, a3 = e3.strideWidth, i3 = e3.dilationDepth, s3 = e3.dilationHeight, u3 = e3.dilationWidth, c3 = e3.effectiveFilterDepth, l3 = e3.effectiveFilterHeight, h3 = e3.effectiveFilterWidth, f3 = e3.padInfo.front, d3 = e3.padInfo.top, p3 = e3.padInfo.left, v2 = "max" === n3 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, g2 = this.readSync(t4.dataId), m3 = er2(e3.outShape, t4.dtype), y3 = m3.values, x3 = e3.outShape[1] * e3.outShape[2] * e3.outShape[3] * e3.outShape[4], b3 = e3.outShape[2] * e3.outShape[3] * e3.outShape[4], w3 = e3.outShape[3] * e3.outShape[4], C3 = e3.outShape[4], E3 = 0; E3 < e3.batchSize; ++E3) for (var R3 = E3 * x3, I3 = E3 * t4.strides[0], k3 = 0; k3 < e3.inChannels; ++k3) for (var S3 = 0; S3 < e3.outDepth; ++S3) {
      for (var A3 = S3 * r3 - f3, T3 = A3; T3 < 0; ) T3 += i3;
      for (var D3 = Math.min(e3.inDepth, c3 + A3), N3 = R3 + S3 * b3, F3 = 0; F3 < e3.outHeight; ++F3) {
        for (var _3 = F3 * o4 - d3, O3 = _3; O3 < 0; ) O3 += s3;
        for (var M3 = Math.min(e3.inHeight, l3 + _3), B3 = N3 + F3 * w3, P3 = 0; P3 < e3.outWidth; ++P3) {
          for (var L3 = P3 * a3 - p3, W3 = L3; W3 < 0; ) W3 += u3;
          for (var U3 = Math.min(e3.inWidth, h3 + L3), V3 = B3 + P3 * C3, z3 = v2, G3 = 0, H3 = 0, q3 = T3; q3 < D3; q3 += i3) {
            for (var K3 = I3 + q3 * t4.strides[1], j3 = O3; j3 < M3; j3 += s3) {
              for (var X3 = K3 + j3 * t4.strides[2], Y3 = W3; Y3 < U3; Y3 += u3) {
                var $3 = g2[X3 + Y3 * t4.strides[3] + k3];
                if ("max" === n3 && $3 > z3 ? z3 = $3 : "avg" === n3 && (G3 += $3, H3++), isNaN(z3)) break;
              }
              if (isNaN(z3)) break;
            }
            if (isNaN(z3)) break;
          }
          y3[V3 + k3] = "avg" === n3 ? G3 / H3 : z3;
        }
      }
    }
    return m3.toTensor();
  }, o3.prototype.avgPool3d = function(t4, e3) {
    return df(t4, "avgPool3d"), this.pool3d(t4, e3, "avg").toFloat();
  }, o3.prototype.avgPool3dBackprop = function(t4, e3, n3) {
    df([t4, e3], "avgPool3dBackprop");
    for (var r3 = n3.strideDepth, o4 = n3.strideHeight, a3 = n3.strideWidth, i3 = n3.filterDepth, s3 = n3.filterHeight, u3 = n3.filterWidth, c3 = n3.dilationDepth, l3 = n3.dilationHeight, h3 = n3.dilationWidth, f3 = n3.effectiveFilterDepth, d3 = n3.effectiveFilterHeight, p3 = n3.effectiveFilterWidth, v2 = f3 - 1 - n3.padInfo.front, g2 = p3 - 1 - n3.padInfo.left, m3 = d3 - 1 - n3.padInfo.top, y3 = er2(e3.shape, "float32"), x3 = 1 / (i3 * s3 * u3), b3 = this.bufferSync(t4), w3 = 0; w3 < n3.batchSize; ++w3) for (var C3 = 0; C3 < n3.inChannels; ++C3) for (var E3 = 0; E3 < n3.inDepth; ++E3) for (var R3 = 0; R3 < n3.inHeight; ++R3) for (var I3 = 0; I3 < n3.inWidth; ++I3) {
      for (var k3 = E3 - v2, S3 = R3 - m3, A3 = I3 - g2, T3 = 0, D3 = 0; D3 < f3; D3 += c3) {
        var N3 = (k3 + D3) / r3;
        if (!(N3 < 0 || N3 >= n3.outDepth || Math.floor(N3) !== N3)) for (var F3 = 0; F3 < d3; F3 += l3) {
          var _3 = (S3 + F3) / o4;
          if (!(_3 < 0 || _3 >= n3.outHeight || Math.floor(_3) !== _3)) for (var O3 = 0; O3 < p3; O3 += h3) {
            var M3 = (A3 + O3) / a3;
            if (!(M3 < 0 || M3 >= n3.outWidth || Math.floor(M3) !== M3)) T3 += b3.get(w3, N3, _3, M3, C3);
          }
        }
      }
      y3.set(T3 * x3, w3, E3, R3, I3, C3);
    }
    return y3.toTensor();
  }, o3.prototype.maxPool3d = function(t4, e3) {
    return df(t4, "maxPool3d"), this.pool3d(t4, e3, "max").toFloat();
  }, o3.prototype.maxPool3dPositions = function(t4, e3) {
    for (var n3 = er2(e3.outShape, "int32"), r3 = e3.strideDepth, o4 = e3.strideHeight, a3 = e3.strideWidth, i3 = e3.dilationDepth, s3 = e3.dilationHeight, u3 = e3.dilationWidth, c3 = e3.effectiveFilterDepth, l3 = e3.effectiveFilterHeight, h3 = e3.effectiveFilterWidth, f3 = e3.padInfo.front, d3 = e3.padInfo.top, p3 = e3.padInfo.left, v2 = this.bufferSync(t4), g2 = 0; g2 < e3.batchSize; ++g2) for (var m3 = 0; m3 < e3.inChannels; ++m3) for (var y3 = 0; y3 < e3.outDepth; ++y3) {
      for (var x3 = y3 * r3 - f3, b3 = x3; b3 < 0; ) b3 += i3;
      for (var w3 = Math.min(e3.inDepth, c3 + x3), C3 = 0; C3 < e3.outHeight; ++C3) {
        for (var E3 = C3 * o4 - d3, R3 = E3; R3 < 0; ) R3 += s3;
        for (var I3 = Math.min(e3.inHeight, l3 + E3), k3 = 0; k3 < e3.outWidth; ++k3) {
          for (var S3 = k3 * a3 - p3, A3 = S3; A3 < 0; ) A3 += u3;
          for (var T3 = Math.min(e3.inWidth, h3 + S3), D3 = Number.NEGATIVE_INFINITY, N3 = -1, F3 = b3; F3 < w3; F3 += i3) for (var _3 = F3 - x3, O3 = R3; O3 < I3; O3 += s3) for (var M3 = O3 - E3, B3 = A3; B3 < T3; B3 += u3) {
            var P3 = B3 - S3, L3 = v2.get(g2, F3, O3, B3, m3);
            L3 >= D3 && (D3 = L3, N3 = _3 * l3 * h3 + M3 * l3 + P3);
          }
          n3.set(N3, g2, y3, C3, k3, m3);
        }
      }
    }
    return n3.toTensor();
  }, o3.prototype.maxPool3dBackprop = function(t4, e3, n3, r3) {
    df([e3, n3], "maxPool3dBackprop");
    for (var o4 = this.maxPool3dPositions(e3, r3), a3 = r3.strideDepth, i3 = r3.strideHeight, s3 = r3.strideWidth, u3 = r3.dilationDepth, c3 = r3.dilationHeight, l3 = r3.dilationWidth, h3 = r3.effectiveFilterDepth, f3 = r3.effectiveFilterHeight, d3 = r3.effectiveFilterWidth, p3 = h3 - 1 - r3.padInfo.front, v2 = d3 - 1 - r3.padInfo.left, g2 = f3 - 1 - r3.padInfo.top, m3 = er2(e3.shape, "float32"), y3 = this.bufferSync(o4), x3 = this.bufferSync(t4), b3 = 0; b3 < r3.batchSize; ++b3) for (var w3 = 0; w3 < r3.inChannels; ++w3) for (var C3 = 0; C3 < r3.inDepth; ++C3) for (var E3 = 0; E3 < r3.inHeight; ++E3) for (var R3 = 0; R3 < r3.inWidth; ++R3) {
      for (var I3 = C3 - p3, k3 = E3 - g2, S3 = R3 - v2, A3 = 0, T3 = 0; T3 < h3; T3 += u3) {
        var D3 = (I3 + T3) / a3;
        if (!(D3 < 0 || D3 >= r3.outDepth || Math.floor(D3) !== D3)) for (var N3 = 0; N3 < f3; N3 += c3) {
          var F3 = (k3 + N3) / i3;
          if (!(F3 < 0 || F3 >= r3.outHeight || Math.floor(F3) !== F3)) for (var _3 = 0; _3 < d3; _3 += l3) {
            var O3 = (S3 + _3) / s3;
            if (!(O3 < 0 || O3 >= r3.outWidth || Math.floor(O3) !== O3)) {
              var M3 = h3 * f3 * d3 - 1 - y3.get(b3, D3, F3, O3, w3) === T3 * f3 * d3 + N3 * d3 + _3 ? 1 : 0;
              if (0 !== M3) A3 += x3.get(b3, D3, F3, O3, w3) * M3;
            }
          }
        }
      }
      m3.set(A3, b3, C3, E3, R3, w3);
    }
    return m3.toTensor();
  }, o3.prototype.cast = function(t4, e3) {
    return Ra2(t4, e3, this);
  }, o3.prototype.reshape = function(t4, e3) {
    return Ia2(t4, e3);
  }, o3.prototype.avgPool = function(t4, e3) {
    return df(t4, "avgPool"), df(t4, "maxPool"), pf(this.readSync(t4.dataId), t4.shape, t4.dtype, t4.strides, e3, "avg").toTensor().toFloat();
  }, o3.prototype.resizeBilinear = function(t4, e3, n3, r3) {
    df(t4, "resizeBilinear");
    for (var o4 = t4.shape, a3 = o4[0], i3 = o4[1], s3 = o4[2], u3 = o4[3], c3 = this.readSync(t4.dataId), l3 = new Float32Array(k2([a3, e3, n3, u3])), h3 = [r3 && e3 > 1 ? i3 - 1 : i3, r3 && n3 > 1 ? s3 - 1 : s3], f3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], d3 = 0, p3 = h3[0] / f3[0], v2 = h3[1] / f3[1], g2 = 0; g2 < a3; g2++) for (var m3 = 0; m3 < e3; m3++) for (var y3 = p3 * m3, x3 = Math.floor(y3), b3 = y3 - x3, w3 = Math.min(i3 - 1, Math.ceil(y3)), C3 = g2 * t4.strides[0] + x3 * t4.strides[1], E3 = g2 * t4.strides[0] + w3 * t4.strides[1], R3 = 0; R3 < n3; R3++) for (var I3 = v2 * R3, S3 = Math.floor(I3), A3 = I3 - S3, T3 = Math.min(s3 - 1, Math.ceil(I3)), D3 = C3 + S3 * t4.strides[2], N3 = E3 + S3 * t4.strides[2], F3 = C3 + T3 * t4.strides[2], _3 = E3 + T3 * t4.strides[2], O3 = 0; O3 < u3; O3++) {
      var M3 = c3[D3 + O3], B3 = c3[N3 + O3], P3 = M3 + (c3[F3 + O3] - M3) * A3, L3 = P3 + (B3 + (c3[_3 + O3] - B3) * A3 - P3) * b3;
      l3[d3++] = L3;
    }
    return Fn2(l3, [a3, e3, n3, u3]);
  }, o3.prototype.resizeBilinearBackprop = function(t4, e3, n3) {
    df([t4, e3], "resizeBilinearBackprop");
    for (var r3 = e3.shape, o4 = r3[0], a3 = r3[1], i3 = r3[2], s3 = r3[3], u3 = t4.shape, c3 = u3[1], l3 = u3[2], h3 = new Float32Array(o4 * a3 * i3 * s3), f3 = [n3 && c3 > 1 ? a3 - 1 : a3, n3 && l3 > 1 ? i3 - 1 : i3], d3 = [n3 && c3 > 1 ? c3 - 1 : c3, n3 && l3 > 1 ? l3 - 1 : l3], p3 = f3[0] / d3[0], v2 = f3[1] / d3[1], g2 = this.readSync(t4.dataId), m3 = 0, y3 = 0; y3 < o4; y3++) for (var x3 = y3 * e3.strides[0], b3 = 0; b3 < c3; b3++) for (var w3 = b3 * p3, C3 = Math.floor(w3), E3 = Math.min(Math.ceil(w3), a3 - 1), R3 = x3 + C3 * e3.strides[1], I3 = x3 + E3 * e3.strides[1], k3 = w3 - C3, S3 = 1 - k3, A3 = 0; A3 < l3; A3++) for (var T3 = A3 * v2, D3 = Math.floor(T3), N3 = Math.min(Math.ceil(T3), i3 - 1), F3 = T3 - D3, _3 = 1 - F3, O3 = R3 + D3 * e3.strides[2], M3 = R3 + N3 * e3.strides[2], B3 = I3 + D3 * e3.strides[2], P3 = I3 + N3 * e3.strides[2], L3 = S3 * _3, W3 = S3 * F3, U3 = k3 * _3, V3 = k3 * F3, z3 = 0; z3 < s3; z3++) {
      var G3 = g2[m3++];
      h3[O3 + z3] += G3 * L3, h3[M3 + z3] += G3 * W3, h3[B3 + z3] += G3 * U3, h3[P3 + z3] += G3 * V3;
    }
    return Ln2(h3, [o4, i3, a3, s3], e3.dtype);
  }, o3.prototype.resizeNearestNeighbor = function(t4, e3, n3, r3) {
    df(t4, "resizeNearestNeighbor");
    for (var o4 = t4.shape, a3 = o4[0], i3 = o4[1], s3 = o4[2], u3 = o4[3], c3 = this.readSync(t4.dataId), l3 = new Float32Array(a3 * e3 * n3 * u3), h3 = [r3 && e3 > 1 ? i3 - 1 : i3, r3 && n3 > 1 ? s3 - 1 : s3], f3 = [r3 && e3 > 1 ? e3 - 1 : e3, r3 && n3 > 1 ? n3 - 1 : n3], d3 = h3[0] / f3[0], p3 = h3[1] / f3[1], v2 = 0, g2 = 0; g2 < a3; g2++) for (var m3 = g2 * t4.strides[0], y3 = 0; y3 < e3; y3++) for (var x3 = d3 * y3, b3 = m3 + Math.min(i3 - 1, r3 ? Math.round(x3) : Math.floor(x3)) * t4.strides[1], w3 = 0; w3 < n3; w3++) for (var C3 = p3 * w3, E3 = b3 + Math.min(s3 - 1, r3 ? Math.round(C3) : Math.floor(C3)) * t4.strides[2], R3 = 0; R3 < u3; R3++) {
      var I3 = c3[E3 + R3];
      l3[v2++] = I3;
    }
    return Fn2(l3, [a3, e3, n3, u3], t4.dtype);
  }, o3.prototype.resizeNearestNeighborBackprop = function(t4, e3, n3) {
    df([t4, e3], "resizeNearestNeighborBackprop");
    for (var r3 = e3.shape, o4 = r3[0], a3 = r3[1], i3 = r3[2], s3 = r3[3], u3 = t4.shape, c3 = u3[1], l3 = u3[2], h3 = new Float32Array(o4 * a3 * i3 * s3), f3 = this.readSync(t4.dataId), d3 = [n3 && c3 > 1 ? a3 - 1 : a3, n3 && l3 > 1 ? i3 - 1 : i3], p3 = [n3 && c3 > 1 ? c3 - 1 : c3, n3 && l3 > 1 ? l3 - 1 : l3], v2 = d3[0] / p3[0], g2 = d3[1] / p3[1], m3 = 1 / v2, y3 = 1 / g2, x3 = 2 * Math.ceil(m3) + 2, b3 = 2 * Math.ceil(y3) + 2, w3 = 0; w3 < o4; w3++) for (var C3 = w3 * e3.strides[0], E3 = 0; E3 < a3; E3++) for (var R3 = C3 + E3 * e3.strides[1], I3 = Math.floor(E3 * m3), k3 = Math.floor(I3 - x3 / 2), S3 = 0; S3 < i3; S3++) for (var A3 = R3 + S3 * e3.strides[2], T3 = Math.floor(S3 * y3), D3 = Math.floor(T3 - b3 / 2), N3 = 0; N3 < s3; N3++) {
      for (var F3 = 0, _3 = 0; _3 < x3; _3++) {
        var O3 = _3 + k3;
        if (!(O3 < 0 || O3 >= c3)) {
          var M3 = C3 + O3 * t4.strides[1], B3 = O3 * v2;
          if (E3 === Math.min(a3 - 1, n3 ? Math.round(B3) : Math.floor(B3))) for (var P3 = 0; P3 < b3; P3++) {
            var L3 = P3 + D3;
            if (!(L3 < 0 || L3 >= l3)) {
              var W3 = M3 + L3 * t4.strides[2], U3 = L3 * g2;
              S3 === Math.min(i3 - 1, n3 ? Math.round(U3) : Math.floor(U3)) && (F3 += f3[W3 + N3]);
            }
          }
        }
      }
      h3[A3 + N3] = F3;
    }
    return Ln2(h3, e3.shape, e3.dtype);
  }, o3.prototype.batchNormalization = function(t4, e3, n3, r3, o4, a3) {
    df([t4, e3, n3, o4, a3], "batchNorm");
    for (var i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = this.readSync(n3.dataId), c3 = o4 ? this.readSync(o4.dataId) : new Float32Array([1]), l3 = a3 ? this.readSync(a3.dataId) : new Float32Array([0]), h3 = new Float32Array(i3.length), f3 = l3.length, d3 = c3.length, p3 = u3.length, v2 = s3.length, g2 = 0, m3 = 0, y3 = 0, x3 = 0, b3 = 0; b3 < i3.length; ++b3) h3[b3] = l3[g2++] + (i3[b3] - s3[m3++]) * c3[y3++] / Math.sqrt(u3[x3++] + r3), g2 >= f3 && (g2 = 0), m3 >= v2 && (m3 = 0), y3 >= d3 && (y3 = 0), x3 >= p3 && (x3 = 0);
    return Ln2(h3, t4.shape);
  }, o3.prototype.localResponseNormalization4D = function(t4, e3, n3, r3, o4) {
    df(t4, "localResponseNormalization4D");
    var a3 = t4.shape[3], i3 = a3 - 1, s3 = this.readSync(t4.dataId), u3 = t4.size, c3 = new Float32Array(u3);
    function l3(t5) {
      for (var n4 = t5 % a3, r4 = t5 - n4 + Math.max(0, n4 - e3), o5 = t5 - n4 + Math.min(n4 + e3, i3), u4 = 0; r4 <= o5; r4++) {
        var c4 = s3[r4];
        u4 += c4 * c4;
      }
      return u4;
    }
    for (var h3 = 0; h3 < u3; h3++) {
      var f3 = l3(h3), d3 = s3[h3] * Math.pow(n3 + r3 * f3, -o4);
      c3[h3] = d3;
    }
    return Ln2(c3, t4.shape);
  }, o3.prototype.LRNGrad = function(t4, e3, n3, r3, o4, a3, i3) {
    df(t4, "LRNGrad");
    for (var s3 = t4.shape[3], u3 = this.readSync(t4.dataId), c3 = this.readSync(e3.dataId), l3 = this.readSync(n3.dataId), h3 = new Float32Array(t4.size), f3 = t4.size, d3 = 0; d3 < f3; d3++) {
      for (var p3 = d3 % s3, v2 = d3 - p3 + Math.max(0, p3 - r3), g2 = d3 - p3 + Math.min(s3, p3 + r3 + 1), m3 = 0, y3 = v2; y3 < g2; y3++) m3 += Math.pow(c3[y3], 2);
      m3 = a3 * m3 + o4;
      for (y3 = v2; y3 < g2; y3++) {
        var x3 = -2 * a3 * i3 * c3[y3] * l3[d3] / m3;
        d3 === y3 && (x3 += Math.pow(m3, -i3)), x3 *= u3[d3], h3[y3] += x3;
      }
    }
    return Ln2(h3, t4.shape);
  }, o3.prototype.multinomial = function(t4, e3, n3, r3) {
    df(t4, "multinomial");
    for (var o4 = e3 ? t4 : ia2(t4), a3 = o4.shape[0], i3 = o4.shape[1], s3 = Gn2([a3, n3], "int32"), u3 = this.readSync(s3.dataId), c3 = this.readSync(o4.dataId), l3 = 0; l3 < a3; ++l3) {
      var h3 = l3 * i3, f3 = new Float32Array(i3 - 1);
      f3[0] = c3[h3];
      for (var d3 = 1; d3 < f3.length; ++d3) f3[d3] = f3[d3 - 1] + c3[h3 + d3];
      for (var p3 = Yu2(r3.toString()), v2 = l3 * n3, g2 = 0; g2 < n3; ++g2) {
        var m3 = p3();
        u3[v2 + g2] = f3.length;
        for (var y3 = 0; y3 < f3.length; y3++) if (m3 < f3[y3]) {
          u3[v2 + g2] = y3;
          break;
        }
      }
    }
    return s3;
  }, o3.prototype.oneHot = function(t4, e3, n3, r3) {
    df(t4, "oneHot");
    var o4 = new Float32Array(t4.size * e3);
    o4.fill(r3);
    for (var a3 = this.readSync(t4.dataId), i3 = 0; i3 < t4.size; ++i3) a3[i3] >= 0 && a3[i3] < e3 && (o4[i3 * e3 + a3[i3]] = n3);
    return Bn2(o4, [t4.size, e3], "int32");
  }, o3.prototype.nonMaxSuppression = function(t4, e3, n3, r3, o4) {
    return df(t4, "nonMaxSuppression"), Oa2(this.readSync(t4.dataId), this.readSync(e3.dataId), n3, r3, o4);
  }, o3.prototype.fft = function(t4) {
    return this.fftBatch(t4, false);
  }, o3.prototype.ifft = function(t4) {
    return this.fftBatch(t4, true);
  }, o3.prototype.fftBatch = function(t4, e3) {
    for (var n3 = t4.shape[0], r3 = t4.shape[1], o4 = er2(t4.shape, "float32"), a3 = er2(t4.shape, "float32"), i3 = Dn2(t4).as2D(n3, r3), s3 = Nn2(t4).as2D(n3, r3), u3 = 0; u3 < n3; u3++) for (var c3 = i3.slice([u3, 0], [1, r3]), l3 = s3.slice([u3, 0], [1, r3]), h3 = Tn2(c3, l3), f3 = this.readSync(this.fftImpl(h3, e3).dataId), d3 = 0; d3 < r3; d3++) {
      var p3 = Ta2(f3, d3);
      o4.values[u3 * r3 + d3] = p3.real, a3.values[u3 * r3 + d3] = p3.imag;
    }
    return Tn2(o4.toTensor(), a3.toTensor()).as2D(n3, r3);
  }, o3.prototype.fftImpl = function(t4, e3) {
    var n3 = t4.as1D(), r3 = n3.size;
    if (this.isExponentOf2(r3)) {
      var o4 = this.fftRadix2(n3, r3, e3).as2D(t4.shape[0], t4.shape[1]);
      return e3 && (o4 = Tn2(Dn2(o4).div(On2(r3)), Nn2(o4).div(On2(r3)))), o4;
    }
    var a3 = this.readSync(t4.dataId), i3 = function(t5) {
      for (var e4 = new Float32Array(t5.length / 2), n4 = new Float32Array(t5.length / 2), r4 = 0; r4 < t5.length; r4 += 2) e4[r4 / 2] = t5[r4], n4[r4 / 2] = t5[r4 + 1];
      return { real: e4, imag: n4 };
    }(this.fourierTransformByMatmul(a3, r3, e3));
    return Tn2(i3.real, i3.imag).as2D(t4.shape[0], t4.shape[1]);
  }, o3.prototype.isExponentOf2 = function(t4) {
    return 0 == (t4 & t4 - 1);
  }, o3.prototype.fftRadix2 = function(t4, e3, n3) {
    if (1 === e3) return t4;
    var r3 = this.readSync(t4.dataId), o4 = e3 / 2, a3 = function(t5) {
      for (var e4 = Math.ceil(t5.length / 4), n4 = new Float32Array(e4), r4 = new Float32Array(e4), o5 = 0; o5 < t5.length; o5 += 4) n4[Math.floor(o5 / 4)] = t5[o5], r4[Math.floor(o5 / 4)] = t5[o5 + 1];
      return { real: n4, imag: r4 };
    }(r3), i3 = Tn2(a3.real, a3.imag).as1D(), s3 = function(t5) {
      for (var e4 = Math.floor(t5.length / 4), n4 = new Float32Array(e4), r4 = new Float32Array(e4), o5 = 2; o5 < t5.length; o5 += 4) n4[Math.floor(o5 / 4)] = t5[o5], r4[Math.floor(o5 / 4)] = t5[o5 + 1];
      return { real: n4, imag: r4 };
    }(r3), u3 = Tn2(s3.real, s3.imag).as1D();
    i3 = this.fftRadix2(i3, o4, n3), u3 = this.fftRadix2(u3, o4, n3);
    var c3 = function(t5, e4) {
      for (var n4 = new Float32Array(t5 / 2), r4 = new Float32Array(t5 / 2), o5 = 0; o5 < Math.ceil(t5 / 2); o5++) {
        var a4 = (e4 ? 2 : -2) * Math.PI * (o5 / t5);
        n4[o5] = Math.cos(a4), r4[o5] = Math.sin(a4);
      }
      return { real: n4, imag: r4 };
    }(e3, n3), l3 = Tn2(c3.real, c3.imag).mul(u3), h3 = i3.add(l3), f3 = i3.sub(l3), d3 = Dn2(h3).concat(Dn2(f3)), p3 = Nn2(h3).concat(Nn2(f3));
    return Tn2(d3, p3).as1D();
  }, o3.prototype.fourierTransformByMatmul = function(t4, e3, n3) {
    for (var r3 = new Float32Array(2 * e3), o4 = 0; o4 < e3; o4++) {
      for (var a3 = 0, i3 = 0, s3 = 0; s3 < e3; s3++) {
        var u3 = Na2(o4 * s3, e3, n3), c3 = Ta2(t4, s3);
        a3 += c3.real * u3.real - c3.imag * u3.imag, i3 += c3.real * u3.imag + c3.imag * u3.real;
      }
      n3 && (a3 /= e3, i3 /= e3), Da2(r3, a3, i3, o4);
    }
    return r3;
  }, o3.prototype.depthToSpace = function(t4, e3, n3) {
    C2("NHWC" === n3, function() {
      return "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n3;
    }), C2(e3 > 1, function() {
      return "blockSize should be > 1 for depthToSpace, but was: " + e3;
    });
    for (var r3 = t4.shape[0], o4 = t4.shape[1], a3 = t4.shape[2], i3 = t4.shape[3], s3 = o4 * e3, u3 = a3 * e3, c3 = i3 / (e3 * e3), l3 = this.readSync(t4.dataId), h3 = new Float32Array(r3 * s3 * u3 * c3), f3 = 0, d3 = 0; d3 < r3; ++d3) for (var p3 = 0; p3 < s3; ++p3) for (var v2 = Math.floor(p3 / e3), g2 = p3 % e3, m3 = 0; m3 < u3; ++m3) for (var y3 = Math.floor(m3 / e3), x3 = (g2 * e3 + m3 % e3) * c3, b3 = 0; b3 < c3; ++b3) {
      var w3 = b3 + x3 + i3 * (y3 + a3 * (v2 + o4 * d3));
      h3[f3++] = l3[w3];
    }
    return Ln2(h3, [r3, s3, u3, c3]);
  }, o3.prototype.broadcastedBinaryOp = function(t4, e3, n3, r3) {
    var o4 = Pr2(t4.shape, e3.shape), a3 = er2(o4, n3), i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = Mr2(t4.shape, o4), c3 = Mr2(e3.shape, o4), l3 = a3.values;
    if (u3.length + c3.length === 0) for (var h3 = 0; h3 < l3.length; ++h3) l3[h3] = r3(i3[h3 % i3.length], s3[h3 % s3.length]);
    else {
      var f3 = this.bufferSync(t4), d3 = this.bufferSync(e3), p3 = function(n4) {
        var o5 = a3.indexToLoc(n4), h4 = o5.slice(-t4.rank);
        u3.forEach(function(t5) {
          return h4[t5] = 0;
        });
        var p4 = f3.locToIndex(h4), v2 = o5.slice(-e3.rank);
        c3.forEach(function(t5) {
          return v2[t5] = 0;
        });
        var g2 = d3.locToIndex(v2);
        l3[n4] = r3(i3[p4], s3[g2]);
      };
      for (h3 = 0; h3 < l3.length; ++h3) p3(h3);
    }
    return a3.toTensor();
  }, o3.prototype.broadcastedBinaryComplexOp = function(t4, e3, n3) {
    var r3 = Pr2(t4.shape, e3.shape), o4 = er2(r3, "float32"), a3 = er2(r3, "float32"), i3 = this.readSync(t4.dataId), s3 = this.readSync(e3.dataId), u3 = Mr2(t4.shape, r3), c3 = Mr2(e3.shape, r3), l3 = o4.values, h3 = a3.values;
    if (u3.length + c3.length === 0) for (var f3 = 0; f3 < l3.length; f3++) {
      var d3 = f3 % i3.length, p3 = f3 % s3.length, v2 = n3(i3[2 * d3], i3[2 * d3 + 1], s3[2 * p3], s3[2 * p3 + 1]);
      l3[f3] = v2.real, h3[f3] = v2.imag;
    }
    else {
      var g2 = this.bufferSync(this.data.get(t4.dataId).complexTensors.real), m3 = this.bufferSync(this.data.get(e3.dataId).complexTensors.real), y3 = function(r4) {
        var a4 = o4.indexToLoc(r4), f4 = a4.slice(-t4.rank);
        u3.forEach(function(t5) {
          return f4[t5] = 0;
        });
        var d4 = g2.locToIndex(f4), p4 = a4.slice(-e3.rank);
        c3.forEach(function(t5) {
          return p4[t5] = 0;
        });
        var v3 = m3.locToIndex(p4), y4 = n3(i3[2 * d4], i3[2 * d4 + 1], s3[2 * v3], s3[2 * v3 + 1]);
        l3[r4] = y4.real, h3[r4] = y4.imag;
      };
      for (f3 = 0; f3 < l3.length; f3++) y3(f3);
    }
    return this.complex(o4.toTensor(), a3.toTensor());
  }, o3.prototype.split = function(t4, e3, n3) {
    return Ua2(t4, e3, n3);
  }, o3.prototype.dispose = function() {
  }, o3.prototype.floatPrecision = function() {
    return 32;
  }, o3.prototype.epsilon = function() {
    return 1e-7;
  }, o3.prototype.cropAndResize = function(t4, e3, n3, r3, o4, a3) {
    for (var i3 = t4.shape, s3 = i3[0], u3 = i3[1], c3 = i3[2], l3 = i3[3], h3 = e3.shape[0], f3 = r3[0], d3 = r3[1], p3 = er2([h3, f3, d3, l3], "float32"), v2 = this.readSync(e3.dataId), g2 = this.readSync(n3.dataId), m3 = this.readSync(t4.dataId), y3 = t4.strides, x3 = p3.strides, b3 = 0; b3 < h3; b3++) {
      var w3 = 4 * b3, C3 = v2[w3], E3 = v2[w3 + 1], R3 = v2[w3 + 2], I3 = v2[w3 + 3], k3 = g2[b3];
      if (!(k3 >= s3)) for (var S3 = f3 > 1 ? (R3 - C3) * (u3 - 1) / (f3 - 1) : 0, A3 = d3 > 1 ? (I3 - E3) * (c3 - 1) / (d3 - 1) : 0, T3 = 0; T3 < f3; T3++) {
        var D3 = f3 > 1 ? C3 * (u3 - 1) + T3 * S3 : 0.5 * (C3 + R3) * (u3 - 1);
        if (D3 < 0 || D3 > u3 - 1) for (var N3 = 0; N3 < d3; N3++) for (var F3 = 0; F3 < l3; F3++) {
          var _3 = F3 + N3 * x3[2] + T3 * x3[1] + b3 * x3[0];
          p3.values[_3] = a3;
        }
        else if ("bilinear" === o4) {
          var O3 = Math.floor(D3), M3 = Math.ceil(D3), B3 = D3 - O3;
          for (N3 = 0; N3 < d3; N3++) {
            if ((q3 = d3 > 1 ? E3 * (c3 - 1) + N3 * A3 : 0.5 * (E3 + I3) * (c3 - 1)) < 0 || q3 > c3 - 1) for (F3 = 0; F3 < l3; F3++) {
              _3 = F3 + N3 * x3[2] + T3 * x3[1] + b3 * x3[0];
              p3.values[_3] = a3;
            }
            else {
              var P3 = Math.floor(q3), L3 = Math.ceil(q3), W3 = q3 - P3;
              for (F3 = 0; F3 < l3; F3++) {
                var U3 = m3[_3 = F3 + P3 * y3[2] + O3 * y3[1] + k3 * y3[0]], V3 = m3[_3 = F3 + L3 * y3[2] + O3 * y3[1] + k3 * y3[0]], z3 = m3[_3 = F3 + P3 * y3[2] + M3 * y3[1] + k3 * y3[0]], G3 = U3 + (V3 - U3) * W3, H3 = z3 + (m3[_3 = F3 + L3 * y3[2] + M3 * y3[1] + k3 * y3[0]] - z3) * W3;
                _3 = F3 + N3 * x3[2] + T3 * x3[1] + b3 * x3[0], p3.values[_3] = G3 + (H3 - G3) * B3;
              }
            }
          }
        } else for (N3 = 0; N3 < d3; ++N3) {
          var q3;
          if ((q3 = d3 > 1 ? E3 * (c3 - 1) + N3 * A3 : 0.5 * (E3 + I3) * (c3 - 1)) < 0 || q3 > c3 - 1) for (F3 = 0; F3 < l3; F3++) {
            _3 = F3 + N3 * x3[2] + T3 * x3[1] + b3 * x3[0];
            p3.values[_3] = a3;
          }
          else {
            var K3 = Math.round(q3), j3 = Math.round(D3);
            for (F3 = 0; F3 < l3; F3++) {
              var X3 = F3 + K3 * y3[2] + j3 * y3[1] + k3 * y3[0], Y3 = F3 + N3 * x3[2] + T3 * x3[1] + b3 * x3[0];
              p3.values[Y3] = m3[X3];
            }
          }
        }
      }
    }
    return p3.toTensor();
  }, o3.prototype.sparseToDense = function(t4, e3, n3, r3) {
    var o4 = Go2(0, t4, n3), a3 = o4.sliceRank, i3 = o4.numUpdates, s3 = o4.sliceSize, u3 = o4.strides, c3 = o4.outputSize;
    return this.scatter(t4, e3, n3, c3, s3, i3, a3, u3, r3, false);
  }, o3.prototype.gatherND = function(t4, e3) {
    var n3 = e3.shape, r3 = n3[n3.length - 1], o4 = Po2(t4, e3), a3 = o4[0], i3 = o4[1], s3 = o4[2], u3 = o4[3];
    if (0 === i3) return Fn2([], a3, t4.dtype);
    for (var c3 = new mt2([i3, s3], t4.dtype), l3 = this.readSync(e3.dataId), h3 = this.readSync(t4.dataId), f3 = 0; f3 < i3; f3++) {
      for (var d3 = [], p3 = 0, v2 = 0; v2 < r3; v2++) {
        var g2 = l3[f3 * r3 + v2];
        p3 += g2 * u3[v2], d3.push(g2);
      }
      if (p3 < 0 || p3 >= t4.size / s3) throw new Error("Invalid indices: " + d3 + " does not index into " + t4.shape);
      for (var m3 = 0; m3 < s3; m3++) c3.values[f3 * s3 + m3] = h3[p3 * s3 + m3];
    }
    return c3.toTensor().reshape(a3);
  }, o3.prototype.scatterND = function(t4, e3, n3) {
    var r3 = Go2(0, t4, n3), o4 = r3.sliceRank, a3 = r3.numUpdates, i3 = r3.sliceSize, s3 = r3.strides, u3 = r3.outputSize, c3 = On2(0);
    return this.scatter(t4, e3, n3, u3, i3, a3, o4, s3, c3, true);
  }, o3.prototype.fill = function(t4, e3, n3) {
    var r3 = P2(n3 = n3 || j2(e3), k2(t4));
    return r3.fill(e3), Lt2.makeTensor(r3, t4, n3, this);
  }, o3.prototype.onesLike = function(t4) {
    if ("string" === t4.dtype) throw new Error("onesLike is not supported for string tensors");
    return this.fill(t4.shape, 1, t4.dtype);
  }, o3.prototype.zerosLike = function(t4) {
    var e3 = P2(t4.dtype, k2(t4.shape));
    return this.makeOutput(e3, t4.shape, t4.dtype);
  }, o3.prototype.linspace = function(t4, e3, n3) {
    return ka2(t4, e3, n3);
  }, o3.prototype.scatter = function(t4, e3, n3, r3, o4, a3, i3, s3, u3, c3) {
    var l3 = [r3 / o4, o4], h3 = this.readSync(t4.dataId), f3 = this.readSync(e3.dataId);
    if (0 === r3) return Fn2([], n3, e3.dtype);
    var d3 = new mt2(l3, e3.dtype);
    d3.values.fill(this.readSync(u3.dataId)[0]);
    for (var p3 = 0; p3 < a3; p3++) {
      for (var v2 = [], g2 = 0, m3 = 0; m3 < i3; m3++) {
        var y3 = h3[p3 * i3 + m3];
        v2.push(y3), g2 += y3 * s3[m3];
      }
      if (g2 < 0 || g2 >= r3 / o4) throw new Error("Invalid indices: " + v2 + " does not index into " + n3);
      for (var x3 = 0; x3 < o4; x3++) c3 ? d3.values[g2 * o4 + x3] += f3[p3 * o4 + x3] : d3.values[g2 * o4 + x3] = 0 === e3.rank ? f3[0] : f3[p3 * o4 + x3];
    }
    return d3.toTensor().reshape(n3);
  }, o3;
}(la2);
function yf(t3, e3) {
  return { kernelName: t3, backendName: "cpu", kernelFunc: function(n3) {
    var r3 = n3.inputs, o3 = n3.backend, a3 = r3, i3 = a3.a, s3 = a3.b, u3 = o3;
    df([i3, s3], t3);
    var c3 = u3.data.get(i3.dataId).values, l3 = u3.data.get(s3.dataId).values, h3 = e3(i3.shape, s3.shape, c3, l3, i3.dtype), f3 = h3[0], d3 = h3[1];
    return { dataId: u3.write(f3, d3, i3.dtype), shape: d3, dtype: i3.dtype };
  } };
}
function xf(t3) {
  return function(e3, n3, r3, o3, a3) {
    var i3 = Pr2(e3, n3), s3 = i3.length, u3 = $2(i3), c3 = B2(a3, k2(i3)), l3 = e3.length, h3 = n3.length, f3 = $2(e3), d3 = $2(n3), p3 = Mr2(e3, i3), v2 = Mr2(n3, i3);
    if (p3.length + v2.length === 0) for (var g2 = 0; g2 < c3.length; ++g2) c3[g2] = t3(r3[g2 % r3.length], o3[g2 % o3.length]);
    else {
      var m3 = function(e4) {
        var n4 = it2(e4, s3, u3), a4 = n4.slice(-l3);
        p3.forEach(function(t4) {
          return a4[t4] = 0;
        });
        var i4 = at2(a4, l3, f3), g3 = n4.slice(-h3);
        v2.forEach(function(t4) {
          return g3[t4] = 0;
        });
        var m4 = at2(g3, h3, d3);
        c3[e4] = t3(r3[i4], o3[m4]);
      };
      for (g2 = 0; g2 < c3.length; ++g2) m3(g2);
    }
    return [c3, i3];
  };
}
Lt2.registerBackend("cpu", function() {
  return new mf();
}, 1);
var bf = xf(function(t3, e3) {
  return t3 / e3;
});
var wf = yf(wr2, bf);
var Cf = { kernelName: "MaxPoolWithArgmax", backendName: "cpu", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.attrs, r3 = t3.backend, o3 = e3.x, a3 = n3, i3 = a3.filterSize, s3 = a3.strides, u3 = a3.pad, c3 = a3.includeBatchInIndex, l3 = r3;
  df(o3, "MaxPoolWithArgmax");
  var h3 = l3.data.get(o3.dataId).values, f3 = fa2(o3.shape, i3, s3, [1, 1], u3), d3 = function(t4, e4, n4, r4, o4) {
    var a4 = pf(t4, 0, n4, $2(e4), o4, "max"), i4 = vf(t4, e4, n4, o4, true, r4);
    return [a4.values, i4.values];
  }(h3, o3.shape, o3.dtype, c3, f3), p3 = d3[0], v2 = d3[1], g2 = l3.write(p3, f3.outShape, o3.dtype), m3 = l3.write(v2, f3.outShape, o3.dtype);
  return [{ dataId: g2, shape: f3.outShape, dtype: o3.dtype }, { dataId: m3, shape: f3.outShape, dtype: "int32" }];
} };
var Ef = { kernelName: "NonMaxSuppressionV5", backendName: "cpu", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = t3.attrs, o3 = e3, a3 = o3.boxes, i3 = o3.scores, s3 = r3, u3 = s3.maxOutputSize, c3 = s3.iouThreshold, l3 = s3.scoreThreshold, h3 = s3.softNmsSigma, f3 = n3;
  df(a3, "NonMaxSuppressionWithScore");
  var d3 = Ma2(f3.data.get(a3.dataId).values, f3.data.get(i3.dataId).values, u3, c3, l3, h3);
  return [d3.selectedIndices, d3.selectedScores];
} };
var Rf = { kernelName: "Square", backendName: "cpu", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = e3.x, o3 = n3;
  df(r3, "square");
  for (var a3 = o3.data.get(r3.dataId).values, i3 = new Float32Array(a3.length), s3 = 0; s3 < a3.length; ++s3) {
    var u3 = a3[s3];
    i3[s3] = u3 * u3;
  }
  return { dataId: o3.write(i3, r3.shape, r3.dtype), shape: r3.shape, dtype: r3.dtype };
} };
var If = xf(function(t3, e3) {
  var n3 = t3 - e3;
  return n3 * n3;
});
function kf(t3, e3, n3, r3, o3) {
  for (var a3 = k2(e3), i3 = e3.length, s3 = $2(e3), u3 = $2(o3), c3 = B2(n3, k2(o3)), l3 = 0; l3 < a3; ++l3) {
    for (var h3 = it2(l3, i3, s3), f3 = new Array(h3.length), d3 = 0; d3 < f3.length; d3++) f3[d3] = h3[r3[d3]];
    c3[at2(f3, i3, u3)] = t3[l3];
  }
  return c3;
}
for (Sf = 0, Af = [Ef, Rf, yf(Er2, If), wf, { kernelName: "Transpose", backendName: "cpu", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.attrs, r3 = t3.backend, o3 = e3.x, a3 = n3.perm, i3 = r3;
  df(o3, "transpose");
  for (var s3 = o3.shape.length, u3 = new Array(s3), c3 = 0; c3 < u3.length; c3++) u3[c3] = o3.shape[a3[c3]];
  var l3 = kf(i3.data.get(o3.dataId).values, o3.shape, o3.dtype, a3, u3);
  return { dataId: i3.write(l3, u3, o3.dtype), shape: u3, dtype: o3.dtype };
} }, Cf]; Sf < Af.length; Sf++) {
  d2(Af[Sf]);
}
var Sf;
var Af;
var Tf;
var Df = function(t3) {
  this.variableNames = ["A"];
  var e3 = Ya2(), n3 = t3[0], r3 = t3[1];
  this.outputShape = t3, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r3 + ".0, " + n3 + ".0);\n\n        vec4 values = " + e3.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
};
var Nf = function(t3) {
  this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
  var e3 = Ya2(), n3 = t3[0], r3 = t3[1];
  this.outputShape = t3, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(" + r3 + ".0, " + n3 + ".0);\n            vec4 values = " + e3.texture2D + "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " + e3.output + " = result;\n      }\n    ";
};
var Ff = function(t3, e3) {
  this.variableNames = ["A"];
  for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[e3[r3]];
  this.outputShape = n3, this.rank = n3.length;
  var o3 = ui2(this.rank), a3 = function(t4) {
    var e4 = t4.length;
    if (e4 > 6) throw Error("Transpose for rank " + e4 + " is not yet supported");
    for (var n4 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], r4 = new Array(e4), o4 = 0; o4 < t4.length; o4++) r4[t4[o4]] = n4[o4];
    return r4.join();
  }(e3);
  this.userCode = "\n    void main() {\n      " + o3 + " resRC = getOutputCoords();\n      setOutput(getA(" + a3 + "));\n    }\n    ";
};
var _f = function(t3, e3) {
  this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
  for (var n3 = new Array(t3.length), r3 = 0; r3 < n3.length; r3++) n3[r3] = t3[e3[r3]];
  if (this.outputShape = n3, this.rank = n3.length, this.rank > 6) throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
  var o3 = ui2(this.rank), a3 = ja2("rc", this.rank), i3 = new Array(this.rank);
  for (r3 = 0; r3 < e3.length; r3++) i3[e3[r3]] = a3[r3];
  var s3 = "vec2(" + i3.slice(-2).join() + ")", u3 = "++" + a3[this.rank - 1] + " < " + n3[this.rank - 1], c3 = "getChannel(getA(" + i3.join() + "), " + s3 + ")";
  this.userCode = "\n    void main() {\n      " + o3 + " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " + c3 + ";\n      if(" + u3 + ") {\n        result[1] = " + c3 + ";\n      }\n      --" + a3[this.rank - 1] + ";\n      if(++" + a3[this.rank - 2] + " < " + n3[this.rank - 2] + ") {\n        result[2] = " + c3 + ";\n        if(" + u3 + ") {\n          result[3] = " + c3 + ";\n        }\n      }\n      setOutput(result);\n    }\n    ";
};
for (Of = 0, Mf = [{ kernelName: "FromPixels", backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = t3.attrs, o3 = e3.pixels, a3 = r3.numChannels, s3 = "undefined" != typeof HTMLVideoElement && o3 instanceof HTMLVideoElement, u3 = "undefined" != typeof HTMLImageElement && o3 instanceof HTMLImageElement, c3 = s3 ? [o3.videoWidth, o3.videoHeight] : [o3.width, o3.height], l3 = c3[0], h3 = c3[1], f3 = [h3, l3], d3 = [h3, l3, a3];
  (u3 || s3) && (null == Tf && (Tf = document.createElement("canvas").getContext("2d")), Tf.canvas.width = l3, Tf.canvas.height = h3, Tf.drawImage(o3, 0, 0, l3, h3), o3 = Tf.canvas);
  var p3 = n3.makeTensorInfo(f3, "int32");
  n3.texData.get(p3.dataId).usage = zt2.PIXELS, n3.gpgpu.uploadPixelDataToTexture(n3.getTexture(p3.dataId), o3);
  var v2 = i2().getBool("WEBGL_PACK") ? new Nf(d3) : new Df(d3), g2 = n3.runWebGLProgram(v2, [p3], "int32");
  return n3.disposeData(p3.dataId), g2;
} }, { kernelName: wr2, backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = e3;
  return function(t4, e4, n4) {
    var r4 = new Ri2(Ci2, t4.shape, e4.shape);
    return i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") && (r4 = new Si2(Ii2, t4.shape, e4.shape, true)), n4.runWebGLProgram(r4, [t4, e4], "float32");
  }(r3.a, r3.b, n3);
} }, { kernelName: "NonMaxSuppressionV5", backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = t3.attrs;
  dn2("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  var o3 = e3, a3 = o3.boxes, i3 = o3.scores, s3 = r3, u3 = s3.maxOutputSize, c3 = s3.iouThreshold, l3 = s3.scoreThreshold, h3 = s3.softNmsSigma, f3 = n3, d3 = Ma2(f3.readSync(a3.dataId), f3.readSync(i3.dataId), u3, c3, l3, h3);
  return [d3.selectedIndices, d3.selectedScores];
} }, { kernelName: "Square", backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = e3.x, o3 = n3, a3 = new cu2(r3.shape, "return x * x;");
  return o3.runWebGLProgram(a3, [r3], r3.dtype);
} }, { kernelName: Er2, backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.backend, r3 = e3, o3 = r3.a, a3 = r3.b, s3 = n3, u3 = i2().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Si2("return (a - b) * (a - b);", o3.shape, a3.shape) : new Ri2("return (a - b) * (a - b);", o3.shape, a3.shape);
  return s3.compileAndRun(u3, [o3, a3]);
} }, { kernelName: "Transpose", backendName: "webgl", kernelFunc: function(t3) {
  for (var e3, n3 = t3.inputs, r3 = t3.attrs, o3 = t3.backend, a3 = n3.x, s3 = r3.perm, u3 = o3, c3 = a3.shape.length, l3 = new Array(c3), h3 = 0; h3 < l3.length; h3++) l3[h3] = a3.shape[s3[h3]];
  if (u3.shouldExecuteOnCPU([a3])) {
    var f3 = kf(u3.texData.get(a3.dataId).values, a3.shape, a3.dtype, s3, l3);
    e3 = u3.makeTensorInfo(l3, a3.dtype), u3.texData.get(e3.dataId).values = f3;
  } else e3 = function(t4, e4, n4) {
    var r4 = i2().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new _f(t4.shape, e4) : new Ff(t4.shape, e4);
    return n4.runWebGLProgram(r4, [t4], t4.dtype);
  }(a3, s3, u3);
  return e3;
} }, { kernelName: "MaxPoolWithArgmax", backendName: "webgl", kernelFunc: function(t3) {
  var e3 = t3.inputs, n3 = t3.attrs, r3 = t3.backend, o3 = e3.x, a3 = n3, i3 = a3.filterSize, s3 = a3.strides, u3 = a3.pad, c3 = a3.includeBatchInIndex, l3 = r3;
  C2(4 === o3.shape.length, function() {
    return "Error in maxPool: input must be rank 4 but got rank " + o3.shape.length + ".";
  });
  var h3 = [1, 1];
  C2(Ca2(s3, h3), function() {
    return "Error in maxPool: Either strides or dilations must be 1. Got strides " + s3 + " and dilations '" + h3 + "'";
  });
  var f3 = fa2(o3.shape, i3, s3, h3, u3), d3 = function(t4, e4, n4, r4) {
    var o4 = new Ws2(n4, "max", false), a4 = r4.runWebGLProgram(o4, [t4], "float32");
    return o4 = new Ws2(n4, "max", true, true, e4), [a4, r4.runWebGLProgram(o4, [t4], "float32")];
  }(o3, c3, f3, l3);
  return [d3[0], d3[1]];
} }]; Of < Mf.length; Of++) {
  d2(Mf[Of]);
}
var Of;
var Mf;
for (Bf = 0, Pf = [{ kernelName: xr2, inputsToSave: ["a", "b"], gradFunc: function(t3, e3) {
  var n3 = e3[0], r3 = e3[1], o3 = Pr2(n3.shape, r3.shape);
  return { a: function() {
    var e4 = t3, r4 = Br2(n3.shape, o3);
    return r4.length > 0 && (e4 = e4.sum(r4)), e4.reshape(n3.shape);
  }, b: function() {
    var e4 = t3, n4 = Br2(r3.shape, o3);
    return n4.length > 0 && (e4 = e4.sum(n4)), e4.reshape(r3.shape);
  } };
} }, { kernelName: "AddN", saveAllInputs: true, gradFunc: function(t3, e3) {
  var n3 = {};
  return e3.forEach(function(e4, r3) {
    n3[r3] = function() {
      return t3.clone();
    };
  }), n3;
} }, { kernelName: Sr2, gradFunc: function(t3, e3, n3) {
  for (var r3 = n3, o3 = r3.inputShape, a3 = r3.shape, i3 = Array.from(a3), s3 = o3.length - 1; s3 >= 0; s3--) if (o3[s3] === a3[s3]) i3[s3] = 1;
  else if (1 !== o3[s3]) throw new Error("broadcastTo(): [" + o3 + "] cannot be broadcast to [" + a3 + "].");
  var u3 = [];
  for (s3 = 0; s3 < i3.length; s3++) i3[s3] > 1 && u3.push(s3);
  return { x: function() {
    return t3.sum(u3, true);
  } };
} }, { kernelName: wr2, inputsToSave: ["a", "b"], gradFunc: function(t3, e3) {
  var n3 = e3[0], r3 = e3[1], o3 = Pr2(n3.shape, r3.shape);
  return { a: function() {
    var e4 = Bo2(t3, r3.toFloat()), a3 = Br2(n3.shape, o3);
    return a3.length > 0 ? th2(e4, a3).reshape(n3.shape) : e4;
  }, b: function() {
    var e4 = t3.mul(n3.toFloat()), a3 = Br2(r3.shape, o3);
    a3.length > 0 && (e4 = th2(e4, a3).reshape(r3.shape));
    var i3 = Gc2(r3);
    return no2(Bo2(e4, i3.toFloat()));
  } };
} }, { kernelName: "FusedBatchNorm", inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: function(t3, e3, n3) {
  var r3 = n3.varianceEpsilon, o3 = e3[0], a3 = e3[1], i3 = e3[2], s3 = e3[3], u3 = Ju2(o3), c3 = null == s3 ? On2(1) : s3, l3 = Br2(a3.shape, u3.shape), h3 = [];
  if (1 === a3.rank) {
    for (var f3 = 0; f3 < u3.shape.length - 1; ++f3) h3.push(u3.shape[f3]);
    h3.push(1);
  }
  var d3 = Oo2(o3, a3), p3 = To2(t3, c3), v2 = ao2(Or2(i3, On2(r3))), g2 = To2(To2(To2(v2, v2), v2), On2(-0.5));
  return { x: function() {
    return 1 === a3.rank ? ur2(To2(To2(t3, wc2(v2.as4D(1, 1, 1, a3.shape[0]), h3)), c3), o3.shape) : ur2(To2(To2(t3, v2), c3), o3.shape);
  }, mean: function() {
    var t4 = To2(To2(v2, On2(-1)), p3);
    return 1 === a3.rank && (t4 = th2(t4, l3)), ur2(t4, a3.shape);
  }, variance: function() {
    var t4 = To2(To2(g2, d3), p3);
    return 1 === a3.rank && (t4 = th2(t4, l3)), ur2(t4, a3.shape);
  }, scale: function() {
    var e4 = To2(d3, v2), n4 = To2(t3, e4);
    return 1 === a3.rank && (n4 = th2(n4, l3)), ur2(n4, a3.shape);
  }, offset: function() {
    var e4 = t3;
    return 1 === a3.rank && (e4 = th2(e4, l3)), ur2(e4, a3.shape);
  } };
} }, { kernelName: Tr2, gradFunc: function(t3) {
  return { x: function() {
    return t3.toFloat();
  } };
} }, { kernelName: Ar2, inputsToSave: ["indices"], gradFunc: function(t3, e3) {
  var n3 = e3[0];
  return { indices: function() {
    return Gn2(n3.shape, "float32");
  } };
} }, { kernelName: Nr2, inputsToSave: ["x"], gradFunc: function(t3, e3, n3) {
  var r3 = e3[0], o3 = n3.paddings.map(function(t4) {
    return t4[0];
  });
  return { x: function() {
    return t3.slice(o3, r3.shape);
  } };
} }, { kernelName: "Square", inputsToSave: ["x"], gradFunc: function(t3, e3) {
  var n3 = e3[0];
  return { x: function() {
    return t3.mul(n3.toFloat().mul(2));
  } };
} }, { kernelName: Er2, inputsToSave: ["a", "b"], gradFunc: function(t3, e3) {
  var n3 = e3[0], r3 = e3[1], o3 = On2(2);
  return { a: function() {
    return To2(t3, To2(o3, Oo2(n3, r3)));
  }, b: function() {
    return To2(t3, To2(o3, Oo2(r3, n3)));
  } };
} }, { kernelName: Dr2, inputsToSave: ["x"], gradFunc: function(t3, e3, n3) {
  var r3 = e3[0], o3 = n3.reps;
  return { x: function() {
    var e4 = Xn2(r3);
    if (1 === r3.rank) for (var n4 = 0; n4 < o3[0]; ++n4) e4 = e4.add(t3.slice([n4 * r3.shape[0]], [r3.shape[0]]));
    else if (2 === r3.rank) for (n4 = 0; n4 < o3[0]; ++n4) for (var a3 = 0; a3 < o3[1]; ++a3) e4 = e4.add(t3.slice([n4 * r3.shape[0], a3 * r3.shape[1]], [r3.shape[0], r3.shape[1]]));
    else if (3 === r3.rank) for (n4 = 0; n4 < o3[0]; ++n4) for (a3 = 0; a3 < o3[1]; ++a3) for (var i3 = 0; i3 < o3[2]; ++i3) e4 = e4.add(t3.slice([n4 * r3.shape[0], a3 * r3.shape[1], i3 * r3.shape[2]], [r3.shape[0], r3.shape[1], r3.shape[2]]));
    else {
      if (4 !== r3.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + r3.rank + " tensors yet.");
      for (n4 = 0; n4 < o3[0]; ++n4) for (a3 = 0; a3 < o3[1]; ++a3) for (i3 = 0; i3 < o3[2]; ++i3) for (var s3 = 0; s3 < o3[3]; ++s3) e4 = e4.add(t3.slice([n4 * r3.shape[0], a3 * r3.shape[1], i3 * r3.shape[2], s3 * r3.shape[3]], [r3.shape[0], r3.shape[1], r3.shape[2], r3.shape[3]]));
    }
    return e4;
  } };
} }, { kernelName: "Transpose", gradFunc: function(t3, e3, n3) {
  var r3 = Rn2(n3.perm);
  return { x: function() {
    return ua2(t3, r3);
  } };
} }]; Bf < Pf.length; Bf++) {
  p2(Pf[Bf]);
}
var Bf;
var Pf;
var Lf = function() {
  function t3() {
  }
  return t3.prototype.fetch = function(t4, e3) {
    return fetch(t4, e3);
  }, t3.prototype.now = function() {
    return performance.now();
  }, t3.prototype.encode = function(t4, e3) {
    if ("utf-8" !== e3 && "utf8" !== e3) throw new Error("Browser's encoder only supports utf-8, but got " + e3);
    return null == this.textEncoder && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t4);
  }, t3.prototype.decode = function(t4, e3) {
    return new TextDecoder(e3).decode(t4);
  }, t3;
}();
i2().get("IS_BROWSER") && i2().setPlatform("browser", new Lf());
var Wf;
var Uf = function() {
  return require_node_fetch();
};
var Vf = function() {
  function t3() {
    this.util = require_util(), this.textEncoder = new this.util.TextEncoder();
  }
  return t3.prototype.fetch = function(t4, e3) {
    return null != i2().global.fetch ? i2().global.fetch(t4, e3) : (null == Wf && (Wf = Uf()), Wf(t4, e3));
  }, t3.prototype.now = function() {
    var t4 = process.hrtime();
    return 1e3 * t4[0] + t4[1] / 1e6;
  }, t3.prototype.encode = function(t4, e3) {
    if ("utf-8" !== e3 && "utf8" !== e3) throw new Error("Node built-in encoder only supports utf-8, but got " + e3);
    return this.textEncoder.encode(t4);
  }, t3.prototype.decode = function(t4, e3) {
    return 0 === t4.length ? "" : new this.util.TextDecoder(e3).decode(t4);
  }, t3;
}();
i2().get("IS_NODE") && i2().setPlatform("node", new Vf());
var zf = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 };
var Gf = 4;
function Hf(t3, e3) {
  for (var n3 = {}, r3 = 0, o3 = function(e4) {
    var o4 = e4.name, a4 = e4.dtype, i4 = e4.shape, s3 = k2(i4), u3 = void 0;
    if ("quantization" in e4) {
      var c3 = e4.quantization;
      if ("uint8" !== c3.dtype && "uint16" !== c3.dtype) throw new Error("Weight " + e4.name + " has unknown quantization dtype " + c3.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
      var l3 = zf[c3.dtype], h3 = t3.slice(r3, r3 + s3 * l3), f3 = "uint8" === c3.dtype ? new Uint8Array(h3) : new Uint16Array(h3);
      if ("float32" === a4) u3 = Float32Array.from(f3, function(t4) {
        return t4 * c3.scale + c3.min;
      });
      else {
        if ("int32" !== a4) throw new Error("Unsupported dtype in weight '" + o4 + "': " + a4);
        u3 = Int32Array.from(f3, function(t4) {
          return Math.round(t4 * c3.scale + c3.min);
        });
      }
      r3 += s3 * l3;
    } else if ("string" === a4) {
      var d3 = k2(e4.shape);
      u3 = [];
      for (var p3 = 0; p3 < d3; p3++) {
        var v2 = new Uint32Array(t3.slice(r3, r3 + Gf))[0];
        r3 += Gf;
        var g2 = new Uint8Array(t3.slice(r3, r3 + v2));
        u3.push(g2), r3 += v2;
      }
    } else {
      var m3 = zf[a4];
      h3 = t3.slice(r3, r3 + s3 * m3);
      if ("float32" === a4) u3 = new Float32Array(h3);
      else if ("int32" === a4) u3 = new Int32Array(h3);
      else {
        if ("bool" !== a4) throw new Error("Unsupported dtype in weight '" + o4 + "': " + a4);
        u3 = new Uint8Array(h3);
      }
      r3 += s3 * m3;
    }
    n3[o4] = Fn2(u3, i4, a4);
  }, a3 = 0, i3 = e3; a3 < i3.length; a3++) {
    o3(i3[a3]);
  }
  return n3;
}
function qf(t3) {
  if (null === t3) throw new Error("Invalid input value: " + JSON.stringify(t3));
  var e3 = 0, n3 = [];
  t3.forEach(function(t4) {
    if (e3 += t4.byteLength, n3.push(t4.byteLength === t4.buffer.byteLength ? t4 : new t4.constructor(t4)), !(t4 instanceof Float32Array || t4 instanceof Int32Array || t4 instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + t4.constructor.name);
  });
  var r3 = new Uint8Array(e3), o3 = 0;
  return n3.forEach(function(t4) {
    r3.set(new Uint8Array(t4.buffer), o3), o3 += t4.byteLength;
  }), r3.buffer;
}
var Kf = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
function jf(t3) {
  return Kf ? Buffer.byteLength(t3) : new Blob([t3]).size;
}
function Xf(t3) {
  var e3 = 0;
  t3.forEach(function(t4) {
    e3 += t4.byteLength;
  });
  var n3 = new Uint8Array(e3), r3 = 0;
  return t3.forEach(function(t4) {
    n3.set(new Uint8Array(t4), r3), r3 += t4.byteLength;
  }), n3.buffer;
}
function Yf(t3) {
  for (t3 = t3.trim(); t3.endsWith("/"); ) t3 = t3.slice(0, t3.length - 1);
  var e3 = t3.split("/");
  return e3[e3.length - 1];
}
function $f(t3) {
  if (t3.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: null == t3.modelTopology ? 0 : jf(JSON.stringify(t3.modelTopology)), weightSpecsBytes: null == t3.weightSpecs ? 0 : jf(JSON.stringify(t3.weightSpecs)), weightDataBytes: null == t3.weightData ? 0 : t3.weightData.byteLength };
}
var Qf = function() {
  function t3() {
    this.saveRouters = [], this.loadRouters = [];
  }
  return t3.getInstance = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.registerSaveRouter = function(e3) {
    t3.getInstance().saveRouters.push(e3);
  }, t3.registerLoadRouter = function(e3) {
    t3.getInstance().loadRouters.push(e3);
  }, t3.getSaveHandlers = function(e3) {
    return t3.getHandlers(e3, "save");
  }, t3.getLoadHandlers = function(e3, n3) {
    return t3.getHandlers(e3, "load", n3);
  }, t3.getHandlers = function(e3, n3, r3) {
    var o3 = [];
    return ("load" === n3 ? t3.getInstance().loadRouters : t3.getInstance().saveRouters).forEach(function(t4) {
      var n4 = t4(e3, r3);
      null !== n4 && o3.push(n4);
    }), o3;
  }, t3;
}();
var Jf = "://";
var Zf = function() {
  function t3() {
    this.managers = {};
  }
  return t3.getInstance = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.registerManager = function(e3, n3) {
    C2(null != e3, function() {
      return "scheme must not be undefined or null.";
    }), e3.endsWith(Jf) && (e3 = e3.slice(0, e3.indexOf(Jf))), C2(e3.length > 0, function() {
      return "scheme must not be an empty string.";
    });
    var r3 = t3.getInstance();
    C2(null == r3.managers[e3], function() {
      return "A model store manager is already registered for scheme '" + e3 + "'.";
    }), r3.managers[e3] = n3;
  }, t3.getManager = function(t4) {
    var e3 = this.getInstance().managers[t4];
    if (null == e3) throw new Error("Cannot find model manager for scheme '" + t4 + "'");
    return e3;
  }, t3.getSchemes = function() {
    return Object.keys(this.getInstance().managers);
  }, t3;
}();
function td(t3) {
  if (-1 === t3.indexOf(Jf)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + Zf.getSchemes().join(","));
  return { scheme: t3.split(Jf)[0], path: t3.split(Jf)[1] };
}
function ed(t3, e3, o3) {
  return void 0 === o3 && (o3 = false), n2(this, void 0, void 0, function() {
    var n3, a3, i3, s3, u3, c3, l3, h3, f3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return C2(t3 !== e3, function() {
            return "Old path and new path are the same: '" + t3 + "'";
          }), C2((n3 = Qf.getLoadHandlers(t3)).length > 0, function() {
            return "Copying failed because no load handler is found for source URL " + t3 + ".";
          }), C2(n3.length < 2, function() {
            return "Copying failed because more than one (" + n3.length + ") load handlers for source URL " + t3 + ".";
          }), a3 = n3[0], C2((i3 = Qf.getSaveHandlers(e3)).length > 0, function() {
            return "Copying failed because no save handler is found for destination URL " + e3 + ".";
          }), C2(i3.length < 2, function() {
            return "Copying failed because more than one (" + n3.length + ") save handlers for destination URL " + e3 + ".";
          }), s3 = i3[0], u3 = td(t3).scheme, c3 = td(t3).path, l3 = u3 === td(t3).scheme, [4, a3.load()];
        case 1:
          return h3 = r3.sent(), o3 && l3 ? [4, Zf.getManager(u3).removeModel(c3)] : [3, 3];
        case 2:
          r3.sent(), r3.label = 3;
        case 3:
          return [4, s3.save(h3)];
        case 4:
          return f3 = r3.sent(), !o3 || l3 ? [3, 6] : [4, Zf.getManager(u3).removeModel(c3)];
        case 5:
          r3.sent(), r3.label = 6;
        case 6:
          return [2, f3.modelArtifactsInfo];
      }
    });
  });
}
var nd = "models_store";
var rd = "model_info_store";
function od() {
  if (!i2().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  var t3 = window || self, e3 = t3.indexedDB || t3.mozIndexedDB || t3.webkitIndexedDB || t3.msIndexedDB || t3.shimIndexedDB;
  if (null == e3) throw new Error("The current browser does not appear to support IndexedDB.");
  return e3;
}
function ad(t3) {
  var e3 = t3.result;
  e3.createObjectStore(nd, { keyPath: "modelPath" }), e3.createObjectStore(rd, { keyPath: "modelPath" });
}
var id = function() {
  function t3(t4) {
    if (this.indexedDB = od(), null == t4 || !t4) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t4;
  }
  return t3.prototype.save = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        return [2, this.databaseAction(this.modelPath, t4)];
      });
    });
  }, t3.prototype.load = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        return [2, this.databaseAction(this.modelPath)];
      });
    });
  }, t3.prototype.databaseAction = function(t4, e3) {
    var n3 = this;
    return new Promise(function(t5, r3) {
      var o3 = n3.indexedDB.open("tensorflowjs", 1);
      o3.onupgradeneeded = function() {
        return ad(o3);
      }, o3.onsuccess = function() {
        var a3 = o3.result;
        if (null == e3) {
          var i3 = a3.transaction(nd, "readonly"), s3 = i3.objectStore(nd).get(n3.modelPath);
          s3.onsuccess = function() {
            if (null == s3.result) return a3.close(), r3(new Error("Cannot find model with path '" + n3.modelPath + "' in IndexedDB."));
            t5(s3.result.modelArtifacts);
          }, s3.onerror = function(t6) {
            return a3.close(), r3(s3.error);
          }, i3.oncomplete = function() {
            return a3.close();
          };
        } else {
          var u3, c3 = $f(e3), l3 = a3.transaction(rd, "readwrite"), h3 = l3.objectStore(rd), f3 = h3.put({ modelPath: n3.modelPath, modelArtifactsInfo: c3 });
          f3.onsuccess = function() {
            var o4 = (u3 = a3.transaction(nd, "readwrite")).objectStore(nd).put({ modelPath: n3.modelPath, modelArtifacts: e3, modelArtifactsInfo: c3 });
            o4.onsuccess = function() {
              return t5({ modelArtifactsInfo: c3 });
            }, o4.onerror = function(t6) {
              var e4 = (h3 = l3.objectStore(rd)).delete(n3.modelPath);
              e4.onsuccess = function() {
                return a3.close(), r3(o4.error);
              }, e4.onerror = function(t7) {
                return a3.close(), r3(o4.error);
              };
            };
          }, f3.onerror = function(t6) {
            return a3.close(), r3(f3.error);
          }, l3.oncomplete = function() {
            null == u3 ? a3.close() : u3.oncomplete = function() {
              return a3.close();
            };
          };
        }
      }, o3.onerror = function(t6) {
        return r3(o3.error);
      };
    });
  }, t3.URL_SCHEME = "indexeddb://", t3;
}();
var sd = function(t3) {
  return i2().getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(id.URL_SCHEME) ? (e3 = t3.slice(id.URL_SCHEME.length), new id(e3)) : null;
  var e3;
};
Qf.registerSaveRouter(sd), Qf.registerLoadRouter(sd);
var ud = function() {
  function t3() {
    this.indexedDB = od();
  }
  return t3.prototype.listModels = function() {
    return n2(this, void 0, void 0, function() {
      var t4 = this;
      return r2(this, function(e3) {
        return [2, new Promise(function(e4, n3) {
          var r3 = t4.indexedDB.open("tensorflowjs", 1);
          r3.onupgradeneeded = function() {
            return ad(r3);
          }, r3.onsuccess = function() {
            var t5 = r3.result, o3 = t5.transaction(rd, "readonly"), a3 = o3.objectStore(rd).getAll();
            a3.onsuccess = function() {
              for (var t6 = {}, n4 = 0, r4 = a3.result; n4 < r4.length; n4++) {
                var o4 = r4[n4];
                t6[o4.modelPath] = o4.modelArtifactsInfo;
              }
              e4(t6);
            }, a3.onerror = function(e5) {
              return t5.close(), n3(a3.error);
            }, o3.oncomplete = function() {
              return t5.close();
            };
          }, r3.onerror = function(t5) {
            return n3(r3.error);
          };
        })];
      });
    });
  }, t3.prototype.removeModel = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3 = this;
      return r2(this, function(n3) {
        var r3;
        return t4 = (r3 = t4).startsWith(id.URL_SCHEME) ? r3.slice(id.URL_SCHEME.length) : r3, [2, new Promise(function(n4, r4) {
          var o3 = e3.indexedDB.open("tensorflowjs", 1);
          o3.onupgradeneeded = function() {
            return ad(o3);
          }, o3.onsuccess = function() {
            var e4, a3 = o3.result, i3 = a3.transaction(rd, "readwrite"), s3 = i3.objectStore(rd), u3 = s3.get(t4);
            u3.onsuccess = function() {
              if (null == u3.result) return a3.close(), r4(new Error("Cannot find model with path '" + t4 + "' in IndexedDB."));
              var o4 = s3.delete(t4), i4 = function() {
                var o5 = (e4 = a3.transaction(nd, "readwrite")).objectStore(nd).delete(t4);
                o5.onsuccess = function() {
                  return n4(u3.result.modelArtifactsInfo);
                }, o5.onerror = function(t5) {
                  return r4(u3.error);
                };
              };
              o4.onsuccess = i4, o4.onerror = function(t5) {
                return i4(), a3.close(), r4(u3.error);
              };
            }, u3.onerror = function(t5) {
              return a3.close(), r4(u3.error);
            }, i3.oncomplete = function() {
              null == e4 ? a3.close() : e4.oncomplete = function() {
                return a3.close();
              };
            };
          }, o3.onerror = function(t5) {
            return r4(o3.error);
          };
        })];
      });
    });
  }, t3;
}();
if (i2().getBool("IS_BROWSER")) try {
  Zf.registerManager(id.URL_SCHEME, new ud());
} catch (t3) {
}
var cd = "/";
var ld = "tensorflowjs_models";
var hd = "info";
var fd = "model_topology";
var dd = "weight_specs";
var pd = "weight_data";
var vd = "model_metadata";
function gd(t3) {
  return { info: [ld, t3, hd].join(cd), topology: [ld, t3, fd].join(cd), weightSpecs: [ld, t3, dd].join(cd), weightData: [ld, t3, pd].join(cd), modelMetadata: [ld, t3, vd].join(cd) };
}
function md(t3) {
  var e3 = t3.split(cd);
  if (e3.length < 3) throw new Error("Invalid key format: " + t3);
  return e3.slice(1, e3.length - 1).join(cd);
}
var yd = function() {
  function t3(t4) {
    if (!i2().getBool("IS_BROWSER") || "undefined" == typeof window || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, null == t4 || !t4) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t4, this.keys = gd(this.modelPath);
  }
  return t3.prototype.save = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o3;
      return r2(this, function(r3) {
        if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
        e3 = JSON.stringify(t4.modelTopology), n3 = JSON.stringify(t4.weightSpecs), o3 = $f(t4);
        try {
          return this.LS.setItem(this.keys.info, JSON.stringify(o3)), this.LS.setItem(this.keys.topology, e3), this.LS.setItem(this.keys.weightSpecs, n3), this.LS.setItem(this.keys.weightData, function(t5) {
            if (Kf) return Buffer.from(t5).toString("base64");
            for (var e4 = new Uint8Array(t5), n4 = "", r4 = 0, o4 = e4.length; r4 < o4; r4++) n4 += String.fromCharCode(e4[r4]);
            return btoa(n4);
          }(t4.weightData)), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({ format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy, userDefinedMetadata: t4.userDefinedMetadata })), [2, { modelArtifactsInfo: o3 }];
        } catch (t5) {
          throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + o3.modelTopologyBytes + ", weightSpecsBytes=" + o3.weightSpecsBytes + ", weightDataBytes=" + o3.weightDataBytes + ".");
        }
        return [2];
      });
    });
  }, t3.prototype.load = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3, n3, o3, a3, i3, s3;
      return r2(this, function(r3) {
        if (null == (t4 = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
        if ("JSON" !== t4.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
        if (e3 = {}, null == (n3 = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
        if (e3.modelTopology = n3, null == (o3 = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
        if (e3.weightSpecs = o3, null != (a3 = this.LS.getItem(this.keys.modelMetadata)) && (i3 = JSON.parse(a3), e3.format = i3.format, e3.generatedBy = i3.generatedBy, e3.convertedBy = i3.convertedBy, e3.userDefinedMetadata = i3.userDefinedMetadata), null == (s3 = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
        return e3.weightData = function(t5) {
          if (Kf) {
            var e4 = Buffer.from(t5, "base64");
            return e4.buffer.slice(e4.byteOffset, e4.byteOffset + e4.byteLength);
          }
          for (var n4 = atob(t5), r4 = new Uint8Array(n4.length), o4 = 0; o4 < n4.length; ++o4) r4.set([n4.charCodeAt(o4)], o4);
          return r4.buffer;
        }(s3), [2, e3];
      });
    });
  }, t3.URL_SCHEME = "localstorage://", t3;
}();
var xd = function(t3) {
  return i2().getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(yd.URL_SCHEME) ? (e3 = t3.slice(yd.URL_SCHEME.length), new yd(e3)) : null;
  var e3;
};
Qf.registerSaveRouter(xd), Qf.registerLoadRouter(xd);
var bd = function() {
  function t3() {
    C2(i2().getBool("IS_BROWSER"), function() {
      return "Current environment is not a web browser";
    }), C2("undefined" == typeof window || void 0 !== window.localStorage, function() {
      return "Current browser does not appear to support localStorage";
    }), this.LS = window.localStorage;
  }
  return t3.prototype.listModels = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3, n3, o3, a3, i3;
      return r2(this, function(r3) {
        for (t4 = {}, e3 = ld + cd, n3 = cd + hd, o3 = 0; o3 < this.LS.length; ++o3) (a3 = this.LS.key(o3)).startsWith(e3) && a3.endsWith(n3) && (i3 = md(a3), t4[i3] = JSON.parse(this.LS.getItem(a3)));
        return [2, t4];
      });
    });
  }, t3.prototype.removeModel = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3;
      return r2(this, function(r3) {
        var o3;
        if (t4 = (o3 = t4).startsWith(yd.URL_SCHEME) ? o3.slice(yd.URL_SCHEME.length) : o3, e3 = gd(t4), null == this.LS.getItem(e3.info)) throw new Error("Cannot find model at path '" + t4 + "'");
        return n3 = JSON.parse(this.LS.getItem(e3.info)), this.LS.removeItem(e3.info), this.LS.removeItem(e3.topology), this.LS.removeItem(e3.weightSpecs), this.LS.removeItem(e3.weightData), [2, n3];
      });
    });
  }, t3;
}();
if (i2().getBool("IS_BROWSER")) try {
  Zf.registerManager(yd.URL_SCHEME, new bd());
} catch (t3) {
}
var wd = "model";
var Cd = ".json";
var Ed = ".weights.bin";
function Rd(t3) {
  return new Promise(function(t4) {
    return setTimeout(t4);
  }).then(t3);
}
var Id = function() {
  function t3(e3) {
    if (!i2().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e3.startsWith(t3.URL_SCHEME) && (e3 = e3.slice(t3.URL_SCHEME.length)), null != e3 && 0 !== e3.length || (e3 = wd), this.modelTopologyFileName = e3 + Cd, this.weightDataFileName = e3 + Ed;
  }
  return t3.prototype.save = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o3, a3, i3, s3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if ("undefined" == typeof document) throw new Error("Browser downloads are not supported in this environment since `document` is not present");
            if (e3 = window.URL.createObjectURL(new Blob([t4.weightData], { type: "application/octet-stream" })), !(t4.modelTopology instanceof ArrayBuffer)) return [3, 1];
            throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
          case 1:
            return n3 = [{ paths: ["./" + this.weightDataFileName], weights: t4.weightSpecs }], o3 = { modelTopology: t4.modelTopology, format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy, weightsManifest: n3 }, a3 = window.URL.createObjectURL(new Blob([JSON.stringify(o3)], { type: "application/json" })), (i3 = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, i3.href = a3, [4, Rd(function() {
              return i3.dispatchEvent(new MouseEvent("click"));
            })];
          case 2:
            return r3.sent(), null == t4.weightData ? [3, 4] : ((s3 = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, s3.href = e3, [4, Rd(function() {
              return s3.dispatchEvent(new MouseEvent("click"));
            })]);
          case 3:
            r3.sent(), r3.label = 4;
          case 4:
            return [2, { modelArtifactsInfo: $f(t4) }];
        }
      });
    });
  }, t3.URL_SCHEME = "downloads://", t3;
}();
var kd = function() {
  function t3(t4) {
    if (null == t4 || t4.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + t4);
    this.files = t4;
  }
  return t3.prototype.load = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3, n3 = this;
      return r2(this, function(r3) {
        return t4 = this.files[0], e3 = this.files.slice(1), [2, new Promise(function(r4, o3) {
          var a3 = new FileReader();
          a3.onload = function(a4) {
            var i3 = JSON.parse(a4.target.result), s3 = i3.modelTopology;
            if (null != s3) {
              0 === e3.length && r4({ modelTopology: s3 });
              var u3 = i3.weightsManifest;
              if (null != u3) {
                var c3;
                try {
                  c3 = n3.checkManifestAndWeightFiles(u3, e3);
                } catch (t5) {
                  return void o3(t5);
                }
                var l3 = [], h3 = [], f3 = [];
                u3.forEach(function(t5) {
                  t5.paths.forEach(function(t6) {
                    h3.push(t6), f3.push(null);
                  }), l3.push.apply(l3, t5.weights);
                }), u3.forEach(function(t5) {
                  t5.paths.forEach(function(t6) {
                    var e4 = new FileReader();
                    e4.onload = function(e5) {
                      var n4 = e5.target.result, o4 = h3.indexOf(t6);
                      f3[o4] = n4, -1 === f3.indexOf(null) && r4({ modelTopology: s3, weightSpecs: l3, weightData: Xf(f3), format: i3.format, generatedBy: i3.generatedBy, convertedBy: i3.convertedBy, userDefinedMetadata: i3.userDefinedMetadata });
                    }, e4.onerror = function(e5) {
                      return o3("Failed to weights data from file of path '" + t6 + "'.");
                    }, e4.readAsArrayBuffer(c3[t6]);
                  });
                });
              } else o3(new Error("weightManifest field is missing from file " + t4.name));
            } else o3(new Error("modelTopology field is missing from file " + t4.name));
          }, a3.onerror = function(e4) {
            return o3("Failed to read model topology and weights manifest JSON from file '" + t4.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
          }, a3.readAsText(t4);
        })];
      });
    });
  }, t3.prototype.checkManifestAndWeightFiles = function(t4, e3) {
    for (var n3 = [], r3 = e3.map(function(t5) {
      return Yf(t5.name);
    }), o3 = {}, a3 = 0, i3 = t4; a3 < i3.length; a3++) {
      i3[a3].paths.forEach(function(t5) {
        var a4 = Yf(t5);
        if (-1 !== n3.indexOf(a4)) throw new Error("Duplicate file basename found in weights manifest: '" + a4 + "'");
        if (n3.push(a4), -1 === r3.indexOf(a4)) throw new Error("Weight file with basename '" + a4 + "' is not provided.");
        o3[t5] = e3[r3.indexOf(a4)];
      });
    }
    if (n3.length !== e3.length) throw new Error("Mismatch in the number of files in weights manifest (" + n3.length + ") and the number of weight files provided (" + e3.length + ").");
    return o3;
  }, t3;
}();
function Sd(t3, e3, n3, r3) {
  !function(t4) {
    C2(null != t4 && Array.isArray(t4) && t4.length > 0, function() {
      return "promises must be a none empty array";
    });
  }(t3), function(t4, e4) {
    C2(t4 >= 0 && t4 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got startFraction " + t4;
    }), C2(e4 >= 0 && e4 <= 1, function() {
      return "Progress fraction must be in range [0, 1], but got endFraction " + e4;
    }), C2(e4 >= t4, function() {
      return "startFraction must be no more than endFraction, but got startFraction " + t4 + " and endFraction " + e4;
    });
  }(n3 = null == n3 ? 0 : n3, r3 = null == r3 ? 1 : r3);
  var o3 = 0;
  return Promise.all(t3.map(function(a3) {
    return a3.then(function(a4) {
      var i3 = n3 + ++o3 / t3.length * (r3 - n3);
      return e3(i3), a4;
    }), a3;
  }));
}
function Ad(t3, e3) {
  return n2(this, void 0, void 0, function() {
    var n3, o3, a3, s3, u3, c3, l3, h3, f3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          return null == e3 && (e3 = {}), n3 = null == e3.fetchFunc ? i2().platform.fetch : e3.fetchFunc, o3 = t3.map(function(t4) {
            return n3(t4, e3.requestInit, { isBinary: true });
          }), a3 = 0, s3 = 0.5, null != e3.onProgress ? [3, 2] : [4, Promise.all(o3)];
        case 1:
          return u3 = r3.sent(), [3, 4];
        case 2:
          return [4, Sd(o3, e3.onProgress, a3, s3)];
        case 3:
          u3 = r3.sent(), r3.label = 4;
        case 4:
          return c3 = u3.map(function(t4) {
            return t4.arrayBuffer();
          }), l3 = 0.5, h3 = 1, null != e3.onProgress ? [3, 6] : [4, Promise.all(c3)];
        case 5:
          return f3 = r3.sent(), [3, 8];
        case 6:
          return [4, Sd(c3, e3.onProgress, l3, h3)];
        case 7:
          f3 = r3.sent(), r3.label = 8;
        case 8:
          return [2, f3];
      }
    });
  });
}
function Td(t3) {
  var e3 = this;
  return function(o3, a3, i3) {
    return void 0 === a3 && (a3 = ""), n2(e3, void 0, void 0, function() {
      var e4, n3, s3, u3, c3, l3, h3, f3, d3, p3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (e4 = o3.map(function() {
              return false;
            }), n3 = {}, s3 = null != i3 ? i3.map(function() {
              return false;
            }) : [], u3 = [], o3.forEach(function(t4, r4) {
              var o4 = 0;
              t4.weights.forEach(function(t5) {
                var a4 = "quantization" in t5 ? t5.quantization.dtype : t5.dtype, c4 = zf[a4] * k2(t5.shape), l4 = function() {
                  e4[r4] = true, null == n3[r4] && (n3[r4] = []), n3[r4].push({ manifestEntry: t5, groupOffset: o4, sizeBytes: c4 });
                };
                null != i3 ? i3.forEach(function(e5, n4) {
                  e5 === t5.name && (l4(), s3[n4] = true);
                }) : l4(), u3.push(t5.name), o4 += c4;
              });
            }), !s3.every(function(t4) {
              return t4;
            })) throw c3 = i3.filter(function(t4, e5) {
              return !s3[e5];
            }), new Error("Could not find weights in manifest with names: " + c3.join(", ") + ". \nManifest JSON has weights with names: " + u3.join(", ") + ".");
            return l3 = e4.reduce(function(t4, e5, n4) {
              return e5 && t4.push(n4), t4;
            }, []), h3 = [], l3.forEach(function(t4) {
              o3[t4].paths.forEach(function(t5) {
                var e5 = a3 + (a3.endsWith("/") ? "" : "/") + t5;
                h3.push(e5);
              });
            }), [4, t3(h3)];
          case 1:
            return f3 = r3.sent(), d3 = {}, p3 = 0, l3.forEach(function(t4) {
              for (var e5 = o3[t4].paths.length, r4 = 0, a4 = 0; a4 < e5; a4++) r4 += f3[p3 + a4].byteLength;
              for (var i4 = new ArrayBuffer(r4), s4 = new Uint8Array(i4), u4 = 0, c4 = 0; c4 < e5; c4++) {
                var l4 = new Uint8Array(f3[p3 + c4]);
                s4.set(l4, u4), u4 += l4.byteLength;
              }
              n3[t4].forEach(function(t5) {
                var e6 = Hf(i4.slice(t5.groupOffset, t5.groupOffset + t5.sizeBytes), [t5.manifestEntry]);
                for (var n4 in e6) d3[n4] = e6[n4];
              }), p3 += e5;
            }), [2, d3];
        }
      });
    });
  };
}
Qf.registerSaveRouter(function(t3) {
  return i2().getBool("IS_BROWSER") && !Array.isArray(t3) && t3.startsWith(Id.URL_SCHEME) ? function(t4) {
    void 0 === t4 && (t4 = "model");
    return new Id(t4);
  }(t3.slice(Id.URL_SCHEME.length)) : null;
});
var Dd = function() {
  function t3(t4, e3) {
    if (this.DEFAULT_METHOD = "POST", null == e3 && (e3 = {}), this.weightPathPrefix = e3.weightPathPrefix, this.onProgress = e3.onProgress, null != e3.fetchFunc ? (C2("function" == typeof e3.fetchFunc, function() {
      return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
    }), this.fetch = e3.fetchFunc) : this.fetch = i2().platform.fetch, C2(null != t4 && t4.length > 0, function() {
      return "URL path for http must not be null, undefined or empty.";
    }), Array.isArray(t4) && C2(2 === t4.length, function() {
      return "URL paths for http must have a length of 2, (actual length is " + t4.length + ").";
    }), this.path = t4, null != e3.requestInit && null != e3.requestInit.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e3.requestInit || {};
  }
  return t3.prototype.save = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o3, a3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            if (t4.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
            return (e3 = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit)).body = new FormData(), n3 = [{ paths: ["./model.weights.bin"], weights: t4.weightSpecs }], o3 = { modelTopology: t4.modelTopology, format: t4.format, generatedBy: t4.generatedBy, convertedBy: t4.convertedBy, userDefinedMetadata: t4.userDefinedMetadata, weightsManifest: n3 }, e3.body.append("model.json", new Blob([JSON.stringify(o3)], { type: "application/json" }), "model.json"), null != t4.weightData && e3.body.append("model.weights.bin", new Blob([t4.weightData], { type: "application/octet-stream" }), "model.weights.bin"), [4, this.fetch(this.path, e3)];
          case 1:
            if ((a3 = r3.sent()).ok) return [2, { modelArtifactsInfo: $f(t4), responses: [a3] }];
            throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a3.status + ".");
        }
      });
    });
  }, t3.prototype.load = function() {
    return n2(this, void 0, void 0, function() {
      var t4, e3, n3, o3, a3, i3, s3, u3, c3, l3, h3, f3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            return [4, this.fetch(this.path, this.requestInit)];
          case 1:
            if (!(t4 = r3.sent()).ok) throw new Error("Request to " + this.path + " failed with status code " + t4.status + ". Please verify this URL points to the model JSON of the model to load.");
            r3.label = 2;
          case 2:
            return r3.trys.push([2, 4, , 5]), [4, t4.json()];
          case 3:
            return e3 = r3.sent(), [3, 5];
          case 4:
            throw r3.sent(), n3 = "Failed to parse model JSON of response from " + this.path + ".", this.path.endsWith(".pb") ? n3 += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : n3 += " Please make sure the server is serving valid JSON for this request.", new Error(n3);
          case 5:
            if (o3 = e3.modelTopology, a3 = e3.weightsManifest, i3 = e3.generatedBy, s3 = e3.convertedBy, u3 = e3.format, c3 = e3.userDefinedMetadata, null == o3 && null == a3) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
            return null == a3 ? [3, 7] : [4, this.loadWeights(a3)];
          case 6:
            f3 = r3.sent(), l3 = f3[0], h3 = f3[1], r3.label = 7;
          case 7:
            return [2, { modelTopology: o3, weightSpecs: l3, weightData: h3, userDefinedMetadata: c3, generatedBy: i3, convertedBy: s3, format: u3 }];
        }
      });
    });
  }, t3.prototype.loadWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3, o3, a3, i3, s3, u3, c3, l3, h3, f3;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            for (e3 = Array.isArray(this.path) ? this.path[1] : this.path, n3 = function(t5) {
              var e4 = t5.lastIndexOf("/"), n4 = t5.lastIndexOf("?"), r4 = t5.substring(0, e4), o4 = n4 > e4 ? t5.substring(n4) : "";
              return [r4 + "/", o4];
            }(e3), o3 = n3[0], a3 = n3[1], i3 = this.weightPathPrefix || o3, s3 = [], u3 = 0, c3 = t4; u3 < c3.length; u3++) l3 = c3[u3], s3.push.apply(s3, l3.weights);
            return h3 = [], t4.forEach(function(t5) {
              t5.paths.forEach(function(t6) {
                h3.push(i3 + t6 + a3);
              });
            }), [4, Ad(h3, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress })];
          case 1:
            return f3 = r3.sent(), [2, [s3, Xf(f3)]];
        }
      });
    });
  }, t3.URL_SCHEME_REGEX = /^https?:\/\//, t3;
}();
function Nd(t3) {
  return null != t3.match(Dd.URL_SCHEME_REGEX);
}
var Fd = function(t3, e3) {
  if ("undefined" == typeof fetch) return null;
  return (Array.isArray(t3) ? t3.every(function(t4) {
    return Nd(t4);
  }) : Nd(t3)) ? _d(t3, { onProgress: e3 }) : null;
};
function _d(t3, e3) {
  return new Dd(t3, e3);
}
Qf.registerSaveRouter(Fd), Qf.registerLoadRouter(Fd);
var Od = function() {
  function t3(t4) {
    this.modelArtifacts = t4;
  }
  return t3.prototype.load = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        return [2, this.modelArtifacts];
      });
    });
  }, t3;
}();
var Md = function() {
  function t3(t4) {
    this.saveHandler = t4;
  }
  return t3.prototype.save = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        return [2, this.saveHandler(t4)];
      });
    });
  }, t3;
}();
var Bd = Object.freeze({ browserFiles: function(t3) {
  return new kd(t3);
}, browserHTTPRequest: function(t3, e3) {
  return _d(t3, e3);
}, concatenateArrayBuffers: Xf, decodeWeights: Hf, encodeWeights: function(t3, e3) {
  return n2(this, void 0, void 0, function() {
    var o3, a3, i3, s3, u3, c3 = this;
    return r2(this, function(l3) {
      switch (l3.label) {
        case 0:
          for (o3 = [], a3 = [], i3 = Array.isArray(t3) ? t3.map(function(t4) {
            return t4.name;
          }) : Object.keys(t3), s3 = function(s4) {
            var u4 = i3[s4], l4 = Array.isArray(t3) ? t3[s4].tensor : t3[u4];
            if ("float32" !== l4.dtype && "int32" !== l4.dtype && "bool" !== l4.dtype && "string" !== l4.dtype) throw new Error("Unsupported dtype in weight '" + u4 + "': " + l4.dtype);
            var h3 = { name: u4, shape: l4.shape, dtype: l4.dtype };
            if ("string" === l4.dtype) {
              var f3 = new Promise(function(t4) {
                return n2(c3, void 0, void 0, function() {
                  var e4, n3, o4, a4, i4, s5, u5;
                  return r2(this, function(r3) {
                    switch (r3.label) {
                      case 0:
                        return [4, l4.bytes()];
                      case 1:
                        for (e4 = r3.sent(), n3 = e4.reduce(function(t5, e5) {
                          return t5 + e5.length;
                        }, 0) + Gf * e4.length, o4 = new Uint8Array(n3), a4 = 0, i4 = 0; i4 < e4.length; i4++) s5 = e4[i4], u5 = new Uint8Array(new Uint32Array([s5.length]).buffer), o4.set(u5, a4), a4 += Gf, o4.set(s5, a4), a4 += s5.length;
                        return t4(o4), [2];
                    }
                  });
                });
              });
              a3.push(f3);
            } else a3.push(l4.data());
            null != e3 && (h3.group = e3), o3.push(h3);
          }, u3 = 0; u3 < i3.length; ++u3) s3(u3);
          return [4, Promise.all(a3)];
        case 1:
          return [2, { data: qf(l3.sent()), specs: o3 }];
      }
    });
  });
}, fromMemory: function(t3, e3, n3, r3) {
  return 1 === arguments.length ? null != t3.modelTopology || null != t3.weightSpecs ? new Od(t3) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Od({ modelTopology: t3 })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Od({ modelTopology: t3, weightSpecs: e3, weightData: n3, trainingConfig: r3 }));
}, getLoadHandlers: function(t3, e3) {
  return Qf.getLoadHandlers(t3, e3);
}, getModelArtifactsInfoForJSON: $f, getSaveHandlers: function(t3) {
  return Qf.getSaveHandlers(t3);
}, http: _d, isHTTPScheme: Nd, loadWeights: function(t3, e3, o3, a3) {
  return void 0 === e3 && (e3 = ""), n2(this, void 0, void 0, function() {
    return r2(this, function(n3) {
      return [2, Td(function(t4) {
        return Ad(t4, { requestInit: a3 });
      })(t3, e3, o3)];
    });
  });
}, registerLoadRouter: function(t3) {
  return Qf.registerLoadRouter(t3);
}, registerSaveRouter: function(t3) {
  return Qf.registerSaveRouter(t3);
}, weightsLoaderFactory: Td, withSaveHandler: function(t3) {
  return new Md(t3);
}, copyModel: function(t3, e3) {
  return n2(this, void 0, void 0, function() {
    return r2(this, function(n3) {
      return false, [2, ed(t3, e3, false)];
    });
  });
}, listModels: function() {
  return n2(this, void 0, void 0, function() {
    var t3, e3, n3, o3, a3, i3, s3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          t3 = Zf.getSchemes(), e3 = {}, n3 = 0, o3 = t3, r3.label = 1;
        case 1:
          return n3 < o3.length ? (a3 = o3[n3], [4, Zf.getManager(a3).listModels()]) : [3, 4];
        case 2:
          for (s3 in i3 = r3.sent()) e3[a3 + Jf + s3] = i3[s3];
          r3.label = 3;
        case 3:
          return n3++, [3, 1];
        case 4:
          return [2, e3];
      }
    });
  });
}, moveModel: function(t3, e3) {
  return n2(this, void 0, void 0, function() {
    return r2(this, function(n3) {
      return true, [2, ed(t3, e3, true)];
    });
  });
}, removeModel: function(t3) {
  return n2(this, void 0, void 0, function() {
    var e3;
    return r2(this, function(n3) {
      return e3 = td(t3), [2, Zf.getManager(e3.scheme).removeModel(e3.path)];
    });
  });
} });
var Pd;
var Ld = An2({ confusionMatrix_: function(t3, e3, n3) {
  var r3 = gn2(t3, "labels", "confusionMatrix"), o3 = gn2(e3, "predictions", "confusionMatrix");
  C2(null == n3 || n3 > 0 && Number.isInteger(n3), function() {
    return "If provided, numClasses must be a positive integer, but got " + n3;
  }), C2(1 === r3.rank, function() {
    return "Expected the rank of labels to be 1, but got " + r3.rank;
  }), C2(1 === o3.rank, function() {
    return "Expected the rank of predictions to be 1, but got " + o3.rank;
  }), C2(r3.shape[0] === o3.shape[0], function() {
    return "Mismatch in the number of examples: " + r3.shape[0] + " vs. " + o3.shape[0] + ". Labels and predictions should have the same number of elements.";
  }), C2(n3 > 0 && Number.isInteger(n3), function() {
    return "numClasses is required to be a positive integer, but got " + n3;
  });
  var a3 = Rc2(r3.asType("int32"), n3), i3 = Rc2(o3.asType("int32"), n3);
  return a3.transpose().matMul(i3).asType("int32");
} });
var Wd = Object.freeze({ confusionMatrix: Ld });
var Ud = An2({ fromPixels_: function(t3, e3) {
  if (void 0 === e3 && (e3 = 3), e3 > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (null == t3) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  var n3 = false, r3 = false, o3 = false, a3 = false, i3 = false;
  if (t3.data instanceof Uint8Array) n3 = true;
  else if ("undefined" != typeof ImageData && t3 instanceof ImageData) r3 = true;
  else if ("undefined" != typeof HTMLVideoElement && t3 instanceof HTMLVideoElement) o3 = true;
  else if ("undefined" != typeof HTMLImageElement && t3 instanceof HTMLImageElement) a3 = true;
  else {
    if (null == t3.getContext) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " + t3.constructor.name);
    i3 = true;
  }
  if (o3) {
    if (o3 && t3.readyState < 2) throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
  }
  if (null != l2("FromPixels", Lt2.backendName)) return Lt2.runKernel("FromPixels", { pixels: t3 }, { numChannels: e3 });
  var s3, u3, c3 = o3 ? [t3.videoWidth, t3.videoHeight] : [t3.width, t3.height], h3 = c3[0], f3 = c3[1];
  if (i3 ? s3 = t3.getContext("2d").getImageData(0, 0, h3, f3).data : r3 || n3 ? s3 = t3.data : (a3 || o3) && (null == Pd && (Pd = document.createElement("canvas").getContext("2d")), Pd.canvas.width = h3, Pd.canvas.height = f3, Pd.drawImage(t3, 0, 0, h3, f3), s3 = Pd.getImageData(0, 0, h3, f3).data), 4 === e3) u3 = new Int32Array(s3);
  else {
    var d3 = h3 * f3;
    u3 = new Int32Array(d3 * e3);
    for (var p3 = 0; p3 < d3; p3++) for (var v2 = 0; v2 < e3; ++v2) u3[p3 * e3 + v2] = s3[4 * p3 + v2];
  }
  return Pn2(u3, [f3, h3, e3], "int32");
} });
var Vd = Object.freeze({ toPixels: function(t3, e3) {
  return n2(this, void 0, void 0, function() {
    var n3, o3, a3, i3, s3, u3, c3, l3, h3, f3, d3, p3, v2, g2, m3, y3, x3, b3, w3, C3, E3, R3, I3;
    return r2(this, function(r3) {
      switch (r3.label) {
        case 0:
          if (n3 = gn2(t3, "img", "toPixels"), t3 instanceof wt2 || (n3 = n3.toInt()), 2 !== n3.rank && 3 !== n3.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n3.rank + ".");
          if (o3 = n3.shape.slice(0, 2), a3 = o3[0], i3 = o3[1], (s3 = 2 === n3.rank ? 1 : n3.shape[2]) > 4 || 2 === s3) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + s3);
          return [4, n3.data()];
        case 1:
          return u3 = r3.sent(), c3 = n3.min(), l3 = n3.max(), [4, Promise.all([c3.data(), l3.data()])];
        case 2:
          if (h3 = r3.sent(), f3 = h3[0], d3 = h3[1], p3 = f3[0], v2 = d3[0], c3.dispose(), l3.dispose(), "float32" === n3.dtype) {
            if (p3 < 0 || v2 > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + p3 + " - " + v2 + "].");
          } else {
            if ("int32" !== n3.dtype) throw new Error("Unsupported type for toPixels: " + n3.dtype + ". Please use float32 or int32 tensors.");
            if (p3 < 0 || v2 > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + p3 + " - " + v2 + "].");
          }
          for (g2 = "float32" === n3.dtype ? 255 : 1, m3 = new Uint8ClampedArray(i3 * a3 * 4), y3 = 0; y3 < a3 * i3; ++y3) x3 = void 0, b3 = void 0, w3 = void 0, C3 = void 0, 1 === s3 ? (x3 = u3[y3] * g2, b3 = u3[y3] * g2, w3 = u3[y3] * g2, C3 = 255) : 3 === s3 ? (x3 = u3[3 * y3] * g2, b3 = u3[3 * y3 + 1] * g2, w3 = u3[3 * y3 + 2] * g2, C3 = 255) : 4 === s3 && (x3 = u3[4 * y3] * g2, b3 = u3[4 * y3 + 1] * g2, w3 = u3[4 * y3 + 2] * g2, C3 = u3[4 * y3 + 3] * g2), m3[(E3 = 4 * y3) + 0] = Math.round(x3), m3[E3 + 1] = Math.round(b3), m3[E3 + 2] = Math.round(w3), m3[E3 + 3] = Math.round(C3);
          return null != e3 && (e3.width = i3, e3.height = a3, R3 = e3.getContext("2d"), I3 = new ImageData(m3, i3, a3), R3.putImageData(I3, 0, 0)), n3 !== t3 && n3.dispose(), [2, m3];
      }
    });
  });
}, fromPixels: Ud });
var zd = function() {
  function t3() {
  }
  return t3.prototype.getClassName = function() {
    return this.constructor.className;
  }, t3.fromConfig = function(t4, e3) {
    return new t4(e3);
  }, t3;
}();
var Gd = function() {
  function t3() {
    this.classNameMap = {};
  }
  return t3.getMap = function() {
    return null == t3.instance && (t3.instance = new t3()), t3.instance;
  }, t3.register = function(e3) {
    t3.getMap().classNameMap[e3.className] = [e3, e3.fromConfig];
  }, t3;
}();
function Hd(t3) {
  C2(null != t3.className, function() {
    return "Class being registered does not have the static className property defined.";
  }), C2("string" == typeof t3.className, function() {
    return "className is required to be a string, but got type " + typeof t3.className;
  }), C2(t3.className.length > 0, function() {
    return "Class being registered has an empty-string as its className, which is disallowed.";
  }), Gd.register(t3);
}
var qd = Object.freeze({ Serializable: zd, SerializationMap: Gd, registerClass: Hd });
var jd = Object.freeze({ gpgpu_util: Rs2, webgl_util: Ge2, forceHalfFloat: function() {
  i2().set("WEBGL_FORCE_F16_TEXTURES", true);
}, MathBackendWebGL: Uu2, setWebGLContext: Kt2, GPGPUContext: Is2 });
var Xd = function(t3) {
  function o3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return e2(o3, t3), o3.prototype.minimize = function(t4, e3, n3) {
    void 0 === e3 && (e3 = false);
    var r3 = this.computeGradients(t4, n3), o4 = r3.value, a3 = r3.grads;
    if (null != n3) {
      var i3 = n3.map(function(t5) {
        return { name: t5.name, tensor: a3[t5.name] };
      });
      this.applyGradients(i3);
    } else this.applyGradients(a3);
    return tn2(a3), e3 ? o4 : (o4.dispose(), null);
  }, Object.defineProperty(o3.prototype, "iterations", { get: function() {
    return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;
  }, enumerable: true, configurable: true }), o3.prototype.incrementIterations = function() {
    this.iterations_ = this.iterations + 1;
  }, o3.prototype.computeGradients = function(t4, e3) {
    return ra2(t4, e3);
  }, o3.prototype.dispose = function() {
    null != this.iterations_ && tn2(this.iterations_);
  }, o3.prototype.saveIterations = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        return null == this.iterations_ && (this.iterations_ = 0), [2, { name: "iter", tensor: On2(this.iterations_, "int32") }];
      });
    });
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        throw new Error("getWeights() is not implemented for this optimizer yet.");
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t5) {
        throw new Error("setWeights() is not implemented for this optimizer class " + this.getClassName());
      });
    });
  }, o3.prototype.extractIterations = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3;
      return r2(this, function(n3) {
        switch (n3.label) {
          case 0:
            return e3 = this, [4, t4[0].tensor.data()];
          case 1:
            return e3.iterations_ = n3.sent()[0], [2, t4.slice(1)];
        }
      });
    });
  }, o3;
}(zd);
Object.defineProperty(Xd, Symbol.hasInstance, { value: function(t3) {
  return null != t3.minimize && null != t3.computeGradients && null != t3.applyGradients;
} });
var Yd = function(t3) {
  function o3(e3, n3, r3) {
    void 0 === r3 && (r3 = null);
    var o4 = t3.call(this) || this;
    return o4.learningRate = e3, o4.rho = n3, o4.epsilon = r3, o4.accumulatedGrads = [], o4.accumulatedUpdates = [], null == r3 && (o4.epsilon = Lt2.backend.epsilon()), o4;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n3, r3) {
      var o4 = Lt2.registeredVariables[n3];
      null == e3.accumulatedGrads[r3] && (e3.accumulatedGrads[r3] = { originalName: n3 + "/accum_grad", variable: Ze2(function() {
        return Xn2(o4).variable(false);
      }) }), null == e3.accumulatedUpdates[r3] && (e3.accumulatedUpdates[r3] = { originalName: n3 + "/accum_var", variable: Ze2(function() {
        return Xn2(o4).variable(false);
      }) });
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n3];
      if (null != a3) {
        var i3 = e3.accumulatedGrads[r3].variable, s3 = e3.accumulatedUpdates[r3].variable;
        Ze2(function() {
          var t5 = i3.mul(e3.rho).add(a3.square().mul(1 - e3.rho)), n4 = s3.add(e3.epsilon).sqrt().div(i3.add(e3.epsilon).sqrt()).mul(a3), r4 = s3.mul(e3.rho).add(n4.square().mul(1 - e3.rho));
          i3.assign(t5), s3.assign(r4);
          var u3 = n4.mul(-e3.learningRate).add(o4);
          o4.assign(u3);
        });
      }
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    null != this.accumulatedUpdates && (tn2(this.accumulatedGrads.map(function(t4) {
      return t4.variable;
    })), tn2(this.accumulatedUpdates.map(function(t4) {
      return t4.variable;
    })));
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedGrads.concat(this.accumulatedUpdates), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3;
      return r2(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = n3.sent(), e3 = t4.length / 2, false, this.accumulatedGrads = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedUpdates = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.rho, e3.epsilon);
  }, o3.className = "Adadelta", o3;
}(Xd);
Hd(Yd);
var $d = function(t3) {
  function o3(e3, n3) {
    void 0 === n3 && (n3 = 0.1);
    var r3 = t3.call(this) || this;
    return r3.learningRate = e3, r3.initialAccumulatorValue = n3, r3.accumulatedGrads = [], r3;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n3, r3) {
      var o4 = Lt2.registeredVariables[n3];
      if (null == e3.accumulatedGrads[r3]) {
        e3.accumulatedGrads[r3] = { originalName: n3 + "/accumulator", variable: Ze2(function() {
          return Hn2(o4.shape, e3.initialAccumulatorValue).variable(false);
        }) };
      }
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n3];
      if (null != a3) {
        var i3 = e3.accumulatedGrads[r3].variable;
        Ze2(function() {
          var t5 = i3.add(a3.square());
          i3.assign(t5);
          var n4 = a3.div(t5.add(Lt2.backend.epsilon()).sqrt()).mul(-e3.learningRate).add(o4);
          o4.assign(n4);
        });
      }
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    null != this.accumulatedGrads && tn2(this.accumulatedGrads.map(function(t4) {
      return t4.variable;
    }));
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()].concat(this.accumulatedGrads.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = e3.sent(), false, this.accumulatedGrads = t4.map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.initialAccumulatorValue);
  }, o3.className = "Adagrad", o3;
}(Xd);
Hd($d);
var Qd = function(t3) {
  function o3(e3, n3, r3, o4) {
    void 0 === o4 && (o4 = null);
    var a3 = t3.call(this) || this;
    return a3.learningRate = e3, a3.beta1 = n3, a3.beta2 = r3, a3.epsilon = o4, a3.accumulatedFirstMoment = [], a3.accumulatedSecondMoment = [], Ze2(function() {
      a3.accBeta1 = On2(n3).variable(), a3.accBeta2 = On2(r3).variable();
    }), null == o4 && (a3.epsilon = Lt2.backend.epsilon()), a3;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this, n3 = Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4);
    Ze2(function() {
      var r3 = Oo2(1, e3.accBeta1), o4 = Oo2(1, e3.accBeta2);
      n3.forEach(function(n4, a3) {
        var i3 = Lt2.registeredVariables[n4];
        null == e3.accumulatedFirstMoment[a3] && (e3.accumulatedFirstMoment[a3] = { originalName: n4 + "/m", variable: Ze2(function() {
          return Xn2(i3).variable(false);
        }) }), null == e3.accumulatedSecondMoment[a3] && (e3.accumulatedSecondMoment[a3] = { originalName: n4 + "/v", variable: Ze2(function() {
          return Xn2(i3).variable(false);
        }) });
        var s3 = Array.isArray(t4) ? t4[a3].tensor : t4[n4];
        if (null != s3) {
          var u3 = e3.accumulatedFirstMoment[a3].variable, c3 = e3.accumulatedSecondMoment[a3].variable, l3 = u3.mul(e3.beta1).add(s3.mul(1 - e3.beta1)), h3 = c3.mul(e3.beta2).add(s3.square().mul(1 - e3.beta2)), f3 = l3.div(r3), d3 = h3.div(o4);
          u3.assign(l3), c3.assign(h3);
          var p3 = f3.div(d3.sqrt().add(e3.epsilon)).mul(-e3.learningRate).add(i3);
          i3.assign(p3);
        }
      }), e3.accBeta1.assign(e3.accBeta1.mul(e3.beta1)), e3.accBeta2.assign(e3.accBeta2.mul(e3.beta2));
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && tn2(this.accumulatedFirstMoment.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedSecondMoment && tn2(this.accumulatedSecondMoment.map(function(t4) {
      return t4.variable;
    }));
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3, n3 = this;
      return r2(this, function(r3) {
        switch (r3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = r3.sent(), Ze2(function() {
              n3.accBeta1.assign(No2(n3.beta1, n3.iterations_ + 1)), n3.accBeta2.assign(No2(n3.beta2, n3.iterations_ + 1));
            }), e3 = t4.length / 2, false, this.accumulatedFirstMoment = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedSecondMoment = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.beta1, e3.beta2, e3.epsilon);
  }, o3.className = "Adam", o3;
}(Xd);
Hd(Qd);
var Jd = function(t3) {
  function o3(e3, n3, r3, o4, a3) {
    void 0 === o4 && (o4 = null), void 0 === a3 && (a3 = 0);
    var i3 = t3.call(this) || this;
    return i3.learningRate = e3, i3.beta1 = n3, i3.beta2 = r3, i3.epsilon = o4, i3.decay = a3, i3.accumulatedFirstMoment = [], i3.accumulatedWeightedInfNorm = [], Ze2(function() {
      i3.iteration = On2(0).variable(), i3.accBeta1 = On2(n3).variable();
    }), null == o4 && (i3.epsilon = Lt2.backend.epsilon()), i3;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this, n3 = Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4);
    Ze2(function() {
      var r3 = Oo2(1, e3.accBeta1), o4 = Bo2(-e3.learningRate, e3.iteration.mul(e3.decay).add(1));
      n3.forEach(function(n4, a3) {
        var i3 = Lt2.registeredVariables[n4];
        null == e3.accumulatedFirstMoment[a3] && (e3.accumulatedFirstMoment[a3] = { originalName: n4 + "/m", variable: Xn2(i3).variable(false) }), null == e3.accumulatedWeightedInfNorm[a3] && (e3.accumulatedWeightedInfNorm[a3] = { originalName: n4 + "/v", variable: Xn2(i3).variable(false) });
        var s3 = Array.isArray(t4) ? t4[a3].tensor : t4[n4];
        if (null != s3) {
          var u3 = e3.accumulatedFirstMoment[a3].variable, c3 = e3.accumulatedWeightedInfNorm[a3].variable, l3 = u3.mul(e3.beta1).add(s3.mul(1 - e3.beta1)), h3 = c3.mul(e3.beta2), f3 = s3.abs(), d3 = h3.maximum(f3);
          u3.assign(l3), c3.assign(d3);
          var p3 = o4.div(r3).mul(l3.div(d3.add(e3.epsilon))).add(i3);
          i3.assign(p3);
        }
      }), e3.iteration.assign(e3.iteration.add(1)), e3.accBeta1.assign(e3.accBeta1.mul(e3.beta1));
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && tn2(this.accumulatedFirstMoment.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedWeightedInfNorm && tn2(this.accumulatedWeightedInfNorm.map(function(t4) {
      return t4.variable;
    }));
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        throw new Error("getWeights() is not implemented for Adamax yet.");
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t5) {
        throw new Error("setWeights() is not implemented for Adamax yet.");
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.beta1, e3.beta2, e3.epsilon, e3.decay);
  }, o3.className = "Adamax", o3;
}(Xd);
Hd(Jd);
var Zd = function(t3) {
  function o3(e3) {
    var n3 = t3.call(this) || this;
    return n3.learningRate = e3, n3.setLearningRate(e3), n3;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n3, r3) {
      var o4 = Array.isArray(t4) ? t4[r3].tensor : t4[n3];
      if (null != o4) {
        var a3 = Lt2.registeredVariables[n3];
        Ze2(function() {
          var t5 = e3.c.mul(o4).add(a3);
          a3.assign(t5);
        });
      }
    }), this.incrementIterations();
  }, o3.prototype.setLearningRate = function(t4) {
    this.learningRate = t4, null != this.c && this.c.dispose(), this.c = en2(On2(-t4));
  }, o3.prototype.dispose = function() {
    this.c.dispose();
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()]];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            if (0 !== (t4 = e3.sent()).length) throw new Error("SGD optimizer does not have settable weights.");
            return [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate);
  }, o3.className = "SGD", o3;
}(Xd);
Hd(Zd);
var tp = function(t3) {
  function o3(e3, n3, r3) {
    void 0 === r3 && (r3 = false);
    var o4 = t3.call(this, e3) || this;
    return o4.learningRate = e3, o4.momentum = n3, o4.useNesterov = r3, o4.accumulations = [], o4.m = On2(o4.momentum), o4;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n3, r3) {
      var o4 = Lt2.registeredVariables[n3];
      if (null == e3.accumulations[r3]) {
        e3.accumulations[r3] = { originalName: n3 + "/momentum", variable: Ze2(function() {
          return Xn2(o4).variable(false);
        }) };
      }
      var a3 = e3.accumulations[r3].variable, i3 = Array.isArray(t4) ? t4[r3].tensor : t4[n3];
      null != i3 && Ze2(function() {
        var t5, n4 = e3.m.mul(a3).add(i3);
        t5 = e3.useNesterov ? e3.c.mul(i3.add(n4.mul(e3.m))).add(o4) : e3.c.mul(n4).add(o4), a3.assign(n4), o4.assign(t5);
      });
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    this.m.dispose(), null != this.accumulations && tn2(this.accumulations.map(function(t4) {
      return t4.variable;
    }));
  }, o3.prototype.setMomentum = function(t4) {
    this.momentum = t4;
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.saveIterations()];
          case 1:
            return [2, [t4.sent()].concat(this.accumulations.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = e3.sent(), false, this.accumulations = t4.map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.momentum, e3.useNesterov);
  }, o3.className = "Momentum", o3;
}(Zd);
Hd(tp);
var ep = function(t3) {
  function o3(e3, n3, r3, o4, a3) {
    void 0 === n3 && (n3 = 0.9), void 0 === r3 && (r3 = 0), void 0 === o4 && (o4 = null), void 0 === a3 && (a3 = false);
    var i3 = t3.call(this) || this;
    if (i3.learningRate = e3, i3.decay = n3, i3.momentum = r3, i3.epsilon = o4, i3.accumulatedMeanSquares = [], i3.accumulatedMoments = [], i3.accumulatedMeanGrads = [], i3.centered = a3, null == o4 && (i3.epsilon = Lt2.backend.epsilon()), null == e3) throw new Error("learningRate for RMSPropOptimizer must be defined.");
    return i3;
  }
  return e2(o3, t3), o3.prototype.applyGradients = function(t4) {
    var e3 = this;
    (Array.isArray(t4) ? t4.map(function(t5) {
      return t5.name;
    }) : Object.keys(t4)).forEach(function(n3, r3) {
      var o4 = Lt2.registeredVariables[n3];
      null == e3.accumulatedMeanSquares[r3] && (e3.accumulatedMeanSquares[r3] = { originalName: n3 + "/rms", variable: Ze2(function() {
        return Xn2(o4).variable(false);
      }) }), null == e3.accumulatedMoments[r3] && (e3.accumulatedMoments[r3] = { originalName: n3 + "/momentum", variable: Ze2(function() {
        return Xn2(o4).variable(false);
      }) }), null == e3.accumulatedMeanGrads[r3] && e3.centered && (e3.accumulatedMeanGrads[r3] = { originalName: n3 + "/mg", variable: Ze2(function() {
        return Xn2(o4).variable(false);
      }) });
      var a3 = Array.isArray(t4) ? t4[r3].tensor : t4[n3];
      if (null != a3) {
        var i3 = e3.accumulatedMeanSquares[r3].variable, s3 = e3.accumulatedMoments[r3].variable;
        Ze2(function() {
          var t5 = i3.mul(e3.decay).add(a3.square().mul(1 - e3.decay));
          if (e3.centered) {
            var n4 = e3.accumulatedMeanGrads[r3].variable, u3 = n4.mul(e3.decay).add(a3.mul(1 - e3.decay)), c3 = s3.mul(e3.momentum).add(a3.mul(e3.learningRate).div(t5.sub(u3.square().add(e3.epsilon)).sqrt()));
            i3.assign(t5), n4.assign(u3), s3.assign(c3);
            var l3 = o4.sub(c3);
            o4.assign(l3);
          } else {
            var h3 = i3.mul(e3.decay).add(a3.square().mul(1 - e3.decay));
            c3 = s3.mul(e3.momentum).add(a3.mul(e3.learningRate).div(h3.add(e3.epsilon).sqrt()));
            i3.assign(h3), s3.assign(c3);
            l3 = o4.sub(c3);
            o4.assign(l3);
          }
        });
      }
    }), this.incrementIterations();
  }, o3.prototype.dispose = function() {
    null != this.accumulatedMeanSquares && tn2(this.accumulatedMeanSquares.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedMeanGrads && this.centered && tn2(this.accumulatedMeanGrads.map(function(t4) {
      return t4.variable;
    })), null != this.accumulatedMoments && tn2(this.accumulatedMoments.map(function(t4) {
      return t4.variable;
    }));
  }, o3.prototype.getWeights = function() {
    return n2(this, void 0, void 0, function() {
      var t4;
      return r2(this, function(e3) {
        switch (e3.label) {
          case 0:
            return t4 = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t4.push.apply(t4, this.accumulatedMeanGrads), [4, this.saveIterations()];
          case 1:
            return [2, [e3.sent()].concat(t4.map(function(t5) {
              return { name: t5.originalName, tensor: t5.variable };
            }))];
        }
      });
    });
  }, o3.prototype.setWeights = function(t4) {
    return n2(this, void 0, void 0, function() {
      var e3;
      return r2(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, this.extractIterations(t4)];
          case 1:
            return t4 = n3.sent(), e3 = this.centered ? t4.length / 3 : t4.length / 2, false, this.accumulatedMeanSquares = t4.slice(0, e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.accumulatedMoments = t4.slice(e3, 2 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            }), this.centered && (this.accumulatedMeanGrads = t4.slice(2 * e3, 3 * e3).map(function(t5) {
              return { originalName: t5.name, variable: t5.tensor.variable(false) };
            })), [2];
        }
      });
    });
  }, o3.prototype.getConfig = function() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }, o3.fromConfig = function(t4, e3) {
    return new t4(e3.learningRate, e3.decay, e3.momentum, e3.epsilon, e3.centered);
  }, o3.className = "RMSProp", o3;
}(Xd);
Hd(ep);
var np = function() {
  function t3() {
  }
  return t3.sgd = function(t4) {
    return new Zd(t4);
  }, t3.momentum = function(t4, e3, n3) {
    return void 0 === n3 && (n3 = false), new tp(t4, e3, n3);
  }, t3.rmsprop = function(t4, e3, n3, r3, o3) {
    return void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0), void 0 === r3 && (r3 = null), void 0 === o3 && (o3 = false), new ep(t4, e3, n3, r3, o3);
  }, t3.adam = function(t4, e3, n3, r3) {
    return void 0 === t4 && (t4 = 1e-3), void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0.999), void 0 === r3 && (r3 = null), new Qd(t4, e3, n3, r3);
  }, t3.adadelta = function(t4, e3, n3) {
    return void 0 === t4 && (t4 = 1e-3), void 0 === e3 && (e3 = 0.95), void 0 === n3 && (n3 = null), new Yd(t4, e3, n3);
  }, t3.adamax = function(t4, e3, n3, r3, o3) {
    return void 0 === t4 && (t4 = 2e-3), void 0 === e3 && (e3 = 0.9), void 0 === n3 && (n3 = 0.999), void 0 === r3 && (r3 = null), void 0 === o3 && (o3 = 0), new Jd(t4, e3, n3, r3, o3);
  }, t3.adagrad = function(t4, e3) {
    return void 0 === e3 && (e3 = 0.1), new $d(t4, e3);
  }, t3;
}();
var rp = { sgd: np.sgd, momentum: np.momentum, adadelta: np.adadelta, adagrad: np.adagrad, rmsprop: np.rmsprop, adamax: np.adamax, adam: np.adam };
wt2.prototype.add = function(t3) {
  return Or2(this, t3);
}, wt2.prototype.broadcastTo = function(t3) {
  return fc2(this, t3);
}, wt2.prototype.div = function(t3) {
  return Bo2(this, t3);
}, wt2.prototype.divNoNan = function(t3) {
  return bc2(this, t3);
}, wt2.prototype.squaredDifference = function(t3) {
  return Hc2(this, t3);
}, wt2.prototype.tile = function(t3) {
  return wc2(this, t3);
}, wt2.prototype.oneHot = function(t3, e3, n3) {
  return void 0 === e3 && (e3 = 1), void 0 === n3 && (n3 = 0), Rc2(this, t3, e3, n3);
}, wt2.prototype.transpose = function(t3) {
  return ua2(this, t3);
}, wt2.prototype.pad = function(t3, e3) {
  return Ic2(this, t3, e3);
}, wt2.prototype.batchNorm = function(t3, e3, n3, r3, o3) {
  return nc2(this, t3, e3, n3, r3, o3);
}, xt2 = ff;

// node_modules/tfjs-image-recognition-base/build/es6/classes/Dimensions.js
var Dimensions = (
  /** @class */
  function() {
    function Dimensions2(width, height) {
      if (!isValidNumber(width) || !isValidNumber(height)) {
        throw new Error("Dimensions.constructor - expected width and height to be valid numbers, instead have " + JSON.stringify({ width, height }));
      }
      this._width = width;
      this._height = height;
    }
    Object.defineProperty(Dimensions2.prototype, "width", {
      get: function() {
        return this._width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Dimensions2.prototype, "height", {
      get: function() {
        return this._height;
      },
      enumerable: true,
      configurable: true
    });
    Dimensions2.prototype.reverse = function() {
      return new Dimensions2(1 / this.width, 1 / this.height);
    };
    return Dimensions2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/Point.js
var Point = (
  /** @class */
  function() {
    function Point2(x3, y3) {
      this._x = x3;
      this._y = y3;
    }
    Object.defineProperty(Point2.prototype, "x", {
      get: function() {
        return this._x;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Point2.prototype, "y", {
      get: function() {
        return this._y;
      },
      enumerable: true,
      configurable: true
    });
    Point2.prototype.add = function(pt3) {
      return new Point2(this.x + pt3.x, this.y + pt3.y);
    };
    Point2.prototype.sub = function(pt3) {
      return new Point2(this.x - pt3.x, this.y - pt3.y);
    };
    Point2.prototype.mul = function(pt3) {
      return new Point2(this.x * pt3.x, this.y * pt3.y);
    };
    Point2.prototype.div = function(pt3) {
      return new Point2(this.x / pt3.x, this.y / pt3.y);
    };
    Point2.prototype.abs = function() {
      return new Point2(Math.abs(this.x), Math.abs(this.y));
    };
    Point2.prototype.magnitude = function() {
      return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
    };
    Point2.prototype.floor = function() {
      return new Point2(Math.floor(this.x), Math.floor(this.y));
    };
    return Point2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/utils/index.js
function isTensor(tensor, dim) {
  return tensor instanceof wt2 && tensor.shape.length === dim;
}
function isTensor1D(tensor) {
  return isTensor(tensor, 1);
}
function isTensor2D(tensor) {
  return isTensor(tensor, 2);
}
function isTensor3D(tensor) {
  return isTensor(tensor, 3);
}
function isTensor4D(tensor) {
  return isTensor(tensor, 4);
}
function isFloat(num) {
  return num % 1 !== 0;
}
function isEven(num) {
  return num % 2 === 0;
}
function round(num, prec) {
  if (prec === void 0) {
    prec = 2;
  }
  var f3 = Math.pow(10, prec);
  return Math.floor(num * f3) / f3;
}
function isDimensions(obj) {
  return obj && obj.width && obj.height;
}
function computeReshapedDimensions(_a3, inputSize) {
  var width = _a3.width, height = _a3.height;
  var scale2 = inputSize / Math.max(height, width);
  return new Dimensions(Math.round(width * scale2), Math.round(height * scale2));
}
function getCenterPoint(pts) {
  return pts.reduce(function(sum, pt3) {
    return sum.add(pt3);
  }, new Point(0, 0)).div(new Point(pts.length, pts.length));
}
function range(num, start, step) {
  return Array(num).fill(0).map(function(_3, i3) {
    return start + i3 * step;
  });
}
function isValidNumber(num) {
  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;
}
function isValidProbablitiy(num) {
  return isValidNumber(num) && 0 <= num && num <= 1;
}

// node_modules/tfjs-image-recognition-base/build/es6/classes/Box.js
var Box = (
  /** @class */
  function() {
    function Box2(_box, allowNegativeDimensions) {
      if (allowNegativeDimensions === void 0) {
        allowNegativeDimensions = true;
      }
      var box = _box || {};
      var isBbox = [box.left, box.top, box.right, box.bottom].every(isValidNumber);
      var isRect = [box.x, box.y, box.width, box.height].every(isValidNumber);
      if (!isRect && !isBbox) {
        throw new Error("Box.constructor - expected box to be IBoundingBox | IRect, instead have " + JSON.stringify(box));
      }
      var _a3 = isRect ? [box.x, box.y, box.width, box.height] : [box.left, box.top, box.right - box.left, box.bottom - box.top], x3 = _a3[0], y3 = _a3[1], width = _a3[2], height = _a3[3];
      Box2.assertIsValidBox({ x: x3, y: y3, width, height }, "Box.constructor", allowNegativeDimensions);
      this._x = x3;
      this._y = y3;
      this._width = width;
      this._height = height;
    }
    Box2.isRect = function(rect) {
      return !!rect && [rect.x, rect.y, rect.width, rect.height].every(isValidNumber);
    };
    Box2.assertIsValidBox = function(box, callee, allowNegativeDimensions) {
      if (allowNegativeDimensions === void 0) {
        allowNegativeDimensions = false;
      }
      if (!Box2.isRect(box)) {
        throw new Error(callee + " - invalid box: " + JSON.stringify(box) + ", expected object with properties x, y, width, height");
      }
      if (!allowNegativeDimensions && (box.width < 0 || box.height < 0)) {
        throw new Error(callee + " - width (" + box.width + ") and height (" + box.height + ") must be positive numbers");
      }
    };
    Object.defineProperty(Box2.prototype, "x", {
      get: function() {
        return this._x;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "y", {
      get: function() {
        return this._y;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "width", {
      get: function() {
        return this._width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "height", {
      get: function() {
        return this._height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "left", {
      get: function() {
        return this.x;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "top", {
      get: function() {
        return this.y;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "right", {
      get: function() {
        return this.x + this.width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "bottom", {
      get: function() {
        return this.y + this.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "area", {
      get: function() {
        return this.width * this.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "topLeft", {
      get: function() {
        return new Point(this.left, this.top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "topRight", {
      get: function() {
        return new Point(this.right, this.top);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "bottomLeft", {
      get: function() {
        return new Point(this.left, this.bottom);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Box2.prototype, "bottomRight", {
      get: function() {
        return new Point(this.right, this.bottom);
      },
      enumerable: true,
      configurable: true
    });
    Box2.prototype.round = function() {
      var _a3 = [this.x, this.y, this.width, this.height].map(function(val) {
        return Math.round(val);
      }), x3 = _a3[0], y3 = _a3[1], width = _a3[2], height = _a3[3];
      return new Box2({ x: x3, y: y3, width, height });
    };
    Box2.prototype.floor = function() {
      var _a3 = [this.x, this.y, this.width, this.height].map(function(val) {
        return Math.floor(val);
      }), x3 = _a3[0], y3 = _a3[1], width = _a3[2], height = _a3[3];
      return new Box2({ x: x3, y: y3, width, height });
    };
    Box2.prototype.toSquare = function() {
      var _a3 = this, x3 = _a3.x, y3 = _a3.y, width = _a3.width, height = _a3.height;
      var diff = Math.abs(width - height);
      if (width < height) {
        x3 -= diff / 2;
        width += diff;
      }
      if (height < width) {
        y3 -= diff / 2;
        height += diff;
      }
      return new Box2({ x: x3, y: y3, width, height });
    };
    Box2.prototype.rescale = function(s3) {
      var scaleX = isDimensions(s3) ? s3.width : s3;
      var scaleY = isDimensions(s3) ? s3.height : s3;
      return new Box2({
        x: this.x * scaleX,
        y: this.y * scaleY,
        width: this.width * scaleX,
        height: this.height * scaleY
      });
    };
    Box2.prototype.pad = function(padX, padY) {
      var _a3 = [
        this.x - padX / 2,
        this.y - padY / 2,
        this.width + padX,
        this.height + padY
      ], x3 = _a3[0], y3 = _a3[1], width = _a3[2], height = _a3[3];
      return new Box2({ x: x3, y: y3, width, height });
    };
    Box2.prototype.clipAtImageBorders = function(imgWidth, imgHeight) {
      var _a3 = this, x3 = _a3.x, y3 = _a3.y, right = _a3.right, bottom = _a3.bottom;
      var clippedX = Math.max(x3, 0);
      var clippedY = Math.max(y3, 0);
      var newWidth = right - clippedX;
      var newHeight = bottom - clippedY;
      var clippedWidth = Math.min(newWidth, imgWidth - clippedX);
      var clippedHeight = Math.min(newHeight, imgHeight - clippedY);
      return new Box2({ x: clippedX, y: clippedY, width: clippedWidth, height: clippedHeight }).floor();
    };
    Box2.prototype.shift = function(sx, sy) {
      var _a3 = this, width = _a3.width, height = _a3.height;
      var x3 = this.x + sx;
      var y3 = this.y + sy;
      return new Box2({ x: x3, y: y3, width, height });
    };
    Box2.prototype.padAtBorders = function(imageHeight, imageWidth) {
      var w3 = this.width + 1;
      var h3 = this.height + 1;
      var dx = 1;
      var dy = 1;
      var edx = w3;
      var edy = h3;
      var x3 = this.left;
      var y3 = this.top;
      var ex = this.right;
      var ey = this.bottom;
      if (ex > imageWidth) {
        edx = -ex + imageWidth + w3;
        ex = imageWidth;
      }
      if (ey > imageHeight) {
        edy = -ey + imageHeight + h3;
        ey = imageHeight;
      }
      if (x3 < 1) {
        edy = 2 - x3;
        x3 = 1;
      }
      if (y3 < 1) {
        edy = 2 - y3;
        y3 = 1;
      }
      return { dy, edy, dx, edx, y: y3, ey, x: x3, ex, w: w3, h: h3 };
    };
    Box2.prototype.calibrate = function(region) {
      return new Box2({
        left: this.left + region.left * this.width,
        top: this.top + region.top * this.height,
        right: this.right + region.right * this.width,
        bottom: this.bottom + region.bottom * this.height
      }).toSquare().round();
    };
    return Box2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/BoundingBox.js
var BoundingBox = (
  /** @class */
  function(_super) {
    __extends(BoundingBox2, _super);
    function BoundingBox2(left, top, right, bottom, allowNegativeDimensions) {
      if (allowNegativeDimensions === void 0) {
        allowNegativeDimensions = false;
      }
      return _super.call(this, { left, top, right, bottom }, allowNegativeDimensions) || this;
    }
    return BoundingBox2;
  }(Box)
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/LabeledBox.js
var LabeledBox = (
  /** @class */
  function(_super) {
    __extends(LabeledBox2, _super);
    function LabeledBox2(box, label) {
      var _this = _super.call(this, box) || this;
      _this._label = label;
      return _this;
    }
    LabeledBox2.assertIsValidLabeledBox = function(box, callee) {
      Box.assertIsValidBox(box, callee);
      if (!isValidNumber(box.label)) {
        throw new Error(callee + " - expected property label (" + box.label + ") to be a number");
      }
    };
    Object.defineProperty(LabeledBox2.prototype, "label", {
      get: function() {
        return this._label;
      },
      enumerable: true,
      configurable: true
    });
    return LabeledBox2;
  }(Box)
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/ObjectDetection.js
var ObjectDetection = (
  /** @class */
  function() {
    function ObjectDetection2(score, classScore, className, relativeBox, imageDims) {
      this._imageDims = new Dimensions(imageDims.width, imageDims.height);
      this._score = score;
      this._classScore = classScore;
      this._className = className;
      this._box = new Box(relativeBox).rescale(this._imageDims);
    }
    Object.defineProperty(ObjectDetection2.prototype, "score", {
      get: function() {
        return this._score;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "classScore", {
      get: function() {
        return this._classScore;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "className", {
      get: function() {
        return this._className;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "box", {
      get: function() {
        return this._box;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "imageDims", {
      get: function() {
        return this._imageDims;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "imageWidth", {
      get: function() {
        return this.imageDims.width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "imageHeight", {
      get: function() {
        return this.imageDims.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ObjectDetection2.prototype, "relativeBox", {
      get: function() {
        return new Box(this._box).rescale(this.imageDims.reverse());
      },
      enumerable: true,
      configurable: true
    });
    ObjectDetection2.prototype.forSize = function(width, height) {
      return new ObjectDetection2(this.score, this.classScore, this.className, this.relativeBox, { width, height });
    };
    return ObjectDetection2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/PredictedBox.js
var PredictedBox = (
  /** @class */
  function(_super) {
    __extends(PredictedBox2, _super);
    function PredictedBox2(box, label, score, classScore) {
      var _this = _super.call(this, box, label) || this;
      _this._score = score;
      _this._classScore = classScore;
      return _this;
    }
    PredictedBox2.assertIsValidPredictedBox = function(box, callee) {
      LabeledBox.assertIsValidLabeledBox(box, callee);
      if (!isValidProbablitiy(box.score) || !isValidProbablitiy(box.classScore)) {
        throw new Error(callee + " - expected properties score (" + box.score + ") and (" + box.classScore + ") to be a number between [0, 1]");
      }
    };
    Object.defineProperty(PredictedBox2.prototype, "score", {
      get: function() {
        return this._score;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PredictedBox2.prototype, "classScore", {
      get: function() {
        return this._classScore;
      },
      enumerable: true,
      configurable: true
    });
    return PredictedBox2;
  }(LabeledBox)
);

// node_modules/tfjs-image-recognition-base/build/es6/classes/Rect.js
var Rect = (
  /** @class */
  function(_super) {
    __extends(Rect2, _super);
    function Rect2(x3, y3, width, height, allowNegativeDimensions) {
      if (allowNegativeDimensions === void 0) {
        allowNegativeDimensions = false;
      }
      return _super.call(this, { x: x3, y: y3, width, height }, allowNegativeDimensions) || this;
    }
    return Rect2;
  }(Box)
);

// node_modules/tfjs-image-recognition-base/build/es6/env/createBrowserEnv.js
function createBrowserEnv() {
  var fetch2 = window["fetch"] || function() {
    throw new Error("fetch - missing fetch implementation for browser environment");
  };
  var readFile = function() {
    throw new Error("readFile - filesystem not available for browser environment");
  };
  return {
    Canvas: HTMLCanvasElement,
    CanvasRenderingContext2D,
    Image: HTMLImageElement,
    ImageData,
    Video: HTMLVideoElement,
    createCanvasElement: function() {
      return document.createElement("canvas");
    },
    createImageElement: function() {
      return document.createElement("img");
    },
    fetch: fetch2,
    readFile
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/env/createFileSystem.js
function createFileSystem(fs3) {
  var requireFsError = "";
  if (!fs3) {
    try {
      fs3 = require_fs();
    } catch (err) {
      requireFsError = err.toString();
    }
  }
  var readFile = fs3 ? function(filePath) {
    return new Promise(function(res, rej) {
      fs3.readFile(filePath, function(err, buffer) {
        return err ? rej(err) : res(buffer);
      });
    });
  } : function() {
    throw new Error("readFile - failed to require fs in nodejs environment with error: " + requireFsError);
  };
  return {
    readFile
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/env/createNodejsEnv.js
function createNodejsEnv() {
  var Canvas = global["Canvas"] || global["HTMLCanvasElement"];
  var Image = global["Image"] || global["HTMLImageElement"];
  var createCanvasElement = function() {
    if (Canvas) {
      return new Canvas();
    }
    throw new Error("createCanvasElement - missing Canvas implementation for nodejs environment");
  };
  var createImageElement = function() {
    if (Image) {
      return new Image();
    }
    throw new Error("createImageElement - missing Image implementation for nodejs environment");
  };
  var fetch2 = global["fetch"] || function() {
    throw new Error("fetch - missing fetch implementation for nodejs environment");
  };
  var fileSystem = createFileSystem();
  return __assign({
    Canvas: Canvas || /** @class */
    /* @__PURE__ */ function() {
      function Canvas2() {
      }
      return Canvas2;
    }(),
    CanvasRenderingContext2D: global["CanvasRenderingContext2D"] || /** @class */
    /* @__PURE__ */ function() {
      function class_1() {
      }
      return class_1;
    }(),
    Image: Image || /** @class */
    /* @__PURE__ */ function() {
      function Image2() {
      }
      return Image2;
    }(),
    ImageData: global["ImageData"] || /** @class */
    /* @__PURE__ */ function() {
      function class_2() {
      }
      return class_2;
    }(),
    Video: global["HTMLVideoElement"] || /** @class */
    /* @__PURE__ */ function() {
      function class_3() {
      }
      return class_3;
    }(),
    createCanvasElement,
    createImageElement,
    fetch: fetch2
  }, fileSystem);
}

// node_modules/tfjs-image-recognition-base/build/es6/env/isBrowser.js
function isBrowser() {
  return typeof window === "object" && typeof document !== "undefined" && typeof HTMLImageElement !== "undefined" && typeof HTMLCanvasElement !== "undefined" && typeof HTMLVideoElement !== "undefined" && typeof ImageData !== "undefined" && typeof CanvasRenderingContext2D !== "undefined";
}

// node_modules/tfjs-image-recognition-base/build/es6/env/isNodejs.js
function isNodejs() {
  return typeof global === "object" && typeof __require === "function" && typeof module !== "undefined" && typeof process !== "undefined" && !!process.version;
}

// node_modules/tfjs-image-recognition-base/build/es6/env/index.js
var environment;
function getEnv() {
  if (!environment) {
    throw new Error("getEnv - environment is not defined, check isNodejs() and isBrowser()");
  }
  return environment;
}
function setEnv(env2) {
  environment = env2;
}
function initialize() {
  if (isBrowser()) {
    setEnv(createBrowserEnv());
  }
  if (isNodejs()) {
    setEnv(createNodejsEnv());
  }
}
function monkeyPatch(env2) {
  if (!environment) {
    initialize();
  }
  if (!environment) {
    throw new Error("monkeyPatch - environment is not defined, check isNodejs() and isBrowser()");
  }
  var _a3 = env2.Canvas, Canvas = _a3 === void 0 ? environment.Canvas : _a3, _b = env2.Image, Image = _b === void 0 ? environment.Image : _b;
  environment.Canvas = Canvas;
  environment.Image = Image;
  environment.createCanvasElement = env2.createCanvasElement || function() {
    return new Canvas();
  };
  environment.createImageElement = env2.createImageElement || function() {
    return new Image();
  };
  environment.ImageData = env2.ImageData || environment.ImageData;
  environment.Video = env2.Video || environment.Video;
  environment.fetch = env2.fetch || environment.fetch;
  environment.readFile = env2.readFile || environment.readFile;
}
var env = {
  getEnv,
  setEnv,
  initialize,
  createBrowserEnv,
  createFileSystem,
  createNodejsEnv,
  monkeyPatch,
  isBrowser,
  isNodejs
};
initialize();

// node_modules/tfjs-image-recognition-base/build/es6/dom/resolveInput.js
function resolveInput(arg) {
  if (!env.isNodejs() && typeof arg === "string") {
    return document.getElementById(arg);
  }
  return arg;
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/getContext2dOrThrow.js
function getContext2dOrThrow(canvasArg) {
  var _a3 = env.getEnv(), Canvas = _a3.Canvas, CanvasRenderingContext2D2 = _a3.CanvasRenderingContext2D;
  if (canvasArg instanceof CanvasRenderingContext2D2) {
    return canvasArg;
  }
  var canvas = resolveInput(canvasArg);
  if (!(canvas instanceof Canvas)) {
    throw new Error("resolveContext2d - expected canvas to be of instance of Canvas");
  }
  var ctx = canvas.getContext("2d");
  if (!ctx) {
    throw new Error("resolveContext2d - canvas 2d context is null");
  }
  return ctx;
}

// node_modules/tfjs-image-recognition-base/build/es6/draw/DrawTextField.js
var AnchorPosition;
(function(AnchorPosition2) {
  AnchorPosition2["TOP_LEFT"] = "TOP_LEFT";
  AnchorPosition2["TOP_RIGHT"] = "TOP_RIGHT";
  AnchorPosition2["BOTTOM_LEFT"] = "BOTTOM_LEFT";
  AnchorPosition2["BOTTOM_RIGHT"] = "BOTTOM_RIGHT";
})(AnchorPosition || (AnchorPosition = {}));
var DrawTextFieldOptions = (
  /** @class */
  /* @__PURE__ */ function() {
    function DrawTextFieldOptions2(options) {
      if (options === void 0) {
        options = {};
      }
      var anchorPosition = options.anchorPosition, backgroundColor = options.backgroundColor, fontColor = options.fontColor, fontSize = options.fontSize, fontStyle = options.fontStyle, padding = options.padding;
      this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;
      this.backgroundColor = backgroundColor || "rgba(0, 0, 0, 0.5)";
      this.fontColor = fontColor || "rgba(255, 255, 255, 1)";
      this.fontSize = fontSize || 14;
      this.fontStyle = fontStyle || "Georgia";
      this.padding = padding || 4;
    }
    return DrawTextFieldOptions2;
  }()
);
var DrawTextField = (
  /** @class */
  function() {
    function DrawTextField2(text, anchor, options) {
      if (options === void 0) {
        options = {};
      }
      this.text = typeof text === "string" ? [text] : text instanceof DrawTextField2 ? text.text : text;
      this.anchor = anchor;
      this.options = new DrawTextFieldOptions(options);
    }
    DrawTextField2.prototype.measureWidth = function(ctx) {
      var padding = this.options.padding;
      return this.text.map(function(l3) {
        return ctx.measureText(l3).width;
      }).reduce(function(w0, w1) {
        return w0 < w1 ? w1 : w0;
      }, 0) + 2 * padding;
    };
    DrawTextField2.prototype.measureHeight = function() {
      var _a3 = this.options, fontSize = _a3.fontSize, padding = _a3.padding;
      return this.text.length * fontSize + 2 * padding;
    };
    DrawTextField2.prototype.getUpperLeft = function(ctx, canvasDims) {
      var anchorPosition = this.options.anchorPosition;
      var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;
      var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;
      var textFieldWidth = this.measureWidth(ctx);
      var textFieldHeight = this.measureHeight();
      var x3 = isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x;
      var y3 = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y;
      if (canvasDims) {
        var width = canvasDims.width, height = canvasDims.height;
        var newX = Math.max(Math.min(x3, width - textFieldWidth), 0);
        var newY = Math.max(Math.min(y3, height - textFieldHeight), 0);
        return { x: newX, y: newY };
      }
      return { x: x3, y: y3 };
    };
    DrawTextField2.prototype.draw = function(canvasArg) {
      var canvas = resolveInput(canvasArg);
      var ctx = getContext2dOrThrow(canvas);
      var _a3 = this.options, backgroundColor = _a3.backgroundColor, fontColor = _a3.fontColor, fontSize = _a3.fontSize, fontStyle = _a3.fontStyle, padding = _a3.padding;
      ctx.font = fontSize + "px " + fontStyle;
      var maxTextWidth = this.measureWidth(ctx);
      var textHeight = this.measureHeight();
      ctx.fillStyle = backgroundColor;
      var upperLeft = this.getUpperLeft(ctx, canvas);
      ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);
      ctx.fillStyle = fontColor;
      this.text.forEach(function(textLine, i3) {
        var x3 = padding + upperLeft.x;
        var y3 = padding + upperLeft.y + (i3 + 1) * fontSize;
        ctx.fillText(textLine, x3, y3);
      });
    };
    return DrawTextField2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/draw/DrawBox.js
var DrawBoxOptions = (
  /** @class */
  /* @__PURE__ */ function() {
    function DrawBoxOptions2(options) {
      if (options === void 0) {
        options = {};
      }
      var boxColor = options.boxColor, lineWidth = options.lineWidth, label = options.label, drawLabelOptions = options.drawLabelOptions;
      this.boxColor = boxColor || "rgba(0, 0, 255, 1)";
      this.lineWidth = lineWidth || 2;
      this.label = label;
      var defaultDrawLabelOptions = {
        anchorPosition: AnchorPosition.BOTTOM_LEFT,
        backgroundColor: this.boxColor
      };
      this.drawLabelOptions = new DrawTextFieldOptions(Object.assign({}, defaultDrawLabelOptions, drawLabelOptions));
    }
    return DrawBoxOptions2;
  }()
);
var DrawBox = (
  /** @class */
  function() {
    function DrawBox2(box, options) {
      if (options === void 0) {
        options = {};
      }
      this.box = new Box(box);
      this.options = new DrawBoxOptions(options);
    }
    DrawBox2.prototype.draw = function(canvasArg) {
      var ctx = getContext2dOrThrow(canvasArg);
      var _a3 = this.options, boxColor = _a3.boxColor, lineWidth = _a3.lineWidth;
      var _b = this.box, x3 = _b.x, y3 = _b.y, width = _b.width, height = _b.height;
      ctx.strokeStyle = boxColor;
      ctx.lineWidth = lineWidth;
      ctx.strokeRect(x3, y3, width, height);
      var label = this.options.label;
      if (label) {
        new DrawTextField([label], { x: x3 - lineWidth / 2, y: y3 }, this.options.drawLabelOptions).draw(canvasArg);
      }
    };
    return DrawBox2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/tfjsImageRecognitionBase.js
var tfjsImageRecognitionBase_exports = {};
__export(tfjsImageRecognitionBase_exports, {
  SeparableConvParams: () => SeparableConvParams,
  TinyYolov2: () => TinyYolov2,
  TinyYolov2Options: () => TinyYolov2Options,
  TinyYolov2SizeType: () => TinyYolov2SizeType,
  convLayer: () => convLayer,
  disposeUnusedWeightTensors: () => disposeUnusedWeightTensors,
  extractConvParamsFactory: () => extractConvParamsFactory,
  extractFCParamsFactory: () => extractFCParamsFactory,
  extractSeparableConvParamsFactory: () => extractSeparableConvParamsFactory,
  extractWeightEntryFactory: () => extractWeightEntryFactory,
  extractWeightsFactory: () => extractWeightsFactory,
  getModelUris: () => getModelUris,
  loadSeparableConvParamsFactory: () => loadSeparableConvParamsFactory,
  validateConfig: () => validateConfig
});

// node_modules/tfjs-image-recognition-base/build/es6/common/convLayer.js
function convLayer(x3, params, padding, withRelu) {
  if (padding === void 0) {
    padding = "same";
  }
  if (withRelu === void 0) {
    withRelu = false;
  }
  return Ze2(function() {
    var out = Or2(dl2(x3, params.filters, [1, 1], padding), params.bias);
    return withRelu ? ah2(out) : out;
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/common/disposeUnusedWeightTensors.js
function disposeUnusedWeightTensors(weightMap, paramMappings) {
  Object.keys(weightMap).forEach(function(path) {
    if (!paramMappings.some(function(pm) {
      return pm.originalPath === path;
    })) {
      weightMap[path].dispose();
    }
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/common/extractConvParamsFactory.js
function extractConvParamsFactory(extractWeights, paramMappings) {
  return function(channelsIn, channelsOut, filterSize, mappedPrefix) {
    var filters = Ln2(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [filterSize, filterSize, channelsIn, channelsOut]);
    var bias = Mn2(extractWeights(channelsOut));
    paramMappings.push({ paramPath: mappedPrefix + "/filters" }, { paramPath: mappedPrefix + "/bias" });
    return { filters, bias };
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/common/extractFCParamsFactory.js
function extractFCParamsFactory(extractWeights, paramMappings) {
  return function(channelsIn, channelsOut, mappedPrefix) {
    var fc_weights = Bn2(extractWeights(channelsIn * channelsOut), [channelsIn, channelsOut]);
    var fc_bias = Mn2(extractWeights(channelsOut));
    paramMappings.push({ paramPath: mappedPrefix + "/weights" }, { paramPath: mappedPrefix + "/bias" });
    return {
      weights: fc_weights,
      bias: fc_bias
    };
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/common/types.js
var SeparableConvParams = (
  /** @class */
  /* @__PURE__ */ function() {
    function SeparableConvParams2(depthwise_filter, pointwise_filter, bias) {
      this.depthwise_filter = depthwise_filter;
      this.pointwise_filter = pointwise_filter;
      this.bias = bias;
    }
    return SeparableConvParams2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/common/extractSeparableConvParamsFactory.js
function extractSeparableConvParamsFactory(extractWeights, paramMappings) {
  return function(channelsIn, channelsOut, mappedPrefix) {
    var depthwise_filter = Ln2(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);
    var pointwise_filter = Ln2(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);
    var bias = Mn2(extractWeights(channelsOut));
    paramMappings.push({ paramPath: mappedPrefix + "/depthwise_filter" }, { paramPath: mappedPrefix + "/pointwise_filter" }, { paramPath: mappedPrefix + "/bias" });
    return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);
  };
}
function loadSeparableConvParamsFactory(extractWeightEntry) {
  return function(prefix) {
    var depthwise_filter = extractWeightEntry(prefix + "/depthwise_filter", 4);
    var pointwise_filter = extractWeightEntry(prefix + "/pointwise_filter", 4);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/common/extractWeightEntryFactory.js
function extractWeightEntryFactory(weightMap, paramMappings) {
  return function(originalPath, paramRank, mappedPath) {
    var tensor = weightMap[originalPath];
    if (!isTensor(tensor, paramRank)) {
      throw new Error("expected weightMap[" + originalPath + "] to be a Tensor" + paramRank + "D, instead have " + tensor);
    }
    paramMappings.push({ originalPath, paramPath: mappedPath || originalPath });
    return tensor;
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/common/extractWeightsFactory.js
function extractWeightsFactory(weights) {
  var remainingWeights = weights;
  function extractWeights(numWeights) {
    var ret = remainingWeights.slice(0, numWeights);
    remainingWeights = remainingWeights.slice(numWeights);
    return ret;
  }
  function getRemainingWeights() {
    return remainingWeights;
  }
  return {
    extractWeights,
    getRemainingWeights
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/common/getModelUris.js
function getModelUris(uri, defaultModelName) {
  var defaultManifestFilename = defaultModelName + "-weights_manifest.json";
  if (!uri) {
    return {
      modelBaseUri: "",
      manifestUri: defaultManifestFilename
    };
  }
  if (uri === "/") {
    return {
      modelBaseUri: "/",
      manifestUri: "/" + defaultManifestFilename
    };
  }
  var protocol = uri.startsWith("http://") ? "http://" : uri.startsWith("https://") ? "https://" : "";
  uri = uri.replace(protocol, "");
  var parts = uri.split("/").filter(function(s3) {
    return s3;
  });
  var manifestFile = uri.endsWith(".json") ? parts[parts.length - 1] : defaultManifestFilename;
  var modelBaseUri = protocol + (uri.endsWith(".json") ? parts.slice(0, parts.length - 1) : parts).join("/");
  modelBaseUri = uri.startsWith("/") ? "/" + modelBaseUri : modelBaseUri;
  return {
    modelBaseUri,
    manifestUri: modelBaseUri === "/" ? "/" + manifestFile : modelBaseUri + "/" + manifestFile
  };
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/isMediaLoaded.js
function isMediaLoaded(media) {
  var _a3 = env.getEnv(), Image = _a3.Image, Video = _a3.Video;
  return media instanceof Image && media.complete || media instanceof Video && media.readyState >= 3;
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/awaitMediaLoaded.js
function awaitMediaLoaded(media) {
  return new Promise(function(resolve, reject) {
    if (media instanceof env.getEnv().Canvas || isMediaLoaded(media)) {
      return resolve();
    }
    function onLoad(e3) {
      if (!e3.currentTarget)
        return;
      e3.currentTarget.removeEventListener("load", onLoad);
      e3.currentTarget.removeEventListener("error", onError);
      resolve(e3);
    }
    function onError(e3) {
      if (!e3.currentTarget)
        return;
      e3.currentTarget.removeEventListener("load", onLoad);
      e3.currentTarget.removeEventListener("error", onError);
      reject(e3);
    }
    media.addEventListener("load", onLoad);
    media.addEventListener("error", onError);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/bufferToImage.js
function bufferToImage(buf) {
  return new Promise(function(resolve, reject) {
    if (!(buf instanceof Blob)) {
      return reject("bufferToImage - expected buf to be of type: Blob");
    }
    var reader = new FileReader();
    reader.onload = function() {
      if (typeof reader.result !== "string") {
        return reject("bufferToImage - expected reader.result to be a string, in onload");
      }
      var img = env.getEnv().createImageElement();
      img.onload = function() {
        return resolve(img);
      };
      img.onerror = reject;
      img.src = reader.result;
    };
    reader.onerror = reject;
    reader.readAsDataURL(buf);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/getMediaDimensions.js
function getMediaDimensions(input) {
  var _a3 = env.getEnv(), Image = _a3.Image, Video = _a3.Video;
  if (input instanceof Image) {
    return new Dimensions(input.naturalWidth, input.naturalHeight);
  }
  if (input instanceof Video) {
    return new Dimensions(input.videoWidth, input.videoHeight);
  }
  return new Dimensions(input.width, input.height);
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/createCanvas.js
function createCanvas(_a3) {
  var width = _a3.width, height = _a3.height;
  var createCanvasElement = env.getEnv().createCanvasElement;
  var canvas = createCanvasElement();
  canvas.width = width;
  canvas.height = height;
  return canvas;
}
function createCanvasFromMedia(media, dims) {
  var ImageData2 = env.getEnv().ImageData;
  if (!(media instanceof ImageData2) && !isMediaLoaded(media)) {
    throw new Error("createCanvasFromMedia - media has not finished loading yet");
  }
  var _a3 = dims || getMediaDimensions(media), width = _a3.width, height = _a3.height;
  var canvas = createCanvas({ width, height });
  if (media instanceof ImageData2) {
    getContext2dOrThrow(canvas).putImageData(media, 0, 0);
  } else {
    getContext2dOrThrow(canvas).drawImage(media, 0, 0, width, height);
  }
  return canvas;
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/fetchOrThrow.js
function fetchOrThrow(url, init) {
  return __awaiter(this, void 0, void 0, function() {
    var fetch2, res;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          fetch2 = env.getEnv().fetch;
          return [4, fetch2(url, init)];
        case 1:
          res = _a3.sent();
          if (!(res.status < 400)) {
            throw new Error("failed to fetch: (" + res.status + ") " + res.statusText + ", from url: " + res.url);
          }
          return [2, res];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/fetchImage.js
function fetchImage(uri) {
  return __awaiter(this, void 0, void 0, function() {
    var res, blob;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, fetchOrThrow(uri)];
        case 1:
          res = _a3.sent();
          return [4, res.blob()];
        case 2:
          blob = _a3.sent();
          if (!blob.type.startsWith("image/")) {
            throw new Error("fetchImage - expected blob type to be of type image/*, instead have: " + blob.type + ", for url: " + res.url);
          }
          return [2, bufferToImage(blob)];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/fetchJson.js
function fetchJson(uri) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, fetchOrThrow(uri)];
        case 1:
          return [2, _a3.sent().json()];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/fetchNetWeights.js
function fetchNetWeights(uri) {
  return __awaiter(this, void 0, void 0, function() {
    var _a3;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _a3 = Float32Array.bind;
          return [4, fetchOrThrow(uri)];
        case 1:
          return [4, _b.sent().arrayBuffer()];
        case 2:
          return [2, new (_a3.apply(Float32Array, [void 0, _b.sent()]))()];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/imageTensorToCanvas.js
function imageTensorToCanvas(imgTensor, canvas) {
  return __awaiter(this, void 0, void 0, function() {
    var targetCanvas, _a3, height, width, numChannels, imgTensor3D;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          targetCanvas = canvas || env.getEnv().createCanvasElement();
          _a3 = imgTensor.shape.slice(isTensor4D(imgTensor) ? 1 : 0), height = _a3[0], width = _a3[1], numChannels = _a3[2];
          imgTensor3D = Ze2(function() {
            return imgTensor.as3D(height, width, numChannels).toInt();
          });
          return [4, Vd.toPixels(imgTensor3D, targetCanvas)];
        case 1:
          _b.sent();
          imgTensor3D.dispose();
          return [2, targetCanvas];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/imageToSquare.js
function imageToSquare(input, inputSize, centerImage) {
  if (centerImage === void 0) {
    centerImage = false;
  }
  var _a3 = env.getEnv(), Image = _a3.Image, Canvas = _a3.Canvas;
  if (!(input instanceof Image || input instanceof Canvas)) {
    throw new Error("imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement");
  }
  var dims = getMediaDimensions(input);
  var scale2 = inputSize / Math.max(dims.height, dims.width);
  var width = scale2 * dims.width;
  var height = scale2 * dims.height;
  var targetCanvas = createCanvas({ width: inputSize, height: inputSize });
  var inputCanvas = input instanceof Canvas ? input : createCanvasFromMedia(input);
  var offset = Math.abs(width - height) / 2;
  var dx = centerImage && width < height ? offset : 0;
  var dy = centerImage && height < width ? offset : 0;
  getContext2dOrThrow(targetCanvas).drawImage(inputCanvas, dx, dy, width, height);
  return targetCanvas;
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/isMediaElement.js
function isMediaElement(input) {
  var _a3 = env.getEnv(), Image = _a3.Image, Canvas = _a3.Canvas, Video = _a3.Video;
  return input instanceof Image || input instanceof Canvas || input instanceof Video;
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/loadWeightMap.js
function loadWeightMap(uri, defaultModelName) {
  return __awaiter(this, void 0, void 0, function() {
    var _a3, manifestUri, modelBaseUri, manifest;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _a3 = getModelUris(uri, defaultModelName), manifestUri = _a3.manifestUri, modelBaseUri = _a3.modelBaseUri;
          return [4, fetchJson(manifestUri)];
        case 1:
          manifest = _b.sent();
          return [2, Bd.loadWeights(manifest, modelBaseUri)];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/matchDimensions.js
function matchDimensions(input, reference, useMediaDimensions) {
  if (useMediaDimensions === void 0) {
    useMediaDimensions = false;
  }
  var _a3 = useMediaDimensions ? getMediaDimensions(reference) : reference, width = _a3.width, height = _a3.height;
  input.width = width;
  input.height = height;
  return { width, height };
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/padToSquare.js
function padToSquare(imgTensor, isCenterImage) {
  if (isCenterImage === void 0) {
    isCenterImage = false;
  }
  return Ze2(function() {
    var _a3 = imgTensor.shape.slice(1), height = _a3[0], width = _a3[1];
    if (height === width) {
      return imgTensor;
    }
    var dimDiff = Math.abs(height - width);
    var paddingAmount = Math.round(dimDiff * (isCenterImage ? 0.5 : 1));
    var paddingAxis = height > width ? 2 : 1;
    var createPaddingTensor = function(paddingAmount2) {
      var paddingTensorShape = imgTensor.shape.slice();
      paddingTensorShape[paddingAxis] = paddingAmount2;
      return Hn2(paddingTensorShape, 0);
    };
    var paddingTensorAppend = createPaddingTensor(paddingAmount);
    var remainingPaddingAmount = dimDiff - paddingTensorAppend.shape[paddingAxis];
    var paddingTensorPrepend = isCenterImage && remainingPaddingAmount ? createPaddingTensor(remainingPaddingAmount) : null;
    var tensorsToStack = [
      paddingTensorPrepend,
      imgTensor,
      paddingTensorAppend
    ].filter(function(t3) {
      return !!t3;
    }).map(function(t3) {
      return t3.toFloat();
    });
    return Yn2(tensorsToStack, paddingAxis);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/dom/NetInput.js
var NetInput = (
  /** @class */
  function() {
    function NetInput2(inputs, treatAsBatchInput) {
      var _this = this;
      if (treatAsBatchInput === void 0) {
        treatAsBatchInput = false;
      }
      this._imageTensors = [];
      this._canvases = [];
      this._treatAsBatchInput = false;
      this._inputDimensions = [];
      if (!Array.isArray(inputs)) {
        throw new Error("NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have " + inputs);
      }
      this._treatAsBatchInput = treatAsBatchInput;
      this._batchSize = inputs.length;
      inputs.forEach(function(input, idx) {
        if (isTensor3D(input)) {
          _this._imageTensors[idx] = input;
          _this._inputDimensions[idx] = input.shape;
          return;
        }
        if (isTensor4D(input)) {
          var batchSize = input.shape[0];
          if (batchSize !== 1) {
            throw new Error("NetInput - tf.Tensor4D with batchSize " + batchSize + " passed, but not supported in input array");
          }
          _this._imageTensors[idx] = input;
          _this._inputDimensions[idx] = input.shape.slice(1);
          return;
        }
        var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);
        _this._canvases[idx] = canvas;
        _this._inputDimensions[idx] = [canvas.height, canvas.width, 3];
      });
    }
    Object.defineProperty(NetInput2.prototype, "imageTensors", {
      get: function() {
        return this._imageTensors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "canvases", {
      get: function() {
        return this._canvases;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "isBatchInput", {
      get: function() {
        return this.batchSize > 1 || this._treatAsBatchInput;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "batchSize", {
      get: function() {
        return this._batchSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "inputDimensions", {
      get: function() {
        return this._inputDimensions;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "inputSize", {
      get: function() {
        return this._inputSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NetInput2.prototype, "reshapedInputDimensions", {
      get: function() {
        var _this = this;
        return range(this.batchSize, 0, 1).map(function(_3, batchIdx) {
          return _this.getReshapedInputDimensions(batchIdx);
        });
      },
      enumerable: true,
      configurable: true
    });
    NetInput2.prototype.getInput = function(batchIdx) {
      return this.canvases[batchIdx] || this.imageTensors[batchIdx];
    };
    NetInput2.prototype.getInputDimensions = function(batchIdx) {
      return this._inputDimensions[batchIdx];
    };
    NetInput2.prototype.getInputHeight = function(batchIdx) {
      return this._inputDimensions[batchIdx][0];
    };
    NetInput2.prototype.getInputWidth = function(batchIdx) {
      return this._inputDimensions[batchIdx][1];
    };
    NetInput2.prototype.getReshapedInputDimensions = function(batchIdx) {
      if (typeof this.inputSize !== "number") {
        throw new Error("getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet");
      }
      var width = this.getInputWidth(batchIdx);
      var height = this.getInputHeight(batchIdx);
      return computeReshapedDimensions({ width, height }, this.inputSize);
    };
    NetInput2.prototype.toBatchTensor = function(inputSize, isCenterInputs) {
      var _this = this;
      if (isCenterInputs === void 0) {
        isCenterInputs = true;
      }
      this._inputSize = inputSize;
      return Ze2(function() {
        var inputTensors = range(_this.batchSize, 0, 1).map(function(batchIdx) {
          var input = _this.getInput(batchIdx);
          if (input instanceof wt2) {
            var imgTensor = isTensor4D(input) ? input : input.expandDims();
            imgTensor = padToSquare(imgTensor, isCenterInputs);
            if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {
              imgTensor = nf.resizeBilinear(imgTensor, [inputSize, inputSize]);
            }
            return imgTensor.as3D(inputSize, inputSize, 3);
          }
          if (input instanceof env.getEnv().Canvas) {
            return Vd.fromPixels(imageToSquare(input, inputSize, isCenterInputs));
          }
          throw new Error("toBatchTensor - at batchIdx " + batchIdx + ", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have " + input);
        });
        var batchTensor = hr2(inputTensors.map(function(t3) {
          return t3.toFloat();
        })).as4D(_this.batchSize, inputSize, inputSize, 3);
        return batchTensor;
      });
    };
    return NetInput2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/dom/toNetInput.js
function toNetInput(inputs) {
  return __awaiter(this, void 0, void 0, function() {
    var inputArgArray, getIdxHint, inputArray;
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          if (inputs instanceof NetInput) {
            return [2, inputs];
          }
          inputArgArray = Array.isArray(inputs) ? inputs : [inputs];
          if (!inputArgArray.length) {
            throw new Error("toNetInput - empty array passed as input");
          }
          getIdxHint = function(idx) {
            return Array.isArray(inputs) ? " at input index " + idx + ":" : "";
          };
          inputArray = inputArgArray.map(resolveInput);
          inputArray.forEach(function(input, i3) {
            if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {
              if (typeof inputArgArray[i3] === "string") {
                throw new Error("toNetInput -" + getIdxHint(i3) + " string passed, but could not resolve HTMLElement for element id " + inputArgArray[i3]);
              }
              throw new Error("toNetInput -" + getIdxHint(i3) + " expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id");
            }
            if (isTensor4D(input)) {
              var batchSize = input.shape[0];
              if (batchSize !== 1) {
                throw new Error("toNetInput -" + getIdxHint(i3) + " tf.Tensor4D with batchSize " + batchSize + " passed, but not supported in input array");
              }
            }
          });
          return [4, Promise.all(inputArray.map(function(input) {
            return isMediaElement(input) && awaitMediaLoaded(input);
          }))];
        case 1:
          _a3.sent();
          return [2, new NetInput(inputArray, Array.isArray(inputs))];
      }
    });
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/NeuralNetwork.js
var NeuralNetwork = (
  /** @class */
  function() {
    function NeuralNetwork2(_name) {
      this._name = _name;
      this._params = void 0;
      this._paramMappings = [];
    }
    Object.defineProperty(NeuralNetwork2.prototype, "params", {
      get: function() {
        return this._params;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NeuralNetwork2.prototype, "paramMappings", {
      get: function() {
        return this._paramMappings;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NeuralNetwork2.prototype, "isLoaded", {
      get: function() {
        return !!this.params;
      },
      enumerable: true,
      configurable: true
    });
    NeuralNetwork2.prototype.getParamFromPath = function(paramPath) {
      var _a3 = this.traversePropertyPath(paramPath), obj = _a3.obj, objProp = _a3.objProp;
      return obj[objProp];
    };
    NeuralNetwork2.prototype.reassignParamFromPath = function(paramPath, tensor) {
      var _a3 = this.traversePropertyPath(paramPath), obj = _a3.obj, objProp = _a3.objProp;
      obj[objProp].dispose();
      obj[objProp] = tensor;
    };
    NeuralNetwork2.prototype.getParamList = function() {
      var _this = this;
      return this._paramMappings.map(function(_a3) {
        var paramPath = _a3.paramPath;
        return {
          path: paramPath,
          tensor: _this.getParamFromPath(paramPath)
        };
      });
    };
    NeuralNetwork2.prototype.getTrainableParams = function() {
      return this.getParamList().filter(function(param) {
        return param.tensor instanceof St2;
      });
    };
    NeuralNetwork2.prototype.getFrozenParams = function() {
      return this.getParamList().filter(function(param) {
        return !(param.tensor instanceof St2);
      });
    };
    NeuralNetwork2.prototype.variable = function() {
      var _this = this;
      this.getFrozenParams().forEach(function(_a3) {
        var path = _a3.path, tensor = _a3.tensor;
        _this.reassignParamFromPath(path, tensor.variable());
      });
    };
    NeuralNetwork2.prototype.freeze = function() {
      var _this = this;
      this.getTrainableParams().forEach(function(_a3) {
        var path = _a3.path, variable = _a3.tensor;
        var tensor = Fn2(variable.dataSync());
        variable.dispose();
        _this.reassignParamFromPath(path, tensor);
      });
    };
    NeuralNetwork2.prototype.dispose = function(throwOnRedispose) {
      if (throwOnRedispose === void 0) {
        throwOnRedispose = true;
      }
      this.getParamList().forEach(function(param) {
        if (throwOnRedispose && param.tensor.isDisposed) {
          throw new Error("param tensor has already been disposed for path " + param.path);
        }
        param.tensor.dispose();
      });
      this._params = void 0;
    };
    NeuralNetwork2.prototype.serializeParams = function() {
      return new Float32Array(this.getParamList().map(function(_a3) {
        var tensor = _a3.tensor;
        return Array.from(tensor.dataSync());
      }).reduce(function(flat, arr) {
        return flat.concat(arr);
      }));
    };
    NeuralNetwork2.prototype.load = function(weightsOrUrl) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (weightsOrUrl instanceof Float32Array) {
                this.extractWeights(weightsOrUrl);
                return [
                  2
                  /*return*/
                ];
              }
              return [4, this.loadFromUri(weightsOrUrl)];
            case 1:
              _a3.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    NeuralNetwork2.prototype.loadFromUri = function(uri) {
      return __awaiter(this, void 0, void 0, function() {
        var weightMap;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (uri && typeof uri !== "string") {
                throw new Error(this._name + ".loadFromUri - expected model uri");
              }
              return [4, loadWeightMap(uri, this.getDefaultModelName())];
            case 1:
              weightMap = _a3.sent();
              this.loadFromWeightMap(weightMap);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    NeuralNetwork2.prototype.loadFromDisk = function(filePath) {
      return __awaiter(this, void 0, void 0, function() {
        var readFile, _a3, manifestUri, modelBaseUri, fetchWeightsFromDisk, loadWeights, manifest, _b, _c3, weightMap;
        return __generator(this, function(_d2) {
          switch (_d2.label) {
            case 0:
              if (filePath && typeof filePath !== "string") {
                throw new Error(this._name + ".loadFromDisk - expected model file path");
              }
              readFile = env.getEnv().readFile;
              _a3 = getModelUris(filePath, this.getDefaultModelName()), manifestUri = _a3.manifestUri, modelBaseUri = _a3.modelBaseUri;
              fetchWeightsFromDisk = function(filePaths) {
                return Promise.all(filePaths.map(function(filePath2) {
                  return readFile(filePath2).then(function(buf) {
                    return buf.buffer;
                  });
                }));
              };
              loadWeights = Bd.weightsLoaderFactory(fetchWeightsFromDisk);
              _c3 = (_b = JSON).parse;
              return [4, readFile(manifestUri)];
            case 1:
              manifest = _c3.apply(_b, [_d2.sent().toString()]);
              return [4, loadWeights(manifest, modelBaseUri)];
            case 2:
              weightMap = _d2.sent();
              this.loadFromWeightMap(weightMap);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    NeuralNetwork2.prototype.loadFromWeightMap = function(weightMap) {
      var _a3 = this.extractParamsFromWeigthMap(weightMap), paramMappings = _a3.paramMappings, params = _a3.params;
      this._paramMappings = paramMappings;
      this._params = params;
    };
    NeuralNetwork2.prototype.extractWeights = function(weights) {
      var _a3 = this.extractParams(weights), paramMappings = _a3.paramMappings, params = _a3.params;
      this._paramMappings = paramMappings;
      this._params = params;
    };
    NeuralNetwork2.prototype.traversePropertyPath = function(paramPath) {
      if (!this.params) {
        throw new Error("traversePropertyPath - model has no loaded params");
      }
      var result = paramPath.split("/").reduce(function(res, objProp2) {
        if (!res.nextObj.hasOwnProperty(objProp2)) {
          throw new Error("traversePropertyPath - object does not have property " + objProp2 + ", for path " + paramPath);
        }
        return { obj: res.nextObj, objProp: objProp2, nextObj: res.nextObj[objProp2] };
      }, { nextObj: this.params });
      var obj = result.obj, objProp = result.objProp;
      if (!obj || !objProp || !(obj[objProp] instanceof wt2)) {
        throw new Error("traversePropertyPath - parameter is not a tensor, for path " + paramPath);
      }
      return { obj, objProp };
    };
    return NeuralNetwork2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/ops/iou.js
function iou(box1, box2, isIOU) {
  if (isIOU === void 0) {
    isIOU = true;
  }
  var width = Math.max(0, Math.min(box1.right, box2.right) - Math.max(box1.left, box2.left));
  var height = Math.max(0, Math.min(box1.bottom, box2.bottom) - Math.max(box1.top, box2.top));
  var interSection = width * height;
  return isIOU ? interSection / (box1.area + box2.area - interSection) : interSection / Math.min(box1.area, box2.area);
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/minBbox.js
function minBbox(pts) {
  var xs3 = pts.map(function(pt3) {
    return pt3.x;
  });
  var ys3 = pts.map(function(pt3) {
    return pt3.y;
  });
  var minX = xs3.reduce(function(min, x3) {
    return x3 < min ? x3 : min;
  }, Infinity);
  var minY = ys3.reduce(function(min, y3) {
    return y3 < min ? y3 : min;
  }, Infinity);
  var maxX = xs3.reduce(function(max, x3) {
    return max < x3 ? x3 : max;
  }, 0);
  var maxY = ys3.reduce(function(max, y3) {
    return max < y3 ? y3 : max;
  }, 0);
  return new BoundingBox(minX, minY, maxX, maxY);
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/nonMaxSuppression.js
function nonMaxSuppression(boxes, scores, iouThreshold, isIOU) {
  if (isIOU === void 0) {
    isIOU = true;
  }
  var indicesSortedByScore = scores.map(function(score, boxIndex) {
    return { score, boxIndex };
  }).sort(function(c1, c22) {
    return c1.score - c22.score;
  }).map(function(c3) {
    return c3.boxIndex;
  });
  var pick = [];
  var _loop_1 = function() {
    var curr = indicesSortedByScore.pop();
    pick.push(curr);
    var indices = indicesSortedByScore;
    var outputs = [];
    for (var i3 = 0; i3 < indices.length; i3++) {
      var idx = indices[i3];
      var currBox = boxes[curr];
      var idxBox = boxes[idx];
      outputs.push(iou(currBox, idxBox, isIOU));
    }
    indicesSortedByScore = indicesSortedByScore.filter(function(_3, j3) {
      return outputs[j3] <= iouThreshold;
    });
  };
  while (indicesSortedByScore.length > 0) {
    _loop_1();
  }
  return pick;
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/normalize.js
function normalize(x3, meanRgb) {
  return Ze2(function() {
    var r3 = meanRgb[0], g2 = meanRgb[1], b3 = meanRgb[2];
    var avg_r = Hn2(__spreadArrays(x3.shape.slice(0, 3), [1]), r3);
    var avg_g = Hn2(__spreadArrays(x3.shape.slice(0, 3), [1]), g2);
    var avg_b = Hn2(__spreadArrays(x3.shape.slice(0, 3), [1]), b3);
    var avg_rgb = Yn2([avg_r, avg_g, avg_b], 3);
    return Oo2(x3, avg_rgb);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/shuffleArray.js
function shuffleArray(inputArray) {
  var array = inputArray.slice();
  for (var i3 = array.length - 1; i3 > 0; i3--) {
    var j3 = Math.floor(Math.random() * (i3 + 1));
    var x3 = array[i3];
    array[i3] = array[j3];
    array[j3] = x3;
  }
  return array;
}

// node_modules/tfjs-image-recognition-base/build/es6/ops/index.js
function sigmoid(x3) {
  return 1 / (1 + Math.exp(-x3));
}
function inverseSigmoid(x3) {
  return Math.log(x3 / (1 - x3));
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/config.js
var isNumber = function(arg) {
  return typeof arg === "number";
};
function validateConfig(config) {
  if (!config) {
    throw new Error("invalid config: " + config);
  }
  if (typeof config.withSeparableConvs !== "boolean") {
    throw new Error("config.withSeparableConvs has to be a boolean, have: " + config.withSeparableConvs);
  }
  if (!isNumber(config.iouThreshold) || config.iouThreshold < 0 || config.iouThreshold > 1) {
    throw new Error("config.iouThreshold has to be a number between [0, 1], have: " + config.iouThreshold);
  }
  if (!Array.isArray(config.classes) || !config.classes.length || !config.classes.every(function(c3) {
    return typeof c3 === "string";
  })) {
    throw new Error("config.classes has to be an array class names: string[], have: " + JSON.stringify(config.classes));
  }
  if (!Array.isArray(config.anchors) || !config.anchors.length || !config.anchors.map(function(a3) {
    return a3 || {};
  }).every(function(a3) {
    return isNumber(a3.x) && isNumber(a3.y);
  })) {
    throw new Error("config.anchors has to be an array of { x: number, y: number }, have: " + JSON.stringify(config.anchors));
  }
  if (config.meanRgb && (!Array.isArray(config.meanRgb) || config.meanRgb.length !== 3 || !config.meanRgb.every(isNumber))) {
    throw new Error("config.meanRgb has to be an array of shape [number, number, number], have: " + JSON.stringify(config.meanRgb));
  }
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/leaky.js
function leaky(x3) {
  return Ze2(function() {
    var min = To2(x3, On2(0.10000000149011612));
    return Or2(ah2(Oo2(x3, min)), min);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/convWithBatchNorm.js
function convWithBatchNorm(x3, params) {
  return Ze2(function() {
    var out = Ic2(x3, [[0, 0], [1, 1], [1, 1], [0, 0]]);
    out = dl2(out, params.conv.filters, [1, 1], "valid");
    out = Oo2(out, params.bn.sub);
    out = To2(out, params.bn.truediv);
    out = Or2(out, params.conv.bias);
    return leaky(out);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/depthwiseSeparableConv.js
function depthwiseSeparableConv(x3, params) {
  return Ze2(function() {
    var out = Ic2(x3, [[0, 0], [1, 1], [1, 1], [0, 0]]);
    out = bl2(out, params.depthwise_filter, params.pointwise_filter, [1, 1], "valid");
    out = Or2(out, params.bias);
    return leaky(out);
  });
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/extractParams.js
function extractorsFactory(extractWeights, paramMappings) {
  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);
  function extractBatchNormParams(size, mappedPrefix) {
    var sub = Mn2(extractWeights(size));
    var truediv = Mn2(extractWeights(size));
    paramMappings.push({ paramPath: mappedPrefix + "/sub" }, { paramPath: mappedPrefix + "/truediv" });
    return { sub, truediv };
  }
  function extractConvWithBatchNormParams(channelsIn, channelsOut, mappedPrefix) {
    var conv3 = extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + "/conv");
    var bn3 = extractBatchNormParams(channelsOut, mappedPrefix + "/bn");
    return { conv: conv3, bn: bn3 };
  }
  var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);
  return {
    extractConvParams,
    extractConvWithBatchNormParams,
    extractSeparableConvParams
  };
}
function extractParams(weights, config, boxEncodingSize, filterSizes) {
  var _a3 = extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var paramMappings = [];
  var _b = extractorsFactory(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractConvWithBatchNormParams = _b.extractConvWithBatchNormParams, extractSeparableConvParams = _b.extractSeparableConvParams;
  var params;
  if (config.withSeparableConvs) {
    var s0 = filterSizes[0], s1 = filterSizes[1], s22 = filterSizes[2], s3 = filterSizes[3], s4 = filterSizes[4], s5 = filterSizes[5], s6 = filterSizes[6], s7 = filterSizes[7], s8 = filterSizes[8];
    var conv0 = config.isFirstLayerConv2d ? extractConvParams(s0, s1, 3, "conv0") : extractSeparableConvParams(s0, s1, "conv0");
    var conv1 = extractSeparableConvParams(s1, s22, "conv1");
    var conv22 = extractSeparableConvParams(s22, s3, "conv2");
    var conv3 = extractSeparableConvParams(s3, s4, "conv3");
    var conv4 = extractSeparableConvParams(s4, s5, "conv4");
    var conv5 = extractSeparableConvParams(s5, s6, "conv5");
    var conv6 = s7 ? extractSeparableConvParams(s6, s7, "conv6") : void 0;
    var conv7 = s8 ? extractSeparableConvParams(s7, s8, "conv7") : void 0;
    var conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, "conv8");
    params = { conv0, conv1, conv2: conv22, conv3, conv4, conv5, conv6, conv7, conv8 };
  } else {
    var s0 = filterSizes[0], s1 = filterSizes[1], s22 = filterSizes[2], s3 = filterSizes[3], s4 = filterSizes[4], s5 = filterSizes[5], s6 = filterSizes[6], s7 = filterSizes[7], s8 = filterSizes[8];
    var conv0 = extractConvWithBatchNormParams(s0, s1, "conv0");
    var conv1 = extractConvWithBatchNormParams(s1, s22, "conv1");
    var conv22 = extractConvWithBatchNormParams(s22, s3, "conv2");
    var conv3 = extractConvWithBatchNormParams(s3, s4, "conv3");
    var conv4 = extractConvWithBatchNormParams(s4, s5, "conv4");
    var conv5 = extractConvWithBatchNormParams(s5, s6, "conv5");
    var conv6 = extractConvWithBatchNormParams(s6, s7, "conv6");
    var conv7 = extractConvWithBatchNormParams(s7, s8, "conv7");
    var conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, "conv8");
    params = { conv0, conv1, conv2: conv22, conv3, conv4, conv5, conv6, conv7, conv8 };
  }
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return { params, paramMappings };
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/extractParamsFromWeigthMap.js
function extractorsFactory2(weightMap, paramMappings) {
  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
  function extractBatchNormParams(prefix) {
    var sub = extractWeightEntry(prefix + "/sub", 1);
    var truediv = extractWeightEntry(prefix + "/truediv", 1);
    return { sub, truediv };
  }
  function extractConvParams(prefix) {
    var filters = extractWeightEntry(prefix + "/filters", 4);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { filters, bias };
  }
  function extractConvWithBatchNormParams(prefix) {
    var conv3 = extractConvParams(prefix + "/conv");
    var bn3 = extractBatchNormParams(prefix + "/bn");
    return { conv: conv3, bn: bn3 };
  }
  var extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);
  return {
    extractConvParams,
    extractConvWithBatchNormParams,
    extractSeparableConvParams
  };
}
function extractParamsFromWeigthMap(weightMap, config) {
  var paramMappings = [];
  var _a3 = extractorsFactory2(weightMap, paramMappings), extractConvParams = _a3.extractConvParams, extractConvWithBatchNormParams = _a3.extractConvWithBatchNormParams, extractSeparableConvParams = _a3.extractSeparableConvParams;
  var params;
  if (config.withSeparableConvs) {
    var numFilters = config.filterSizes && config.filterSizes.length || 9;
    params = {
      conv0: config.isFirstLayerConv2d ? extractConvParams("conv0") : extractSeparableConvParams("conv0"),
      conv1: extractSeparableConvParams("conv1"),
      conv2: extractSeparableConvParams("conv2"),
      conv3: extractSeparableConvParams("conv3"),
      conv4: extractSeparableConvParams("conv4"),
      conv5: extractSeparableConvParams("conv5"),
      conv6: numFilters > 7 ? extractSeparableConvParams("conv6") : void 0,
      conv7: numFilters > 8 ? extractSeparableConvParams("conv7") : void 0,
      conv8: extractConvParams("conv8")
    };
  } else {
    params = {
      conv0: extractConvWithBatchNormParams("conv0"),
      conv1: extractConvWithBatchNormParams("conv1"),
      conv2: extractConvWithBatchNormParams("conv2"),
      conv3: extractConvWithBatchNormParams("conv3"),
      conv4: extractConvWithBatchNormParams("conv4"),
      conv5: extractConvWithBatchNormParams("conv5"),
      conv6: extractConvWithBatchNormParams("conv6"),
      conv7: extractConvWithBatchNormParams("conv7"),
      conv8: extractConvParams("conv8")
    };
  }
  disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/TinyYolov2Options.js
var TinyYolov2SizeType;
(function(TinyYolov2SizeType2) {
  TinyYolov2SizeType2[TinyYolov2SizeType2["XS"] = 224] = "XS";
  TinyYolov2SizeType2[TinyYolov2SizeType2["SM"] = 320] = "SM";
  TinyYolov2SizeType2[TinyYolov2SizeType2["MD"] = 416] = "MD";
  TinyYolov2SizeType2[TinyYolov2SizeType2["LG"] = 608] = "LG";
})(TinyYolov2SizeType || (TinyYolov2SizeType = {}));
var TinyYolov2Options = (
  /** @class */
  function() {
    function TinyYolov2Options2(_a3) {
      var _b = _a3 === void 0 ? {} : _a3, inputSize = _b.inputSize, scoreThreshold = _b.scoreThreshold;
      this._name = "TinyYolov2Options";
      this._inputSize = inputSize || 416;
      this._scoreThreshold = scoreThreshold || 0.5;
      if (typeof this._inputSize !== "number" || this._inputSize % 32 !== 0) {
        throw new Error(this._name + " - expected inputSize to be a number divisible by 32");
      }
      if (typeof this._scoreThreshold !== "number" || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) {
        throw new Error(this._name + " - expected scoreThreshold to be a number between 0 and 1");
      }
    }
    Object.defineProperty(TinyYolov2Options2.prototype, "inputSize", {
      get: function() {
        return this._inputSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TinyYolov2Options2.prototype, "scoreThreshold", {
      get: function() {
        return this._scoreThreshold;
      },
      enumerable: true,
      configurable: true
    });
    return TinyYolov2Options2;
  }()
);

// node_modules/tfjs-image-recognition-base/build/es6/tinyYolov2/TinyYolov2.js
var TinyYolov2 = (
  /** @class */
  function(_super) {
    __extends(TinyYolov23, _super);
    function TinyYolov23(config) {
      var _this = _super.call(this, "TinyYolov2") || this;
      validateConfig(config);
      _this._config = config;
      return _this;
    }
    Object.defineProperty(TinyYolov23.prototype, "config", {
      get: function() {
        return this._config;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TinyYolov23.prototype, "withClassScores", {
      get: function() {
        return this.config.withClassScores || this.config.classes.length > 1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TinyYolov23.prototype, "boxEncodingSize", {
      get: function() {
        return 5 + (this.withClassScores ? this.config.classes.length : 0);
      },
      enumerable: true,
      configurable: true
    });
    TinyYolov23.prototype.runTinyYolov2 = function(x3, params) {
      var out = convWithBatchNorm(x3, params.conv0);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = convWithBatchNorm(out, params.conv1);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = convWithBatchNorm(out, params.conv2);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = convWithBatchNorm(out, params.conv3);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = convWithBatchNorm(out, params.conv4);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = convWithBatchNorm(out, params.conv5);
      out = _l2(out, [2, 2], [1, 1], "same");
      out = convWithBatchNorm(out, params.conv6);
      out = convWithBatchNorm(out, params.conv7);
      return convLayer(out, params.conv8, "valid", false);
    };
    TinyYolov23.prototype.runMobilenet = function(x3, params) {
      var out = this.config.isFirstLayerConv2d ? leaky(convLayer(x3, params.conv0, "valid", false)) : depthwiseSeparableConv(x3, params.conv0);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = depthwiseSeparableConv(out, params.conv1);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = depthwiseSeparableConv(out, params.conv2);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = depthwiseSeparableConv(out, params.conv3);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = depthwiseSeparableConv(out, params.conv4);
      out = _l2(out, [2, 2], [2, 2], "same");
      out = depthwiseSeparableConv(out, params.conv5);
      out = _l2(out, [2, 2], [1, 1], "same");
      out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;
      out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;
      return convLayer(out, params.conv8, "valid", false);
    };
    TinyYolov23.prototype.forwardInput = function(input, inputSize) {
      var _this = this;
      var params = this.params;
      if (!params) {
        throw new Error("TinyYolov2 - load model before inference");
      }
      return Ze2(function() {
        var batchTensor = input.toBatchTensor(inputSize, false).toFloat();
        batchTensor = _this.config.meanRgb ? normalize(batchTensor, _this.config.meanRgb) : batchTensor;
        batchTensor = batchTensor.div(On2(256));
        return _this.config.withSeparableConvs ? _this.runMobilenet(batchTensor, params) : _this.runTinyYolov2(batchTensor, params);
      });
    };
    TinyYolov23.prototype.forward = function(input, inputSize) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [4, _a3.apply(this, [_b.sent(), inputSize])];
            case 2:
              return [2, _b.sent()];
          }
        });
      });
    };
    TinyYolov23.prototype.detect = function(input, forwardParams) {
      if (forwardParams === void 0) {
        forwardParams = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = new TinyYolov2Options(forwardParams), inputSize = _a3.inputSize, scoreThreshold = _a3.scoreThreshold;
              return [4, toNetInput(input)];
            case 1:
              netInput = _b.sent();
              return [4, this.forwardInput(netInput, inputSize)];
            case 2:
              out = _b.sent();
              out0 = Ze2(function() {
                return fr2(out)[0].expandDims();
              });
              inputDimensions = {
                width: netInput.getInputWidth(0),
                height: netInput.getInputHeight(0)
              };
              return [4, this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)];
            case 3:
              results = _b.sent();
              out.dispose();
              out0.dispose();
              boxes = results.map(function(res) {
                return res.box;
              });
              scores = results.map(function(res) {
                return res.score;
              });
              classScores = results.map(function(res) {
                return res.classScore;
              });
              classNames = results.map(function(res) {
                return _this.config.classes[res.label];
              });
              indices = nonMaxSuppression(boxes.map(function(box) {
                return box.rescale(inputSize);
              }), scores, this.config.iouThreshold, true);
              detections = indices.map(function(idx) {
                return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);
              });
              return [2, detections];
          }
        });
      });
    };
    TinyYolov23.prototype.getDefaultModelName = function() {
      return "";
    };
    TinyYolov23.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap(weightMap, this.config);
    };
    TinyYolov23.prototype.extractParams = function(weights) {
      var filterSizes = this.config.filterSizes || TinyYolov23.DEFAULT_FILTER_SIZES;
      var numFilters = filterSizes ? filterSizes.length : void 0;
      if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {
        throw new Error("TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found " + numFilters + " filterSizes in config");
      }
      return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);
    };
    TinyYolov23.prototype.extractBoxes = function(outputTensor, inputBlobDimensions, scoreThreshold) {
      return __awaiter(this, void 0, void 0, function() {
        var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a3, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x3, y3, pos, _b, classScore, label, _c3;
        var _this = this;
        return __generator(this, function(_d2) {
          switch (_d2.label) {
            case 0:
              width = inputBlobDimensions.width, height = inputBlobDimensions.height;
              inputSize = Math.max(width, height);
              correctionFactorX = inputSize / width;
              correctionFactorY = inputSize / height;
              numCells = outputTensor.shape[1];
              numBoxes = this.config.anchors.length;
              _a3 = Ze2(function() {
                var reshaped = outputTensor.reshape([numCells, numCells, numBoxes, _this.boxEncodingSize]);
                var boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);
                var scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);
                var classScores = _this.withClassScores ? ia2(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, _this.config.classes.length]), 3) : On2(0);
                return [boxes, scores, classScores];
              }), boxesTensor = _a3[0], scoresTensor = _a3[1], classScoresTensor = _a3[2];
              results = [];
              return [4, scoresTensor.array()];
            case 1:
              scoresData = _d2.sent();
              return [4, boxesTensor.array()];
            case 2:
              boxesData = _d2.sent();
              row = 0;
              _d2.label = 3;
            case 3:
              if (!(row < numCells)) return [3, 12];
              col = 0;
              _d2.label = 4;
            case 4:
              if (!(col < numCells)) return [3, 11];
              anchor = 0;
              _d2.label = 5;
            case 5:
              if (!(anchor < numBoxes)) return [3, 10];
              score = sigmoid(scoresData[row][col][anchor][0]);
              if (!(!scoreThreshold || score > scoreThreshold)) return [3, 9];
              ctX = (col + sigmoid(boxesData[row][col][anchor][0])) / numCells * correctionFactorX;
              ctY = (row + sigmoid(boxesData[row][col][anchor][1])) / numCells * correctionFactorY;
              width_1 = Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x / numCells * correctionFactorX;
              height_1 = Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y / numCells * correctionFactorY;
              x3 = ctX - width_1 / 2;
              y3 = ctY - height_1 / 2;
              pos = { row, col, anchor };
              if (!this.withClassScores) return [3, 7];
              return [4, this.extractPredictedClass(classScoresTensor, pos)];
            case 6:
              _c3 = _d2.sent();
              return [3, 8];
            case 7:
              _c3 = { classScore: 1, label: 0 };
              _d2.label = 8;
            case 8:
              _b = _c3, classScore = _b.classScore, label = _b.label;
              results.push(__assign({ box: new BoundingBox(x3, y3, x3 + width_1, y3 + height_1), score, classScore: score * classScore, label }, pos));
              _d2.label = 9;
            case 9:
              anchor++;
              return [3, 5];
            case 10:
              col++;
              return [3, 4];
            case 11:
              row++;
              return [3, 3];
            case 12:
              boxesTensor.dispose();
              scoresTensor.dispose();
              classScoresTensor.dispose();
              return [2, results];
          }
        });
      });
    };
    TinyYolov23.prototype.extractPredictedClass = function(classesTensor, pos) {
      return __awaiter(this, void 0, void 0, function() {
        var row, col, anchor, classesData;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              row = pos.row, col = pos.col, anchor = pos.anchor;
              return [4, classesTensor.array()];
            case 1:
              classesData = _a3.sent();
              return [2, Array(this.config.classes.length).fill(0).map(function(_3, i3) {
                return classesData[row][col][anchor][i3];
              }).map(function(classScore, label) {
                return {
                  classScore,
                  label
                };
              }).reduce(function(max, curr) {
                return max.classScore > curr.classScore ? max : curr;
              })];
          }
        });
      });
    };
    TinyYolov23.DEFAULT_FILTER_SIZES = [
      3,
      16,
      32,
      64,
      128,
      256,
      512,
      1024,
      1024
    ];
    return TinyYolov23;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/draw/index.js
var draw_exports2 = {};
__export(draw_exports2, {
  DrawFaceLandmarks: () => DrawFaceLandmarks,
  DrawFaceLandmarksOptions: () => DrawFaceLandmarksOptions,
  drawContour: () => drawContour,
  drawDetections: () => drawDetections,
  drawFaceExpressions: () => drawFaceExpressions,
  drawFaceLandmarks: () => drawFaceLandmarks
});

// node_modules/face-api.js/build/es6/draw/drawContour.js
function drawContour(ctx, points, isClosed) {
  if (isClosed === void 0) {
    isClosed = false;
  }
  ctx.beginPath();
  points.slice(1).forEach(function(_a3, prevIdx) {
    var x3 = _a3.x, y3 = _a3.y;
    var from2 = points[prevIdx];
    ctx.moveTo(from2.x, from2.y);
    ctx.lineTo(x3, y3);
  });
  if (isClosed) {
    var from = points[points.length - 1];
    var to3 = points[0];
    if (!from || !to3) {
      return;
    }
    ctx.moveTo(from.x, from.y);
    ctx.lineTo(to3.x, to3.y);
  }
  ctx.stroke();
}

// node_modules/face-api.js/build/es6/classes/FaceDetection.js
var FaceDetection = (
  /** @class */
  function(_super) {
    __extends(FaceDetection2, _super);
    function FaceDetection2(score, relativeBox, imageDims) {
      return _super.call(this, score, score, "", relativeBox, imageDims) || this;
    }
    FaceDetection2.prototype.forSize = function(width, height) {
      var _a3 = _super.prototype.forSize.call(this, width, height), score = _a3.score, relativeBox = _a3.relativeBox, imageDims = _a3.imageDims;
      return new FaceDetection2(score, relativeBox, imageDims);
    };
    return FaceDetection2;
  }(ObjectDetection)
);

// node_modules/face-api.js/build/es6/factories/WithFaceDetection.js
function isWithFaceDetection(obj) {
  return obj["detection"] instanceof FaceDetection;
}
function extendWithFaceDetection(sourceObj, detection) {
  var extension = { detection };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/draw/drawDetections.js
function drawDetections(canvasArg, detections) {
  var detectionsArray = Array.isArray(detections) ? detections : [detections];
  detectionsArray.forEach(function(det) {
    var score = det instanceof FaceDetection ? det.score : isWithFaceDetection(det) ? det.detection.score : void 0;
    var box = det instanceof FaceDetection ? det.box : isWithFaceDetection(det) ? det.detection.box : new Box(det);
    var label = score ? "" + round(score) : void 0;
    new draw_exports.DrawBox(box, { label }).draw(canvasArg);
  });
}

// node_modules/face-api.js/build/es6/common/depthwiseSeparableConv.js
function depthwiseSeparableConv2(x3, params, stride) {
  return Fe(function() {
    var out = iu(x3, params.depthwise_filter, params.pointwise_filter, stride, "same");
    out = Yu(out, params.bias);
    return out;
  });
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/denseBlock.js
function denseBlock3(x3, denseBlockParams, isFirstLayer) {
  if (isFirstLayer === void 0) {
    isFirstLayer = false;
  }
  return Fe(function() {
    var out1 = Sl(isFirstLayer ? Yu(nu(x3, denseBlockParams.conv0.filters, [2, 2], "same"), denseBlockParams.conv0.bias) : depthwiseSeparableConv2(x3, denseBlockParams.conv0, [2, 2]));
    var out2 = depthwiseSeparableConv2(out1, denseBlockParams.conv1, [1, 1]);
    var in3 = Sl(Yu(out1, out2));
    var out3 = depthwiseSeparableConv2(in3, denseBlockParams.conv2, [1, 1]);
    return Sl(Yu(out1, Yu(out2, out3)));
  });
}
function denseBlock4(x3, denseBlockParams, isFirstLayer, isScaleDown) {
  if (isFirstLayer === void 0) {
    isFirstLayer = false;
  }
  if (isScaleDown === void 0) {
    isScaleDown = true;
  }
  return Fe(function() {
    var out1 = Sl(isFirstLayer ? Yu(nu(x3, denseBlockParams.conv0.filters, isScaleDown ? [2, 2] : [1, 1], "same"), denseBlockParams.conv0.bias) : depthwiseSeparableConv2(x3, denseBlockParams.conv0, isScaleDown ? [2, 2] : [1, 1]));
    var out2 = depthwiseSeparableConv2(out1, denseBlockParams.conv1, [1, 1]);
    var in3 = Sl(Yu(out1, out2));
    var out3 = depthwiseSeparableConv2(in3, denseBlockParams.conv2, [1, 1]);
    var in4 = Sl(Yu(out1, Yu(out2, out3)));
    var out4 = depthwiseSeparableConv2(in4, denseBlockParams.conv3, [1, 1]);
    return Sl(Yu(out1, Yu(out2, Yu(out3, out4))));
  });
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/extractorsFactory.js
function extractorsFactory3(extractWeights, paramMappings) {
  var extractConvParams = tfjsImageRecognitionBase_exports.extractConvParamsFactory(extractWeights, paramMappings);
  var extractSeparableConvParams = tfjsImageRecognitionBase_exports.extractSeparableConvParamsFactory(extractWeights, paramMappings);
  function extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {
    if (isFirstLayer === void 0) {
      isFirstLayer = false;
    }
    var conv0 = isFirstLayer ? extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + "/conv0") : extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + "/conv0");
    var conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv1");
    var conv22 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv2");
    return { conv0, conv1, conv2: conv22 };
  }
  function extractDenseBlock4Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {
    if (isFirstLayer === void 0) {
      isFirstLayer = false;
    }
    var _a3 = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer), conv0 = _a3.conv0, conv1 = _a3.conv1, conv22 = _a3.conv2;
    var conv3 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv3");
    return { conv0, conv1, conv2: conv22, conv3 };
  }
  return {
    extractDenseBlock3Params,
    extractDenseBlock4Params
  };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/extractParams.js
function extractParams2(weights) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var extractDenseBlock4Params = extractorsFactory3(extractWeights, paramMappings).extractDenseBlock4Params;
  var dense0 = extractDenseBlock4Params(3, 32, "dense0", true);
  var dense1 = extractDenseBlock4Params(32, 64, "dense1");
  var dense2 = extractDenseBlock4Params(64, 128, "dense2");
  var dense3 = extractDenseBlock4Params(128, 256, "dense3");
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    paramMappings,
    params: { dense0, dense1, dense2, dense3 }
  };
}

// node_modules/face-api.js/build/es6/common/loadConvParamsFactory.js
function loadConvParamsFactory(extractWeightEntry) {
  return function(prefix) {
    var filters = extractWeightEntry(prefix + "/filters", 4);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { filters, bias };
  };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/loadParamsFactory.js
function loadParamsFactory(weightMap, paramMappings) {
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  var extractConvParams = loadConvParamsFactory(extractWeightEntry);
  var extractSeparableConvParams = tfjsImageRecognitionBase_exports.loadSeparableConvParamsFactory(extractWeightEntry);
  function extractDenseBlock3Params(prefix, isFirstLayer) {
    if (isFirstLayer === void 0) {
      isFirstLayer = false;
    }
    var conv0 = isFirstLayer ? extractConvParams(prefix + "/conv0") : extractSeparableConvParams(prefix + "/conv0");
    var conv1 = extractSeparableConvParams(prefix + "/conv1");
    var conv22 = extractSeparableConvParams(prefix + "/conv2");
    return { conv0, conv1, conv2: conv22 };
  }
  function extractDenseBlock4Params(prefix, isFirstLayer) {
    if (isFirstLayer === void 0) {
      isFirstLayer = false;
    }
    var conv0 = isFirstLayer ? extractConvParams(prefix + "/conv0") : extractSeparableConvParams(prefix + "/conv0");
    var conv1 = extractSeparableConvParams(prefix + "/conv1");
    var conv22 = extractSeparableConvParams(prefix + "/conv2");
    var conv3 = extractSeparableConvParams(prefix + "/conv3");
    return { conv0, conv1, conv2: conv22, conv3 };
  }
  return {
    extractDenseBlock3Params,
    extractDenseBlock4Params
  };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/extractParamsFromWeigthMap.js
function extractParamsFromWeigthMap2(weightMap) {
  var paramMappings = [];
  var extractDenseBlock4Params = loadParamsFactory(weightMap, paramMappings).extractDenseBlock4Params;
  var params = {
    dense0: extractDenseBlock4Params("dense0", true),
    dense1: extractDenseBlock4Params("dense1"),
    dense2: extractDenseBlock4Params("dense2"),
    dense3: extractDenseBlock4Params("dense3")
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/FaceFeatureExtractor.js
var FaceFeatureExtractor = (
  /** @class */
  function(_super) {
    __extends(FaceFeatureExtractor2, _super);
    function FaceFeatureExtractor2() {
      return _super.call(this, "FaceFeatureExtractor") || this;
    }
    FaceFeatureExtractor2.prototype.forwardInput = function(input) {
      var params = this.params;
      if (!params) {
        throw new Error("FaceFeatureExtractor - load model before inference");
      }
      return Fe(function() {
        var batchTensor = input.toBatchTensor(112, true);
        var meanRgb = [122.782, 117.001, 104.298];
        var normalized = normalize(batchTensor, meanRgb).div(vn(255));
        var out = denseBlock4(normalized, params.dense0, true);
        out = denseBlock4(out, params.dense1);
        out = denseBlock4(out, params.dense2);
        out = denseBlock4(out, params.dense3);
        out = xu(out, [7, 7], [2, 2], "valid");
        return out;
      });
    };
    FaceFeatureExtractor2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    FaceFeatureExtractor2.prototype.getDefaultModelName = function() {
      return "face_feature_extractor_model";
    };
    FaceFeatureExtractor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap2(weightMap);
    };
    FaceFeatureExtractor2.prototype.extractParams = function(weights) {
      return extractParams2(weights);
    };
    return FaceFeatureExtractor2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/common/fullyConnectedLayer.js
function fullyConnectedLayer(x3, params) {
  return Fe(function() {
    return Yu(uu(x3, params.weights), params.bias);
  });
}

// node_modules/face-api.js/build/es6/faceProcessor/extractParams.js
function extractParams3(weights, channelsIn, channelsOut) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var extractFCParams = tfjsImageRecognitionBase_exports.extractFCParamsFactory(extractWeights, paramMappings);
  var fc3 = extractFCParams(channelsIn, channelsOut, "fc");
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    paramMappings,
    params: { fc: fc3 }
  };
}

// node_modules/face-api.js/build/es6/faceProcessor/extractParamsFromWeigthMap.js
function extractParamsFromWeigthMap3(weightMap) {
  var paramMappings = [];
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  function extractFcParams(prefix) {
    var weights = extractWeightEntry(prefix + "/weights", 2);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { weights, bias };
  }
  var params = {
    fc: extractFcParams("fc")
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/faceProcessor/util.js
function seperateWeightMaps(weightMap) {
  var featureExtractorMap = {};
  var classifierMap = {};
  Object.keys(weightMap).forEach(function(key) {
    var map = key.startsWith("fc") ? classifierMap : featureExtractorMap;
    map[key] = weightMap[key];
  });
  return { featureExtractorMap, classifierMap };
}

// node_modules/face-api.js/build/es6/faceProcessor/FaceProcessor.js
var FaceProcessor = (
  /** @class */
  function(_super) {
    __extends(FaceProcessor2, _super);
    function FaceProcessor2(_name, faceFeatureExtractor) {
      var _this = _super.call(this, _name) || this;
      _this._faceFeatureExtractor = faceFeatureExtractor;
      return _this;
    }
    Object.defineProperty(FaceProcessor2.prototype, "faceFeatureExtractor", {
      get: function() {
        return this._faceFeatureExtractor;
      },
      enumerable: true,
      configurable: true
    });
    FaceProcessor2.prototype.runNet = function(input) {
      var _this = this;
      var params = this.params;
      if (!params) {
        throw new Error(this._name + " - load model before inference");
      }
      return Fe(function() {
        var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;
        return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);
      });
    };
    FaceProcessor2.prototype.dispose = function(throwOnRedispose) {
      if (throwOnRedispose === void 0) {
        throwOnRedispose = true;
      }
      this.faceFeatureExtractor.dispose(throwOnRedispose);
      _super.prototype.dispose.call(this, throwOnRedispose);
    };
    FaceProcessor2.prototype.loadClassifierParams = function(weights) {
      var _a3 = this.extractClassifierParams(weights), params = _a3.params, paramMappings = _a3.paramMappings;
      this._params = params;
      this._paramMappings = paramMappings;
    };
    FaceProcessor2.prototype.extractClassifierParams = function(weights) {
      return extractParams3(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());
    };
    FaceProcessor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      var _a3 = seperateWeightMaps(weightMap), featureExtractorMap = _a3.featureExtractorMap, classifierMap = _a3.classifierMap;
      this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);
      return extractParamsFromWeigthMap3(classifierMap);
    };
    FaceProcessor2.prototype.extractParams = function(weights) {
      var cIn = this.getClassifierChannelsIn();
      var cOut = this.getClassifierChannelsOut();
      var classifierWeightSize = cOut * cIn + cOut;
      var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);
      var classifierWeights = weights.slice(weights.length - classifierWeightSize);
      this.faceFeatureExtractor.extractWeights(featureExtractorWeights);
      return this.extractClassifierParams(classifierWeights);
    };
    return FaceProcessor2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/faceExpressionNet/FaceExpressions.js
var FACE_EXPRESSION_LABELS = ["neutral", "happy", "sad", "angry", "fearful", "disgusted", "surprised"];
var FaceExpressions = (
  /** @class */
  function() {
    function FaceExpressions2(probabilities) {
      var _this = this;
      if (probabilities.length !== 7) {
        throw new Error("FaceExpressions.constructor - expected probabilities.length to be 7, have: " + probabilities.length);
      }
      FACE_EXPRESSION_LABELS.forEach(function(expression, idx) {
        _this[expression] = probabilities[idx];
      });
    }
    FaceExpressions2.prototype.asSortedArray = function() {
      var _this = this;
      return FACE_EXPRESSION_LABELS.map(function(expression) {
        return { expression, probability: _this[expression] };
      }).sort(function(e0, e1) {
        return e1.probability - e0.probability;
      });
    };
    return FaceExpressions2;
  }()
);

// node_modules/face-api.js/build/es6/faceExpressionNet/FaceExpressionNet.js
var FaceExpressionNet = (
  /** @class */
  function(_super) {
    __extends(FaceExpressionNet2, _super);
    function FaceExpressionNet2(faceFeatureExtractor) {
      if (faceFeatureExtractor === void 0) {
        faceFeatureExtractor = new FaceFeatureExtractor();
      }
      return _super.call(this, "FaceExpressionNet", faceFeatureExtractor) || this;
    }
    FaceExpressionNet2.prototype.forwardInput = function(input) {
      var _this = this;
      return Fe(function() {
        return zr(_this.runNet(input));
      });
    };
    FaceExpressionNet2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    FaceExpressionNet2.prototype.predictExpressions = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var netInput, out, probabilitesByBatch, predictionsByBatch;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, toNetInput(input)];
            case 1:
              netInput = _a3.sent();
              return [4, this.forwardInput(netInput)];
            case 2:
              out = _a3.sent();
              return [4, Promise.all(gr(out).map(function(t3) {
                return __awaiter(_this, void 0, void 0, function() {
                  var data;
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, t3.data()];
                      case 1:
                        data = _a4.sent();
                        t3.dispose();
                        return [2, data];
                    }
                  });
                });
              }))];
            case 3:
              probabilitesByBatch = _a3.sent();
              out.dispose();
              predictionsByBatch = probabilitesByBatch.map(function(probabilites) {
                return new FaceExpressions(probabilites);
              });
              return [2, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];
          }
        });
      });
    };
    FaceExpressionNet2.prototype.getDefaultModelName = function() {
      return "face_expression_model";
    };
    FaceExpressionNet2.prototype.getClassifierChannelsIn = function() {
      return 256;
    };
    FaceExpressionNet2.prototype.getClassifierChannelsOut = function() {
      return 7;
    };
    return FaceExpressionNet2;
  }(FaceProcessor)
);

// node_modules/face-api.js/build/es6/factories/WithFaceExpressions.js
function isWithFaceExpressions(obj) {
  return obj["expressions"] instanceof FaceExpressions;
}
function extendWithFaceExpressions(sourceObj, expressions) {
  var extension = { expressions };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/draw/drawFaceExpressions.js
function drawFaceExpressions(canvasArg, faceExpressions, minConfidence, textFieldAnchor) {
  if (minConfidence === void 0) {
    minConfidence = 0.1;
  }
  var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];
  faceExpressionsArray.forEach(function(e3) {
    var expr = e3 instanceof FaceExpressions ? e3 : isWithFaceExpressions(e3) ? e3.expressions : void 0;
    if (!expr) {
      throw new Error("drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof");
    }
    var sorted = expr.asSortedArray();
    var resultsToDisplay = sorted.filter(function(expr2) {
      return expr2.probability > minConfidence;
    });
    var anchor = isWithFaceDetection(e3) ? e3.detection.box.bottomLeft : textFieldAnchor || new Point(0, 0);
    var drawTextField = new draw_exports.DrawTextField(resultsToDisplay.map(function(expr2) {
      return expr2.expression + " (" + round(expr2.probability) + ")";
    }), anchor);
    drawTextField.draw(canvasArg);
  });
}

// node_modules/face-api.js/build/es6/minBbox.js
function minBbox2(pts) {
  var xs3 = pts.map(function(pt3) {
    return pt3.x;
  });
  var ys3 = pts.map(function(pt3) {
    return pt3.y;
  });
  var minX = xs3.reduce(function(min, x3) {
    return x3 < min ? x3 : min;
  }, Infinity);
  var minY = ys3.reduce(function(min, y3) {
    return y3 < min ? y3 : min;
  }, Infinity);
  var maxX = xs3.reduce(function(max, x3) {
    return max < x3 ? x3 : max;
  }, 0);
  var maxY = ys3.reduce(function(max, y3) {
    return max < y3 ? y3 : max;
  }, 0);
  return new BoundingBox(minX, minY, maxX, maxY);
}

// node_modules/face-api.js/build/es6/classes/FaceLandmarks.js
var relX = 0.5;
var relY = 0.43;
var relScale = 0.45;
var FaceLandmarks = (
  /** @class */
  function() {
    function FaceLandmarks2(relativeFaceLandmarkPositions, imgDims, shift) {
      if (shift === void 0) {
        shift = new Point(0, 0);
      }
      var width = imgDims.width, height = imgDims.height;
      this._imgDims = new Dimensions(width, height);
      this._shift = shift;
      this._positions = relativeFaceLandmarkPositions.map(function(pt3) {
        return pt3.mul(new Point(width, height)).add(shift);
      });
    }
    Object.defineProperty(FaceLandmarks2.prototype, "shift", {
      get: function() {
        return new Point(this._shift.x, this._shift.y);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceLandmarks2.prototype, "imageWidth", {
      get: function() {
        return this._imgDims.width;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceLandmarks2.prototype, "imageHeight", {
      get: function() {
        return this._imgDims.height;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceLandmarks2.prototype, "positions", {
      get: function() {
        return this._positions;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceLandmarks2.prototype, "relativePositions", {
      get: function() {
        var _this = this;
        return this._positions.map(function(pt3) {
          return pt3.sub(_this._shift).div(new Point(_this.imageWidth, _this.imageHeight));
        });
      },
      enumerable: true,
      configurable: true
    });
    FaceLandmarks2.prototype.forSize = function(width, height) {
      return new this.constructor(this.relativePositions, { width, height });
    };
    FaceLandmarks2.prototype.shiftBy = function(x3, y3) {
      return new this.constructor(this.relativePositions, this._imgDims, new Point(x3, y3));
    };
    FaceLandmarks2.prototype.shiftByPoint = function(pt3) {
      return this.shiftBy(pt3.x, pt3.y);
    };
    FaceLandmarks2.prototype.align = function(detection, options) {
      if (options === void 0) {
        options = {};
      }
      if (detection) {
        var box = detection instanceof FaceDetection ? detection.box.floor() : new Box(detection);
        return this.shiftBy(box.x, box.y).align(null, options);
      }
      var _a3 = Object.assign({}, { useDlibAlignment: false, minBoxPadding: 0.2 }, options), useDlibAlignment = _a3.useDlibAlignment, minBoxPadding = _a3.minBoxPadding;
      if (useDlibAlignment) {
        return this.alignDlib();
      }
      return this.alignMinBbox(minBoxPadding);
    };
    FaceLandmarks2.prototype.alignDlib = function() {
      var centers = this.getRefPointsForAlignment();
      var leftEyeCenter = centers[0], rightEyeCenter = centers[1], mouthCenter = centers[2];
      var distToMouth = function(pt3) {
        return mouthCenter.sub(pt3).magnitude();
      };
      var eyeToMouthDist = (distToMouth(leftEyeCenter) + distToMouth(rightEyeCenter)) / 2;
      var size = Math.floor(eyeToMouthDist / relScale);
      var refPoint = getCenterPoint(centers);
      var x3 = Math.floor(Math.max(0, refPoint.x - relX * size));
      var y3 = Math.floor(Math.max(0, refPoint.y - relY * size));
      return new Rect(x3, y3, Math.min(size, this.imageWidth + x3), Math.min(size, this.imageHeight + y3));
    };
    FaceLandmarks2.prototype.alignMinBbox = function(padding) {
      var box = minBbox2(this.positions);
      return box.pad(box.width * padding, box.height * padding);
    };
    FaceLandmarks2.prototype.getRefPointsForAlignment = function() {
      throw new Error("getRefPointsForAlignment not implemented by base class");
    };
    return FaceLandmarks2;
  }()
);

// node_modules/face-api.js/build/es6/classes/FaceLandmarks68.js
var FaceLandmarks68 = (
  /** @class */
  function(_super) {
    __extends(FaceLandmarks682, _super);
    function FaceLandmarks682() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FaceLandmarks682.prototype.getJawOutline = function() {
      return this.positions.slice(0, 17);
    };
    FaceLandmarks682.prototype.getLeftEyeBrow = function() {
      return this.positions.slice(17, 22);
    };
    FaceLandmarks682.prototype.getRightEyeBrow = function() {
      return this.positions.slice(22, 27);
    };
    FaceLandmarks682.prototype.getNose = function() {
      return this.positions.slice(27, 36);
    };
    FaceLandmarks682.prototype.getLeftEye = function() {
      return this.positions.slice(36, 42);
    };
    FaceLandmarks682.prototype.getRightEye = function() {
      return this.positions.slice(42, 48);
    };
    FaceLandmarks682.prototype.getMouth = function() {
      return this.positions.slice(48, 68);
    };
    FaceLandmarks682.prototype.getRefPointsForAlignment = function() {
      return [
        this.getLeftEye(),
        this.getRightEye(),
        this.getMouth()
      ].map(getCenterPoint);
    };
    return FaceLandmarks682;
  }(FaceLandmarks)
);

// node_modules/face-api.js/build/es6/factories/WithFaceLandmarks.js
function isWithFaceLandmarks(obj) {
  return isWithFaceDetection(obj) && obj["landmarks"] instanceof FaceLandmarks && obj["unshiftedLandmarks"] instanceof FaceLandmarks && obj["alignedRect"] instanceof FaceDetection;
}
function extendWithFaceLandmarks(sourceObj, unshiftedLandmarks) {
  var shift = sourceObj.detection.box;
  var landmarks = unshiftedLandmarks.shiftBy(shift.x, shift.y);
  var rect = landmarks.align();
  var imageDims = sourceObj.detection.imageDims;
  var alignedRect = new FaceDetection(sourceObj.detection.score, rect.rescale(imageDims.reverse()), imageDims);
  var extension = {
    landmarks,
    unshiftedLandmarks,
    alignedRect
  };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/draw/DrawFaceLandmarks.js
var DrawFaceLandmarksOptions = (
  /** @class */
  /* @__PURE__ */ function() {
    function DrawFaceLandmarksOptions2(options) {
      if (options === void 0) {
        options = {};
      }
      var _a3 = options.drawLines, drawLines = _a3 === void 0 ? true : _a3, _b = options.drawPoints, drawPoints = _b === void 0 ? true : _b, lineWidth = options.lineWidth, lineColor = options.lineColor, pointSize = options.pointSize, pointColor = options.pointColor;
      this.drawLines = drawLines;
      this.drawPoints = drawPoints;
      this.lineWidth = lineWidth || 1;
      this.pointSize = pointSize || 2;
      this.lineColor = lineColor || "rgba(0, 255, 255, 1)";
      this.pointColor = pointColor || "rgba(255, 0, 255, 1)";
    }
    return DrawFaceLandmarksOptions2;
  }()
);
var DrawFaceLandmarks = (
  /** @class */
  function() {
    function DrawFaceLandmarks2(faceLandmarks, options) {
      if (options === void 0) {
        options = {};
      }
      this.faceLandmarks = faceLandmarks;
      this.options = new DrawFaceLandmarksOptions(options);
    }
    DrawFaceLandmarks2.prototype.draw = function(canvasArg) {
      var ctx = getContext2dOrThrow(canvasArg);
      var _a3 = this.options, drawLines = _a3.drawLines, drawPoints = _a3.drawPoints, lineWidth = _a3.lineWidth, lineColor = _a3.lineColor, pointSize = _a3.pointSize, pointColor = _a3.pointColor;
      if (drawLines && this.faceLandmarks instanceof FaceLandmarks68) {
        ctx.strokeStyle = lineColor;
        ctx.lineWidth = lineWidth;
        drawContour(ctx, this.faceLandmarks.getJawOutline());
        drawContour(ctx, this.faceLandmarks.getLeftEyeBrow());
        drawContour(ctx, this.faceLandmarks.getRightEyeBrow());
        drawContour(ctx, this.faceLandmarks.getNose());
        drawContour(ctx, this.faceLandmarks.getLeftEye(), true);
        drawContour(ctx, this.faceLandmarks.getRightEye(), true);
        drawContour(ctx, this.faceLandmarks.getMouth(), true);
      }
      if (drawPoints) {
        ctx.strokeStyle = pointColor;
        ctx.fillStyle = pointColor;
        var drawPoint = function(pt3) {
          ctx.beginPath();
          ctx.arc(pt3.x, pt3.y, pointSize, 0, 2 * Math.PI);
          ctx.fill();
        };
        this.faceLandmarks.positions.forEach(drawPoint);
      }
    };
    return DrawFaceLandmarks2;
  }()
);
function drawFaceLandmarks(canvasArg, faceLandmarks) {
  var faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks];
  faceLandmarksArray.forEach(function(f3) {
    var landmarks = f3 instanceof FaceLandmarks ? f3 : isWithFaceLandmarks(f3) ? f3.landmarks : void 0;
    if (!landmarks) {
      throw new Error("drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof");
    }
    new DrawFaceLandmarks(landmarks).draw(canvasArg);
  });
}

// node_modules/face-api.js/build/es6/xception/extractParams.js
function extractorsFactory4(extractWeights, paramMappings) {
  var extractConvParams = tfjsImageRecognitionBase_exports.extractConvParamsFactory(extractWeights, paramMappings);
  var extractSeparableConvParams = tfjsImageRecognitionBase_exports.extractSeparableConvParamsFactory(extractWeights, paramMappings);
  function extractReductionBlockParams(channelsIn, channelsOut, mappedPrefix) {
    var separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + "/separable_conv0");
    var separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/separable_conv1");
    var expansion_conv = extractConvParams(channelsIn, channelsOut, 1, mappedPrefix + "/expansion_conv");
    return { separable_conv0, separable_conv1, expansion_conv };
  }
  function extractMainBlockParams(channels, mappedPrefix) {
    var separable_conv0 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv0");
    var separable_conv1 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv1");
    var separable_conv2 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv2");
    return { separable_conv0, separable_conv1, separable_conv2 };
  }
  return {
    extractConvParams,
    extractSeparableConvParams,
    extractReductionBlockParams,
    extractMainBlockParams
  };
}
function extractParams4(weights, numMainBlocks) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var _b = extractorsFactory4(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractSeparableConvParams = _b.extractSeparableConvParams, extractReductionBlockParams = _b.extractReductionBlockParams, extractMainBlockParams = _b.extractMainBlockParams;
  var entry_flow_conv_in = extractConvParams(3, 32, 3, "entry_flow/conv_in");
  var entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, "entry_flow/reduction_block_0");
  var entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, "entry_flow/reduction_block_1");
  var entry_flow = {
    conv_in: entry_flow_conv_in,
    reduction_block_0: entry_flow_reduction_block_0,
    reduction_block_1: entry_flow_reduction_block_1
  };
  var middle_flow = {};
  range(numMainBlocks, 0, 1).forEach(function(idx) {
    middle_flow["main_block_" + idx] = extractMainBlockParams(128, "middle_flow/main_block_" + idx);
  });
  var exit_flow_reduction_block = extractReductionBlockParams(128, 256, "exit_flow/reduction_block");
  var exit_flow_separable_conv = extractSeparableConvParams(256, 512, "exit_flow/separable_conv");
  var exit_flow = {
    reduction_block: exit_flow_reduction_block,
    separable_conv: exit_flow_separable_conv
  };
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    paramMappings,
    params: { entry_flow, middle_flow, exit_flow }
  };
}

// node_modules/face-api.js/build/es6/xception/extractParamsFromWeigthMap.js
function loadParamsFactory2(weightMap, paramMappings) {
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  var extractConvParams = loadConvParamsFactory(extractWeightEntry);
  var extractSeparableConvParams = tfjsImageRecognitionBase_exports.loadSeparableConvParamsFactory(extractWeightEntry);
  function extractReductionBlockParams(mappedPrefix) {
    var separable_conv0 = extractSeparableConvParams(mappedPrefix + "/separable_conv0");
    var separable_conv1 = extractSeparableConvParams(mappedPrefix + "/separable_conv1");
    var expansion_conv = extractConvParams(mappedPrefix + "/expansion_conv");
    return { separable_conv0, separable_conv1, expansion_conv };
  }
  function extractMainBlockParams(mappedPrefix) {
    var separable_conv0 = extractSeparableConvParams(mappedPrefix + "/separable_conv0");
    var separable_conv1 = extractSeparableConvParams(mappedPrefix + "/separable_conv1");
    var separable_conv2 = extractSeparableConvParams(mappedPrefix + "/separable_conv2");
    return { separable_conv0, separable_conv1, separable_conv2 };
  }
  return {
    extractConvParams,
    extractSeparableConvParams,
    extractReductionBlockParams,
    extractMainBlockParams
  };
}
function extractParamsFromWeigthMap4(weightMap, numMainBlocks) {
  var paramMappings = [];
  var _a3 = loadParamsFactory2(weightMap, paramMappings), extractConvParams = _a3.extractConvParams, extractSeparableConvParams = _a3.extractSeparableConvParams, extractReductionBlockParams = _a3.extractReductionBlockParams, extractMainBlockParams = _a3.extractMainBlockParams;
  var entry_flow_conv_in = extractConvParams("entry_flow/conv_in");
  var entry_flow_reduction_block_0 = extractReductionBlockParams("entry_flow/reduction_block_0");
  var entry_flow_reduction_block_1 = extractReductionBlockParams("entry_flow/reduction_block_1");
  var entry_flow = {
    conv_in: entry_flow_conv_in,
    reduction_block_0: entry_flow_reduction_block_0,
    reduction_block_1: entry_flow_reduction_block_1
  };
  var middle_flow = {};
  range(numMainBlocks, 0, 1).forEach(function(idx) {
    middle_flow["main_block_" + idx] = extractMainBlockParams("middle_flow/main_block_" + idx);
  });
  var exit_flow_reduction_block = extractReductionBlockParams("exit_flow/reduction_block");
  var exit_flow_separable_conv = extractSeparableConvParams("exit_flow/separable_conv");
  var exit_flow = {
    reduction_block: exit_flow_reduction_block,
    separable_conv: exit_flow_separable_conv
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params: { entry_flow, middle_flow, exit_flow }, paramMappings };
}

// node_modules/face-api.js/build/es6/xception/TinyXception.js
function conv(x3, params, stride) {
  return Yu(nu(x3, params.filters, stride, "same"), params.bias);
}
function reductionBlock(x3, params, isActivateInput) {
  if (isActivateInput === void 0) {
    isActivateInput = true;
  }
  var out = isActivateInput ? Sl(x3) : x3;
  out = depthwiseSeparableConv2(out, params.separable_conv0, [1, 1]);
  out = depthwiseSeparableConv2(Sl(out), params.separable_conv1, [1, 1]);
  out = yu(out, [3, 3], [2, 2], "same");
  out = Yu(out, conv(x3, params.expansion_conv, [2, 2]));
  return out;
}
function mainBlock(x3, params) {
  var out = depthwiseSeparableConv2(Sl(x3), params.separable_conv0, [1, 1]);
  out = depthwiseSeparableConv2(Sl(out), params.separable_conv1, [1, 1]);
  out = depthwiseSeparableConv2(Sl(out), params.separable_conv2, [1, 1]);
  out = Yu(out, x3);
  return out;
}
var TinyXception = (
  /** @class */
  function(_super) {
    __extends(TinyXception2, _super);
    function TinyXception2(numMainBlocks) {
      var _this = _super.call(this, "TinyXception") || this;
      _this._numMainBlocks = numMainBlocks;
      return _this;
    }
    TinyXception2.prototype.forwardInput = function(input) {
      var _this = this;
      var params = this.params;
      if (!params) {
        throw new Error("TinyXception - load model before inference");
      }
      return Fe(function() {
        var batchTensor = input.toBatchTensor(112, true);
        var meanRgb = [122.782, 117.001, 104.298];
        var normalized = normalize(batchTensor, meanRgb).div(vn(256));
        var out = Sl(conv(normalized, params.entry_flow.conv_in, [2, 2]));
        out = reductionBlock(out, params.entry_flow.reduction_block_0, false);
        out = reductionBlock(out, params.entry_flow.reduction_block_1);
        range(_this._numMainBlocks, 0, 1).forEach(function(idx) {
          out = mainBlock(out, params.middle_flow["main_block_" + idx]);
        });
        out = reductionBlock(out, params.exit_flow.reduction_block);
        out = Sl(depthwiseSeparableConv2(out, params.exit_flow.separable_conv, [1, 1]));
        return out;
      });
    };
    TinyXception2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    TinyXception2.prototype.getDefaultModelName = function() {
      return "tiny_xception_model";
    };
    TinyXception2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap4(weightMap, this._numMainBlocks);
    };
    TinyXception2.prototype.extractParams = function(weights) {
      return extractParams4(weights, this._numMainBlocks);
    };
    return TinyXception2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/ageGenderNet/extractParams.js
function extractParams5(weights) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var extractFCParams = tfjsImageRecognitionBase_exports.extractFCParamsFactory(extractWeights, paramMappings);
  var age = extractFCParams(512, 1, "fc/age");
  var gender = extractFCParams(512, 2, "fc/gender");
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    paramMappings,
    params: { fc: { age, gender } }
  };
}

// node_modules/face-api.js/build/es6/ageGenderNet/extractParamsFromWeigthMap.js
function extractParamsFromWeigthMap5(weightMap) {
  var paramMappings = [];
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  function extractFcParams(prefix) {
    var weights = extractWeightEntry(prefix + "/weights", 2);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { weights, bias };
  }
  var params = {
    fc: {
      age: extractFcParams("fc/age"),
      gender: extractFcParams("fc/gender")
    }
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/ageGenderNet/types.js
var Gender;
(function(Gender2) {
  Gender2["FEMALE"] = "female";
  Gender2["MALE"] = "male";
})(Gender || (Gender = {}));

// node_modules/face-api.js/build/es6/ageGenderNet/AgeGenderNet.js
var AgeGenderNet = (
  /** @class */
  function(_super) {
    __extends(AgeGenderNet2, _super);
    function AgeGenderNet2(faceFeatureExtractor) {
      if (faceFeatureExtractor === void 0) {
        faceFeatureExtractor = new TinyXception(2);
      }
      var _this = _super.call(this, "AgeGenderNet") || this;
      _this._faceFeatureExtractor = faceFeatureExtractor;
      return _this;
    }
    Object.defineProperty(AgeGenderNet2.prototype, "faceFeatureExtractor", {
      get: function() {
        return this._faceFeatureExtractor;
      },
      enumerable: true,
      configurable: true
    });
    AgeGenderNet2.prototype.runNet = function(input) {
      var _this = this;
      var params = this.params;
      if (!params) {
        throw new Error(this._name + " - load model before inference");
      }
      return Fe(function() {
        var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;
        var pooled = xu(bottleneckFeatures, [7, 7], [2, 2], "valid").as2D(bottleneckFeatures.shape[0], -1);
        var age = fullyConnectedLayer(pooled, params.fc.age).as1D();
        var gender = fullyConnectedLayer(pooled, params.fc.gender);
        return { age, gender };
      });
    };
    AgeGenderNet2.prototype.forwardInput = function(input) {
      var _this = this;
      return Fe(function() {
        var _a3 = _this.runNet(input), age = _a3.age, gender = _a3.gender;
        return { age, gender: zr(gender) };
      });
    };
    AgeGenderNet2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    AgeGenderNet2.prototype.predictAgeAndGender = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, toNetInput(input)];
            case 1:
              netInput = _a3.sent();
              return [4, this.forwardInput(netInput)];
            case 2:
              out = _a3.sent();
              ages = gr(out.age);
              genders = gr(out.gender);
              ageAndGenderTensors = ages.map(function(ageTensor, i3) {
                return {
                  ageTensor,
                  genderTensor: genders[i3]
                };
              });
              return [4, Promise.all(ageAndGenderTensors.map(function(_a4) {
                var ageTensor = _a4.ageTensor, genderTensor = _a4.genderTensor;
                return __awaiter(_this, void 0, void 0, function() {
                  var age, probMale, isMale, gender, genderProbability;
                  return __generator(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        return [4, ageTensor.data()];
                      case 1:
                        age = _b.sent()[0];
                        return [4, genderTensor.data()];
                      case 2:
                        probMale = _b.sent()[0];
                        isMale = probMale > 0.5;
                        gender = isMale ? Gender.MALE : Gender.FEMALE;
                        genderProbability = isMale ? probMale : 1 - probMale;
                        ageTensor.dispose();
                        genderTensor.dispose();
                        return [2, { age, gender, genderProbability }];
                    }
                  });
                });
              }))];
            case 3:
              predictionsByBatch = _a3.sent();
              out.age.dispose();
              out.gender.dispose();
              return [2, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];
          }
        });
      });
    };
    AgeGenderNet2.prototype.getDefaultModelName = function() {
      return "age_gender_model";
    };
    AgeGenderNet2.prototype.dispose = function(throwOnRedispose) {
      if (throwOnRedispose === void 0) {
        throwOnRedispose = true;
      }
      this.faceFeatureExtractor.dispose(throwOnRedispose);
      _super.prototype.dispose.call(this, throwOnRedispose);
    };
    AgeGenderNet2.prototype.loadClassifierParams = function(weights) {
      var _a3 = this.extractClassifierParams(weights), params = _a3.params, paramMappings = _a3.paramMappings;
      this._params = params;
      this._paramMappings = paramMappings;
    };
    AgeGenderNet2.prototype.extractClassifierParams = function(weights) {
      return extractParams5(weights);
    };
    AgeGenderNet2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      var _a3 = seperateWeightMaps(weightMap), featureExtractorMap = _a3.featureExtractorMap, classifierMap = _a3.classifierMap;
      this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);
      return extractParamsFromWeigthMap5(classifierMap);
    };
    AgeGenderNet2.prototype.extractParams = function(weights) {
      var classifierWeightSize = 512 * 1 + 1 + (512 * 2 + 2);
      var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);
      var classifierWeights = weights.slice(weights.length - classifierWeightSize);
      this.faceFeatureExtractor.extractWeights(featureExtractorWeights);
      return this.extractClassifierParams(classifierWeights);
    };
    return AgeGenderNet2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/classes/FaceLandmarks5.js
var FaceLandmarks5 = (
  /** @class */
  function(_super) {
    __extends(FaceLandmarks52, _super);
    function FaceLandmarks52() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FaceLandmarks52.prototype.getRefPointsForAlignment = function() {
      var pts = this.positions;
      return [
        pts[0],
        pts[1],
        getCenterPoint([pts[3], pts[4]])
      ];
    };
    return FaceLandmarks52;
  }(FaceLandmarks)
);

// node_modules/face-api.js/build/es6/classes/FaceMatch.js
var FaceMatch = (
  /** @class */
  function() {
    function FaceMatch2(label, distance) {
      this._label = label;
      this._distance = distance;
    }
    Object.defineProperty(FaceMatch2.prototype, "label", {
      get: function() {
        return this._label;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceMatch2.prototype, "distance", {
      get: function() {
        return this._distance;
      },
      enumerable: true,
      configurable: true
    });
    FaceMatch2.prototype.toString = function(withDistance) {
      if (withDistance === void 0) {
        withDistance = true;
      }
      return "" + this.label + (withDistance ? " (" + round(this.distance) + ")" : "");
    };
    return FaceMatch2;
  }()
);

// node_modules/face-api.js/build/es6/classes/LabeledFaceDescriptors.js
var LabeledFaceDescriptors = (
  /** @class */
  function() {
    function LabeledFaceDescriptors2(label, descriptors) {
      if (!(typeof label === "string")) {
        throw new Error("LabeledFaceDescriptors - constructor expected label to be a string");
      }
      if (!Array.isArray(descriptors) || descriptors.some(function(desc) {
        return !(desc instanceof Float32Array);
      })) {
        throw new Error("LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array");
      }
      this._label = label;
      this._descriptors = descriptors;
    }
    Object.defineProperty(LabeledFaceDescriptors2.prototype, "label", {
      get: function() {
        return this._label;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(LabeledFaceDescriptors2.prototype, "descriptors", {
      get: function() {
        return this._descriptors;
      },
      enumerable: true,
      configurable: true
    });
    return LabeledFaceDescriptors2;
  }()
);

// node_modules/face-api.js/build/es6/dom/extractFaces.js
function extractFaces(input, detections) {
  return __awaiter(this, void 0, void 0, function() {
    var Canvas, canvas, netInput, tensorOrCanvas, _a3, ctx, boxes;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          Canvas = env.getEnv().Canvas;
          canvas = input;
          if (!!(input instanceof Canvas)) return [3, 5];
          return [4, toNetInput(input)];
        case 1:
          netInput = _b.sent();
          if (netInput.batchSize > 1) {
            throw new Error("extractFaces - batchSize > 1 not supported");
          }
          tensorOrCanvas = netInput.getInput(0);
          if (!(tensorOrCanvas instanceof Canvas)) return [3, 2];
          _a3 = tensorOrCanvas;
          return [3, 4];
        case 2:
          return [4, imageTensorToCanvas(tensorOrCanvas)];
        case 3:
          _a3 = _b.sent();
          _b.label = 4;
        case 4:
          canvas = _a3;
          _b.label = 5;
        case 5:
          ctx = getContext2dOrThrow(canvas);
          boxes = detections.map(function(det) {
            return det instanceof FaceDetection ? det.forSize(canvas.width, canvas.height).box.floor() : det;
          }).map(function(box) {
            return box.clipAtImageBorders(canvas.width, canvas.height);
          });
          return [2, boxes.map(function(_a4) {
            var x3 = _a4.x, y3 = _a4.y, width = _a4.width, height = _a4.height;
            var faceImg = createCanvas({ width, height });
            getContext2dOrThrow(faceImg).putImageData(ctx.getImageData(x3, y3, width, height), 0, 0);
            return faceImg;
          })];
      }
    });
  });
}

// node_modules/face-api.js/build/es6/dom/extractFaceTensors.js
function extractFaceTensors(imageTensor, detections) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) {
        throw new Error("extractFaceTensors - expected image tensor to be 3D or 4D");
      }
      if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) {
        throw new Error("extractFaceTensors - batchSize > 1 not supported");
      }
      return [2, Fe(function() {
        var _a4 = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0), imgHeight = _a4[0], imgWidth = _a4[1], numChannels = _a4[2];
        var boxes = detections.map(function(det) {
          return det instanceof FaceDetection ? det.forSize(imgWidth, imgHeight).box : det;
        }).map(function(box) {
          return box.clipAtImageBorders(imgWidth, imgHeight);
        });
        var faceTensors = boxes.map(function(_a5) {
          var x3 = _a5.x, y3 = _a5.y, width = _a5.width, height = _a5.height;
          return Ru(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y3, x3, 0], [height, width, numChannels]);
        });
        return faceTensors;
      })];
    });
  });
}

// node_modules/face-api.js/build/es6/faceLandmarkNet/FaceLandmark68NetBase.js
var FaceLandmark68NetBase = (
  /** @class */
  function(_super) {
    __extends(FaceLandmark68NetBase2, _super);
    function FaceLandmark68NetBase2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FaceLandmark68NetBase2.prototype.postProcess = function(output, inputSize, originalDimensions) {
      var inputDimensions = originalDimensions.map(function(_a3) {
        var width = _a3.width, height = _a3.height;
        var scale2 = inputSize / Math.max(height, width);
        return {
          width: width * scale2,
          height: height * scale2
        };
      });
      var batchSize = inputDimensions.length;
      return Fe(function() {
        var createInterleavedTensor = function(fillX, fillY) {
          return dr([
            Rn([68], fillX),
            Rn([68], fillY)
          ], 1).as2D(1, 136).as1D();
        };
        var getPadding = function(batchIdx, cond) {
          var _a3 = inputDimensions[batchIdx], width = _a3.width, height = _a3.height;
          return cond(width, height) ? Math.abs(width - height) / 2 : 0;
        };
        var getPaddingX = function(batchIdx) {
          return getPadding(batchIdx, function(w3, h3) {
            return w3 < h3;
          });
        };
        var getPaddingY = function(batchIdx) {
          return getPadding(batchIdx, function(w3, h3) {
            return h3 < w3;
          });
        };
        var landmarkTensors = output.mul(Rn([batchSize, 136], inputSize)).sub(dr(Array.from(Array(batchSize), function(_3, batchIdx) {
          return createInterleavedTensor(getPaddingX(batchIdx), getPaddingY(batchIdx));
        }))).div(dr(Array.from(Array(batchSize), function(_3, batchIdx) {
          return createInterleavedTensor(inputDimensions[batchIdx].width, inputDimensions[batchIdx].height);
        })));
        return landmarkTensors;
      });
    };
    FaceLandmark68NetBase2.prototype.forwardInput = function(input) {
      var _this = this;
      return Fe(function() {
        var out = _this.runNet(input);
        return _this.postProcess(out, input.inputSize, input.inputDimensions.map(function(_a3) {
          var height = _a3[0], width = _a3[1];
          return { height, width };
        }));
      });
    };
    FaceLandmark68NetBase2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    FaceLandmark68NetBase2.prototype.detectLandmarks = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var netInput, landmarkTensors, landmarksForBatch;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, toNetInput(input)];
            case 1:
              netInput = _a3.sent();
              landmarkTensors = Fe(function() {
                return gr(_this.forwardInput(netInput));
              });
              return [4, Promise.all(landmarkTensors.map(function(landmarkTensor, batchIdx) {
                return __awaiter(_this, void 0, void 0, function() {
                  var landmarksArray, _a4, _b, xCoords, yCoords;
                  return __generator(this, function(_c3) {
                    switch (_c3.label) {
                      case 0:
                        _b = (_a4 = Array).from;
                        return [4, landmarkTensor.data()];
                      case 1:
                        landmarksArray = _b.apply(_a4, [_c3.sent()]);
                        xCoords = landmarksArray.filter(function(_3, i3) {
                          return isEven(i3);
                        });
                        yCoords = landmarksArray.filter(function(_3, i3) {
                          return !isEven(i3);
                        });
                        return [2, new FaceLandmarks68(Array(68).fill(0).map(function(_3, i3) {
                          return new Point(xCoords[i3], yCoords[i3]);
                        }), {
                          height: netInput.getInputHeight(batchIdx),
                          width: netInput.getInputWidth(batchIdx)
                        })];
                    }
                  });
                });
              }))];
            case 2:
              landmarksForBatch = _a3.sent();
              landmarkTensors.forEach(function(t3) {
                return t3.dispose();
              });
              return [2, netInput.isBatchInput ? landmarksForBatch : landmarksForBatch[0]];
          }
        });
      });
    };
    FaceLandmark68NetBase2.prototype.getClassifierChannelsOut = function() {
      return 136;
    };
    return FaceLandmark68NetBase2;
  }(FaceProcessor)
);

// node_modules/face-api.js/build/es6/faceLandmarkNet/FaceLandmark68Net.js
var FaceLandmark68Net = (
  /** @class */
  function(_super) {
    __extends(FaceLandmark68Net2, _super);
    function FaceLandmark68Net2(faceFeatureExtractor) {
      if (faceFeatureExtractor === void 0) {
        faceFeatureExtractor = new FaceFeatureExtractor();
      }
      return _super.call(this, "FaceLandmark68Net", faceFeatureExtractor) || this;
    }
    FaceLandmark68Net2.prototype.getDefaultModelName = function() {
      return "face_landmark_68_model";
    };
    FaceLandmark68Net2.prototype.getClassifierChannelsIn = function() {
      return 256;
    };
    return FaceLandmark68Net2;
  }(FaceLandmark68NetBase)
);

// node_modules/face-api.js/build/es6/faceFeatureExtractor/extractParamsFromWeigthMapTiny.js
function extractParamsFromWeigthMapTiny(weightMap) {
  var paramMappings = [];
  var extractDenseBlock3Params = loadParamsFactory(weightMap, paramMappings).extractDenseBlock3Params;
  var params = {
    dense0: extractDenseBlock3Params("dense0", true),
    dense1: extractDenseBlock3Params("dense1"),
    dense2: extractDenseBlock3Params("dense2")
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/extractParamsTiny.js
function extractParamsTiny(weights) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var extractDenseBlock3Params = extractorsFactory3(extractWeights, paramMappings).extractDenseBlock3Params;
  var dense0 = extractDenseBlock3Params(3, 32, "dense0", true);
  var dense1 = extractDenseBlock3Params(32, 64, "dense1");
  var dense2 = extractDenseBlock3Params(64, 128, "dense2");
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    paramMappings,
    params: { dense0, dense1, dense2 }
  };
}

// node_modules/face-api.js/build/es6/faceFeatureExtractor/TinyFaceFeatureExtractor.js
var TinyFaceFeatureExtractor = (
  /** @class */
  function(_super) {
    __extends(TinyFaceFeatureExtractor2, _super);
    function TinyFaceFeatureExtractor2() {
      return _super.call(this, "TinyFaceFeatureExtractor") || this;
    }
    TinyFaceFeatureExtractor2.prototype.forwardInput = function(input) {
      var params = this.params;
      if (!params) {
        throw new Error("TinyFaceFeatureExtractor - load model before inference");
      }
      return Fe(function() {
        var batchTensor = input.toBatchTensor(112, true);
        var meanRgb = [122.782, 117.001, 104.298];
        var normalized = normalize(batchTensor, meanRgb).div(vn(255));
        var out = denseBlock3(normalized, params.dense0, true);
        out = denseBlock3(out, params.dense1);
        out = denseBlock3(out, params.dense2);
        out = xu(out, [14, 14], [2, 2], "valid");
        return out;
      });
    };
    TinyFaceFeatureExtractor2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    TinyFaceFeatureExtractor2.prototype.getDefaultModelName = function() {
      return "face_feature_extractor_tiny_model";
    };
    TinyFaceFeatureExtractor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMapTiny(weightMap);
    };
    TinyFaceFeatureExtractor2.prototype.extractParams = function(weights) {
      return extractParamsTiny(weights);
    };
    return TinyFaceFeatureExtractor2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/faceLandmarkNet/FaceLandmark68TinyNet.js
var FaceLandmark68TinyNet = (
  /** @class */
  function(_super) {
    __extends(FaceLandmark68TinyNet2, _super);
    function FaceLandmark68TinyNet2(faceFeatureExtractor) {
      if (faceFeatureExtractor === void 0) {
        faceFeatureExtractor = new TinyFaceFeatureExtractor();
      }
      return _super.call(this, "FaceLandmark68TinyNet", faceFeatureExtractor) || this;
    }
    FaceLandmark68TinyNet2.prototype.getDefaultModelName = function() {
      return "face_landmark_68_tiny_model";
    };
    FaceLandmark68TinyNet2.prototype.getClassifierChannelsIn = function() {
      return 128;
    };
    return FaceLandmark68TinyNet2;
  }(FaceLandmark68NetBase)
);

// node_modules/face-api.js/build/es6/faceLandmarkNet/index.js
var FaceLandmarkNet = (
  /** @class */
  function(_super) {
    __extends(FaceLandmarkNet2, _super);
    function FaceLandmarkNet2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return FaceLandmarkNet2;
  }(FaceLandmark68Net)
);

// node_modules/face-api.js/build/es6/faceRecognitionNet/scaleLayer.js
function scale(x3, params) {
  return Yu(ll(x3, params.weights), params.biases);
}

// node_modules/face-api.js/build/es6/faceRecognitionNet/convLayer.js
function convLayer2(x3, params, strides, withRelu, padding) {
  if (padding === void 0) {
    padding = "same";
  }
  var _a3 = params.conv, filters = _a3.filters, bias = _a3.bias;
  var out = nu(x3, filters, strides, padding);
  out = Yu(out, bias);
  out = scale(out, params.scale);
  return withRelu ? Sl(out) : out;
}
function conv2(x3, params) {
  return convLayer2(x3, params, [1, 1], true);
}
function convNoRelu(x3, params) {
  return convLayer2(x3, params, [1, 1], false);
}
function convDown(x3, params) {
  return convLayer2(x3, params, [2, 2], true, "valid");
}

// node_modules/face-api.js/build/es6/faceRecognitionNet/extractParams.js
function extractorsFactory5(extractWeights, paramMappings) {
  function extractFilterValues(numFilterValues, numFilters, filterSize) {
    var weights = extractWeights(numFilterValues);
    var depth = weights.length / (numFilters * filterSize * filterSize);
    if (isFloat(depth)) {
      throw new Error("depth has to be an integer: " + depth + ", weights.length: " + weights.length + ", numFilters: " + numFilters + ", filterSize: " + filterSize);
    }
    return Fe(function() {
      return kl(xn(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]);
    });
  }
  function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {
    var filters = extractFilterValues(numFilterValues, numFilters, filterSize);
    var bias = mn(extractWeights(numFilters));
    paramMappings.push({ paramPath: mappedPrefix + "/filters" }, { paramPath: mappedPrefix + "/bias" });
    return { filters, bias };
  }
  function extractScaleLayerParams(numWeights, mappedPrefix) {
    var weights = mn(extractWeights(numWeights));
    var biases = mn(extractWeights(numWeights));
    paramMappings.push({ paramPath: mappedPrefix + "/weights" }, { paramPath: mappedPrefix + "/biases" });
    return {
      weights,
      biases
    };
  }
  function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {
    var conv3 = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + "/conv");
    var scale2 = extractScaleLayerParams(numFilters, mappedPrefix + "/scale");
    return { conv: conv3, scale: scale2 };
  }
  function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {
    if (isDown === void 0) {
      isDown = false;
    }
    var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + "/conv1");
    var conv22 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + "/conv2");
    return { conv1, conv2: conv22 };
  }
  return {
    extractConvLayerParams,
    extractResidualLayerParams
  };
}
function extractParams6(weights) {
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var paramMappings = [];
  var _b = extractorsFactory5(extractWeights, paramMappings), extractConvLayerParams = _b.extractConvLayerParams, extractResidualLayerParams = _b.extractResidualLayerParams;
  var conv32_down = extractConvLayerParams(4704, 32, 7, "conv32_down");
  var conv32_1 = extractResidualLayerParams(9216, 32, 3, "conv32_1");
  var conv32_2 = extractResidualLayerParams(9216, 32, 3, "conv32_2");
  var conv32_3 = extractResidualLayerParams(9216, 32, 3, "conv32_3");
  var conv64_down = extractResidualLayerParams(36864, 64, 3, "conv64_down", true);
  var conv64_1 = extractResidualLayerParams(36864, 64, 3, "conv64_1");
  var conv64_2 = extractResidualLayerParams(36864, 64, 3, "conv64_2");
  var conv64_3 = extractResidualLayerParams(36864, 64, 3, "conv64_3");
  var conv128_down = extractResidualLayerParams(147456, 128, 3, "conv128_down", true);
  var conv128_1 = extractResidualLayerParams(147456, 128, 3, "conv128_1");
  var conv128_2 = extractResidualLayerParams(147456, 128, 3, "conv128_2");
  var conv256_down = extractResidualLayerParams(589824, 256, 3, "conv256_down", true);
  var conv256_1 = extractResidualLayerParams(589824, 256, 3, "conv256_1");
  var conv256_2 = extractResidualLayerParams(589824, 256, 3, "conv256_2");
  var conv256_down_out = extractResidualLayerParams(589824, 256, 3, "conv256_down_out");
  var fc3 = Fe(function() {
    return kl(gn(extractWeights(256 * 128), [128, 256]), [1, 0]);
  });
  paramMappings.push({ paramPath: "fc" });
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  var params = {
    conv32_down,
    conv32_1,
    conv32_2,
    conv32_3,
    conv64_down,
    conv64_1,
    conv64_2,
    conv64_3,
    conv128_down,
    conv128_1,
    conv128_2,
    conv256_down,
    conv256_1,
    conv256_2,
    conv256_down_out,
    fc: fc3
  };
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/faceRecognitionNet/extractParamsFromWeigthMap.js
function extractorsFactory6(weightMap, paramMappings) {
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  function extractScaleLayerParams(prefix) {
    var weights = extractWeightEntry(prefix + "/scale/weights", 1);
    var biases = extractWeightEntry(prefix + "/scale/biases", 1);
    return { weights, biases };
  }
  function extractConvLayerParams(prefix) {
    var filters = extractWeightEntry(prefix + "/conv/filters", 4);
    var bias = extractWeightEntry(prefix + "/conv/bias", 1);
    var scale2 = extractScaleLayerParams(prefix);
    return { conv: { filters, bias }, scale: scale2 };
  }
  function extractResidualLayerParams(prefix) {
    return {
      conv1: extractConvLayerParams(prefix + "/conv1"),
      conv2: extractConvLayerParams(prefix + "/conv2")
    };
  }
  return {
    extractConvLayerParams,
    extractResidualLayerParams
  };
}
function extractParamsFromWeigthMap6(weightMap) {
  var paramMappings = [];
  var _a3 = extractorsFactory6(weightMap, paramMappings), extractConvLayerParams = _a3.extractConvLayerParams, extractResidualLayerParams = _a3.extractResidualLayerParams;
  var conv32_down = extractConvLayerParams("conv32_down");
  var conv32_1 = extractResidualLayerParams("conv32_1");
  var conv32_2 = extractResidualLayerParams("conv32_2");
  var conv32_3 = extractResidualLayerParams("conv32_3");
  var conv64_down = extractResidualLayerParams("conv64_down");
  var conv64_1 = extractResidualLayerParams("conv64_1");
  var conv64_2 = extractResidualLayerParams("conv64_2");
  var conv64_3 = extractResidualLayerParams("conv64_3");
  var conv128_down = extractResidualLayerParams("conv128_down");
  var conv128_1 = extractResidualLayerParams("conv128_1");
  var conv128_2 = extractResidualLayerParams("conv128_2");
  var conv256_down = extractResidualLayerParams("conv256_down");
  var conv256_1 = extractResidualLayerParams("conv256_1");
  var conv256_2 = extractResidualLayerParams("conv256_2");
  var conv256_down_out = extractResidualLayerParams("conv256_down_out");
  var fc3 = weightMap["fc"];
  paramMappings.push({ originalPath: "fc", paramPath: "fc" });
  if (!isTensor2D(fc3)) {
    throw new Error("expected weightMap[fc] to be a Tensor2D, instead have " + fc3);
  }
  var params = {
    conv32_down,
    conv32_1,
    conv32_2,
    conv32_3,
    conv64_down,
    conv64_1,
    conv64_2,
    conv64_3,
    conv128_down,
    conv128_1,
    conv128_2,
    conv256_down,
    conv256_1,
    conv256_2,
    conv256_down_out,
    fc: fc3
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/faceRecognitionNet/residualLayer.js
function residual(x3, params) {
  var out = conv2(x3, params.conv1);
  out = convNoRelu(out, params.conv2);
  out = Yu(out, x3);
  out = Sl(out);
  return out;
}
function residualDown(x3, params) {
  var out = convDown(x3, params.conv1);
  out = convNoRelu(out, params.conv2);
  var pooled = xu(x3, 2, 2, "valid");
  var zeros = En(pooled.shape);
  var isPad = pooled.shape[3] !== out.shape[3];
  var isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2];
  if (isAdjustShape) {
    var padShapeX = out.shape.slice();
    padShapeX[1] = 1;
    var zerosW = En(padShapeX);
    out = An([out, zerosW], 1);
    var padShapeY = out.shape.slice();
    padShapeY[2] = 1;
    var zerosH = En(padShapeY);
    out = An([out, zerosH], 2);
  }
  pooled = isPad ? An([pooled, zeros], 3) : pooled;
  out = Yu(pooled, out);
  out = Sl(out);
  return out;
}

// node_modules/face-api.js/build/es6/faceRecognitionNet/FaceRecognitionNet.js
var FaceRecognitionNet = (
  /** @class */
  function(_super) {
    __extends(FaceRecognitionNet2, _super);
    function FaceRecognitionNet2() {
      return _super.call(this, "FaceRecognitionNet") || this;
    }
    FaceRecognitionNet2.prototype.forwardInput = function(input) {
      var params = this.params;
      if (!params) {
        throw new Error("FaceRecognitionNet - load model before inference");
      }
      return Fe(function() {
        var batchTensor = input.toBatchTensor(150, true).toFloat();
        var meanRgb = [122.782, 117.001, 104.298];
        var normalized = normalize(batchTensor, meanRgb).div(vn(256));
        var out = convDown(normalized, params.conv32_down);
        out = yu(out, 3, 2, "valid");
        out = residual(out, params.conv32_1);
        out = residual(out, params.conv32_2);
        out = residual(out, params.conv32_3);
        out = residualDown(out, params.conv64_down);
        out = residual(out, params.conv64_1);
        out = residual(out, params.conv64_2);
        out = residual(out, params.conv64_3);
        out = residualDown(out, params.conv128_down);
        out = residual(out, params.conv128_1);
        out = residual(out, params.conv128_2);
        out = residualDown(out, params.conv256_down);
        out = residual(out, params.conv256_1);
        out = residual(out, params.conv256_2);
        out = residualDown(out, params.conv256_down_out);
        var globalAvg = out.mean([1, 2]);
        var fullyConnected = uu(globalAvg, params.fc);
        return fullyConnected;
      });
    };
    FaceRecognitionNet2.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    FaceRecognitionNet2.prototype.computeFaceDescriptor = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var netInput, faceDescriptorTensors, faceDescriptorsForBatch;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, toNetInput(input)];
            case 1:
              netInput = _a3.sent();
              faceDescriptorTensors = Fe(function() {
                return gr(_this.forwardInput(netInput));
              });
              return [4, Promise.all(faceDescriptorTensors.map(function(t3) {
                return t3.data();
              }))];
            case 2:
              faceDescriptorsForBatch = _a3.sent();
              faceDescriptorTensors.forEach(function(t3) {
                return t3.dispose();
              });
              return [2, netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]];
          }
        });
      });
    };
    FaceRecognitionNet2.prototype.getDefaultModelName = function() {
      return "face_recognition_model";
    };
    FaceRecognitionNet2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap6(weightMap);
    };
    FaceRecognitionNet2.prototype.extractParams = function(weights) {
      return extractParams6(weights);
    };
    return FaceRecognitionNet2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/faceRecognitionNet/index.js
function createFaceRecognitionNet(weights) {
  var net = new FaceRecognitionNet();
  net.extractWeights(weights);
  return net;
}

// node_modules/face-api.js/build/es6/factories/WithFaceDescriptor.js
function extendWithFaceDescriptor(sourceObj, descriptor) {
  var extension = { descriptor };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/mtcnn/MtcnnOptions.js
var MtcnnOptions = (
  /** @class */
  function() {
    function MtcnnOptions2(_a3) {
      var _b = _a3 === void 0 ? {} : _a3, minFaceSize = _b.minFaceSize, scaleFactor = _b.scaleFactor, maxNumScales = _b.maxNumScales, scoreThresholds = _b.scoreThresholds, scaleSteps = _b.scaleSteps;
      this._name = "MtcnnOptions";
      this._minFaceSize = minFaceSize || 20;
      this._scaleFactor = scaleFactor || 0.709;
      this._maxNumScales = maxNumScales || 10;
      this._scoreThresholds = scoreThresholds || [0.6, 0.7, 0.7];
      this._scaleSteps = scaleSteps;
      if (typeof this._minFaceSize !== "number" || this._minFaceSize < 0) {
        throw new Error(this._name + " - expected minFaceSize to be a number > 0");
      }
      if (typeof this._scaleFactor !== "number" || this._scaleFactor <= 0 || this._scaleFactor >= 1) {
        throw new Error(this._name + " - expected scaleFactor to be a number between 0 and 1");
      }
      if (typeof this._maxNumScales !== "number" || this._maxNumScales < 0) {
        throw new Error(this._name + " - expected maxNumScales to be a number > 0");
      }
      if (!Array.isArray(this._scoreThresholds) || this._scoreThresholds.length !== 3 || this._scoreThresholds.some(function(th3) {
        return typeof th3 !== "number";
      })) {
        throw new Error(this._name + " - expected scoreThresholds to be an array of numbers of length 3");
      }
      if (this._scaleSteps && (!Array.isArray(this._scaleSteps) || this._scaleSteps.some(function(th3) {
        return typeof th3 !== "number";
      }))) {
        throw new Error(this._name + " - expected scaleSteps to be an array of numbers");
      }
    }
    Object.defineProperty(MtcnnOptions2.prototype, "minFaceSize", {
      get: function() {
        return this._minFaceSize;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MtcnnOptions2.prototype, "scaleFactor", {
      get: function() {
        return this._scaleFactor;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MtcnnOptions2.prototype, "maxNumScales", {
      get: function() {
        return this._maxNumScales;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MtcnnOptions2.prototype, "scoreThresholds", {
      get: function() {
        return this._scoreThresholds;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MtcnnOptions2.prototype, "scaleSteps", {
      get: function() {
        return this._scaleSteps;
      },
      enumerable: true,
      configurable: true
    });
    return MtcnnOptions2;
  }()
);

// node_modules/face-api.js/build/es6/ssdMobilenetv1/extractParams.js
function extractorsFactory7(extractWeights, paramMappings) {
  function extractDepthwiseConvParams(numChannels, mappedPrefix) {
    var filters = xn(extractWeights(3 * 3 * numChannels), [3, 3, numChannels, 1]);
    var batch_norm_scale = mn(extractWeights(numChannels));
    var batch_norm_offset = mn(extractWeights(numChannels));
    var batch_norm_mean = mn(extractWeights(numChannels));
    var batch_norm_variance = mn(extractWeights(numChannels));
    paramMappings.push({ paramPath: mappedPrefix + "/filters" }, { paramPath: mappedPrefix + "/batch_norm_scale" }, { paramPath: mappedPrefix + "/batch_norm_offset" }, { paramPath: mappedPrefix + "/batch_norm_mean" }, { paramPath: mappedPrefix + "/batch_norm_variance" });
    return {
      filters,
      batch_norm_scale,
      batch_norm_offset,
      batch_norm_mean,
      batch_norm_variance
    };
  }
  function extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, isPointwiseConv) {
    var filters = xn(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [filterSize, filterSize, channelsIn, channelsOut]);
    var bias = mn(extractWeights(channelsOut));
    paramMappings.push({ paramPath: mappedPrefix + "/filters" }, { paramPath: mappedPrefix + "/" + (isPointwiseConv ? "batch_norm_offset" : "bias") });
    return { filters, bias };
  }
  function extractPointwiseConvParams(channelsIn, channelsOut, filterSize, mappedPrefix) {
    var _a3 = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true), filters = _a3.filters, bias = _a3.bias;
    return {
      filters,
      batch_norm_offset: bias
    };
  }
  function extractConvPairParams(channelsIn, channelsOut, mappedPrefix) {
    var depthwise_conv = extractDepthwiseConvParams(channelsIn, mappedPrefix + "/depthwise_conv");
    var pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, mappedPrefix + "/pointwise_conv");
    return { depthwise_conv, pointwise_conv };
  }
  function extractMobilenetV1Params() {
    var conv_0 = extractPointwiseConvParams(3, 32, 3, "mobilenetv1/conv_0");
    var conv_1 = extractConvPairParams(32, 64, "mobilenetv1/conv_1");
    var conv_2 = extractConvPairParams(64, 128, "mobilenetv1/conv_2");
    var conv_3 = extractConvPairParams(128, 128, "mobilenetv1/conv_3");
    var conv_4 = extractConvPairParams(128, 256, "mobilenetv1/conv_4");
    var conv_5 = extractConvPairParams(256, 256, "mobilenetv1/conv_5");
    var conv_6 = extractConvPairParams(256, 512, "mobilenetv1/conv_6");
    var conv_7 = extractConvPairParams(512, 512, "mobilenetv1/conv_7");
    var conv_8 = extractConvPairParams(512, 512, "mobilenetv1/conv_8");
    var conv_9 = extractConvPairParams(512, 512, "mobilenetv1/conv_9");
    var conv_10 = extractConvPairParams(512, 512, "mobilenetv1/conv_10");
    var conv_11 = extractConvPairParams(512, 512, "mobilenetv1/conv_11");
    var conv_12 = extractConvPairParams(512, 1024, "mobilenetv1/conv_12");
    var conv_13 = extractConvPairParams(1024, 1024, "mobilenetv1/conv_13");
    return {
      conv_0,
      conv_1,
      conv_2,
      conv_3,
      conv_4,
      conv_5,
      conv_6,
      conv_7,
      conv_8,
      conv_9,
      conv_10,
      conv_11,
      conv_12,
      conv_13
    };
  }
  function extractPredictionLayerParams() {
    var conv_0 = extractPointwiseConvParams(1024, 256, 1, "prediction_layer/conv_0");
    var conv_1 = extractPointwiseConvParams(256, 512, 3, "prediction_layer/conv_1");
    var conv_2 = extractPointwiseConvParams(512, 128, 1, "prediction_layer/conv_2");
    var conv_3 = extractPointwiseConvParams(128, 256, 3, "prediction_layer/conv_3");
    var conv_4 = extractPointwiseConvParams(256, 128, 1, "prediction_layer/conv_4");
    var conv_5 = extractPointwiseConvParams(128, 256, 3, "prediction_layer/conv_5");
    var conv_6 = extractPointwiseConvParams(256, 64, 1, "prediction_layer/conv_6");
    var conv_7 = extractPointwiseConvParams(64, 128, 3, "prediction_layer/conv_7");
    var box_encoding_0_predictor = extractConvParams(512, 12, 1, "prediction_layer/box_predictor_0/box_encoding_predictor");
    var class_predictor_0 = extractConvParams(512, 9, 1, "prediction_layer/box_predictor_0/class_predictor");
    var box_encoding_1_predictor = extractConvParams(1024, 24, 1, "prediction_layer/box_predictor_1/box_encoding_predictor");
    var class_predictor_1 = extractConvParams(1024, 18, 1, "prediction_layer/box_predictor_1/class_predictor");
    var box_encoding_2_predictor = extractConvParams(512, 24, 1, "prediction_layer/box_predictor_2/box_encoding_predictor");
    var class_predictor_2 = extractConvParams(512, 18, 1, "prediction_layer/box_predictor_2/class_predictor");
    var box_encoding_3_predictor = extractConvParams(256, 24, 1, "prediction_layer/box_predictor_3/box_encoding_predictor");
    var class_predictor_3 = extractConvParams(256, 18, 1, "prediction_layer/box_predictor_3/class_predictor");
    var box_encoding_4_predictor = extractConvParams(256, 24, 1, "prediction_layer/box_predictor_4/box_encoding_predictor");
    var class_predictor_4 = extractConvParams(256, 18, 1, "prediction_layer/box_predictor_4/class_predictor");
    var box_encoding_5_predictor = extractConvParams(128, 24, 1, "prediction_layer/box_predictor_5/box_encoding_predictor");
    var class_predictor_5 = extractConvParams(128, 18, 1, "prediction_layer/box_predictor_5/class_predictor");
    var box_predictor_0 = {
      box_encoding_predictor: box_encoding_0_predictor,
      class_predictor: class_predictor_0
    };
    var box_predictor_1 = {
      box_encoding_predictor: box_encoding_1_predictor,
      class_predictor: class_predictor_1
    };
    var box_predictor_2 = {
      box_encoding_predictor: box_encoding_2_predictor,
      class_predictor: class_predictor_2
    };
    var box_predictor_3 = {
      box_encoding_predictor: box_encoding_3_predictor,
      class_predictor: class_predictor_3
    };
    var box_predictor_4 = {
      box_encoding_predictor: box_encoding_4_predictor,
      class_predictor: class_predictor_4
    };
    var box_predictor_5 = {
      box_encoding_predictor: box_encoding_5_predictor,
      class_predictor: class_predictor_5
    };
    return {
      conv_0,
      conv_1,
      conv_2,
      conv_3,
      conv_4,
      conv_5,
      conv_6,
      conv_7,
      box_predictor_0,
      box_predictor_1,
      box_predictor_2,
      box_predictor_3,
      box_predictor_4,
      box_predictor_5
    };
  }
  return {
    extractMobilenetV1Params,
    extractPredictionLayerParams
  };
}
function extractParams7(weights) {
  var paramMappings = [];
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var _b = extractorsFactory7(extractWeights, paramMappings), extractMobilenetV1Params = _b.extractMobilenetV1Params, extractPredictionLayerParams = _b.extractPredictionLayerParams;
  var mobilenetv1 = extractMobilenetV1Params();
  var prediction_layer = extractPredictionLayerParams();
  var extra_dim = yn(extractWeights(5118 * 4), [1, 5118, 4]);
  var output_layer = {
    extra_dim
  };
  paramMappings.push({ paramPath: "output_layer/extra_dim" });
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return {
    params: {
      mobilenetv1,
      prediction_layer,
      output_layer
    },
    paramMappings
  };
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/extractParamsFromWeigthMap.js
function extractorsFactory8(weightMap, paramMappings) {
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  function extractPointwiseConvParams(prefix, idx, mappedPrefix) {
    var filters = extractWeightEntry(prefix + "/Conv2d_" + idx + "_pointwise/weights", 4, mappedPrefix + "/filters");
    var batch_norm_offset = extractWeightEntry(prefix + "/Conv2d_" + idx + "_pointwise/convolution_bn_offset", 1, mappedPrefix + "/batch_norm_offset");
    return { filters, batch_norm_offset };
  }
  function extractConvPairParams(idx) {
    var mappedPrefix = "mobilenetv1/conv_" + idx;
    var prefixDepthwiseConv = "MobilenetV1/Conv2d_" + idx + "_depthwise";
    var mappedPrefixDepthwiseConv = mappedPrefix + "/depthwise_conv";
    var mappedPrefixPointwiseConv = mappedPrefix + "/pointwise_conv";
    var filters = extractWeightEntry(prefixDepthwiseConv + "/depthwise_weights", 4, mappedPrefixDepthwiseConv + "/filters");
    var batch_norm_scale = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/gamma", 1, mappedPrefixDepthwiseConv + "/batch_norm_scale");
    var batch_norm_offset = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/beta", 1, mappedPrefixDepthwiseConv + "/batch_norm_offset");
    var batch_norm_mean = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/moving_mean", 1, mappedPrefixDepthwiseConv + "/batch_norm_mean");
    var batch_norm_variance = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/moving_variance", 1, mappedPrefixDepthwiseConv + "/batch_norm_variance");
    return {
      depthwise_conv: {
        filters,
        batch_norm_scale,
        batch_norm_offset,
        batch_norm_mean,
        batch_norm_variance
      },
      pointwise_conv: extractPointwiseConvParams("MobilenetV1", idx, mappedPrefixPointwiseConv)
    };
  }
  function extractMobilenetV1Params() {
    return {
      conv_0: extractPointwiseConvParams("MobilenetV1", 0, "mobilenetv1/conv_0"),
      conv_1: extractConvPairParams(1),
      conv_2: extractConvPairParams(2),
      conv_3: extractConvPairParams(3),
      conv_4: extractConvPairParams(4),
      conv_5: extractConvPairParams(5),
      conv_6: extractConvPairParams(6),
      conv_7: extractConvPairParams(7),
      conv_8: extractConvPairParams(8),
      conv_9: extractConvPairParams(9),
      conv_10: extractConvPairParams(10),
      conv_11: extractConvPairParams(11),
      conv_12: extractConvPairParams(12),
      conv_13: extractConvPairParams(13)
    };
  }
  function extractConvParams(prefix, mappedPrefix) {
    var filters = extractWeightEntry(prefix + "/weights", 4, mappedPrefix + "/filters");
    var bias = extractWeightEntry(prefix + "/biases", 1, mappedPrefix + "/bias");
    return { filters, bias };
  }
  function extractBoxPredictorParams(idx) {
    var box_encoding_predictor = extractConvParams("Prediction/BoxPredictor_" + idx + "/BoxEncodingPredictor", "prediction_layer/box_predictor_" + idx + "/box_encoding_predictor");
    var class_predictor = extractConvParams("Prediction/BoxPredictor_" + idx + "/ClassPredictor", "prediction_layer/box_predictor_" + idx + "/class_predictor");
    return { box_encoding_predictor, class_predictor };
  }
  function extractPredictionLayerParams() {
    return {
      conv_0: extractPointwiseConvParams("Prediction", 0, "prediction_layer/conv_0"),
      conv_1: extractPointwiseConvParams("Prediction", 1, "prediction_layer/conv_1"),
      conv_2: extractPointwiseConvParams("Prediction", 2, "prediction_layer/conv_2"),
      conv_3: extractPointwiseConvParams("Prediction", 3, "prediction_layer/conv_3"),
      conv_4: extractPointwiseConvParams("Prediction", 4, "prediction_layer/conv_4"),
      conv_5: extractPointwiseConvParams("Prediction", 5, "prediction_layer/conv_5"),
      conv_6: extractPointwiseConvParams("Prediction", 6, "prediction_layer/conv_6"),
      conv_7: extractPointwiseConvParams("Prediction", 7, "prediction_layer/conv_7"),
      box_predictor_0: extractBoxPredictorParams(0),
      box_predictor_1: extractBoxPredictorParams(1),
      box_predictor_2: extractBoxPredictorParams(2),
      box_predictor_3: extractBoxPredictorParams(3),
      box_predictor_4: extractBoxPredictorParams(4),
      box_predictor_5: extractBoxPredictorParams(5)
    };
  }
  return {
    extractMobilenetV1Params,
    extractPredictionLayerParams
  };
}
function extractParamsFromWeigthMap7(weightMap) {
  var paramMappings = [];
  var _a3 = extractorsFactory8(weightMap, paramMappings), extractMobilenetV1Params = _a3.extractMobilenetV1Params, extractPredictionLayerParams = _a3.extractPredictionLayerParams;
  var extra_dim = weightMap["Output/extra_dim"];
  paramMappings.push({ originalPath: "Output/extra_dim", paramPath: "output_layer/extra_dim" });
  if (!isTensor3D(extra_dim)) {
    throw new Error("expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have " + extra_dim);
  }
  var params = {
    mobilenetv1: extractMobilenetV1Params(),
    prediction_layer: extractPredictionLayerParams(),
    output_layer: {
      extra_dim
    }
  };
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params, paramMappings };
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/pointwiseConvLayer.js
function pointwiseConvLayer(x3, params, strides) {
  return Fe(function() {
    var out = nu(x3, params.filters, strides, "same");
    out = Yu(out, params.batch_norm_offset);
    return hs(out, 0, 6);
  });
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/mobileNetV1.js
var epsilon = 0.0010000000474974513;
function depthwiseConvLayer(x3, params, strides) {
  return Fe(function() {
    var out = au(x3, params.filters, strides, "same");
    out = Ks(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);
    return hs(out, 0, 6);
  });
}
function getStridesForLayerIdx(layerIdx) {
  return [2, 4, 6, 12].some(function(idx) {
    return idx === layerIdx;
  }) ? [2, 2] : [1, 1];
}
function mobileNetV1(x3, params) {
  return Fe(function() {
    var conv11 = null;
    var out = pointwiseConvLayer(x3, params.conv_0, [2, 2]);
    var convPairParams = [
      params.conv_1,
      params.conv_2,
      params.conv_3,
      params.conv_4,
      params.conv_5,
      params.conv_6,
      params.conv_7,
      params.conv_8,
      params.conv_9,
      params.conv_10,
      params.conv_11,
      params.conv_12,
      params.conv_13
    ];
    convPairParams.forEach(function(param, i3) {
      var layerIdx = i3 + 1;
      var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);
      out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);
      out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);
      if (layerIdx === 11) {
        conv11 = out;
      }
    });
    if (conv11 === null) {
      throw new Error("mobileNetV1 - output of conv layer 11 is null");
    }
    return {
      out,
      conv11
    };
  });
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/nonMaxSuppression.js
function nonMaxSuppression2(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
  var numBoxes = boxes.shape[0];
  var outputSize = Math.min(maxOutputSize, numBoxes);
  var candidates = scores.map(function(score, boxIndex) {
    return { score, boxIndex };
  }).filter(function(c3) {
    return c3.score > scoreThreshold;
  }).sort(function(c1, c22) {
    return c22.score - c1.score;
  });
  var suppressFunc = function(x3) {
    return x3 <= iouThreshold ? 1 : 0;
  };
  var selected = [];
  candidates.forEach(function(c3) {
    if (selected.length >= outputSize) {
      return;
    }
    var originalScore = c3.score;
    for (var j3 = selected.length - 1; j3 >= 0; --j3) {
      var iou2 = IOU(boxes, c3.boxIndex, selected[j3]);
      if (iou2 === 0) {
        continue;
      }
      c3.score *= suppressFunc(iou2);
      if (c3.score <= scoreThreshold) {
        break;
      }
    }
    if (originalScore === c3.score) {
      selected.push(c3.boxIndex);
    }
  });
  return selected;
}
function IOU(boxes, i3, j3) {
  var boxesData = boxes.arraySync();
  var yminI = Math.min(boxesData[i3][0], boxesData[i3][2]);
  var xminI = Math.min(boxesData[i3][1], boxesData[i3][3]);
  var ymaxI = Math.max(boxesData[i3][0], boxesData[i3][2]);
  var xmaxI = Math.max(boxesData[i3][1], boxesData[i3][3]);
  var yminJ = Math.min(boxesData[j3][0], boxesData[j3][2]);
  var xminJ = Math.min(boxesData[j3][1], boxesData[j3][3]);
  var ymaxJ = Math.max(boxesData[j3][0], boxesData[j3][2]);
  var xmaxJ = Math.max(boxesData[j3][1], boxesData[j3][3]);
  var areaI = (ymaxI - yminI) * (xmaxI - xminI);
  var areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
  if (areaI <= 0 || areaJ <= 0) {
    return 0;
  }
  var intersectionYmin = Math.max(yminI, yminJ);
  var intersectionXmin = Math.max(xminI, xminJ);
  var intersectionYmax = Math.min(ymaxI, ymaxJ);
  var intersectionXmax = Math.min(xmaxI, xmaxJ);
  var intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0) * Math.max(intersectionXmax - intersectionXmin, 0);
  return intersectionArea / (areaI + areaJ - intersectionArea);
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/outputLayer.js
function getCenterCoordinatesAndSizesLayer(x3) {
  var vec = gr(kl(x3, [1, 0]));
  var sizes = [
    vl(vec[2], vec[0]),
    vl(vec[3], vec[1])
  ];
  var centers = [
    Yu(vec[0], tl(sizes[0], vn(2))),
    Yu(vec[1], tl(sizes[1], vn(2)))
  ];
  return {
    sizes,
    centers
  };
}
function decodeBoxesLayer(x0, x1) {
  var _a3 = getCenterCoordinatesAndSizesLayer(x0), sizes = _a3.sizes, centers = _a3.centers;
  var vec = gr(kl(x1, [1, 0]));
  var div0_out = tl(ll(vs(tl(vec[2], vn(5))), sizes[0]), vn(2));
  var add0_out = Yu(ll(tl(vec[0], vn(10)), sizes[0]), centers[0]);
  var div1_out = tl(ll(vs(tl(vec[3], vn(5))), sizes[1]), vn(2));
  var add1_out = Yu(ll(tl(vec[1], vn(10)), sizes[1]), centers[1]);
  return kl(dr([
    vl(add0_out, div0_out),
    vl(add1_out, div1_out),
    Yu(add0_out, div0_out),
    Yu(add1_out, div1_out)
  ]), [1, 0]);
}
function outputLayer(boxPredictions, classPredictions, params) {
  return Fe(function() {
    var batchSize = boxPredictions.shape[0];
    var boxes = decodeBoxesLayer(hr(vr(params.extra_dim, [batchSize, 1, 1]), [-1, 4]), hr(boxPredictions, [-1, 4]));
    boxes = hr(boxes, [batchSize, boxes.shape[0] / batchSize, 4]);
    var scoresAndClasses = Is(wu(classPredictions, [0, 0, 1], [-1, -1, -1]));
    var scores = wu(scoresAndClasses, [0, 0, 0], [-1, -1, 1]);
    scores = hr(scores, [batchSize, scores.shape[1]]);
    var boxesByBatch = gr(boxes);
    var scoresByBatch = gr(scores);
    return {
      boxes: boxesByBatch,
      scores: scoresByBatch
    };
  });
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/boxPredictionLayer.js
function boxPredictionLayer(x3, params) {
  return Fe(function() {
    var batchSize = x3.shape[0];
    var boxPredictionEncoding = hr(tfjsImageRecognitionBase_exports.convLayer(x3, params.box_encoding_predictor), [batchSize, -1, 1, 4]);
    var classPrediction = hr(tfjsImageRecognitionBase_exports.convLayer(x3, params.class_predictor), [batchSize, -1, 3]);
    return {
      boxPredictionEncoding,
      classPrediction
    };
  });
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/predictionLayer.js
function predictionLayer(x3, conv11, params) {
  return Fe(function() {
    var conv0 = pointwiseConvLayer(x3, params.conv_0, [1, 1]);
    var conv1 = pointwiseConvLayer(conv0, params.conv_1, [2, 2]);
    var conv22 = pointwiseConvLayer(conv1, params.conv_2, [1, 1]);
    var conv3 = pointwiseConvLayer(conv22, params.conv_3, [2, 2]);
    var conv4 = pointwiseConvLayer(conv3, params.conv_4, [1, 1]);
    var conv5 = pointwiseConvLayer(conv4, params.conv_5, [2, 2]);
    var conv6 = pointwiseConvLayer(conv5, params.conv_6, [1, 1]);
    var conv7 = pointwiseConvLayer(conv6, params.conv_7, [2, 2]);
    var boxPrediction0 = boxPredictionLayer(conv11, params.box_predictor_0);
    var boxPrediction1 = boxPredictionLayer(x3, params.box_predictor_1);
    var boxPrediction2 = boxPredictionLayer(conv1, params.box_predictor_2);
    var boxPrediction3 = boxPredictionLayer(conv3, params.box_predictor_3);
    var boxPrediction4 = boxPredictionLayer(conv5, params.box_predictor_4);
    var boxPrediction5 = boxPredictionLayer(conv7, params.box_predictor_5);
    var boxPredictions = An([
      boxPrediction0.boxPredictionEncoding,
      boxPrediction1.boxPredictionEncoding,
      boxPrediction2.boxPredictionEncoding,
      boxPrediction3.boxPredictionEncoding,
      boxPrediction4.boxPredictionEncoding,
      boxPrediction5.boxPredictionEncoding
    ], 1);
    var classPredictions = An([
      boxPrediction0.classPrediction,
      boxPrediction1.classPrediction,
      boxPrediction2.classPrediction,
      boxPrediction3.classPrediction,
      boxPrediction4.classPrediction,
      boxPrediction5.classPrediction
    ], 1);
    return {
      boxPredictions,
      classPredictions
    };
  });
}

// node_modules/face-api.js/build/es6/ssdMobilenetv1/SsdMobilenetv1Options.js
var SsdMobilenetv1Options = (
  /** @class */
  function() {
    function SsdMobilenetv1Options2(_a3) {
      var _b = _a3 === void 0 ? {} : _a3, minConfidence = _b.minConfidence, maxResults = _b.maxResults;
      this._name = "SsdMobilenetv1Options";
      this._minConfidence = minConfidence || 0.5;
      this._maxResults = maxResults || 100;
      if (typeof this._minConfidence !== "number" || this._minConfidence <= 0 || this._minConfidence >= 1) {
        throw new Error(this._name + " - expected minConfidence to be a number between 0 and 1");
      }
      if (typeof this._maxResults !== "number") {
        throw new Error(this._name + " - expected maxResults to be a number");
      }
    }
    Object.defineProperty(SsdMobilenetv1Options2.prototype, "minConfidence", {
      get: function() {
        return this._minConfidence;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SsdMobilenetv1Options2.prototype, "maxResults", {
      get: function() {
        return this._maxResults;
      },
      enumerable: true,
      configurable: true
    });
    return SsdMobilenetv1Options2;
  }()
);

// node_modules/face-api.js/build/es6/ssdMobilenetv1/SsdMobilenetv1.js
var SsdMobilenetv1 = (
  /** @class */
  function(_super) {
    __extends(SsdMobilenetv12, _super);
    function SsdMobilenetv12() {
      return _super.call(this, "SsdMobilenetv1") || this;
    }
    SsdMobilenetv12.prototype.forwardInput = function(input) {
      var params = this.params;
      if (!params) {
        throw new Error("SsdMobilenetv1 - load model before inference");
      }
      return Fe(function() {
        var batchTensor = input.toBatchTensor(512, false).toFloat();
        var x3 = vl(ll(batchTensor, vn(0.007843137718737125)), vn(1));
        var features = mobileNetV1(x3, params.mobilenetv1);
        var _a3 = predictionLayer(features.out, features.conv11, params.prediction_layer), boxPredictions = _a3.boxPredictions, classPredictions = _a3.classPredictions;
        return outputLayer(boxPredictions, classPredictions, params.output_layer);
      });
    };
    SsdMobilenetv12.prototype.forward = function(input) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [_b.sent()])];
          }
        });
      });
    };
    SsdMobilenetv12.prototype.locateFaces = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3, maxResults, minConfidence, netInput, _b, _boxes, _scores, boxes, scores, i3, scoresData, _c3, _d2, iouThreshold, indices, reshapedDims, inputSize, padX, padY, boxesData, results;
        return __generator(this, function(_e3) {
          switch (_e3.label) {
            case 0:
              _a3 = new SsdMobilenetv1Options(options), maxResults = _a3.maxResults, minConfidence = _a3.minConfidence;
              return [4, toNetInput(input)];
            case 1:
              netInput = _e3.sent();
              _b = this.forwardInput(netInput), _boxes = _b.boxes, _scores = _b.scores;
              boxes = _boxes[0];
              scores = _scores[0];
              for (i3 = 1; i3 < _boxes.length; i3++) {
                _boxes[i3].dispose();
                _scores[i3].dispose();
              }
              _d2 = (_c3 = Array).from;
              return [4, scores.data()];
            case 2:
              scoresData = _d2.apply(_c3, [_e3.sent()]);
              iouThreshold = 0.5;
              indices = nonMaxSuppression2(boxes, scoresData, maxResults, iouThreshold, minConfidence);
              reshapedDims = netInput.getReshapedInputDimensions(0);
              inputSize = netInput.inputSize;
              padX = inputSize / reshapedDims.width;
              padY = inputSize / reshapedDims.height;
              boxesData = boxes.arraySync();
              results = indices.map(function(idx) {
                var _a4 = [
                  Math.max(0, boxesData[idx][0]),
                  Math.min(1, boxesData[idx][2])
                ].map(function(val) {
                  return val * padY;
                }), top = _a4[0], bottom = _a4[1];
                var _b2 = [
                  Math.max(0, boxesData[idx][1]),
                  Math.min(1, boxesData[idx][3])
                ].map(function(val) {
                  return val * padX;
                }), left = _b2[0], right = _b2[1];
                return new FaceDetection(scoresData[idx], new Rect(left, top, right - left, bottom - top), {
                  height: netInput.getInputHeight(0),
                  width: netInput.getInputWidth(0)
                });
              });
              boxes.dispose();
              scores.dispose();
              return [2, results];
          }
        });
      });
    };
    SsdMobilenetv12.prototype.getDefaultModelName = function() {
      return "ssd_mobilenetv1_model";
    };
    SsdMobilenetv12.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap7(weightMap);
    };
    SsdMobilenetv12.prototype.extractParams = function(weights) {
      return extractParams7(weights);
    };
    return SsdMobilenetv12;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/ssdMobilenetv1/index.js
function createSsdMobilenetv1(weights) {
  var net = new SsdMobilenetv1();
  net.extractWeights(weights);
  return net;
}
function createFaceDetectionNet(weights) {
  return createSsdMobilenetv1(weights);
}
var FaceDetectionNet = (
  /** @class */
  function(_super) {
    __extends(FaceDetectionNet2, _super);
    function FaceDetectionNet2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return FaceDetectionNet2;
  }(SsdMobilenetv1)
);

// node_modules/face-api.js/build/es6/tinyFaceDetector/TinyFaceDetectorOptions.js
var TinyFaceDetectorOptions = (
  /** @class */
  function(_super) {
    __extends(TinyFaceDetectorOptions2, _super);
    function TinyFaceDetectorOptions2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._name = "TinyFaceDetectorOptions";
      return _this;
    }
    return TinyFaceDetectorOptions2;
  }(tfjsImageRecognitionBase_exports.TinyYolov2Options)
);

// node_modules/face-api.js/build/es6/globalApi/ComposableTask.js
var ComposableTask = (
  /** @class */
  function() {
    function ComposableTask2() {
    }
    ComposableTask2.prototype.then = function(onfulfilled) {
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = onfulfilled;
              return [4, this.run()];
            case 1:
              return [2, _a3.apply(void 0, [_b.sent()])];
          }
        });
      });
    };
    ComposableTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a3) {
          throw new Error("ComposableTask - run is not implemented");
        });
      });
    };
    return ComposableTask2;
  }()
);

// node_modules/face-api.js/build/es6/globalApi/extractFacesAndComputeResults.js
function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {
  if (getRectForAlignment === void 0) {
    getRectForAlignment = function(_a3) {
      var alignedRect = _a3.alignedRect;
      return alignedRect;
    };
  }
  return __awaiter(this, void 0, void 0, function() {
    var faceBoxes, faces, _a3, _b, results;
    return __generator(this, function(_c3) {
      switch (_c3.label) {
        case 0:
          faceBoxes = parentResults.map(function(parentResult) {
            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;
          });
          _a3 = extractedFaces;
          if (_a3) return [3, 5];
          if (!(input instanceof ht)) return [3, 2];
          return [4, extractFaceTensors(input, faceBoxes)];
        case 1:
          _b = _c3.sent();
          return [3, 4];
        case 2:
          return [4, extractFaces(input, faceBoxes)];
        case 3:
          _b = _c3.sent();
          _c3.label = 4;
        case 4:
          _a3 = _b;
          _c3.label = 5;
        case 5:
          faces = _a3;
          return [4, computeResults(faces)];
        case 6:
          results = _c3.sent();
          faces.forEach(function(f3) {
            return f3 instanceof ht && f3.dispose();
          });
          return [2, results];
      }
    });
  });
}
function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {
  return __awaiter(this, void 0, void 0, function() {
    var _this = this;
    return __generator(this, function(_a3) {
      return [2, extractAllFacesAndComputeResults([parentResult], input, function(faces) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a4) {
            return [2, computeResult(faces[0])];
          });
        });
      }, extractedFaces, getRectForAlignment)];
    });
  });
}

// node_modules/face-api.js/build/es6/mtcnn/bgrToRgbTensor.js
function bgrToRgbTensor(tensor) {
  return Fe(function() {
    return dr(gr(tensor, 3).reverse(), 3);
  });
}

// node_modules/face-api.js/build/es6/mtcnn/config.js
var CELL_STRIDE = 2;
var CELL_SIZE = 12;

// node_modules/face-api.js/build/es6/mtcnn/extractParams.js
function extractorsFactory9(extractWeights, paramMappings) {
  var extractConvParams = tfjsImageRecognitionBase_exports.extractConvParamsFactory(extractWeights, paramMappings);
  var extractFCParams = tfjsImageRecognitionBase_exports.extractFCParamsFactory(extractWeights, paramMappings);
  function extractPReluParams(size, paramPath) {
    var alpha = mn(extractWeights(size));
    paramMappings.push({ paramPath });
    return alpha;
  }
  function extractSharedParams(numFilters, mappedPrefix, isRnet) {
    if (isRnet === void 0) {
      isRnet = false;
    }
    var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + "/conv1");
    var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + "/prelu1_alpha");
    var conv22 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + "/conv2");
    var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + "/prelu2_alpha");
    var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + "/conv3");
    var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + "/prelu3_alpha");
    return { conv1, prelu1_alpha, conv2: conv22, prelu2_alpha, conv3, prelu3_alpha };
  }
  function extractPNetParams() {
    var sharedParams = extractSharedParams([3, 10, 16, 32], "pnet");
    var conv4_1 = extractConvParams(32, 2, 1, "pnet/conv4_1");
    var conv4_2 = extractConvParams(32, 4, 1, "pnet/conv4_2");
    return __assign({}, sharedParams, { conv4_1, conv4_2 });
  }
  function extractRNetParams() {
    var sharedParams = extractSharedParams([3, 28, 48, 64], "rnet", true);
    var fc1 = extractFCParams(576, 128, "rnet/fc1");
    var prelu4_alpha = extractPReluParams(128, "rnet/prelu4_alpha");
    var fc2_1 = extractFCParams(128, 2, "rnet/fc2_1");
    var fc2_2 = extractFCParams(128, 4, "rnet/fc2_2");
    return __assign({}, sharedParams, { fc1, prelu4_alpha, fc2_1, fc2_2 });
  }
  function extractONetParams() {
    var sharedParams = extractSharedParams([3, 32, 64, 64], "onet");
    var conv4 = extractConvParams(64, 128, 2, "onet/conv4");
    var prelu4_alpha = extractPReluParams(128, "onet/prelu4_alpha");
    var fc1 = extractFCParams(1152, 256, "onet/fc1");
    var prelu5_alpha = extractPReluParams(256, "onet/prelu5_alpha");
    var fc2_1 = extractFCParams(256, 2, "onet/fc2_1");
    var fc2_2 = extractFCParams(256, 4, "onet/fc2_2");
    var fc2_3 = extractFCParams(256, 10, "onet/fc2_3");
    return __assign({}, sharedParams, { conv4, prelu4_alpha, fc1, prelu5_alpha, fc2_1, fc2_2, fc2_3 });
  }
  return {
    extractPNetParams,
    extractRNetParams,
    extractONetParams
  };
}
function extractParams8(weights) {
  var _a3 = tfjsImageRecognitionBase_exports.extractWeightsFactory(weights), extractWeights = _a3.extractWeights, getRemainingWeights = _a3.getRemainingWeights;
  var paramMappings = [];
  var _b = extractorsFactory9(extractWeights, paramMappings), extractPNetParams = _b.extractPNetParams, extractRNetParams = _b.extractRNetParams, extractONetParams = _b.extractONetParams;
  var pnet = extractPNetParams();
  var rnet = extractRNetParams();
  var onet = extractONetParams();
  if (getRemainingWeights().length !== 0) {
    throw new Error("weights remaing after extract: " + getRemainingWeights().length);
  }
  return { params: { pnet, rnet, onet }, paramMappings };
}

// node_modules/face-api.js/build/es6/mtcnn/extractParamsFromWeigthMap.js
function extractorsFactory10(weightMap, paramMappings) {
  var extractWeightEntry = tfjsImageRecognitionBase_exports.extractWeightEntryFactory(weightMap, paramMappings);
  function extractConvParams(prefix) {
    var filters = extractWeightEntry(prefix + "/weights", 4, prefix + "/filters");
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { filters, bias };
  }
  function extractFCParams(prefix) {
    var weights = extractWeightEntry(prefix + "/weights", 2);
    var bias = extractWeightEntry(prefix + "/bias", 1);
    return { weights, bias };
  }
  function extractPReluParams(paramPath) {
    return extractWeightEntry(paramPath, 1);
  }
  function extractSharedParams(prefix) {
    var conv1 = extractConvParams(prefix + "/conv1");
    var prelu1_alpha = extractPReluParams(prefix + "/prelu1_alpha");
    var conv22 = extractConvParams(prefix + "/conv2");
    var prelu2_alpha = extractPReluParams(prefix + "/prelu2_alpha");
    var conv3 = extractConvParams(prefix + "/conv3");
    var prelu3_alpha = extractPReluParams(prefix + "/prelu3_alpha");
    return { conv1, prelu1_alpha, conv2: conv22, prelu2_alpha, conv3, prelu3_alpha };
  }
  function extractPNetParams() {
    var sharedParams = extractSharedParams("pnet");
    var conv4_1 = extractConvParams("pnet/conv4_1");
    var conv4_2 = extractConvParams("pnet/conv4_2");
    return __assign({}, sharedParams, { conv4_1, conv4_2 });
  }
  function extractRNetParams() {
    var sharedParams = extractSharedParams("rnet");
    var fc1 = extractFCParams("rnet/fc1");
    var prelu4_alpha = extractPReluParams("rnet/prelu4_alpha");
    var fc2_1 = extractFCParams("rnet/fc2_1");
    var fc2_2 = extractFCParams("rnet/fc2_2");
    return __assign({}, sharedParams, { fc1, prelu4_alpha, fc2_1, fc2_2 });
  }
  function extractONetParams() {
    var sharedParams = extractSharedParams("onet");
    var conv4 = extractConvParams("onet/conv4");
    var prelu4_alpha = extractPReluParams("onet/prelu4_alpha");
    var fc1 = extractFCParams("onet/fc1");
    var prelu5_alpha = extractPReluParams("onet/prelu5_alpha");
    var fc2_1 = extractFCParams("onet/fc2_1");
    var fc2_2 = extractFCParams("onet/fc2_2");
    var fc2_3 = extractFCParams("onet/fc2_3");
    return __assign({}, sharedParams, { conv4, prelu4_alpha, fc1, prelu5_alpha, fc2_1, fc2_2, fc2_3 });
  }
  return {
    extractPNetParams,
    extractRNetParams,
    extractONetParams
  };
}
function extractParamsFromWeigthMap8(weightMap) {
  var paramMappings = [];
  var _a3 = extractorsFactory10(weightMap, paramMappings), extractPNetParams = _a3.extractPNetParams, extractRNetParams = _a3.extractRNetParams, extractONetParams = _a3.extractONetParams;
  var pnet = extractPNetParams();
  var rnet = extractRNetParams();
  var onet = extractONetParams();
  tfjsImageRecognitionBase_exports.disposeUnusedWeightTensors(weightMap, paramMappings);
  return { params: { pnet, rnet, onet }, paramMappings };
}

// node_modules/face-api.js/build/es6/mtcnn/getSizesForScale.js
function getSizesForScale(scale2, _a3) {
  var height = _a3[0], width = _a3[1];
  return {
    height: Math.floor(height * scale2),
    width: Math.floor(width * scale2)
  };
}

// node_modules/face-api.js/build/es6/mtcnn/pyramidDown.js
function pyramidDown(minFaceSize, scaleFactor, dims) {
  var height = dims[0], width = dims[1];
  var m3 = CELL_SIZE / minFaceSize;
  var scales = [];
  var minLayer = Math.min(height, width) * m3;
  var exp = 0;
  while (minLayer >= 12) {
    scales.push(m3 * Math.pow(scaleFactor, exp));
    minLayer = minLayer * scaleFactor;
    exp += 1;
  }
  return scales;
}

// node_modules/face-api.js/build/es6/mtcnn/MtcnnBox.js
var MtcnnBox = (
  /** @class */
  function(_super) {
    __extends(MtcnnBox2, _super);
    function MtcnnBox2(left, top, right, bottom) {
      return _super.call(this, { left, top, right, bottom }, true) || this;
    }
    return MtcnnBox2;
  }(Box)
);

// node_modules/face-api.js/build/es6/mtcnn/normalize.js
function normalize2(x3) {
  return Fe(function() {
    return ll(vl(x3, vn(127.5)), vn(78125e-7));
  });
}

// node_modules/face-api.js/build/es6/mtcnn/prelu.js
function prelu(x3, alpha) {
  return Fe(function() {
    return Yu(Sl(x3), ll(alpha, ws(Sl(ws(x3)))));
  });
}

// node_modules/face-api.js/build/es6/mtcnn/sharedLayers.js
function sharedLayer(x3, params, isPnet) {
  if (isPnet === void 0) {
    isPnet = false;
  }
  return Fe(function() {
    var out = tfjsImageRecognitionBase_exports.convLayer(x3, params.conv1, "valid");
    out = prelu(out, params.prelu1_alpha);
    out = yu(out, isPnet ? [2, 2] : [3, 3], [2, 2], "same");
    out = tfjsImageRecognitionBase_exports.convLayer(out, params.conv2, "valid");
    out = prelu(out, params.prelu2_alpha);
    out = isPnet ? out : yu(out, [3, 3], [2, 2], "valid");
    out = tfjsImageRecognitionBase_exports.convLayer(out, params.conv3, "valid");
    out = prelu(out, params.prelu3_alpha);
    return out;
  });
}

// node_modules/face-api.js/build/es6/mtcnn/PNet.js
function PNet(x3, params) {
  return Fe(function() {
    var out = sharedLayer(x3, params, true);
    var conv3 = tfjsImageRecognitionBase_exports.convLayer(out, params.conv4_1, "valid");
    var max = Zn(_u(conv3, 3), 3);
    var prob = zr(vl(conv3, max), 3);
    var regions = tfjsImageRecognitionBase_exports.convLayer(out, params.conv4_2, "valid");
    return { prob, regions };
  });
}

// node_modules/face-api.js/build/es6/mtcnn/stage1.js
function rescaleAndNormalize(x3, scale2) {
  return Fe(function() {
    var _a3 = getSizesForScale(scale2, x3.shape.slice(1)), height = _a3.height, width = _a3.width;
    var resized = wc.resizeBilinear(x3, [height, width]);
    var normalized = normalize2(resized);
    return kl(normalized, [0, 2, 1, 3]);
  });
}
function extractBoundingBoxes(scoresTensor, regionsTensor, scale2, scoreThreshold) {
  var indices = [];
  var scoresData = scoresTensor.arraySync();
  for (var y3 = 0; y3 < scoresTensor.shape[0]; y3++) {
    for (var x3 = 0; x3 < scoresTensor.shape[1]; x3++) {
      if (scoresData[y3][x3] >= scoreThreshold) {
        indices.push(new Point(x3, y3));
      }
    }
  }
  var boundingBoxes = indices.map(function(idx) {
    var cell = new BoundingBox(Math.round((idx.y * CELL_STRIDE + 1) / scale2), Math.round((idx.x * CELL_STRIDE + 1) / scale2), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale2), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale2));
    var score = scoresData[idx.y][idx.x];
    var regionsData = regionsTensor.arraySync();
    var region = new MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);
    return {
      cell,
      score,
      region
    };
  });
  return boundingBoxes;
}
function stage1(imgTensor, scales, scoreThreshold, params, stats) {
  stats.stage1 = [];
  var pnetOutputs = scales.map(function(scale2) {
    return Fe(function() {
      var statsForScale = { scale: scale2 };
      var resized = rescaleAndNormalize(imgTensor, scale2);
      var ts4 = Date.now();
      var _a3 = PNet(resized, params), prob = _a3.prob, regions = _a3.regions;
      statsForScale.pnet = Date.now() - ts4;
      var scoresTensor = gr(gr(prob, 3)[1])[0];
      var regionsTensor = gr(regions)[0];
      return {
        scoresTensor,
        regionsTensor,
        scale: scale2,
        statsForScale
      };
    });
  });
  var boxesForScale = pnetOutputs.map(function(_a3) {
    var scoresTensor = _a3.scoresTensor, regionsTensor = _a3.regionsTensor, scale2 = _a3.scale, statsForScale = _a3.statsForScale;
    var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale2, scoreThreshold);
    scoresTensor.dispose();
    regionsTensor.dispose();
    if (!boundingBoxes.length) {
      stats.stage1.push(statsForScale);
      return [];
    }
    var ts4 = Date.now();
    var indices2 = nonMaxSuppression(boundingBoxes.map(function(bbox) {
      return bbox.cell;
    }), boundingBoxes.map(function(bbox) {
      return bbox.score;
    }), 0.5);
    statsForScale.nms = Date.now() - ts4;
    statsForScale.numBoxes = indices2.length;
    stats.stage1.push(statsForScale);
    return indices2.map(function(boxIdx) {
      return boundingBoxes[boxIdx];
    });
  });
  var allBoxes = boxesForScale.reduce(function(all, boxes) {
    return all.concat(boxes);
  }, []);
  var finalBoxes = [];
  var finalScores = [];
  if (allBoxes.length > 0) {
    var ts3 = Date.now();
    var indices = nonMaxSuppression(allBoxes.map(function(bbox) {
      return bbox.cell;
    }), allBoxes.map(function(bbox) {
      return bbox.score;
    }), 0.7);
    stats.stage1_nms = Date.now() - ts3;
    finalScores = indices.map(function(idx) {
      return allBoxes[idx].score;
    });
    finalBoxes = indices.map(function(idx) {
      return allBoxes[idx];
    }).map(function(_a3) {
      var cell = _a3.cell, region = _a3.region;
      return new BoundingBox(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();
    });
  }
  return {
    boxes: finalBoxes,
    scores: finalScores
  };
}

// node_modules/face-api.js/build/es6/mtcnn/extractImagePatches.js
function extractImagePatches(img, boxes, _a3) {
  var width = _a3.width, height = _a3.height;
  return __awaiter(this, void 0, void 0, function() {
    var imgCtx, bitmaps, imagePatchesDatas;
    var _this = this;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          imgCtx = getContext2dOrThrow(img);
          return [4, Promise.all(boxes.map(function(box) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a4, y3, ey, x3, ex, fromX, fromY, imgData;
              return __generator(this, function(_b2) {
                _a4 = box.padAtBorders(img.height, img.width), y3 = _a4.y, ey = _a4.ey, x3 = _a4.x, ex = _a4.ex;
                fromX = x3 - 1;
                fromY = y3 - 1;
                imgData = imgCtx.getImageData(fromX, fromY, ex - fromX, ey - fromY);
                return [2, env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)];
              });
            });
          }))];
        case 1:
          bitmaps = _b.sent();
          imagePatchesDatas = [];
          bitmaps.forEach(function(bmp) {
            var patch = createCanvas({ width, height });
            var patchCtx = getContext2dOrThrow(patch);
            patchCtx.drawImage(bmp, 0, 0, width, height);
            var data = patchCtx.getImageData(0, 0, width, height).data;
            var currData = [];
            for (var i3 = 0; i3 < data.length; i3 += 4) {
              currData.push(data[i3 + 2]);
              currData.push(data[i3 + 1]);
              currData.push(data[i3]);
            }
            imagePatchesDatas.push(currData);
          });
          return [2, imagePatchesDatas.map(function(data) {
            var t3 = Fe(function() {
              var imagePatchTensor = kl(xn(data, [1, width, height, 3]), [0, 2, 1, 3]).toFloat();
              return normalize2(imagePatchTensor);
            });
            return t3;
          })];
      }
    });
  });
}

// node_modules/face-api.js/build/es6/mtcnn/RNet.js
function RNet(x3, params) {
  return Fe(function() {
    var convOut = sharedLayer(x3, params);
    var vectorized = hr(convOut, [convOut.shape[0], params.fc1.weights.shape[0]]);
    var fc1 = fullyConnectedLayer(vectorized, params.fc1);
    var prelu4 = prelu(fc1, params.prelu4_alpha);
    var fc2_1 = fullyConnectedLayer(prelu4, params.fc2_1);
    var max = Zn(_u(fc2_1, 1), 1);
    var prob = zr(vl(fc2_1, max), 1);
    var regions = fullyConnectedLayer(prelu4, params.fc2_2);
    var scores = gr(prob, 1)[1];
    return { scores, regions };
  });
}

// node_modules/face-api.js/build/es6/mtcnn/stage2.js
function stage2(img, inputBoxes, scoreThreshold, params, stats) {
  return __awaiter(this, void 0, void 0, function() {
    var ts3, rnetInputs, rnetOuts, scoresTensor, scores, _a3, _b, indices, filteredBoxes, filteredScores, finalBoxes, finalScores, indicesNms, regions_1;
    return __generator(this, function(_c3) {
      switch (_c3.label) {
        case 0:
          ts3 = Date.now();
          return [4, extractImagePatches(img, inputBoxes, { width: 24, height: 24 })];
        case 1:
          rnetInputs = _c3.sent();
          stats.stage2_extractImagePatches = Date.now() - ts3;
          ts3 = Date.now();
          rnetOuts = rnetInputs.map(function(rnetInput) {
            var out = RNet(rnetInput, params);
            rnetInput.dispose();
            return out;
          });
          stats.stage2_rnet = Date.now() - ts3;
          scoresTensor = rnetOuts.length > 1 ? An(rnetOuts.map(function(out) {
            return out.scores;
          })) : rnetOuts[0].scores;
          _b = (_a3 = Array).from;
          return [4, scoresTensor.data()];
        case 2:
          scores = _b.apply(_a3, [_c3.sent()]);
          scoresTensor.dispose();
          indices = scores.map(function(score, idx) {
            return { score, idx };
          }).filter(function(c3) {
            return c3.score > scoreThreshold;
          }).map(function(_a4) {
            var idx = _a4.idx;
            return idx;
          });
          filteredBoxes = indices.map(function(idx) {
            return inputBoxes[idx];
          });
          filteredScores = indices.map(function(idx) {
            return scores[idx];
          });
          finalBoxes = [];
          finalScores = [];
          if (filteredBoxes.length > 0) {
            ts3 = Date.now();
            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7);
            stats.stage2_nms = Date.now() - ts3;
            regions_1 = indicesNms.map(function(idx) {
              var regionsData = rnetOuts[indices[idx]].regions.arraySync();
              return new MtcnnBox(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);
            });
            finalScores = indicesNms.map(function(idx) {
              return filteredScores[idx];
            });
            finalBoxes = indicesNms.map(function(idx, i3) {
              return filteredBoxes[idx].calibrate(regions_1[i3]);
            });
          }
          rnetOuts.forEach(function(t3) {
            t3.regions.dispose();
            t3.scores.dispose();
          });
          return [2, {
            boxes: finalBoxes,
            scores: finalScores
          }];
      }
    });
  });
}

// node_modules/face-api.js/build/es6/mtcnn/ONet.js
function ONet(x3, params) {
  return Fe(function() {
    var out = sharedLayer(x3, params);
    out = yu(out, [2, 2], [2, 2], "same");
    out = tfjsImageRecognitionBase_exports.convLayer(out, params.conv4, "valid");
    out = prelu(out, params.prelu4_alpha);
    var vectorized = hr(out, [out.shape[0], params.fc1.weights.shape[0]]);
    var fc1 = fullyConnectedLayer(vectorized, params.fc1);
    var prelu5 = prelu(fc1, params.prelu5_alpha);
    var fc2_1 = fullyConnectedLayer(prelu5, params.fc2_1);
    var max = Zn(_u(fc2_1, 1), 1);
    var prob = zr(vl(fc2_1, max), 1);
    var regions = fullyConnectedLayer(prelu5, params.fc2_2);
    var points = fullyConnectedLayer(prelu5, params.fc2_3);
    var scores = gr(prob, 1)[1];
    return { scores, regions, points };
  });
}

// node_modules/face-api.js/build/es6/mtcnn/stage3.js
function stage3(img, inputBoxes, scoreThreshold, params, stats) {
  return __awaiter(this, void 0, void 0, function() {
    var ts3, onetInputs, onetOuts, scoresTensor, scores, _a3, _b, indices, filteredRegions, filteredBoxes, filteredScores, finalBoxes, finalScores, points, indicesNms;
    return __generator(this, function(_c3) {
      switch (_c3.label) {
        case 0:
          ts3 = Date.now();
          return [4, extractImagePatches(img, inputBoxes, { width: 48, height: 48 })];
        case 1:
          onetInputs = _c3.sent();
          stats.stage3_extractImagePatches = Date.now() - ts3;
          ts3 = Date.now();
          onetOuts = onetInputs.map(function(onetInput) {
            var out = ONet(onetInput, params);
            onetInput.dispose();
            return out;
          });
          stats.stage3_onet = Date.now() - ts3;
          scoresTensor = onetOuts.length > 1 ? An(onetOuts.map(function(out) {
            return out.scores;
          })) : onetOuts[0].scores;
          _b = (_a3 = Array).from;
          return [4, scoresTensor.data()];
        case 2:
          scores = _b.apply(_a3, [_c3.sent()]);
          scoresTensor.dispose();
          indices = scores.map(function(score, idx) {
            return { score, idx };
          }).filter(function(c3) {
            return c3.score > scoreThreshold;
          }).map(function(_a4) {
            var idx = _a4.idx;
            return idx;
          });
          filteredRegions = indices.map(function(idx) {
            var regionsData = onetOuts[idx].regions.arraySync();
            return new MtcnnBox(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);
          });
          filteredBoxes = indices.map(function(idx, i3) {
            return inputBoxes[idx].calibrate(filteredRegions[i3]);
          });
          filteredScores = indices.map(function(idx) {
            return scores[idx];
          });
          finalBoxes = [];
          finalScores = [];
          points = [];
          if (filteredBoxes.length > 0) {
            ts3 = Date.now();
            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7, false);
            stats.stage3_nms = Date.now() - ts3;
            finalBoxes = indicesNms.map(function(idx) {
              return filteredBoxes[idx];
            });
            finalScores = indicesNms.map(function(idx) {
              return filteredScores[idx];
            });
            points = indicesNms.map(function(idx, i3) {
              return Array(5).fill(0).map(function(_3, ptIdx) {
                var pointsData = onetOuts[idx].points.arraySync();
                return new Point(pointsData[0][ptIdx] * (finalBoxes[i3].width + 1) + finalBoxes[i3].left, pointsData[0][ptIdx + 5] * (finalBoxes[i3].height + 1) + finalBoxes[i3].top);
              });
            });
          }
          onetOuts.forEach(function(t3) {
            t3.regions.dispose();
            t3.scores.dispose();
            t3.points.dispose();
          });
          return [2, {
            boxes: finalBoxes,
            scores: finalScores,
            points
          }];
      }
    });
  });
}

// node_modules/face-api.js/build/es6/mtcnn/Mtcnn.js
var Mtcnn = (
  /** @class */
  function(_super) {
    __extends(Mtcnn2, _super);
    function Mtcnn2() {
      return _super.call(this, "Mtcnn") || this;
    }
    Mtcnn2.prototype.forwardInput = function(input, forwardParams) {
      if (forwardParams === void 0) {
        forwardParams = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var params, inputCanvas, stats, tsTotal, imgTensor, onReturn, _a3, height, width, _b, minFaceSize, scaleFactor, maxNumScales, scoreThresholds, scaleSteps, scales, ts3, out1, out2, out3, results;
        return __generator(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              params = this.params;
              if (!params) {
                throw new Error("Mtcnn - load model before inference");
              }
              inputCanvas = input.canvases[0];
              if (!inputCanvas) {
                throw new Error("Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet.");
              }
              stats = {};
              tsTotal = Date.now();
              imgTensor = Fe(function() {
                return bgrToRgbTensor(Zn(kh.fromPixels(inputCanvas)).toFloat());
              });
              onReturn = function(results2) {
                imgTensor.dispose();
                stats.total = Date.now() - tsTotal;
                return results2;
              };
              _a3 = imgTensor.shape.slice(1), height = _a3[0], width = _a3[1];
              _b = new MtcnnOptions(forwardParams), minFaceSize = _b.minFaceSize, scaleFactor = _b.scaleFactor, maxNumScales = _b.maxNumScales, scoreThresholds = _b.scoreThresholds, scaleSteps = _b.scaleSteps;
              scales = (scaleSteps || pyramidDown(minFaceSize, scaleFactor, [height, width])).filter(function(scale2) {
                var sizes = getSizesForScale(scale2, [height, width]);
                return Math.min(sizes.width, sizes.height) > CELL_SIZE;
              }).slice(0, maxNumScales);
              stats.scales = scales;
              stats.pyramid = scales.map(function(scale2) {
                return getSizesForScale(scale2, [height, width]);
              });
              ts3 = Date.now();
              return [4, stage1(imgTensor, scales, scoreThresholds[0], params.pnet, stats)];
            case 1:
              out1 = _c3.sent();
              stats.total_stage1 = Date.now() - ts3;
              if (!out1.boxes.length) {
                return [2, onReturn({ results: [], stats })];
              }
              stats.stage2_numInputBoxes = out1.boxes.length;
              ts3 = Date.now();
              return [4, stage2(inputCanvas, out1.boxes, scoreThresholds[1], params.rnet, stats)];
            case 2:
              out2 = _c3.sent();
              stats.total_stage2 = Date.now() - ts3;
              if (!out2.boxes.length) {
                return [2, onReturn({ results: [], stats })];
              }
              stats.stage3_numInputBoxes = out2.boxes.length;
              ts3 = Date.now();
              return [4, stage3(inputCanvas, out2.boxes, scoreThresholds[2], params.onet, stats)];
            case 3:
              out3 = _c3.sent();
              stats.total_stage3 = Date.now() - ts3;
              results = out3.boxes.map(function(box, idx) {
                return extendWithFaceLandmarks(extendWithFaceDetection({}, new FaceDetection(out3.scores[idx], new Rect(box.left / width, box.top / height, box.width / width, box.height / height), {
                  height,
                  width
                })), new FaceLandmarks5(out3.points[idx].map(function(pt3) {
                  return pt3.sub(new Point(box.left, box.top)).div(new Point(box.width, box.height));
                }), { width: box.width, height: box.height }));
              });
              return [2, onReturn({ results, stats })];
          }
        });
      });
    };
    Mtcnn2.prototype.forward = function(input, forwardParams) {
      if (forwardParams === void 0) {
        forwardParams = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [4, _a3.apply(this, [
                _b.sent(),
                forwardParams
              ])];
            case 2:
              return [2, _b.sent().results];
          }
        });
      });
    };
    Mtcnn2.prototype.forwardWithStats = function(input, forwardParams) {
      if (forwardParams === void 0) {
        forwardParams = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this.forwardInput;
              return [4, toNetInput(input)];
            case 1:
              return [2, _a3.apply(this, [
                _b.sent(),
                forwardParams
              ])];
          }
        });
      });
    };
    Mtcnn2.prototype.getDefaultModelName = function() {
      return "mtcnn_model";
    };
    Mtcnn2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return extractParamsFromWeigthMap8(weightMap);
    };
    Mtcnn2.prototype.extractParams = function(weights) {
      return extractParams8(weights);
    };
    return Mtcnn2;
  }(NeuralNetwork)
);

// node_modules/face-api.js/build/es6/tinyFaceDetector/const.js
var IOU_THRESHOLD = 0.4;
var BOX_ANCHORS = [
  new Point(1.603231, 2.094468),
  new Point(6.041143, 7.080126),
  new Point(2.882459, 3.518061),
  new Point(4.266906, 5.178857),
  new Point(9.041765, 10.66308)
];
var MEAN_RGB = [117.001, 114.697, 97.404];

// node_modules/face-api.js/build/es6/tinyFaceDetector/TinyFaceDetector.js
var TinyFaceDetector = (
  /** @class */
  function(_super) {
    __extends(TinyFaceDetector2, _super);
    function TinyFaceDetector2() {
      var _this = this;
      var config = {
        withSeparableConvs: true,
        iouThreshold: IOU_THRESHOLD,
        classes: ["face"],
        anchors: BOX_ANCHORS,
        meanRgb: MEAN_RGB,
        isFirstLayerConv2d: true,
        filterSizes: [3, 16, 32, 64, 128, 256, 512]
      };
      _this = _super.call(this, config) || this;
      return _this;
    }
    Object.defineProperty(TinyFaceDetector2.prototype, "anchors", {
      get: function() {
        return this.config.anchors;
      },
      enumerable: true,
      configurable: true
    });
    TinyFaceDetector2.prototype.locateFaces = function(input, forwardParams) {
      return __awaiter(this, void 0, void 0, function() {
        var objectDetections;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.detect(input, forwardParams)];
            case 1:
              objectDetections = _a3.sent();
              return [2, objectDetections.map(function(det) {
                return new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight });
              })];
          }
        });
      });
    };
    TinyFaceDetector2.prototype.getDefaultModelName = function() {
      return "tiny_face_detector_model";
    };
    TinyFaceDetector2.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return _super.prototype.extractParamsFromWeigthMap.call(this, weightMap);
    };
    return TinyFaceDetector2;
  }(tfjsImageRecognitionBase_exports.TinyYolov2)
);

// node_modules/face-api.js/build/es6/tinyYolov2/const.js
var IOU_THRESHOLD2 = 0.4;
var BOX_ANCHORS2 = [
  new Point(0.738768, 0.874946),
  new Point(2.42204, 2.65704),
  new Point(4.30971, 7.04493),
  new Point(10.246, 4.59428),
  new Point(12.6868, 11.8741)
];
var BOX_ANCHORS_SEPARABLE = [
  new Point(1.603231, 2.094468),
  new Point(6.041143, 7.080126),
  new Point(2.882459, 3.518061),
  new Point(4.266906, 5.178857),
  new Point(9.041765, 10.66308)
];
var MEAN_RGB_SEPARABLE = [117.001, 114.697, 97.404];
var DEFAULT_MODEL_NAME = "tiny_yolov2_model";
var DEFAULT_MODEL_NAME_SEPARABLE_CONV = "tiny_yolov2_separable_conv_model";

// node_modules/face-api.js/build/es6/tinyYolov2/TinyYolov2.js
var TinyYolov22 = (
  /** @class */
  function(_super) {
    __extends(TinyYolov23, _super);
    function TinyYolov23(withSeparableConvs) {
      if (withSeparableConvs === void 0) {
        withSeparableConvs = true;
      }
      var _this = this;
      var config = Object.assign({}, {
        withSeparableConvs,
        iouThreshold: IOU_THRESHOLD2,
        classes: ["face"]
      }, withSeparableConvs ? {
        anchors: BOX_ANCHORS_SEPARABLE,
        meanRgb: MEAN_RGB_SEPARABLE
      } : {
        anchors: BOX_ANCHORS2,
        withClassScores: true
      });
      _this = _super.call(this, config) || this;
      return _this;
    }
    Object.defineProperty(TinyYolov23.prototype, "withSeparableConvs", {
      get: function() {
        return this.config.withSeparableConvs;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TinyYolov23.prototype, "anchors", {
      get: function() {
        return this.config.anchors;
      },
      enumerable: true,
      configurable: true
    });
    TinyYolov23.prototype.locateFaces = function(input, forwardParams) {
      return __awaiter(this, void 0, void 0, function() {
        var objectDetections;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.detect(input, forwardParams)];
            case 1:
              objectDetections = _a3.sent();
              return [2, objectDetections.map(function(det) {
                return new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight });
              })];
          }
        });
      });
    };
    TinyYolov23.prototype.getDefaultModelName = function() {
      return this.withSeparableConvs ? DEFAULT_MODEL_NAME_SEPARABLE_CONV : DEFAULT_MODEL_NAME;
    };
    TinyYolov23.prototype.extractParamsFromWeigthMap = function(weightMap) {
      return _super.prototype.extractParamsFromWeigthMap.call(this, weightMap);
    };
    return TinyYolov23;
  }(tfjsImageRecognitionBase_exports.TinyYolov2)
);

// node_modules/face-api.js/build/es6/tinyYolov2/index.js
function createTinyYolov2(weights, withSeparableConvs) {
  if (withSeparableConvs === void 0) {
    withSeparableConvs = true;
  }
  var net = new TinyYolov22(withSeparableConvs);
  net.extractWeights(weights);
  return net;
}

// node_modules/face-api.js/build/es6/globalApi/nets.js
var nets = {
  ssdMobilenetv1: new SsdMobilenetv1(),
  tinyFaceDetector: new TinyFaceDetector(),
  tinyYolov2: new TinyYolov22(),
  mtcnn: new Mtcnn(),
  faceLandmark68Net: new FaceLandmark68Net(),
  faceLandmark68TinyNet: new FaceLandmark68TinyNet(),
  faceRecognitionNet: new FaceRecognitionNet(),
  faceExpressionNet: new FaceExpressionNet(),
  ageGenderNet: new AgeGenderNet()
};
var ssdMobilenetv1 = function(input, options) {
  return nets.ssdMobilenetv1.locateFaces(input, options);
};
var tinyFaceDetector = function(input, options) {
  return nets.tinyFaceDetector.locateFaces(input, options);
};
var tinyYolov2 = function(input, options) {
  return nets.tinyYolov2.locateFaces(input, options);
};
var mtcnn = function(input, options) {
  return nets.mtcnn.forward(input, options);
};
var detectFaceLandmarks = function(input) {
  return nets.faceLandmark68Net.detectLandmarks(input);
};
var detectFaceLandmarksTiny = function(input) {
  return nets.faceLandmark68TinyNet.detectLandmarks(input);
};
var computeFaceDescriptor = function(input) {
  return nets.faceRecognitionNet.computeFaceDescriptor(input);
};
var recognizeFaceExpressions = function(input) {
  return nets.faceExpressionNet.predictExpressions(input);
};
var predictAgeAndGender = function(input) {
  return nets.ageGenderNet.predictAgeAndGender(input);
};
var loadSsdMobilenetv1Model = function(url) {
  return nets.ssdMobilenetv1.load(url);
};
var loadTinyFaceDetectorModel = function(url) {
  return nets.tinyFaceDetector.load(url);
};
var loadMtcnnModel = function(url) {
  return nets.mtcnn.load(url);
};
var loadTinyYolov2Model = function(url) {
  return nets.tinyYolov2.load(url);
};
var loadFaceLandmarkModel = function(url) {
  return nets.faceLandmark68Net.load(url);
};
var loadFaceLandmarkTinyModel = function(url) {
  return nets.faceLandmark68TinyNet.load(url);
};
var loadFaceRecognitionModel = function(url) {
  return nets.faceRecognitionNet.load(url);
};
var loadFaceExpressionModel = function(url) {
  return nets.faceExpressionNet.load(url);
};
var loadAgeGenderModel = function(url) {
  return nets.ageGenderNet.load(url);
};
var loadFaceDetectionModel = loadSsdMobilenetv1Model;
var locateFaces = ssdMobilenetv1;
var detectLandmarks = detectFaceLandmarks;

// node_modules/face-api.js/build/es6/factories/WithAge.js
function extendWithAge(sourceObj, age) {
  var extension = { age };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/factories/WithGender.js
function extendWithGender(sourceObj, gender, genderProbability) {
  var extension = { gender, genderProbability };
  return Object.assign({}, sourceObj, extension);
}

// node_modules/face-api.js/build/es6/globalApi/PredictFaceExpressionsTask.js
var PredictFaceExpressionsTaskBase = (
  /** @class */
  function(_super) {
    __extends(PredictFaceExpressionsTaskBase2, _super);
    function PredictFaceExpressionsTaskBase2(parentTask, input, extractedFaces) {
      var _this = _super.call(this) || this;
      _this.parentTask = parentTask;
      _this.input = input;
      _this.extractedFaces = extractedFaces;
      return _this;
    }
    return PredictFaceExpressionsTaskBase2;
  }(ComposableTask)
);
var PredictAllFaceExpressionsTask = (
  /** @class */
  function(_super) {
    __extends(PredictAllFaceExpressionsTask2, _super);
    function PredictAllFaceExpressionsTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictAllFaceExpressionsTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResults, faceExpressionsByFace;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResults = _a3.sent();
              return [4, extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, Promise.all(faces.map(function(face) {
                          return nets.faceExpressionNet.predictExpressions(face);
                        }))];
                      case 1:
                        return [2, _a4.sent()];
                    }
                  });
                });
              }, this.extractedFaces)];
            case 2:
              faceExpressionsByFace = _a3.sent();
              return [2, parentResults.map(function(parentResult, i3) {
                return extendWithFaceExpressions(parentResult, faceExpressionsByFace[i3]);
              })];
          }
        });
      });
    };
    PredictAllFaceExpressionsTask2.prototype.withAgeAndGender = function() {
      return new PredictAllAgeAndGenderTask(this, this.input);
    };
    return PredictAllFaceExpressionsTask2;
  }(PredictFaceExpressionsTaskBase)
);
var PredictSingleFaceExpressionsTask = (
  /** @class */
  function(_super) {
    __extends(PredictSingleFaceExpressionsTask2, _super);
    function PredictSingleFaceExpressionsTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictSingleFaceExpressionsTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResult, faceExpressions;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResult = _a3.sent();
              if (!parentResult) {
                return [
                  2
                  /*return*/
                ];
              }
              return [4, extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                return nets.faceExpressionNet.predictExpressions(face);
              }, this.extractedFaces)];
            case 2:
              faceExpressions = _a3.sent();
              return [2, extendWithFaceExpressions(parentResult, faceExpressions)];
          }
        });
      });
    };
    PredictSingleFaceExpressionsTask2.prototype.withAgeAndGender = function() {
      return new PredictSingleAgeAndGenderTask(this, this.input);
    };
    return PredictSingleFaceExpressionsTask2;
  }(PredictFaceExpressionsTaskBase)
);
var PredictAllFaceExpressionsWithFaceAlignmentTask = (
  /** @class */
  function(_super) {
    __extends(PredictAllFaceExpressionsWithFaceAlignmentTask2, _super);
    function PredictAllFaceExpressionsWithFaceAlignmentTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictAllFaceExpressionsWithFaceAlignmentTask2.prototype.withAgeAndGender = function() {
      return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    PredictAllFaceExpressionsWithFaceAlignmentTask2.prototype.withFaceDescriptors = function() {
      return new ComputeAllFaceDescriptorsTask(this, this.input);
    };
    return PredictAllFaceExpressionsWithFaceAlignmentTask2;
  }(PredictAllFaceExpressionsTask)
);
var PredictSingleFaceExpressionsWithFaceAlignmentTask = (
  /** @class */
  function(_super) {
    __extends(PredictSingleFaceExpressionsWithFaceAlignmentTask2, _super);
    function PredictSingleFaceExpressionsWithFaceAlignmentTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictSingleFaceExpressionsWithFaceAlignmentTask2.prototype.withAgeAndGender = function() {
      return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    PredictSingleFaceExpressionsWithFaceAlignmentTask2.prototype.withFaceDescriptor = function() {
      return new ComputeSingleFaceDescriptorTask(this, this.input);
    };
    return PredictSingleFaceExpressionsWithFaceAlignmentTask2;
  }(PredictSingleFaceExpressionsTask)
);

// node_modules/face-api.js/build/es6/globalApi/PredictAgeAndGenderTask.js
var PredictAgeAndGenderTaskBase = (
  /** @class */
  function(_super) {
    __extends(PredictAgeAndGenderTaskBase2, _super);
    function PredictAgeAndGenderTaskBase2(parentTask, input, extractedFaces) {
      var _this = _super.call(this) || this;
      _this.parentTask = parentTask;
      _this.input = input;
      _this.extractedFaces = extractedFaces;
      return _this;
    }
    return PredictAgeAndGenderTaskBase2;
  }(ComposableTask)
);
var PredictAllAgeAndGenderTask = (
  /** @class */
  function(_super) {
    __extends(PredictAllAgeAndGenderTask2, _super);
    function PredictAllAgeAndGenderTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictAllAgeAndGenderTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResults, ageAndGenderByFace;
        var _this = this;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResults = _a3.sent();
              return [4, extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a4) {
                    switch (_a4.label) {
                      case 0:
                        return [4, Promise.all(faces.map(function(face) {
                          return nets.ageGenderNet.predictAgeAndGender(face);
                        }))];
                      case 1:
                        return [2, _a4.sent()];
                    }
                  });
                });
              }, this.extractedFaces)];
            case 2:
              ageAndGenderByFace = _a3.sent();
              return [2, parentResults.map(function(parentResult, i3) {
                var _a4 = ageAndGenderByFace[i3], age = _a4.age, gender = _a4.gender, genderProbability = _a4.genderProbability;
                return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age);
              })];
          }
        });
      });
    };
    PredictAllAgeAndGenderTask2.prototype.withFaceExpressions = function() {
      return new PredictAllFaceExpressionsTask(this, this.input);
    };
    return PredictAllAgeAndGenderTask2;
  }(PredictAgeAndGenderTaskBase)
);
var PredictSingleAgeAndGenderTask = (
  /** @class */
  function(_super) {
    __extends(PredictSingleAgeAndGenderTask2, _super);
    function PredictSingleAgeAndGenderTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictSingleAgeAndGenderTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResult, _a3, age, gender, genderProbability;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResult = _b.sent();
              if (!parentResult) {
                return [
                  2
                  /*return*/
                ];
              }
              return [4, extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                return nets.ageGenderNet.predictAgeAndGender(face);
              }, this.extractedFaces)];
            case 2:
              _a3 = _b.sent(), age = _a3.age, gender = _a3.gender, genderProbability = _a3.genderProbability;
              return [2, extendWithAge(extendWithGender(parentResult, gender, genderProbability), age)];
          }
        });
      });
    };
    PredictSingleAgeAndGenderTask2.prototype.withFaceExpressions = function() {
      return new PredictSingleFaceExpressionsTask(this, this.input);
    };
    return PredictSingleAgeAndGenderTask2;
  }(PredictAgeAndGenderTaskBase)
);
var PredictAllAgeAndGenderWithFaceAlignmentTask = (
  /** @class */
  function(_super) {
    __extends(PredictAllAgeAndGenderWithFaceAlignmentTask2, _super);
    function PredictAllAgeAndGenderWithFaceAlignmentTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictAllAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceExpressions = function() {
      return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    PredictAllAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceDescriptors = function() {
      return new ComputeAllFaceDescriptorsTask(this, this.input);
    };
    return PredictAllAgeAndGenderWithFaceAlignmentTask2;
  }(PredictAllAgeAndGenderTask)
);
var PredictSingleAgeAndGenderWithFaceAlignmentTask = (
  /** @class */
  function(_super) {
    __extends(PredictSingleAgeAndGenderWithFaceAlignmentTask2, _super);
    function PredictSingleAgeAndGenderWithFaceAlignmentTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PredictSingleAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceExpressions = function() {
      return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    PredictSingleAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceDescriptor = function() {
      return new ComputeSingleFaceDescriptorTask(this, this.input);
    };
    return PredictSingleAgeAndGenderWithFaceAlignmentTask2;
  }(PredictSingleAgeAndGenderTask)
);

// node_modules/face-api.js/build/es6/globalApi/ComputeFaceDescriptorsTasks.js
var ComputeFaceDescriptorsTaskBase = (
  /** @class */
  function(_super) {
    __extends(ComputeFaceDescriptorsTaskBase2, _super);
    function ComputeFaceDescriptorsTaskBase2(parentTask, input) {
      var _this = _super.call(this) || this;
      _this.parentTask = parentTask;
      _this.input = input;
      return _this;
    }
    return ComputeFaceDescriptorsTaskBase2;
  }(ComposableTask)
);
var ComputeAllFaceDescriptorsTask = (
  /** @class */
  function(_super) {
    __extends(ComputeAllFaceDescriptorsTask2, _super);
    function ComputeAllFaceDescriptorsTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComputeAllFaceDescriptorsTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResults, descriptors;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResults = _a3.sent();
              return [4, extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                return Promise.all(faces.map(function(face) {
                  return nets.faceRecognitionNet.computeFaceDescriptor(face);
                }));
              }, null, function(parentResult) {
                return parentResult.landmarks.align(null, { useDlibAlignment: true });
              })];
            case 2:
              descriptors = _a3.sent();
              return [2, descriptors.map(function(descriptor, i3) {
                return extendWithFaceDescriptor(parentResults[i3], descriptor);
              })];
          }
        });
      });
    };
    ComputeAllFaceDescriptorsTask2.prototype.withFaceExpressions = function() {
      return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    ComputeAllFaceDescriptorsTask2.prototype.withAgeAndGender = function() {
      return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    return ComputeAllFaceDescriptorsTask2;
  }(ComputeFaceDescriptorsTaskBase)
);
var ComputeSingleFaceDescriptorTask = (
  /** @class */
  function(_super) {
    __extends(ComputeSingleFaceDescriptorTask2, _super);
    function ComputeSingleFaceDescriptorTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComputeSingleFaceDescriptorTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResult, descriptor;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResult = _a3.sent();
              if (!parentResult) {
                return [
                  2
                  /*return*/
                ];
              }
              return [4, extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                return nets.faceRecognitionNet.computeFaceDescriptor(face);
              }, null, function(parentResult2) {
                return parentResult2.landmarks.align(null, { useDlibAlignment: true });
              })];
            case 2:
              descriptor = _a3.sent();
              return [2, extendWithFaceDescriptor(parentResult, descriptor)];
          }
        });
      });
    };
    ComputeSingleFaceDescriptorTask2.prototype.withFaceExpressions = function() {
      return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    ComputeSingleFaceDescriptorTask2.prototype.withAgeAndGender = function() {
      return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    return ComputeSingleFaceDescriptorTask2;
  }(ComputeFaceDescriptorsTaskBase)
);

// node_modules/face-api.js/build/es6/globalApi/DetectFaceLandmarksTasks.js
var DetectFaceLandmarksTaskBase = (
  /** @class */
  function(_super) {
    __extends(DetectFaceLandmarksTaskBase2, _super);
    function DetectFaceLandmarksTaskBase2(parentTask, input, useTinyLandmarkNet) {
      var _this = _super.call(this) || this;
      _this.parentTask = parentTask;
      _this.input = input;
      _this.useTinyLandmarkNet = useTinyLandmarkNet;
      return _this;
    }
    Object.defineProperty(DetectFaceLandmarksTaskBase2.prototype, "landmarkNet", {
      get: function() {
        return this.useTinyLandmarkNet ? nets.faceLandmark68TinyNet : nets.faceLandmark68Net;
      },
      enumerable: true,
      configurable: true
    });
    return DetectFaceLandmarksTaskBase2;
  }(ComposableTask)
);
var DetectAllFaceLandmarksTask = (
  /** @class */
  function(_super) {
    __extends(DetectAllFaceLandmarksTask2, _super);
    function DetectAllFaceLandmarksTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DetectAllFaceLandmarksTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResults, detections, faces, _a3, faceLandmarksByFace;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResults = _b.sent();
              detections = parentResults.map(function(res) {
                return res.detection;
              });
              if (!(this.input instanceof ht)) return [3, 3];
              return [4, extractFaceTensors(this.input, detections)];
            case 2:
              _a3 = _b.sent();
              return [3, 5];
            case 3:
              return [4, extractFaces(this.input, detections)];
            case 4:
              _a3 = _b.sent();
              _b.label = 5;
            case 5:
              faces = _a3;
              return [4, Promise.all(faces.map(function(face) {
                return _this.landmarkNet.detectLandmarks(face);
              }))];
            case 6:
              faceLandmarksByFace = _b.sent();
              faces.forEach(function(f3) {
                return f3 instanceof ht && f3.dispose();
              });
              return [2, parentResults.map(function(parentResult, i3) {
                return extendWithFaceLandmarks(parentResult, faceLandmarksByFace[i3]);
              })];
          }
        });
      });
    };
    DetectAllFaceLandmarksTask2.prototype.withFaceExpressions = function() {
      return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    DetectAllFaceLandmarksTask2.prototype.withAgeAndGender = function() {
      return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    DetectAllFaceLandmarksTask2.prototype.withFaceDescriptors = function() {
      return new ComputeAllFaceDescriptorsTask(this, this.input);
    };
    return DetectAllFaceLandmarksTask2;
  }(DetectFaceLandmarksTaskBase)
);
var DetectSingleFaceLandmarksTask = (
  /** @class */
  function(_super) {
    __extends(DetectSingleFaceLandmarksTask2, _super);
    function DetectSingleFaceLandmarksTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DetectSingleFaceLandmarksTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var parentResult, detection, faces, _a3, landmarks;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.parentTask];
            case 1:
              parentResult = _b.sent();
              if (!parentResult) {
                return [
                  2
                  /*return*/
                ];
              }
              detection = parentResult.detection;
              if (!(this.input instanceof ht)) return [3, 3];
              return [4, extractFaceTensors(this.input, [detection])];
            case 2:
              _a3 = _b.sent();
              return [3, 5];
            case 3:
              return [4, extractFaces(this.input, [detection])];
            case 4:
              _a3 = _b.sent();
              _b.label = 5;
            case 5:
              faces = _a3;
              return [4, this.landmarkNet.detectLandmarks(faces[0])];
            case 6:
              landmarks = _b.sent();
              faces.forEach(function(f3) {
                return f3 instanceof ht && f3.dispose();
              });
              return [2, extendWithFaceLandmarks(parentResult, landmarks)];
          }
        });
      });
    };
    DetectSingleFaceLandmarksTask2.prototype.withFaceExpressions = function() {
      return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);
    };
    DetectSingleFaceLandmarksTask2.prototype.withAgeAndGender = function() {
      return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);
    };
    DetectSingleFaceLandmarksTask2.prototype.withFaceDescriptor = function() {
      return new ComputeSingleFaceDescriptorTask(this, this.input);
    };
    return DetectSingleFaceLandmarksTask2;
  }(DetectFaceLandmarksTaskBase)
);

// node_modules/face-api.js/build/es6/globalApi/DetectFacesTasks.js
var DetectFacesTaskBase = (
  /** @class */
  function(_super) {
    __extends(DetectFacesTaskBase2, _super);
    function DetectFacesTaskBase2(input, options) {
      if (options === void 0) {
        options = new SsdMobilenetv1Options();
      }
      var _this = _super.call(this) || this;
      _this.input = input;
      _this.options = options;
      return _this;
    }
    return DetectFacesTaskBase2;
  }(ComposableTask)
);
var DetectAllFacesTask = (
  /** @class */
  function(_super) {
    __extends(DetectAllFacesTask2, _super);
    function DetectAllFacesTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DetectAllFacesTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a3, input, options, faceDetectionFunction;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a3 = this, input = _a3.input, options = _a3.options;
              if (!(options instanceof MtcnnOptions)) return [3, 2];
              return [4, nets.mtcnn.forward(input, options)];
            case 1:
              return [2, _b.sent().map(function(result) {
                return result.detection;
              })];
            case 2:
              faceDetectionFunction = options instanceof TinyFaceDetectorOptions ? function(input2) {
                return nets.tinyFaceDetector.locateFaces(input2, options);
              } : options instanceof SsdMobilenetv1Options ? function(input2) {
                return nets.ssdMobilenetv1.locateFaces(input2, options);
              } : options instanceof tfjsImageRecognitionBase_exports.TinyYolov2Options ? function(input2) {
                return nets.tinyYolov2.locateFaces(input2, options);
              } : null;
              if (!faceDetectionFunction) {
                throw new Error("detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options");
              }
              return [2, faceDetectionFunction(input)];
          }
        });
      });
    };
    DetectAllFacesTask2.prototype.runAndExtendWithFaceDetections = function() {
      var _this = this;
      return new Promise(function(res) {
        return __awaiter(_this, void 0, void 0, function() {
          var detections;
          return __generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                return [4, this.run()];
              case 1:
                detections = _a3.sent();
                return [2, res(detections.map(function(detection) {
                  return extendWithFaceDetection({}, detection);
                }))];
            }
          });
        });
      });
    };
    DetectAllFacesTask2.prototype.withFaceLandmarks = function(useTinyLandmarkNet) {
      if (useTinyLandmarkNet === void 0) {
        useTinyLandmarkNet = false;
      }
      return new DetectAllFaceLandmarksTask(this.runAndExtendWithFaceDetections(), this.input, useTinyLandmarkNet);
    };
    DetectAllFacesTask2.prototype.withFaceExpressions = function() {
      return new PredictAllFaceExpressionsTask(this.runAndExtendWithFaceDetections(), this.input);
    };
    DetectAllFacesTask2.prototype.withAgeAndGender = function() {
      return new PredictAllAgeAndGenderTask(this.runAndExtendWithFaceDetections(), this.input);
    };
    return DetectAllFacesTask2;
  }(DetectFacesTaskBase)
);
var DetectSingleFaceTask = (
  /** @class */
  function(_super) {
    __extends(DetectSingleFaceTask2, _super);
    function DetectSingleFaceTask2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DetectSingleFaceTask2.prototype.run = function() {
      return __awaiter(this, void 0, void 0, function() {
        var faceDetections, faceDetectionWithHighestScore;
        return __generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [4, new DetectAllFacesTask(this.input, this.options)];
            case 1:
              faceDetections = _a3.sent();
              faceDetectionWithHighestScore = faceDetections[0];
              faceDetections.forEach(function(faceDetection) {
                if (faceDetection.score > faceDetectionWithHighestScore.score) {
                  faceDetectionWithHighestScore = faceDetection;
                }
              });
              return [2, faceDetectionWithHighestScore];
          }
        });
      });
    };
    DetectSingleFaceTask2.prototype.runAndExtendWithFaceDetection = function() {
      var _this = this;
      return new Promise(function(res) {
        return __awaiter(_this, void 0, void 0, function() {
          var detection;
          return __generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                return [4, this.run()];
              case 1:
                detection = _a3.sent();
                return [2, res(detection ? extendWithFaceDetection({}, detection) : void 0)];
            }
          });
        });
      });
    };
    DetectSingleFaceTask2.prototype.withFaceLandmarks = function(useTinyLandmarkNet) {
      if (useTinyLandmarkNet === void 0) {
        useTinyLandmarkNet = false;
      }
      return new DetectSingleFaceLandmarksTask(this.runAndExtendWithFaceDetection(), this.input, useTinyLandmarkNet);
    };
    DetectSingleFaceTask2.prototype.withFaceExpressions = function() {
      return new PredictSingleFaceExpressionsTask(this.runAndExtendWithFaceDetection(), this.input);
    };
    DetectSingleFaceTask2.prototype.withAgeAndGender = function() {
      return new PredictSingleAgeAndGenderTask(this.runAndExtendWithFaceDetection(), this.input);
    };
    return DetectSingleFaceTask2;
  }(DetectFacesTaskBase)
);

// node_modules/face-api.js/build/es6/globalApi/detectFaces.js
function detectSingleFace(input, options) {
  if (options === void 0) {
    options = new SsdMobilenetv1Options();
  }
  return new DetectSingleFaceTask(input, options);
}
function detectAllFaces(input, options) {
  if (options === void 0) {
    options = new SsdMobilenetv1Options();
  }
  return new DetectAllFacesTask(input, options);
}

// node_modules/face-api.js/build/es6/globalApi/allFaces.js
function allFacesSsdMobilenetv1(input, minConfidence) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? { minConfidence } : {})).withFaceLandmarks().withFaceDescriptors()];
        case 1:
          return [2, _a3.sent()];
      }
    });
  });
}
function allFacesTinyYolov2(input, forwardParams) {
  if (forwardParams === void 0) {
    forwardParams = {};
  }
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, detectAllFaces(input, new tfjsImageRecognitionBase_exports.TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()];
        case 1:
          return [2, _a3.sent()];
      }
    });
  });
}
function allFacesMtcnn(input, forwardParams) {
  if (forwardParams === void 0) {
    forwardParams = {};
  }
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a3) {
      switch (_a3.label) {
        case 0:
          return [4, detectAllFaces(input, new MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()];
        case 1:
          return [2, _a3.sent()];
      }
    });
  });
}
var allFaces = allFacesSsdMobilenetv1;

// node_modules/face-api.js/build/es6/euclideanDistance.js
function euclideanDistance(arr1, arr2) {
  if (arr1.length !== arr2.length)
    throw new Error("euclideanDistance: arr1.length !== arr2.length");
  var desc1 = Array.from(arr1);
  var desc2 = Array.from(arr2);
  return Math.sqrt(desc1.map(function(val, i3) {
    return val - desc2[i3];
  }).reduce(function(res, diff) {
    return res + Math.pow(diff, 2);
  }, 0));
}

// node_modules/face-api.js/build/es6/globalApi/FaceMatcher.js
var FaceMatcher = (
  /** @class */
  function() {
    function FaceMatcher2(inputs, distanceThreshold) {
      if (distanceThreshold === void 0) {
        distanceThreshold = 0.6;
      }
      this._distanceThreshold = distanceThreshold;
      var inputArray = Array.isArray(inputs) ? inputs : [inputs];
      if (!inputArray.length) {
        throw new Error("FaceRecognizer.constructor - expected atleast one input");
      }
      var count = 1;
      var createUniqueLabel = function() {
        return "person " + count++;
      };
      this._labeledDescriptors = inputArray.map(function(desc) {
        if (desc instanceof LabeledFaceDescriptors) {
          return desc;
        }
        if (desc instanceof Float32Array) {
          return new LabeledFaceDescriptors(createUniqueLabel(), [desc]);
        }
        if (desc.descriptor && desc.descriptor instanceof Float32Array) {
          return new LabeledFaceDescriptors(createUniqueLabel(), [desc.descriptor]);
        }
        throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>");
      });
    }
    Object.defineProperty(FaceMatcher2.prototype, "labeledDescriptors", {
      get: function() {
        return this._labeledDescriptors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FaceMatcher2.prototype, "distanceThreshold", {
      get: function() {
        return this._distanceThreshold;
      },
      enumerable: true,
      configurable: true
    });
    FaceMatcher2.prototype.computeMeanDistance = function(queryDescriptor, descriptors) {
      return descriptors.map(function(d3) {
        return euclideanDistance(d3, queryDescriptor);
      }).reduce(function(d1, d22) {
        return d1 + d22;
      }, 0) / (descriptors.length || 1);
    };
    FaceMatcher2.prototype.matchDescriptor = function(queryDescriptor) {
      var _this = this;
      return this.labeledDescriptors.map(function(_a3) {
        var descriptors = _a3.descriptors, label = _a3.label;
        return new FaceMatch(label, _this.computeMeanDistance(queryDescriptor, descriptors));
      }).reduce(function(best, curr) {
        return best.distance < curr.distance ? best : curr;
      });
    };
    FaceMatcher2.prototype.findBestMatch = function(queryDescriptor) {
      var bestMatch = this.matchDescriptor(queryDescriptor);
      return bestMatch.distance < this.distanceThreshold ? bestMatch : new FaceMatch("unknown", bestMatch.distance);
    };
    return FaceMatcher2;
  }()
);

// node_modules/face-api.js/build/es6/mtcnn/index.js
function createMtcnn(weights) {
  var net = new Mtcnn();
  net.extractWeights(weights);
  return net;
}

// node_modules/face-api.js/build/es6/tinyFaceDetector/index.js
function createTinyFaceDetector(weights) {
  var net = new TinyFaceDetector();
  net.extractWeights(weights);
  return net;
}

// node_modules/face-api.js/build/es6/resizeResults.js
function resizeResults(results, dimensions) {
  var _a3 = new Dimensions(dimensions.width, dimensions.height), width = _a3.width, height = _a3.height;
  if (width <= 0 || height <= 0) {
    throw new Error("resizeResults - invalid dimensions: " + JSON.stringify({ width, height }));
  }
  if (Array.isArray(results)) {
    return results.map(function(obj) {
      return resizeResults(obj, { width, height });
    });
  }
  if (isWithFaceLandmarks(results)) {
    var resizedDetection = results.detection.forSize(width, height);
    var resizedLandmarks = results.unshiftedLandmarks.forSize(resizedDetection.box.width, resizedDetection.box.height);
    return extendWithFaceLandmarks(extendWithFaceDetection(results, resizedDetection), resizedLandmarks);
  }
  if (isWithFaceDetection(results)) {
    return extendWithFaceDetection(results, results.detection.forSize(width, height));
  }
  if (results instanceof FaceLandmarks || results instanceof FaceDetection) {
    return results.forSize(width, height);
  }
  return results;
}

// node_modules/face-api.js/build/es6/index.js
var draw = __assign({}, draw_exports, draw_exports2);
export {
  AgeGenderNet,
  BoundingBox,
  Box,
  ComposableTask,
  ComputeAllFaceDescriptorsTask,
  ComputeFaceDescriptorsTaskBase,
  ComputeSingleFaceDescriptorTask,
  DetectAllFaceLandmarksTask,
  DetectAllFacesTask,
  DetectFaceLandmarksTaskBase,
  DetectFacesTaskBase,
  DetectSingleFaceLandmarksTask,
  DetectSingleFaceTask,
  Dimensions,
  FACE_EXPRESSION_LABELS,
  FaceDetection,
  FaceDetectionNet,
  FaceExpressionNet,
  FaceExpressions,
  FaceLandmark68Net,
  FaceLandmark68TinyNet,
  FaceLandmarkNet,
  FaceLandmarks,
  FaceLandmarks5,
  FaceLandmarks68,
  FaceMatch,
  FaceMatcher,
  FaceRecognitionNet,
  Gender,
  LabeledBox,
  LabeledFaceDescriptors,
  Mtcnn,
  MtcnnOptions,
  NetInput,
  NeuralNetwork,
  ObjectDetection,
  Point,
  PredictedBox,
  Rect,
  SsdMobilenetv1,
  SsdMobilenetv1Options,
  tfjsImageRecognitionBase_exports as TfjsImageRecognitionBase,
  TinyFaceDetector,
  TinyFaceDetectorOptions,
  TinyYolov22 as TinyYolov2,
  allFaces,
  allFacesMtcnn,
  allFacesSsdMobilenetv1,
  allFacesTinyYolov2,
  awaitMediaLoaded,
  bufferToImage,
  computeFaceDescriptor,
  computeReshapedDimensions,
  createCanvas,
  createCanvasFromMedia,
  createFaceDetectionNet,
  createFaceRecognitionNet,
  createMtcnn,
  createSsdMobilenetv1,
  createTinyFaceDetector,
  createTinyYolov2,
  detectAllFaces,
  detectFaceLandmarks,
  detectFaceLandmarksTiny,
  detectLandmarks,
  detectSingleFace,
  draw,
  env,
  euclideanDistance,
  extendWithFaceDescriptor,
  extendWithFaceDetection,
  extendWithFaceExpressions,
  extendWithFaceLandmarks,
  extractFaceTensors,
  extractFaces,
  fetchImage,
  fetchJson,
  fetchNetWeights,
  fetchOrThrow,
  getCenterPoint,
  getContext2dOrThrow,
  getMediaDimensions,
  imageTensorToCanvas,
  imageToSquare,
  inverseSigmoid,
  iou,
  isDimensions,
  isEven,
  isFloat,
  isMediaElement,
  isMediaLoaded,
  isTensor,
  isTensor1D,
  isTensor2D,
  isTensor3D,
  isTensor4D,
  isValidNumber,
  isValidProbablitiy,
  isWithFaceDetection,
  isWithFaceExpressions,
  isWithFaceLandmarks,
  loadAgeGenderModel,
  loadFaceDetectionModel,
  loadFaceExpressionModel,
  loadFaceLandmarkModel,
  loadFaceLandmarkTinyModel,
  loadFaceRecognitionModel,
  loadMtcnnModel,
  loadSsdMobilenetv1Model,
  loadTinyFaceDetectorModel,
  loadTinyYolov2Model,
  loadWeightMap,
  locateFaces,
  matchDimensions,
  minBbox,
  mtcnn,
  nets,
  nonMaxSuppression,
  normalize,
  padToSquare,
  predictAgeAndGender,
  range,
  recognizeFaceExpressions,
  resizeResults,
  resolveInput,
  round,
  shuffleArray,
  sigmoid,
  ssdMobilenetv1,
  tf_core_esm_exports as tf,
  tinyFaceDetector,
  tinyYolov2,
  toNetInput
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@tensorflow/tfjs-core/dist/tf-core.esm.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@tensorflow/tfjs-core/dist/tf-core.esm.js:
  (**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=face-api__js.js.map
