class CameraService {
  constructor() {
    this.availableCameras = []
    this.currentCamera = null
    this.stream = null
  }

  // Enumerar todas as c√¢meras dispon√≠veis no sistema
  async enumerateDevices() {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
        throw new Error('enumerateDevices n√£o √© suportado neste navegador')
      }

      const devices = await navigator.mediaDevices.enumerateDevices()

      // Filtrar apenas dispositivos de v√≠deo (c√¢meras)
      this.availableCameras = devices
        .filter(device => device.kind === 'videoinput')
        .map(device => ({
          deviceId: device.deviceId,
          label: device.label || `C√¢mera ${device.deviceId.substring(0, 8)}`,
          groupId: device.groupId,
          isVirtual: this.isVirtualCamera(device.label)
        }))

      console.log('C√¢meras dispon√≠veis:', this.availableCameras)
      return this.availableCameras
    } catch (error) {
      console.error('Erro ao enumerar dispositivos:', error)
      throw error
    }
  }

  // Verificar se uma c√¢mera √© virtual com base no nome
  isVirtualCamera(label) {
    if (!label) return false;

    const virtualCameraKeywords = [
      'virtual', 'animaze', 'obs', 'snap', 'droid', 'vcam', 'cam link',
      'screen', 'capture', 'manycam', 'camtwist', 'epoccam', 'iriun',
      'ndi', 'streamlabs', 'xsplit', 'elgato', 'avermedia', 'webcamoid',
      'webcam studio', 'prism', 'splitcam', 'ecamm', 'mmhmm', 'camo',
      'droidcam', 'iriun', 'ivccam', 'e2esdk', 'newtek', 'logitech capture',
      'camera emulador', 'emulated', 'emulator', 'dummy', 'fake'
    ];

    const labelLower = label.toLowerCase();
    return virtualCameraKeywords.some(keyword => labelLower.includes(keyword));
  }

  // Obter informa√ß√µes detalhadas sobre uma c√¢mera espec√≠fica
  async getCameraCapabilities(deviceId) {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { deviceId: { exact: deviceId } }
      })

      const track = stream.getVideoTracks()[0]
      const capabilities = track.getCapabilities()
      const settings = track.getSettings()

      // Parar o stream ap√≥s obter as informa√ß√µes
      stream.getTracks().forEach(track => track.stop())

      return {
        deviceId,
        capabilities,
        settings,
        label: track.label
      }
    } catch (error) {
      console.error('Erro ao obter capacidades da c√¢mera:', error)
      throw error
    }
  }

  // Verificar se uma c√¢mera espec√≠fica est√° dispon√≠vel
  async isCameraAvailable(deviceId) {
    try {
      const cameras = await this.enumerateDevices()
      return cameras.some(camera => camera.deviceId === deviceId)
    } catch (error) {
      console.error('Erro ao verificar disponibilidade da c√¢mera:', error)
      return false
    }
  }

  // Obter a c√¢mera padr√£o (primeira dispon√≠vel)
  async getDefaultCamera() {
    try {
      const cameras = await this.enumerateDevices()
      return cameras.length > 0 ? cameras[0] : null
    } catch (error) {
      console.error('Erro ao obter c√¢mera padr√£o:', error)
      return null
    }
  }

  // Testar se uma c√¢mera funciona corretamente
  async testCamera(deviceId) {
    try {
      const constraints = {
        video: {
          deviceId: deviceId ? { exact: deviceId } : undefined,
          width: { ideal: 640 },
          height: { ideal: 480 }
        }
      }

      const stream = await navigator.mediaDevices.getUserMedia(constraints)

      // Verificar se o stream tem tracks de v√≠deo ativos
      const videoTracks = stream.getVideoTracks()
      const isWorking = videoTracks.length > 0 && videoTracks[0].readyState === 'live'

      // Parar o stream ap√≥s o teste
      stream.getTracks().forEach(track => track.stop())

      return {
        working: isWorking,
        deviceId: videoTracks[0]?.getSettings()?.deviceId,
        label: videoTracks[0]?.label
      }
    } catch (error) {
      console.error('Erro ao testar c√¢mera:', error)
      return {
        working: false,
        error: error.message
      }
    }
  }

  // Obter stream de uma c√¢mera espec√≠fica
  async getStream(deviceId, constraints = {}) {
    try {
      const defaultConstraints = {
        video: {
          deviceId: deviceId ? { exact: deviceId } : undefined,
          width: { ideal: 640 },
          height: { ideal: 480 },
          facingMode: 'user'
        },
        audio: false
      }

      const finalConstraints = {
        ...defaultConstraints,
        ...constraints,
        video: {
          ...defaultConstraints.video,
          ...constraints.video
        }
      }

      this.stream = await navigator.mediaDevices.getUserMedia(finalConstraints)
      this.currentCamera = deviceId

      return this.stream
    } catch (error) {
      console.error('Erro ao obter stream da c√¢mera:', error)
      throw error
    }
  }

  // Parar o stream atual
  stopStream() {
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop())
      this.stream = null
      this.currentCamera = null
    }
  }

  // Verificar se h√° permiss√£o para acessar c√¢meras
  async checkPermissions() {
    console.log('üì∑ [WEBCAM] Verificando permiss√µes da c√¢mera...');
    try {
      // Verificar se o navegador suporta a API de permiss√µes
      if (navigator.permissions && navigator.permissions.query) {
        console.log('üì∑ [WEBCAM] Navegador suporta API de permiss√µes');
        try {
          const result = await navigator.permissions.query({ name: 'camera' });
          console.log('üì∑ [WEBCAM] Estado da permiss√£o via API:', result.state);
          return {
            state: result.state, // 'granted', 'denied', 'prompt'
            canRequest: result.state === 'prompt'
          };
        } catch (permError) {
          console.log('üì∑ [WEBCAM] Erro ao consultar permiss√µes via API:', permError);
          // Alguns navegadores podem n√£o suportar a consulta de permiss√£o 'camera'
          // Continuar com o fallback para getUserMedia
        }
      }

      console.log('üì∑ [WEBCAM] Navegador N√ÉO suporta API de permiss√µes ou consulta falhou, usando fallback');
      // Fallback para navegadores que n√£o suportam permissions API
      try {
        console.log('üì∑ [WEBCAM] Tentando acessar c√¢mera via getUserMedia...');
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        console.log('üì∑ [WEBCAM] Acesso √† c√¢mera concedido via getUserMedia');
        stream.getTracks().forEach(track => track.stop());
        return { state: 'granted', canRequest: false };
      } catch (e) {
        console.error('üì∑ [WEBCAM] Erro ao acessar c√¢mera via getUserMedia:', e.name, e.message);
        // Verificar o tipo de erro para determinar se √© permiss√£o negada ou outro problema
        if (e.name === 'NotAllowedError' || e.name === 'PermissionDeniedError') {
          // Tentar determinar se √© uma nega√ß√£o definitiva ou apenas um prompt n√£o respondido
          // Em alguns navegadores, n√£o h√° como diferenciar com certeza
          return { state: 'denied', canRequest: true };
        } else if (e.name === 'NotFoundError') {
          console.error('üì∑ [WEBCAM] Nenhuma c√¢mera encontrada no dispositivo');
          return { state: 'unavailable', canRequest: false, error: 'no_camera' };
        } else if (e.name === 'NotReadableError' || e.name === 'TrackStartError') {
          console.error('üì∑ [WEBCAM] C√¢mera em uso por outro aplicativo');
          return { state: 'unavailable', canRequest: false, error: 'camera_in_use' };
        } else if (e.name === 'AbortError') {
          console.error('üì∑ [WEBCAM] Usu√°rio fechou o di√°logo de permiss√£o');
          return { state: 'prompt', canRequest: true, error: 'dialog_closed' };
        } else if (e.name === 'OverconstrainedError') {
          console.error('üì∑ [WEBCAM] Restri√ß√µes de c√¢mera n√£o podem ser satisfeitas');
          return { state: 'error', canRequest: true, error: 'overconstrained' };
        } else {
          console.error('üì∑ [WEBCAM] Erro desconhecido ao acessar c√¢mera:', e);
          return { state: 'error', canRequest: true, error: e.name };
        }
      }
    } catch (error) {
      console.error('üì∑ [WEBCAM] Erro ao verificar permiss√µes:', error);
      return { state: 'error', canRequest: true, error: error.message };
    }
  }

  // Verificar se a c√¢mera est√° em uso por outro aplicativo
  async isCameraInUse(deviceId) {
    try {
      const constraints = {
        video: deviceId ? { deviceId: { exact: deviceId } } : true
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);

      // Se conseguimos obter o stream, a c√¢mera n√£o est√° em uso
      stream.getTracks().forEach(track => track.stop());
      return false;
    } catch (error) {
      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {
        console.error(`üì∑ [WEBCAM] C√¢mera ${deviceId || 'padr√£o'} est√° em uso por outro aplicativo:`, error);
        return true;
      }
      // Outros erros n√£o indicam que a c√¢mera est√° em uso
      return false;
    }
  }

  // Solicitar permiss√£o para acessar c√¢meras
  async requestPermission() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true })
      stream.getTracks().forEach(track => track.stop())
      return true
    } catch (error) {
      console.error('Permiss√£o de c√¢mera negada:', error)
      return false
    }
  }

  // Obter informa√ß√µes do sistema sobre suporte a c√¢meras
  getSystemInfo() {
    return {
      hasMediaDevices: !!navigator.mediaDevices,
      hasGetUserMedia: !!navigator.mediaDevices?.getUserMedia,
      hasEnumerateDevices: !!navigator.mediaDevices?.enumerateDevices,
      userAgent: navigator.userAgent,
      platform: navigator.platform
    }
  }

  // Listar c√¢meras dispon√≠veis (alias para enumerateDevices)
  async listCameras() {
    return await this.enumerateDevices()
  }

  // Listar apenas c√¢meras f√≠sicas (excluindo c√¢meras virtuais)
  async listPhysicalCameras() {
    const allCameras = await this.enumerateDevices()
    const physicalCameras = allCameras.filter(camera => !camera.isVirtual)
    console.log('C√¢meras f√≠sicas dispon√≠veis:', physicalCameras)
    return physicalCameras
  }

  // Detectar mudan√ßas nos dispositivos (c√¢meras conectadas/desconectadas)
  onDeviceChange(callback) {
    if (navigator.mediaDevices && navigator.mediaDevices.addEventListener) {
      navigator.mediaDevices.addEventListener('devicechange', async () => {
        try {
          const newCameras = await this.enumerateDevices()
          callback(newCameras)
        } catch (error) {
          console.error('Erro ao detectar mudan√ßa de dispositivos:', error)
        }
      })
    }
  }

  // Testar especificamente c√¢meras USB
  async testUsbCameras() {
    console.log('üì∑ [WEBCAM] Testando c√¢meras USB...');
    try {
      // Primeiro verificar permiss√µes
      const permissions = await this.checkPermissions();
      if (permissions.state !== 'granted') {
        console.error('üì∑ [WEBCAM] Permiss√µes n√£o concedidas para testar c√¢meras USB:', permissions);
        return {
          success: false,
          error: 'permissions_denied',
          permissions,
          errorType: permissions.state === 'denied' ? 'permission_denied' :
            permissions.state === 'prompt' ? 'permission_prompt' :
              permissions.state === 'unavailable' ? 'camera_unavailable' : 'unknown_error',
          errorMessage: permissions.state === 'denied' ? 'Permiss√£o de c√¢mera negada pelo usu√°rio' :
            permissions.state === 'prompt' ? 'Aguardando permiss√£o do usu√°rio' :
              permissions.state === 'unavailable' && permissions.error === 'camera_in_use' ? 'C√¢mera em uso por outro aplicativo' :
                permissions.state === 'unavailable' && permissions.error === 'no_camera' ? 'Nenhuma c√¢mera encontrada no dispositivo' :
                  'Erro desconhecido ao verificar permiss√µes'
        };
      }

      // Listar todos os dispositivos
      const devices = await navigator.mediaDevices.enumerateDevices();
      const videoCameras = devices.filter(device => device.kind === 'videoinput');

      console.log('üì∑ [WEBCAM] Dispositivos de v√≠deo encontrados:', videoCameras.length);

      if (videoCameras.length === 0) {
        console.error('üì∑ [WEBCAM] Nenhuma c√¢mera encontrada');
        return {
          success: false,
          error: 'no_cameras_found',
          devices
        };
      }

      // Testar cada c√¢mera
      const results = [];
      for (const camera of videoCameras) {
        try {
          console.log(`üì∑ [WEBCAM] Testando c√¢mera: ${camera.label || 'Sem nome'} (${camera.deviceId.substring(0, 8)}...)`);

          // Verificar se a c√¢mera est√° em uso
          const inUse = await this.isCameraInUse(camera.deviceId);
          if (inUse) {
            results.push({
              deviceId: camera.deviceId,
              label: camera.label || `C√¢mera ${camera.deviceId.substring(0, 8)}`,
              working: false,
              error: 'camera_in_use',
              errorMessage: 'C√¢mera em uso por outro aplicativo'
            });
            continue;
          }

          const stream = await navigator.mediaDevices.getUserMedia({
            video: {
              deviceId: { exact: camera.deviceId }
            }
          });

          const videoTracks = stream.getVideoTracks();
          const trackInfo = videoTracks[0]?.getSettings() || {};

          results.push({
            deviceId: camera.deviceId,
            label: camera.label || `C√¢mera ${camera.deviceId.substring(0, 8)}`,
            working: videoTracks.length > 0,
            trackInfo
          });

          // Liberar recursos
          stream.getTracks().forEach(track => track.stop());

        } catch (err) {
          console.error(`üì∑ [WEBCAM] Erro ao testar c√¢mera ${camera.label || camera.deviceId}:`, err);
          results.push({
            deviceId: camera.deviceId,
            label: camera.label || `C√¢mera ${camera.deviceId.substring(0, 8)}`,
            working: false,
            error: err.name,
            errorMessage: this.getErrorMessage(err.name, err.message)
          });
        }
      }

      console.log('üì∑ [WEBCAM] Resultados dos testes de c√¢mera:', results);
      return {
        success: true,
        cameras: results,
        workingCameras: results.filter(r => r.working)
      };

    } catch (error) {
      console.error('üì∑ [WEBCAM] Erro ao testar c√¢meras USB:', error);
      return {
        success: false,
        error: error.name,
        errorMessage: this.getErrorMessage(error.name, error.message)
      };
    }
  }

  // Obter mensagem de erro amig√°vel com base no nome do erro
  getErrorMessage(errorName, errorMessage) {
    switch (errorName) {
      case 'NotAllowedError':
      case 'PermissionDeniedError':
        return 'Permiss√£o de c√¢mera negada pelo usu√°rio';
      case 'NotFoundError':
        return 'Nenhuma c√¢mera encontrada no dispositivo';
      case 'NotReadableError':
      case 'TrackStartError':
        return 'C√¢mera em uso por outro aplicativo ou hardware com problema';
      case 'OverconstrainedError':
        return 'As configura√ß√µes solicitadas n√£o s√£o suportadas pela c√¢mera';
      case 'AbortError':
        return 'Opera√ß√£o cancelada pelo usu√°rio ou pelo sistema';
      case 'TypeError':
        return 'Par√¢metros inv√°lidos ao acessar a c√¢mera';
      default:
        return errorMessage || 'Erro desconhecido ao acessar a c√¢mera';
    }
  }
}

export const cameraService = new CameraService()
export default cameraService